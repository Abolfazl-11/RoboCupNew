
RoboCupNew.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007c14  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000098  08007d28  08007d28  00017d28  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007dc0  08007dc0  00020168  2**0
                  CONTENTS
  4 .ARM          00000000  08007dc0  08007dc0  00020168  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007dc0  08007dc0  00020168  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007dc0  08007dc0  00017dc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007dc4  08007dc4  00017dc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000168  20000000  08007dc8  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000410  20000168  08007f30  00020168  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000578  08007f30  00020578  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020168  2**0
                  CONTENTS, READONLY
 12 .debug_info   000113c9  00000000  00000000  00020191  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003319  00000000  00000000  0003155a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001180  00000000  00000000  00034878  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ef9  00000000  00000000  000359f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018d52  00000000  00000000  000368f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000113d9  00000000  00000000  0004f643  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008cf65  00000000  00000000  00060a1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      0000001e  00000000  00000000  000ed981  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000046c0  00000000  00000000  000ed9a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000eb  00000000  00000000  000f2060  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loclists 00001d6c  00000000  00000000  000f214b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__aeabi_drsub>:
 8000110:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000114:	e002      	b.n	800011c <__adddf3>
 8000116:	bf00      	nop

08000118 <__aeabi_dsub>:
 8000118:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800011c <__adddf3>:
 800011c:	b530      	push	{r4, r5, lr}
 800011e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000122:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000126:	ea94 0f05 	teq	r4, r5
 800012a:	bf08      	it	eq
 800012c:	ea90 0f02 	teqeq	r0, r2
 8000130:	bf1f      	itttt	ne
 8000132:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000136:	ea55 0c02 	orrsne.w	ip, r5, r2
 800013a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800013e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000142:	f000 80e2 	beq.w	800030a <__adddf3+0x1ee>
 8000146:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800014a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800014e:	bfb8      	it	lt
 8000150:	426d      	neglt	r5, r5
 8000152:	dd0c      	ble.n	800016e <__adddf3+0x52>
 8000154:	442c      	add	r4, r5
 8000156:	ea80 0202 	eor.w	r2, r0, r2
 800015a:	ea81 0303 	eor.w	r3, r1, r3
 800015e:	ea82 0000 	eor.w	r0, r2, r0
 8000162:	ea83 0101 	eor.w	r1, r3, r1
 8000166:	ea80 0202 	eor.w	r2, r0, r2
 800016a:	ea81 0303 	eor.w	r3, r1, r3
 800016e:	2d36      	cmp	r5, #54	; 0x36
 8000170:	bf88      	it	hi
 8000172:	bd30      	pophi	{r4, r5, pc}
 8000174:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000178:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800017c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000180:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000184:	d002      	beq.n	800018c <__adddf3+0x70>
 8000186:	4240      	negs	r0, r0
 8000188:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800018c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000190:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000194:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000198:	d002      	beq.n	80001a0 <__adddf3+0x84>
 800019a:	4252      	negs	r2, r2
 800019c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001a0:	ea94 0f05 	teq	r4, r5
 80001a4:	f000 80a7 	beq.w	80002f6 <__adddf3+0x1da>
 80001a8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ac:	f1d5 0e20 	rsbs	lr, r5, #32
 80001b0:	db0d      	blt.n	80001ce <__adddf3+0xb2>
 80001b2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001b6:	fa22 f205 	lsr.w	r2, r2, r5
 80001ba:	1880      	adds	r0, r0, r2
 80001bc:	f141 0100 	adc.w	r1, r1, #0
 80001c0:	fa03 f20e 	lsl.w	r2, r3, lr
 80001c4:	1880      	adds	r0, r0, r2
 80001c6:	fa43 f305 	asr.w	r3, r3, r5
 80001ca:	4159      	adcs	r1, r3
 80001cc:	e00e      	b.n	80001ec <__adddf3+0xd0>
 80001ce:	f1a5 0520 	sub.w	r5, r5, #32
 80001d2:	f10e 0e20 	add.w	lr, lr, #32
 80001d6:	2a01      	cmp	r2, #1
 80001d8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80001dc:	bf28      	it	cs
 80001de:	f04c 0c02 	orrcs.w	ip, ip, #2
 80001e2:	fa43 f305 	asr.w	r3, r3, r5
 80001e6:	18c0      	adds	r0, r0, r3
 80001e8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80001ec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80001f0:	d507      	bpl.n	8000202 <__adddf3+0xe6>
 80001f2:	f04f 0e00 	mov.w	lr, #0
 80001f6:	f1dc 0c00 	rsbs	ip, ip, #0
 80001fa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80001fe:	eb6e 0101 	sbc.w	r1, lr, r1
 8000202:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000206:	d31b      	bcc.n	8000240 <__adddf3+0x124>
 8000208:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800020c:	d30c      	bcc.n	8000228 <__adddf3+0x10c>
 800020e:	0849      	lsrs	r1, r1, #1
 8000210:	ea5f 0030 	movs.w	r0, r0, rrx
 8000214:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000218:	f104 0401 	add.w	r4, r4, #1
 800021c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000220:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000224:	f080 809a 	bcs.w	800035c <__adddf3+0x240>
 8000228:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800022c:	bf08      	it	eq
 800022e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000232:	f150 0000 	adcs.w	r0, r0, #0
 8000236:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800023a:	ea41 0105 	orr.w	r1, r1, r5
 800023e:	bd30      	pop	{r4, r5, pc}
 8000240:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000244:	4140      	adcs	r0, r0
 8000246:	eb41 0101 	adc.w	r1, r1, r1
 800024a:	3c01      	subs	r4, #1
 800024c:	bf28      	it	cs
 800024e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000252:	d2e9      	bcs.n	8000228 <__adddf3+0x10c>
 8000254:	f091 0f00 	teq	r1, #0
 8000258:	bf04      	itt	eq
 800025a:	4601      	moveq	r1, r0
 800025c:	2000      	moveq	r0, #0
 800025e:	fab1 f381 	clz	r3, r1
 8000262:	bf08      	it	eq
 8000264:	3320      	addeq	r3, #32
 8000266:	f1a3 030b 	sub.w	r3, r3, #11
 800026a:	f1b3 0220 	subs.w	r2, r3, #32
 800026e:	da0c      	bge.n	800028a <__adddf3+0x16e>
 8000270:	320c      	adds	r2, #12
 8000272:	dd08      	ble.n	8000286 <__adddf3+0x16a>
 8000274:	f102 0c14 	add.w	ip, r2, #20
 8000278:	f1c2 020c 	rsb	r2, r2, #12
 800027c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000280:	fa21 f102 	lsr.w	r1, r1, r2
 8000284:	e00c      	b.n	80002a0 <__adddf3+0x184>
 8000286:	f102 0214 	add.w	r2, r2, #20
 800028a:	bfd8      	it	le
 800028c:	f1c2 0c20 	rsble	ip, r2, #32
 8000290:	fa01 f102 	lsl.w	r1, r1, r2
 8000294:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000298:	bfdc      	itt	le
 800029a:	ea41 010c 	orrle.w	r1, r1, ip
 800029e:	4090      	lslle	r0, r2
 80002a0:	1ae4      	subs	r4, r4, r3
 80002a2:	bfa2      	ittt	ge
 80002a4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002a8:	4329      	orrge	r1, r5
 80002aa:	bd30      	popge	{r4, r5, pc}
 80002ac:	ea6f 0404 	mvn.w	r4, r4
 80002b0:	3c1f      	subs	r4, #31
 80002b2:	da1c      	bge.n	80002ee <__adddf3+0x1d2>
 80002b4:	340c      	adds	r4, #12
 80002b6:	dc0e      	bgt.n	80002d6 <__adddf3+0x1ba>
 80002b8:	f104 0414 	add.w	r4, r4, #20
 80002bc:	f1c4 0220 	rsb	r2, r4, #32
 80002c0:	fa20 f004 	lsr.w	r0, r0, r4
 80002c4:	fa01 f302 	lsl.w	r3, r1, r2
 80002c8:	ea40 0003 	orr.w	r0, r0, r3
 80002cc:	fa21 f304 	lsr.w	r3, r1, r4
 80002d0:	ea45 0103 	orr.w	r1, r5, r3
 80002d4:	bd30      	pop	{r4, r5, pc}
 80002d6:	f1c4 040c 	rsb	r4, r4, #12
 80002da:	f1c4 0220 	rsb	r2, r4, #32
 80002de:	fa20 f002 	lsr.w	r0, r0, r2
 80002e2:	fa01 f304 	lsl.w	r3, r1, r4
 80002e6:	ea40 0003 	orr.w	r0, r0, r3
 80002ea:	4629      	mov	r1, r5
 80002ec:	bd30      	pop	{r4, r5, pc}
 80002ee:	fa21 f004 	lsr.w	r0, r1, r4
 80002f2:	4629      	mov	r1, r5
 80002f4:	bd30      	pop	{r4, r5, pc}
 80002f6:	f094 0f00 	teq	r4, #0
 80002fa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80002fe:	bf06      	itte	eq
 8000300:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000304:	3401      	addeq	r4, #1
 8000306:	3d01      	subne	r5, #1
 8000308:	e74e      	b.n	80001a8 <__adddf3+0x8c>
 800030a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800030e:	bf18      	it	ne
 8000310:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000314:	d029      	beq.n	800036a <__adddf3+0x24e>
 8000316:	ea94 0f05 	teq	r4, r5
 800031a:	bf08      	it	eq
 800031c:	ea90 0f02 	teqeq	r0, r2
 8000320:	d005      	beq.n	800032e <__adddf3+0x212>
 8000322:	ea54 0c00 	orrs.w	ip, r4, r0
 8000326:	bf04      	itt	eq
 8000328:	4619      	moveq	r1, r3
 800032a:	4610      	moveq	r0, r2
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	ea91 0f03 	teq	r1, r3
 8000332:	bf1e      	ittt	ne
 8000334:	2100      	movne	r1, #0
 8000336:	2000      	movne	r0, #0
 8000338:	bd30      	popne	{r4, r5, pc}
 800033a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800033e:	d105      	bne.n	800034c <__adddf3+0x230>
 8000340:	0040      	lsls	r0, r0, #1
 8000342:	4149      	adcs	r1, r1
 8000344:	bf28      	it	cs
 8000346:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800034a:	bd30      	pop	{r4, r5, pc}
 800034c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000350:	bf3c      	itt	cc
 8000352:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000356:	bd30      	popcc	{r4, r5, pc}
 8000358:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800035c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000360:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000364:	f04f 0000 	mov.w	r0, #0
 8000368:	bd30      	pop	{r4, r5, pc}
 800036a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800036e:	bf1a      	itte	ne
 8000370:	4619      	movne	r1, r3
 8000372:	4610      	movne	r0, r2
 8000374:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000378:	bf1c      	itt	ne
 800037a:	460b      	movne	r3, r1
 800037c:	4602      	movne	r2, r0
 800037e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000382:	bf06      	itte	eq
 8000384:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000388:	ea91 0f03 	teqeq	r1, r3
 800038c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000390:	bd30      	pop	{r4, r5, pc}
 8000392:	bf00      	nop

08000394 <__aeabi_ui2d>:
 8000394:	f090 0f00 	teq	r0, #0
 8000398:	bf04      	itt	eq
 800039a:	2100      	moveq	r1, #0
 800039c:	4770      	bxeq	lr
 800039e:	b530      	push	{r4, r5, lr}
 80003a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003a8:	f04f 0500 	mov.w	r5, #0
 80003ac:	f04f 0100 	mov.w	r1, #0
 80003b0:	e750      	b.n	8000254 <__adddf3+0x138>
 80003b2:	bf00      	nop

080003b4 <__aeabi_i2d>:
 80003b4:	f090 0f00 	teq	r0, #0
 80003b8:	bf04      	itt	eq
 80003ba:	2100      	moveq	r1, #0
 80003bc:	4770      	bxeq	lr
 80003be:	b530      	push	{r4, r5, lr}
 80003c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003c8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80003cc:	bf48      	it	mi
 80003ce:	4240      	negmi	r0, r0
 80003d0:	f04f 0100 	mov.w	r1, #0
 80003d4:	e73e      	b.n	8000254 <__adddf3+0x138>
 80003d6:	bf00      	nop

080003d8 <__aeabi_f2d>:
 80003d8:	0042      	lsls	r2, r0, #1
 80003da:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80003de:	ea4f 0131 	mov.w	r1, r1, rrx
 80003e2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80003e6:	bf1f      	itttt	ne
 80003e8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80003ec:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80003f0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80003f4:	4770      	bxne	lr
 80003f6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80003fa:	bf08      	it	eq
 80003fc:	4770      	bxeq	lr
 80003fe:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000402:	bf04      	itt	eq
 8000404:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000408:	4770      	bxeq	lr
 800040a:	b530      	push	{r4, r5, lr}
 800040c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000418:	e71c      	b.n	8000254 <__adddf3+0x138>
 800041a:	bf00      	nop

0800041c <__aeabi_ul2d>:
 800041c:	ea50 0201 	orrs.w	r2, r0, r1
 8000420:	bf08      	it	eq
 8000422:	4770      	bxeq	lr
 8000424:	b530      	push	{r4, r5, lr}
 8000426:	f04f 0500 	mov.w	r5, #0
 800042a:	e00a      	b.n	8000442 <__aeabi_l2d+0x16>

0800042c <__aeabi_l2d>:
 800042c:	ea50 0201 	orrs.w	r2, r0, r1
 8000430:	bf08      	it	eq
 8000432:	4770      	bxeq	lr
 8000434:	b530      	push	{r4, r5, lr}
 8000436:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800043a:	d502      	bpl.n	8000442 <__aeabi_l2d+0x16>
 800043c:	4240      	negs	r0, r0
 800043e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000442:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000446:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800044a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800044e:	f43f aed8 	beq.w	8000202 <__adddf3+0xe6>
 8000452:	f04f 0203 	mov.w	r2, #3
 8000456:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800045a:	bf18      	it	ne
 800045c:	3203      	addne	r2, #3
 800045e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000462:	bf18      	it	ne
 8000464:	3203      	addne	r2, #3
 8000466:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800046a:	f1c2 0320 	rsb	r3, r2, #32
 800046e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000472:	fa20 f002 	lsr.w	r0, r0, r2
 8000476:	fa01 fe03 	lsl.w	lr, r1, r3
 800047a:	ea40 000e 	orr.w	r0, r0, lr
 800047e:	fa21 f102 	lsr.w	r1, r1, r2
 8000482:	4414      	add	r4, r2
 8000484:	e6bd      	b.n	8000202 <__adddf3+0xe6>
 8000486:	bf00      	nop

08000488 <__aeabi_dmul>:
 8000488:	b570      	push	{r4, r5, r6, lr}
 800048a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800048e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000492:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000496:	bf1d      	ittte	ne
 8000498:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800049c:	ea94 0f0c 	teqne	r4, ip
 80004a0:	ea95 0f0c 	teqne	r5, ip
 80004a4:	f000 f8de 	bleq	8000664 <__aeabi_dmul+0x1dc>
 80004a8:	442c      	add	r4, r5
 80004aa:	ea81 0603 	eor.w	r6, r1, r3
 80004ae:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004b2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004b6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004ba:	bf18      	it	ne
 80004bc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80004c0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80004c4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80004c8:	d038      	beq.n	800053c <__aeabi_dmul+0xb4>
 80004ca:	fba0 ce02 	umull	ip, lr, r0, r2
 80004ce:	f04f 0500 	mov.w	r5, #0
 80004d2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80004d6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80004da:	fbe0 e503 	umlal	lr, r5, r0, r3
 80004de:	f04f 0600 	mov.w	r6, #0
 80004e2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80004e6:	f09c 0f00 	teq	ip, #0
 80004ea:	bf18      	it	ne
 80004ec:	f04e 0e01 	orrne.w	lr, lr, #1
 80004f0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80004f4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80004f8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80004fc:	d204      	bcs.n	8000508 <__aeabi_dmul+0x80>
 80004fe:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000502:	416d      	adcs	r5, r5
 8000504:	eb46 0606 	adc.w	r6, r6, r6
 8000508:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800050c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000510:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000514:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000518:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800051c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000520:	bf88      	it	hi
 8000522:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000526:	d81e      	bhi.n	8000566 <__aeabi_dmul+0xde>
 8000528:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800052c:	bf08      	it	eq
 800052e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000532:	f150 0000 	adcs.w	r0, r0, #0
 8000536:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800053a:	bd70      	pop	{r4, r5, r6, pc}
 800053c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000540:	ea46 0101 	orr.w	r1, r6, r1
 8000544:	ea40 0002 	orr.w	r0, r0, r2
 8000548:	ea81 0103 	eor.w	r1, r1, r3
 800054c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000550:	bfc2      	ittt	gt
 8000552:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000556:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800055a:	bd70      	popgt	{r4, r5, r6, pc}
 800055c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000560:	f04f 0e00 	mov.w	lr, #0
 8000564:	3c01      	subs	r4, #1
 8000566:	f300 80ab 	bgt.w	80006c0 <__aeabi_dmul+0x238>
 800056a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800056e:	bfde      	ittt	le
 8000570:	2000      	movle	r0, #0
 8000572:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000576:	bd70      	pople	{r4, r5, r6, pc}
 8000578:	f1c4 0400 	rsb	r4, r4, #0
 800057c:	3c20      	subs	r4, #32
 800057e:	da35      	bge.n	80005ec <__aeabi_dmul+0x164>
 8000580:	340c      	adds	r4, #12
 8000582:	dc1b      	bgt.n	80005bc <__aeabi_dmul+0x134>
 8000584:	f104 0414 	add.w	r4, r4, #20
 8000588:	f1c4 0520 	rsb	r5, r4, #32
 800058c:	fa00 f305 	lsl.w	r3, r0, r5
 8000590:	fa20 f004 	lsr.w	r0, r0, r4
 8000594:	fa01 f205 	lsl.w	r2, r1, r5
 8000598:	ea40 0002 	orr.w	r0, r0, r2
 800059c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005a0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005a8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ac:	eb42 0106 	adc.w	r1, r2, r6
 80005b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005b4:	bf08      	it	eq
 80005b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005ba:	bd70      	pop	{r4, r5, r6, pc}
 80005bc:	f1c4 040c 	rsb	r4, r4, #12
 80005c0:	f1c4 0520 	rsb	r5, r4, #32
 80005c4:	fa00 f304 	lsl.w	r3, r0, r4
 80005c8:	fa20 f005 	lsr.w	r0, r0, r5
 80005cc:	fa01 f204 	lsl.w	r2, r1, r4
 80005d0:	ea40 0002 	orr.w	r0, r0, r2
 80005d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005dc:	f141 0100 	adc.w	r1, r1, #0
 80005e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005e4:	bf08      	it	eq
 80005e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005ea:	bd70      	pop	{r4, r5, r6, pc}
 80005ec:	f1c4 0520 	rsb	r5, r4, #32
 80005f0:	fa00 f205 	lsl.w	r2, r0, r5
 80005f4:	ea4e 0e02 	orr.w	lr, lr, r2
 80005f8:	fa20 f304 	lsr.w	r3, r0, r4
 80005fc:	fa01 f205 	lsl.w	r2, r1, r5
 8000600:	ea43 0302 	orr.w	r3, r3, r2
 8000604:	fa21 f004 	lsr.w	r0, r1, r4
 8000608:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800060c:	fa21 f204 	lsr.w	r2, r1, r4
 8000610:	ea20 0002 	bic.w	r0, r0, r2
 8000614:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000618:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800061c:	bf08      	it	eq
 800061e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000622:	bd70      	pop	{r4, r5, r6, pc}
 8000624:	f094 0f00 	teq	r4, #0
 8000628:	d10f      	bne.n	800064a <__aeabi_dmul+0x1c2>
 800062a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800062e:	0040      	lsls	r0, r0, #1
 8000630:	eb41 0101 	adc.w	r1, r1, r1
 8000634:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000638:	bf08      	it	eq
 800063a:	3c01      	subeq	r4, #1
 800063c:	d0f7      	beq.n	800062e <__aeabi_dmul+0x1a6>
 800063e:	ea41 0106 	orr.w	r1, r1, r6
 8000642:	f095 0f00 	teq	r5, #0
 8000646:	bf18      	it	ne
 8000648:	4770      	bxne	lr
 800064a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800064e:	0052      	lsls	r2, r2, #1
 8000650:	eb43 0303 	adc.w	r3, r3, r3
 8000654:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000658:	bf08      	it	eq
 800065a:	3d01      	subeq	r5, #1
 800065c:	d0f7      	beq.n	800064e <__aeabi_dmul+0x1c6>
 800065e:	ea43 0306 	orr.w	r3, r3, r6
 8000662:	4770      	bx	lr
 8000664:	ea94 0f0c 	teq	r4, ip
 8000668:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800066c:	bf18      	it	ne
 800066e:	ea95 0f0c 	teqne	r5, ip
 8000672:	d00c      	beq.n	800068e <__aeabi_dmul+0x206>
 8000674:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000678:	bf18      	it	ne
 800067a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800067e:	d1d1      	bne.n	8000624 <__aeabi_dmul+0x19c>
 8000680:	ea81 0103 	eor.w	r1, r1, r3
 8000684:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000688:	f04f 0000 	mov.w	r0, #0
 800068c:	bd70      	pop	{r4, r5, r6, pc}
 800068e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000692:	bf06      	itte	eq
 8000694:	4610      	moveq	r0, r2
 8000696:	4619      	moveq	r1, r3
 8000698:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800069c:	d019      	beq.n	80006d2 <__aeabi_dmul+0x24a>
 800069e:	ea94 0f0c 	teq	r4, ip
 80006a2:	d102      	bne.n	80006aa <__aeabi_dmul+0x222>
 80006a4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006a8:	d113      	bne.n	80006d2 <__aeabi_dmul+0x24a>
 80006aa:	ea95 0f0c 	teq	r5, ip
 80006ae:	d105      	bne.n	80006bc <__aeabi_dmul+0x234>
 80006b0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006b4:	bf1c      	itt	ne
 80006b6:	4610      	movne	r0, r2
 80006b8:	4619      	movne	r1, r3
 80006ba:	d10a      	bne.n	80006d2 <__aeabi_dmul+0x24a>
 80006bc:	ea81 0103 	eor.w	r1, r1, r3
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80006c8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80006cc:	f04f 0000 	mov.w	r0, #0
 80006d0:	bd70      	pop	{r4, r5, r6, pc}
 80006d2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80006d6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80006da:	bd70      	pop	{r4, r5, r6, pc}

080006dc <__aeabi_ddiv>:
 80006dc:	b570      	push	{r4, r5, r6, lr}
 80006de:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80006e2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80006e6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80006ea:	bf1d      	ittte	ne
 80006ec:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80006f0:	ea94 0f0c 	teqne	r4, ip
 80006f4:	ea95 0f0c 	teqne	r5, ip
 80006f8:	f000 f8a7 	bleq	800084a <__aeabi_ddiv+0x16e>
 80006fc:	eba4 0405 	sub.w	r4, r4, r5
 8000700:	ea81 0e03 	eor.w	lr, r1, r3
 8000704:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000708:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800070c:	f000 8088 	beq.w	8000820 <__aeabi_ddiv+0x144>
 8000710:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000714:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000718:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800071c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000720:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000724:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000728:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800072c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000730:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000734:	429d      	cmp	r5, r3
 8000736:	bf08      	it	eq
 8000738:	4296      	cmpeq	r6, r2
 800073a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800073e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000742:	d202      	bcs.n	800074a <__aeabi_ddiv+0x6e>
 8000744:	085b      	lsrs	r3, r3, #1
 8000746:	ea4f 0232 	mov.w	r2, r2, rrx
 800074a:	1ab6      	subs	r6, r6, r2
 800074c:	eb65 0503 	sbc.w	r5, r5, r3
 8000750:	085b      	lsrs	r3, r3, #1
 8000752:	ea4f 0232 	mov.w	r2, r2, rrx
 8000756:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800075a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800075e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000762:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000766:	bf22      	ittt	cs
 8000768:	1ab6      	subcs	r6, r6, r2
 800076a:	4675      	movcs	r5, lr
 800076c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000770:	085b      	lsrs	r3, r3, #1
 8000772:	ea4f 0232 	mov.w	r2, r2, rrx
 8000776:	ebb6 0e02 	subs.w	lr, r6, r2
 800077a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800077e:	bf22      	ittt	cs
 8000780:	1ab6      	subcs	r6, r6, r2
 8000782:	4675      	movcs	r5, lr
 8000784:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000788:	085b      	lsrs	r3, r3, #1
 800078a:	ea4f 0232 	mov.w	r2, r2, rrx
 800078e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000792:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000796:	bf22      	ittt	cs
 8000798:	1ab6      	subcs	r6, r6, r2
 800079a:	4675      	movcs	r5, lr
 800079c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ae:	bf22      	ittt	cs
 80007b0:	1ab6      	subcs	r6, r6, r2
 80007b2:	4675      	movcs	r5, lr
 80007b4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007b8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007bc:	d018      	beq.n	80007f0 <__aeabi_ddiv+0x114>
 80007be:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80007c2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80007c6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80007ca:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80007ce:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80007d2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80007d6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80007da:	d1c0      	bne.n	800075e <__aeabi_ddiv+0x82>
 80007dc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e0:	d10b      	bne.n	80007fa <__aeabi_ddiv+0x11e>
 80007e2:	ea41 0100 	orr.w	r1, r1, r0
 80007e6:	f04f 0000 	mov.w	r0, #0
 80007ea:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80007ee:	e7b6      	b.n	800075e <__aeabi_ddiv+0x82>
 80007f0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f4:	bf04      	itt	eq
 80007f6:	4301      	orreq	r1, r0
 80007f8:	2000      	moveq	r0, #0
 80007fa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80007fe:	bf88      	it	hi
 8000800:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000804:	f63f aeaf 	bhi.w	8000566 <__aeabi_dmul+0xde>
 8000808:	ebb5 0c03 	subs.w	ip, r5, r3
 800080c:	bf04      	itt	eq
 800080e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000812:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000816:	f150 0000 	adcs.w	r0, r0, #0
 800081a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800081e:	bd70      	pop	{r4, r5, r6, pc}
 8000820:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000824:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000828:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800082c:	bfc2      	ittt	gt
 800082e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000832:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000836:	bd70      	popgt	{r4, r5, r6, pc}
 8000838:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800083c:	f04f 0e00 	mov.w	lr, #0
 8000840:	3c01      	subs	r4, #1
 8000842:	e690      	b.n	8000566 <__aeabi_dmul+0xde>
 8000844:	ea45 0e06 	orr.w	lr, r5, r6
 8000848:	e68d      	b.n	8000566 <__aeabi_dmul+0xde>
 800084a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	bf08      	it	eq
 8000854:	ea95 0f0c 	teqeq	r5, ip
 8000858:	f43f af3b 	beq.w	80006d2 <__aeabi_dmul+0x24a>
 800085c:	ea94 0f0c 	teq	r4, ip
 8000860:	d10a      	bne.n	8000878 <__aeabi_ddiv+0x19c>
 8000862:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000866:	f47f af34 	bne.w	80006d2 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	f47f af25 	bne.w	80006bc <__aeabi_dmul+0x234>
 8000872:	4610      	mov	r0, r2
 8000874:	4619      	mov	r1, r3
 8000876:	e72c      	b.n	80006d2 <__aeabi_dmul+0x24a>
 8000878:	ea95 0f0c 	teq	r5, ip
 800087c:	d106      	bne.n	800088c <__aeabi_ddiv+0x1b0>
 800087e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000882:	f43f aefd 	beq.w	8000680 <__aeabi_dmul+0x1f8>
 8000886:	4610      	mov	r0, r2
 8000888:	4619      	mov	r1, r3
 800088a:	e722      	b.n	80006d2 <__aeabi_dmul+0x24a>
 800088c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000890:	bf18      	it	ne
 8000892:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000896:	f47f aec5 	bne.w	8000624 <__aeabi_dmul+0x19c>
 800089a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800089e:	f47f af0d 	bne.w	80006bc <__aeabi_dmul+0x234>
 80008a2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008a6:	f47f aeeb 	bne.w	8000680 <__aeabi_dmul+0x1f8>
 80008aa:	e712      	b.n	80006d2 <__aeabi_dmul+0x24a>

080008ac <__gedf2>:
 80008ac:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80008b0:	e006      	b.n	80008c0 <__cmpdf2+0x4>
 80008b2:	bf00      	nop

080008b4 <__ledf2>:
 80008b4:	f04f 0c01 	mov.w	ip, #1
 80008b8:	e002      	b.n	80008c0 <__cmpdf2+0x4>
 80008ba:	bf00      	nop

080008bc <__cmpdf2>:
 80008bc:	f04f 0c01 	mov.w	ip, #1
 80008c0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80008c4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80008c8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80008cc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80008d6:	d01b      	beq.n	8000910 <__cmpdf2+0x54>
 80008d8:	b001      	add	sp, #4
 80008da:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80008de:	bf0c      	ite	eq
 80008e0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80008e4:	ea91 0f03 	teqne	r1, r3
 80008e8:	bf02      	ittt	eq
 80008ea:	ea90 0f02 	teqeq	r0, r2
 80008ee:	2000      	moveq	r0, #0
 80008f0:	4770      	bxeq	lr
 80008f2:	f110 0f00 	cmn.w	r0, #0
 80008f6:	ea91 0f03 	teq	r1, r3
 80008fa:	bf58      	it	pl
 80008fc:	4299      	cmppl	r1, r3
 80008fe:	bf08      	it	eq
 8000900:	4290      	cmpeq	r0, r2
 8000902:	bf2c      	ite	cs
 8000904:	17d8      	asrcs	r0, r3, #31
 8000906:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800090a:	f040 0001 	orr.w	r0, r0, #1
 800090e:	4770      	bx	lr
 8000910:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000914:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000918:	d102      	bne.n	8000920 <__cmpdf2+0x64>
 800091a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800091e:	d107      	bne.n	8000930 <__cmpdf2+0x74>
 8000920:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000924:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000928:	d1d6      	bne.n	80008d8 <__cmpdf2+0x1c>
 800092a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800092e:	d0d3      	beq.n	80008d8 <__cmpdf2+0x1c>
 8000930:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000934:	4770      	bx	lr
 8000936:	bf00      	nop

08000938 <__aeabi_cdrcmple>:
 8000938:	4684      	mov	ip, r0
 800093a:	4610      	mov	r0, r2
 800093c:	4662      	mov	r2, ip
 800093e:	468c      	mov	ip, r1
 8000940:	4619      	mov	r1, r3
 8000942:	4663      	mov	r3, ip
 8000944:	e000      	b.n	8000948 <__aeabi_cdcmpeq>
 8000946:	bf00      	nop

08000948 <__aeabi_cdcmpeq>:
 8000948:	b501      	push	{r0, lr}
 800094a:	f7ff ffb7 	bl	80008bc <__cmpdf2>
 800094e:	2800      	cmp	r0, #0
 8000950:	bf48      	it	mi
 8000952:	f110 0f00 	cmnmi.w	r0, #0
 8000956:	bd01      	pop	{r0, pc}

08000958 <__aeabi_dcmpeq>:
 8000958:	f84d ed08 	str.w	lr, [sp, #-8]!
 800095c:	f7ff fff4 	bl	8000948 <__aeabi_cdcmpeq>
 8000960:	bf0c      	ite	eq
 8000962:	2001      	moveq	r0, #1
 8000964:	2000      	movne	r0, #0
 8000966:	f85d fb08 	ldr.w	pc, [sp], #8
 800096a:	bf00      	nop

0800096c <__aeabi_dcmplt>:
 800096c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000970:	f7ff ffea 	bl	8000948 <__aeabi_cdcmpeq>
 8000974:	bf34      	ite	cc
 8000976:	2001      	movcc	r0, #1
 8000978:	2000      	movcs	r0, #0
 800097a:	f85d fb08 	ldr.w	pc, [sp], #8
 800097e:	bf00      	nop

08000980 <__aeabi_dcmple>:
 8000980:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000984:	f7ff ffe0 	bl	8000948 <__aeabi_cdcmpeq>
 8000988:	bf94      	ite	ls
 800098a:	2001      	movls	r0, #1
 800098c:	2000      	movhi	r0, #0
 800098e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000992:	bf00      	nop

08000994 <__aeabi_dcmpge>:
 8000994:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000998:	f7ff ffce 	bl	8000938 <__aeabi_cdrcmple>
 800099c:	bf94      	ite	ls
 800099e:	2001      	movls	r0, #1
 80009a0:	2000      	movhi	r0, #0
 80009a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009a6:	bf00      	nop

080009a8 <__aeabi_dcmpgt>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff ffc4 	bl	8000938 <__aeabi_cdrcmple>
 80009b0:	bf34      	ite	cc
 80009b2:	2001      	movcc	r0, #1
 80009b4:	2000      	movcs	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmpun>:
 80009bc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009c0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009c4:	d102      	bne.n	80009cc <__aeabi_dcmpun+0x10>
 80009c6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009ca:	d10a      	bne.n	80009e2 <__aeabi_dcmpun+0x26>
 80009cc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d4:	d102      	bne.n	80009dc <__aeabi_dcmpun+0x20>
 80009d6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009da:	d102      	bne.n	80009e2 <__aeabi_dcmpun+0x26>
 80009dc:	f04f 0000 	mov.w	r0, #0
 80009e0:	4770      	bx	lr
 80009e2:	f04f 0001 	mov.w	r0, #1
 80009e6:	4770      	bx	lr

080009e8 <__aeabi_d2iz>:
 80009e8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009ec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80009f0:	d215      	bcs.n	8000a1e <__aeabi_d2iz+0x36>
 80009f2:	d511      	bpl.n	8000a18 <__aeabi_d2iz+0x30>
 80009f4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80009f8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009fc:	d912      	bls.n	8000a24 <__aeabi_d2iz+0x3c>
 80009fe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a0a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a0e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a12:	bf18      	it	ne
 8000a14:	4240      	negne	r0, r0
 8000a16:	4770      	bx	lr
 8000a18:	f04f 0000 	mov.w	r0, #0
 8000a1c:	4770      	bx	lr
 8000a1e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a22:	d105      	bne.n	8000a30 <__aeabi_d2iz+0x48>
 8000a24:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a28:	bf08      	it	eq
 8000a2a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a2e:	4770      	bx	lr
 8000a30:	f04f 0000 	mov.w	r0, #0
 8000a34:	4770      	bx	lr
 8000a36:	bf00      	nop

08000a38 <__aeabi_d2uiz>:
 8000a38:	004a      	lsls	r2, r1, #1
 8000a3a:	d211      	bcs.n	8000a60 <__aeabi_d2uiz+0x28>
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d211      	bcs.n	8000a66 <__aeabi_d2uiz+0x2e>
 8000a42:	d50d      	bpl.n	8000a60 <__aeabi_d2uiz+0x28>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d40e      	bmi.n	8000a6c <__aeabi_d2uiz+0x34>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a5e:	4770      	bx	lr
 8000a60:	f04f 0000 	mov.w	r0, #0
 8000a64:	4770      	bx	lr
 8000a66:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a6a:	d102      	bne.n	8000a72 <__aeabi_d2uiz+0x3a>
 8000a6c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000a70:	4770      	bx	lr
 8000a72:	f04f 0000 	mov.w	r0, #0
 8000a76:	4770      	bx	lr

08000a78 <__aeabi_d2f>:
 8000a78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a7c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a80:	bf24      	itt	cs
 8000a82:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a86:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a8a:	d90d      	bls.n	8000aa8 <__aeabi_d2f+0x30>
 8000a8c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a90:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a94:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a98:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a9c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000aa0:	bf08      	it	eq
 8000aa2:	f020 0001 	biceq.w	r0, r0, #1
 8000aa6:	4770      	bx	lr
 8000aa8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000aac:	d121      	bne.n	8000af2 <__aeabi_d2f+0x7a>
 8000aae:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ab2:	bfbc      	itt	lt
 8000ab4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ab8:	4770      	bxlt	lr
 8000aba:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000abe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ac2:	f1c2 0218 	rsb	r2, r2, #24
 8000ac6:	f1c2 0c20 	rsb	ip, r2, #32
 8000aca:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ace:	fa20 f002 	lsr.w	r0, r0, r2
 8000ad2:	bf18      	it	ne
 8000ad4:	f040 0001 	orrne.w	r0, r0, #1
 8000ad8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000adc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ae0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ae4:	ea40 000c 	orr.w	r0, r0, ip
 8000ae8:	fa23 f302 	lsr.w	r3, r3, r2
 8000aec:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000af0:	e7cc      	b.n	8000a8c <__aeabi_d2f+0x14>
 8000af2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000af6:	d107      	bne.n	8000b08 <__aeabi_d2f+0x90>
 8000af8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000afc:	bf1e      	ittt	ne
 8000afe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b02:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b06:	4770      	bxne	lr
 8000b08:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b0c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b10:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop

08000b18 <__aeabi_frsub>:
 8000b18:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b1c:	e002      	b.n	8000b24 <__addsf3>
 8000b1e:	bf00      	nop

08000b20 <__aeabi_fsub>:
 8000b20:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b24 <__addsf3>:
 8000b24:	0042      	lsls	r2, r0, #1
 8000b26:	bf1f      	itttt	ne
 8000b28:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b2c:	ea92 0f03 	teqne	r2, r3
 8000b30:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b34:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b38:	d06a      	beq.n	8000c10 <__addsf3+0xec>
 8000b3a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b3e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b42:	bfc1      	itttt	gt
 8000b44:	18d2      	addgt	r2, r2, r3
 8000b46:	4041      	eorgt	r1, r0
 8000b48:	4048      	eorgt	r0, r1
 8000b4a:	4041      	eorgt	r1, r0
 8000b4c:	bfb8      	it	lt
 8000b4e:	425b      	neglt	r3, r3
 8000b50:	2b19      	cmp	r3, #25
 8000b52:	bf88      	it	hi
 8000b54:	4770      	bxhi	lr
 8000b56:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b5a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b5e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b62:	bf18      	it	ne
 8000b64:	4240      	negne	r0, r0
 8000b66:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b6a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b6e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4249      	negne	r1, r1
 8000b76:	ea92 0f03 	teq	r2, r3
 8000b7a:	d03f      	beq.n	8000bfc <__addsf3+0xd8>
 8000b7c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b80:	fa41 fc03 	asr.w	ip, r1, r3
 8000b84:	eb10 000c 	adds.w	r0, r0, ip
 8000b88:	f1c3 0320 	rsb	r3, r3, #32
 8000b8c:	fa01 f103 	lsl.w	r1, r1, r3
 8000b90:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b94:	d502      	bpl.n	8000b9c <__addsf3+0x78>
 8000b96:	4249      	negs	r1, r1
 8000b98:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b9c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000ba0:	d313      	bcc.n	8000bca <__addsf3+0xa6>
 8000ba2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000ba6:	d306      	bcc.n	8000bb6 <__addsf3+0x92>
 8000ba8:	0840      	lsrs	r0, r0, #1
 8000baa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bae:	f102 0201 	add.w	r2, r2, #1
 8000bb2:	2afe      	cmp	r2, #254	; 0xfe
 8000bb4:	d251      	bcs.n	8000c5a <__addsf3+0x136>
 8000bb6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bba:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bbe:	bf08      	it	eq
 8000bc0:	f020 0001 	biceq.w	r0, r0, #1
 8000bc4:	ea40 0003 	orr.w	r0, r0, r3
 8000bc8:	4770      	bx	lr
 8000bca:	0049      	lsls	r1, r1, #1
 8000bcc:	eb40 0000 	adc.w	r0, r0, r0
 8000bd0:	3a01      	subs	r2, #1
 8000bd2:	bf28      	it	cs
 8000bd4:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000bd8:	d2ed      	bcs.n	8000bb6 <__addsf3+0x92>
 8000bda:	fab0 fc80 	clz	ip, r0
 8000bde:	f1ac 0c08 	sub.w	ip, ip, #8
 8000be2:	ebb2 020c 	subs.w	r2, r2, ip
 8000be6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bea:	bfaa      	itet	ge
 8000bec:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000bf0:	4252      	neglt	r2, r2
 8000bf2:	4318      	orrge	r0, r3
 8000bf4:	bfbc      	itt	lt
 8000bf6:	40d0      	lsrlt	r0, r2
 8000bf8:	4318      	orrlt	r0, r3
 8000bfa:	4770      	bx	lr
 8000bfc:	f092 0f00 	teq	r2, #0
 8000c00:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c04:	bf06      	itte	eq
 8000c06:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c0a:	3201      	addeq	r2, #1
 8000c0c:	3b01      	subne	r3, #1
 8000c0e:	e7b5      	b.n	8000b7c <__addsf3+0x58>
 8000c10:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c14:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c18:	bf18      	it	ne
 8000c1a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c1e:	d021      	beq.n	8000c64 <__addsf3+0x140>
 8000c20:	ea92 0f03 	teq	r2, r3
 8000c24:	d004      	beq.n	8000c30 <__addsf3+0x10c>
 8000c26:	f092 0f00 	teq	r2, #0
 8000c2a:	bf08      	it	eq
 8000c2c:	4608      	moveq	r0, r1
 8000c2e:	4770      	bx	lr
 8000c30:	ea90 0f01 	teq	r0, r1
 8000c34:	bf1c      	itt	ne
 8000c36:	2000      	movne	r0, #0
 8000c38:	4770      	bxne	lr
 8000c3a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c3e:	d104      	bne.n	8000c4a <__addsf3+0x126>
 8000c40:	0040      	lsls	r0, r0, #1
 8000c42:	bf28      	it	cs
 8000c44:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c48:	4770      	bx	lr
 8000c4a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c4e:	bf3c      	itt	cc
 8000c50:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bxcc	lr
 8000c56:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c5a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c5e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c62:	4770      	bx	lr
 8000c64:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c68:	bf16      	itet	ne
 8000c6a:	4608      	movne	r0, r1
 8000c6c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c70:	4601      	movne	r1, r0
 8000c72:	0242      	lsls	r2, r0, #9
 8000c74:	bf06      	itte	eq
 8000c76:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c7a:	ea90 0f01 	teqeq	r0, r1
 8000c7e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c82:	4770      	bx	lr

08000c84 <__aeabi_ui2f>:
 8000c84:	f04f 0300 	mov.w	r3, #0
 8000c88:	e004      	b.n	8000c94 <__aeabi_i2f+0x8>
 8000c8a:	bf00      	nop

08000c8c <__aeabi_i2f>:
 8000c8c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c90:	bf48      	it	mi
 8000c92:	4240      	negmi	r0, r0
 8000c94:	ea5f 0c00 	movs.w	ip, r0
 8000c98:	bf08      	it	eq
 8000c9a:	4770      	bxeq	lr
 8000c9c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000ca0:	4601      	mov	r1, r0
 8000ca2:	f04f 0000 	mov.w	r0, #0
 8000ca6:	e01c      	b.n	8000ce2 <__aeabi_l2f+0x2a>

08000ca8 <__aeabi_ul2f>:
 8000ca8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cac:	bf08      	it	eq
 8000cae:	4770      	bxeq	lr
 8000cb0:	f04f 0300 	mov.w	r3, #0
 8000cb4:	e00a      	b.n	8000ccc <__aeabi_l2f+0x14>
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_l2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cc4:	d502      	bpl.n	8000ccc <__aeabi_l2f+0x14>
 8000cc6:	4240      	negs	r0, r0
 8000cc8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ccc:	ea5f 0c01 	movs.w	ip, r1
 8000cd0:	bf02      	ittt	eq
 8000cd2:	4684      	moveq	ip, r0
 8000cd4:	4601      	moveq	r1, r0
 8000cd6:	2000      	moveq	r0, #0
 8000cd8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cdc:	bf08      	it	eq
 8000cde:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000ce2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000ce6:	fabc f28c 	clz	r2, ip
 8000cea:	3a08      	subs	r2, #8
 8000cec:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000cf0:	db10      	blt.n	8000d14 <__aeabi_l2f+0x5c>
 8000cf2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cf6:	4463      	add	r3, ip
 8000cf8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cfc:	f1c2 0220 	rsb	r2, r2, #32
 8000d00:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d04:	fa20 f202 	lsr.w	r2, r0, r2
 8000d08:	eb43 0002 	adc.w	r0, r3, r2
 8000d0c:	bf08      	it	eq
 8000d0e:	f020 0001 	biceq.w	r0, r0, #1
 8000d12:	4770      	bx	lr
 8000d14:	f102 0220 	add.w	r2, r2, #32
 8000d18:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d1c:	f1c2 0220 	rsb	r2, r2, #32
 8000d20:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d24:	fa21 f202 	lsr.w	r2, r1, r2
 8000d28:	eb43 0002 	adc.w	r0, r3, r2
 8000d2c:	bf08      	it	eq
 8000d2e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d32:	4770      	bx	lr

08000d34 <__aeabi_fmul>:
 8000d34:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d38:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d3c:	bf1e      	ittt	ne
 8000d3e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d42:	ea92 0f0c 	teqne	r2, ip
 8000d46:	ea93 0f0c 	teqne	r3, ip
 8000d4a:	d06f      	beq.n	8000e2c <__aeabi_fmul+0xf8>
 8000d4c:	441a      	add	r2, r3
 8000d4e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d52:	0240      	lsls	r0, r0, #9
 8000d54:	bf18      	it	ne
 8000d56:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d5a:	d01e      	beq.n	8000d9a <__aeabi_fmul+0x66>
 8000d5c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d60:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d64:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d68:	fba0 3101 	umull	r3, r1, r0, r1
 8000d6c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d70:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d74:	bf3e      	ittt	cc
 8000d76:	0049      	lslcc	r1, r1, #1
 8000d78:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d7c:	005b      	lslcc	r3, r3, #1
 8000d7e:	ea40 0001 	orr.w	r0, r0, r1
 8000d82:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d86:	2afd      	cmp	r2, #253	; 0xfd
 8000d88:	d81d      	bhi.n	8000dc6 <__aeabi_fmul+0x92>
 8000d8a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d8e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d92:	bf08      	it	eq
 8000d94:	f020 0001 	biceq.w	r0, r0, #1
 8000d98:	4770      	bx	lr
 8000d9a:	f090 0f00 	teq	r0, #0
 8000d9e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000da2:	bf08      	it	eq
 8000da4:	0249      	lsleq	r1, r1, #9
 8000da6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000daa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dae:	3a7f      	subs	r2, #127	; 0x7f
 8000db0:	bfc2      	ittt	gt
 8000db2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000db6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dba:	4770      	bxgt	lr
 8000dbc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dc0:	f04f 0300 	mov.w	r3, #0
 8000dc4:	3a01      	subs	r2, #1
 8000dc6:	dc5d      	bgt.n	8000e84 <__aeabi_fmul+0x150>
 8000dc8:	f112 0f19 	cmn.w	r2, #25
 8000dcc:	bfdc      	itt	le
 8000dce:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000dd2:	4770      	bxle	lr
 8000dd4:	f1c2 0200 	rsb	r2, r2, #0
 8000dd8:	0041      	lsls	r1, r0, #1
 8000dda:	fa21 f102 	lsr.w	r1, r1, r2
 8000dde:	f1c2 0220 	rsb	r2, r2, #32
 8000de2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000de6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dea:	f140 0000 	adc.w	r0, r0, #0
 8000dee:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000df2:	bf08      	it	eq
 8000df4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000df8:	4770      	bx	lr
 8000dfa:	f092 0f00 	teq	r2, #0
 8000dfe:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e02:	bf02      	ittt	eq
 8000e04:	0040      	lsleq	r0, r0, #1
 8000e06:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e0a:	3a01      	subeq	r2, #1
 8000e0c:	d0f9      	beq.n	8000e02 <__aeabi_fmul+0xce>
 8000e0e:	ea40 000c 	orr.w	r0, r0, ip
 8000e12:	f093 0f00 	teq	r3, #0
 8000e16:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e1a:	bf02      	ittt	eq
 8000e1c:	0049      	lsleq	r1, r1, #1
 8000e1e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e22:	3b01      	subeq	r3, #1
 8000e24:	d0f9      	beq.n	8000e1a <__aeabi_fmul+0xe6>
 8000e26:	ea41 010c 	orr.w	r1, r1, ip
 8000e2a:	e78f      	b.n	8000d4c <__aeabi_fmul+0x18>
 8000e2c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e30:	ea92 0f0c 	teq	r2, ip
 8000e34:	bf18      	it	ne
 8000e36:	ea93 0f0c 	teqne	r3, ip
 8000e3a:	d00a      	beq.n	8000e52 <__aeabi_fmul+0x11e>
 8000e3c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e40:	bf18      	it	ne
 8000e42:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e46:	d1d8      	bne.n	8000dfa <__aeabi_fmul+0xc6>
 8000e48:	ea80 0001 	eor.w	r0, r0, r1
 8000e4c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e50:	4770      	bx	lr
 8000e52:	f090 0f00 	teq	r0, #0
 8000e56:	bf17      	itett	ne
 8000e58:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e5c:	4608      	moveq	r0, r1
 8000e5e:	f091 0f00 	teqne	r1, #0
 8000e62:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e66:	d014      	beq.n	8000e92 <__aeabi_fmul+0x15e>
 8000e68:	ea92 0f0c 	teq	r2, ip
 8000e6c:	d101      	bne.n	8000e72 <__aeabi_fmul+0x13e>
 8000e6e:	0242      	lsls	r2, r0, #9
 8000e70:	d10f      	bne.n	8000e92 <__aeabi_fmul+0x15e>
 8000e72:	ea93 0f0c 	teq	r3, ip
 8000e76:	d103      	bne.n	8000e80 <__aeabi_fmul+0x14c>
 8000e78:	024b      	lsls	r3, r1, #9
 8000e7a:	bf18      	it	ne
 8000e7c:	4608      	movne	r0, r1
 8000e7e:	d108      	bne.n	8000e92 <__aeabi_fmul+0x15e>
 8000e80:	ea80 0001 	eor.w	r0, r0, r1
 8000e84:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e88:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e8c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e90:	4770      	bx	lr
 8000e92:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e96:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e9a:	4770      	bx	lr

08000e9c <__aeabi_fdiv>:
 8000e9c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ea0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ea4:	bf1e      	ittt	ne
 8000ea6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eaa:	ea92 0f0c 	teqne	r2, ip
 8000eae:	ea93 0f0c 	teqne	r3, ip
 8000eb2:	d069      	beq.n	8000f88 <__aeabi_fdiv+0xec>
 8000eb4:	eba2 0203 	sub.w	r2, r2, r3
 8000eb8:	ea80 0c01 	eor.w	ip, r0, r1
 8000ebc:	0249      	lsls	r1, r1, #9
 8000ebe:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ec2:	d037      	beq.n	8000f34 <__aeabi_fdiv+0x98>
 8000ec4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ec8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000ecc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ed0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ed4:	428b      	cmp	r3, r1
 8000ed6:	bf38      	it	cc
 8000ed8:	005b      	lslcc	r3, r3, #1
 8000eda:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000ede:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000ee2:	428b      	cmp	r3, r1
 8000ee4:	bf24      	itt	cs
 8000ee6:	1a5b      	subcs	r3, r3, r1
 8000ee8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000eec:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000ef0:	bf24      	itt	cs
 8000ef2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000ef6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000efa:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000efe:	bf24      	itt	cs
 8000f00:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f04:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f08:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f0c:	bf24      	itt	cs
 8000f0e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f12:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f16:	011b      	lsls	r3, r3, #4
 8000f18:	bf18      	it	ne
 8000f1a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f1e:	d1e0      	bne.n	8000ee2 <__aeabi_fdiv+0x46>
 8000f20:	2afd      	cmp	r2, #253	; 0xfd
 8000f22:	f63f af50 	bhi.w	8000dc6 <__aeabi_fmul+0x92>
 8000f26:	428b      	cmp	r3, r1
 8000f28:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f2c:	bf08      	it	eq
 8000f2e:	f020 0001 	biceq.w	r0, r0, #1
 8000f32:	4770      	bx	lr
 8000f34:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f38:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f3c:	327f      	adds	r2, #127	; 0x7f
 8000f3e:	bfc2      	ittt	gt
 8000f40:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f44:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f48:	4770      	bxgt	lr
 8000f4a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f4e:	f04f 0300 	mov.w	r3, #0
 8000f52:	3a01      	subs	r2, #1
 8000f54:	e737      	b.n	8000dc6 <__aeabi_fmul+0x92>
 8000f56:	f092 0f00 	teq	r2, #0
 8000f5a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f5e:	bf02      	ittt	eq
 8000f60:	0040      	lsleq	r0, r0, #1
 8000f62:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f66:	3a01      	subeq	r2, #1
 8000f68:	d0f9      	beq.n	8000f5e <__aeabi_fdiv+0xc2>
 8000f6a:	ea40 000c 	orr.w	r0, r0, ip
 8000f6e:	f093 0f00 	teq	r3, #0
 8000f72:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f76:	bf02      	ittt	eq
 8000f78:	0049      	lsleq	r1, r1, #1
 8000f7a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f7e:	3b01      	subeq	r3, #1
 8000f80:	d0f9      	beq.n	8000f76 <__aeabi_fdiv+0xda>
 8000f82:	ea41 010c 	orr.w	r1, r1, ip
 8000f86:	e795      	b.n	8000eb4 <__aeabi_fdiv+0x18>
 8000f88:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f8c:	ea92 0f0c 	teq	r2, ip
 8000f90:	d108      	bne.n	8000fa4 <__aeabi_fdiv+0x108>
 8000f92:	0242      	lsls	r2, r0, #9
 8000f94:	f47f af7d 	bne.w	8000e92 <__aeabi_fmul+0x15e>
 8000f98:	ea93 0f0c 	teq	r3, ip
 8000f9c:	f47f af70 	bne.w	8000e80 <__aeabi_fmul+0x14c>
 8000fa0:	4608      	mov	r0, r1
 8000fa2:	e776      	b.n	8000e92 <__aeabi_fmul+0x15e>
 8000fa4:	ea93 0f0c 	teq	r3, ip
 8000fa8:	d104      	bne.n	8000fb4 <__aeabi_fdiv+0x118>
 8000faa:	024b      	lsls	r3, r1, #9
 8000fac:	f43f af4c 	beq.w	8000e48 <__aeabi_fmul+0x114>
 8000fb0:	4608      	mov	r0, r1
 8000fb2:	e76e      	b.n	8000e92 <__aeabi_fmul+0x15e>
 8000fb4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fb8:	bf18      	it	ne
 8000fba:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fbe:	d1ca      	bne.n	8000f56 <__aeabi_fdiv+0xba>
 8000fc0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fc4:	f47f af5c 	bne.w	8000e80 <__aeabi_fmul+0x14c>
 8000fc8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fcc:	f47f af3c 	bne.w	8000e48 <__aeabi_fmul+0x114>
 8000fd0:	e75f      	b.n	8000e92 <__aeabi_fmul+0x15e>
 8000fd2:	bf00      	nop

08000fd4 <__aeabi_f2iz>:
 8000fd4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000fd8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000fdc:	d30f      	bcc.n	8000ffe <__aeabi_f2iz+0x2a>
 8000fde:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000fe2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000fe6:	d90d      	bls.n	8001004 <__aeabi_f2iz+0x30>
 8000fe8:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000fec:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ff0:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000ff4:	fa23 f002 	lsr.w	r0, r3, r2
 8000ff8:	bf18      	it	ne
 8000ffa:	4240      	negne	r0, r0
 8000ffc:	4770      	bx	lr
 8000ffe:	f04f 0000 	mov.w	r0, #0
 8001002:	4770      	bx	lr
 8001004:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001008:	d101      	bne.n	800100e <__aeabi_f2iz+0x3a>
 800100a:	0242      	lsls	r2, r0, #9
 800100c:	d105      	bne.n	800101a <__aeabi_f2iz+0x46>
 800100e:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8001012:	bf08      	it	eq
 8001014:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001018:	4770      	bx	lr
 800101a:	f04f 0000 	mov.w	r0, #0
 800101e:	4770      	bx	lr

08001020 <__do_global_dtors_aux>:
 8001020:	b510      	push	{r4, lr}
 8001022:	4c05      	ldr	r4, [pc, #20]	; (8001038 <__do_global_dtors_aux+0x18>)
 8001024:	7823      	ldrb	r3, [r4, #0]
 8001026:	b933      	cbnz	r3, 8001036 <__do_global_dtors_aux+0x16>
 8001028:	4b04      	ldr	r3, [pc, #16]	; (800103c <__do_global_dtors_aux+0x1c>)
 800102a:	b113      	cbz	r3, 8001032 <__do_global_dtors_aux+0x12>
 800102c:	4804      	ldr	r0, [pc, #16]	; (8001040 <__do_global_dtors_aux+0x20>)
 800102e:	f3af 8000 	nop.w
 8001032:	2301      	movs	r3, #1
 8001034:	7023      	strb	r3, [r4, #0]
 8001036:	bd10      	pop	{r4, pc}
 8001038:	20000168 	.word	0x20000168
 800103c:	00000000 	.word	0x00000000
 8001040:	08007d0c 	.word	0x08007d0c

08001044 <frame_dummy>:
 8001044:	b508      	push	{r3, lr}
 8001046:	4b03      	ldr	r3, [pc, #12]	; (8001054 <frame_dummy+0x10>)
 8001048:	b11b      	cbz	r3, 8001052 <frame_dummy+0xe>
 800104a:	4903      	ldr	r1, [pc, #12]	; (8001058 <frame_dummy+0x14>)
 800104c:	4803      	ldr	r0, [pc, #12]	; (800105c <frame_dummy+0x18>)
 800104e:	f3af 8000 	nop.w
 8001052:	bd08      	pop	{r3, pc}
 8001054:	00000000 	.word	0x00000000
 8001058:	2000016c 	.word	0x2000016c
 800105c:	08007d0c 	.word	0x08007d0c

08001060 <setPWM>:
 *      Author: dalvi
 */

#include "Motors.h"

void setPWM(MotorDef_t *Motor, uint32_t pwm, int en, Motors_t *Motors) {
 8001060:	b580      	push	{r7, lr}
 8001062:	b084      	sub	sp, #16
 8001064:	af00      	add	r7, sp, #0
 8001066:	60f8      	str	r0, [r7, #12]
 8001068:	60b9      	str	r1, [r7, #8]
 800106a:	607a      	str	r2, [r7, #4]
 800106c:	603b      	str	r3, [r7, #0]
	switch(Motor->timer) {
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	881b      	ldrh	r3, [r3, #0]
 8001072:	2b01      	cmp	r3, #1
 8001074:	d002      	beq.n	800107c <setPWM+0x1c>
 8001076:	2b02      	cmp	r3, #2
 8001078:	d05a      	beq.n	8001130 <setPWM+0xd0>
 800107a:	e07c      	b.n	8001176 <setPWM+0x116>
		case(1):
			switch(Motor->channel){
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	885b      	ldrh	r3, [r3, #2]
 8001080:	2b04      	cmp	r3, #4
 8001082:	d03a      	beq.n	80010fa <setPWM+0x9a>
 8001084:	2b04      	cmp	r3, #4
 8001086:	dc73      	bgt.n	8001170 <setPWM+0x110>
 8001088:	2b02      	cmp	r3, #2
 800108a:	d002      	beq.n	8001092 <setPWM+0x32>
 800108c:	2b03      	cmp	r3, #3
 800108e:	d01a      	beq.n	80010c6 <setPWM+0x66>
						TIM1->CCR4 = en * (100 - pwm) + !en * pwm;
						Motors->pwm4 = pwm;
						Motors->e4 = en;
						break;
			}
			break;
 8001090:	e06e      	b.n	8001170 <setPWM+0x110>
						TIM1->CCR2 = en * (100 - pwm) + !en * pwm;
 8001092:	68bb      	ldr	r3, [r7, #8]
 8001094:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 8001098:	687a      	ldr	r2, [r7, #4]
 800109a:	fb03 f202 	mul.w	r2, r3, r2
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	bf0c      	ite	eq
 80010a4:	2301      	moveq	r3, #1
 80010a6:	2300      	movne	r3, #0
 80010a8:	b2db      	uxtb	r3, r3
 80010aa:	4619      	mov	r1, r3
 80010ac:	68bb      	ldr	r3, [r7, #8]
 80010ae:	fb01 f303 	mul.w	r3, r1, r3
 80010b2:	4937      	ldr	r1, [pc, #220]	; (8001190 <setPWM+0x130>)
 80010b4:	4413      	add	r3, r2
 80010b6:	638b      	str	r3, [r1, #56]	; 0x38
						Motors->pwm1 = pwm;
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	68ba      	ldr	r2, [r7, #8]
 80010bc:	601a      	str	r2, [r3, #0]
						Motors->e1 = en;
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	687a      	ldr	r2, [r7, #4]
 80010c2:	605a      	str	r2, [r3, #4]
						break;
 80010c4:	e033      	b.n	800112e <setPWM+0xce>
						TIM1->CCR3 = en * (100 - pwm) + !en * pwm;
 80010c6:	68bb      	ldr	r3, [r7, #8]
 80010c8:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 80010cc:	687a      	ldr	r2, [r7, #4]
 80010ce:	fb03 f202 	mul.w	r2, r3, r2
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	bf0c      	ite	eq
 80010d8:	2301      	moveq	r3, #1
 80010da:	2300      	movne	r3, #0
 80010dc:	b2db      	uxtb	r3, r3
 80010de:	4619      	mov	r1, r3
 80010e0:	68bb      	ldr	r3, [r7, #8]
 80010e2:	fb01 f303 	mul.w	r3, r1, r3
 80010e6:	492a      	ldr	r1, [pc, #168]	; (8001190 <setPWM+0x130>)
 80010e8:	4413      	add	r3, r2
 80010ea:	63cb      	str	r3, [r1, #60]	; 0x3c
						Motors->pwm2 = pwm;
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	68ba      	ldr	r2, [r7, #8]
 80010f0:	609a      	str	r2, [r3, #8]
						Motors->e2 = en;
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	687a      	ldr	r2, [r7, #4]
 80010f6:	60da      	str	r2, [r3, #12]
						break;
 80010f8:	e019      	b.n	800112e <setPWM+0xce>
						TIM1->CCR4 = en * (100 - pwm) + !en * pwm;
 80010fa:	68bb      	ldr	r3, [r7, #8]
 80010fc:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 8001100:	687a      	ldr	r2, [r7, #4]
 8001102:	fb03 f202 	mul.w	r2, r3, r2
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	2b00      	cmp	r3, #0
 800110a:	bf0c      	ite	eq
 800110c:	2301      	moveq	r3, #1
 800110e:	2300      	movne	r3, #0
 8001110:	b2db      	uxtb	r3, r3
 8001112:	4619      	mov	r1, r3
 8001114:	68bb      	ldr	r3, [r7, #8]
 8001116:	fb01 f303 	mul.w	r3, r1, r3
 800111a:	491d      	ldr	r1, [pc, #116]	; (8001190 <setPWM+0x130>)
 800111c:	4413      	add	r3, r2
 800111e:	640b      	str	r3, [r1, #64]	; 0x40
						Motors->pwm4 = pwm;
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	68ba      	ldr	r2, [r7, #8]
 8001124:	619a      	str	r2, [r3, #24]
						Motors->e4 = en;
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	687a      	ldr	r2, [r7, #4]
 800112a:	61da      	str	r2, [r3, #28]
						break;
 800112c:	bf00      	nop
			break;
 800112e:	e01f      	b.n	8001170 <setPWM+0x110>
		case(2):
			switch(Motor->channel) {
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	885b      	ldrh	r3, [r3, #2]
 8001134:	2b04      	cmp	r3, #4
 8001136:	d11d      	bne.n	8001174 <setPWM+0x114>
				case(4):
					TIM2->CCR4 = en * (100 - pwm) + !en * pwm;
 8001138:	68bb      	ldr	r3, [r7, #8]
 800113a:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 800113e:	687a      	ldr	r2, [r7, #4]
 8001140:	fb03 f202 	mul.w	r2, r3, r2
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	2b00      	cmp	r3, #0
 8001148:	bf0c      	ite	eq
 800114a:	2301      	moveq	r3, #1
 800114c:	2300      	movne	r3, #0
 800114e:	b2db      	uxtb	r3, r3
 8001150:	4619      	mov	r1, r3
 8001152:	68bb      	ldr	r3, [r7, #8]
 8001154:	fb01 f303 	mul.w	r3, r1, r3
 8001158:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800115c:	4413      	add	r3, r2
 800115e:	640b      	str	r3, [r1, #64]	; 0x40
					Motors->pwm3 = pwm;
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	68ba      	ldr	r2, [r7, #8]
 8001164:	611a      	str	r2, [r3, #16]
					Motors->e3 = en;
 8001166:	683b      	ldr	r3, [r7, #0]
 8001168:	687a      	ldr	r2, [r7, #4]
 800116a:	615a      	str	r2, [r3, #20]
					break;
 800116c:	bf00      	nop
			}
			break;
 800116e:	e001      	b.n	8001174 <setPWM+0x114>
			break;
 8001170:	bf00      	nop
 8001172:	e000      	b.n	8001176 <setPWM+0x116>
			break;
 8001174:	bf00      	nop
	}
	HAL_GPIO_WritePin(GPIOA, Motor->in1, en);
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	889b      	ldrh	r3, [r3, #4]
 800117a:	687a      	ldr	r2, [r7, #4]
 800117c:	b2d2      	uxtb	r2, r2
 800117e:	4619      	mov	r1, r3
 8001180:	4804      	ldr	r0, [pc, #16]	; (8001194 <setPWM+0x134>)
 8001182:	f002 f9b3 	bl	80034ec <HAL_GPIO_WritePin>
}
 8001186:	bf00      	nop
 8001188:	3710      	adds	r7, #16
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	40012c00 	.word	0x40012c00
 8001194:	40010800 	.word	0x40010800

08001198 <RotateToZero>:
 *      Author: dalvi
 */

#include "Movement.h"

void RotateToZero(double e, double *pve, Motors_t *Motors, Motor_Defs *MotorDefs) {
 8001198:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800119c:	b089      	sub	sp, #36	; 0x24
 800119e:	af00      	add	r7, sp, #0
 80011a0:	e9c7 0102 	strd	r0, r1, [r7, #8]
 80011a4:	607a      	str	r2, [r7, #4]
 80011a6:	603b      	str	r3, [r7, #0]
	// PID Speed
	uint32_t u = abs((int)(Kp * abs(e) + Ki * (abs(e) * TIME) + Kd * (abs(e) - abs(*pve))));
 80011a8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80011ac:	f7ff fc1c 	bl	80009e8 <__aeabi_d2iz>
 80011b0:	4603      	mov	r3, r0
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	bfb8      	it	lt
 80011b6:	425b      	neglt	r3, r3
 80011b8:	4618      	mov	r0, r3
 80011ba:	f7ff f8fb 	bl	80003b4 <__aeabi_i2d>
 80011be:	a39e      	add	r3, pc, #632	; (adr r3, 8001438 <RotateToZero+0x2a0>)
 80011c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011c4:	f7ff f960 	bl	8000488 <__aeabi_dmul>
 80011c8:	4602      	mov	r2, r0
 80011ca:	460b      	mov	r3, r1
 80011cc:	4614      	mov	r4, r2
 80011ce:	461d      	mov	r5, r3
 80011d0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80011d4:	f7ff fc08 	bl	80009e8 <__aeabi_d2iz>
 80011d8:	4603      	mov	r3, r0
 80011da:	2b00      	cmp	r3, #0
 80011dc:	bfb8      	it	lt
 80011de:	425b      	neglt	r3, r3
 80011e0:	4618      	mov	r0, r3
 80011e2:	f7ff f8e7 	bl	80003b4 <__aeabi_i2d>
 80011e6:	a396      	add	r3, pc, #600	; (adr r3, 8001440 <RotateToZero+0x2a8>)
 80011e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011ec:	f7ff f94c 	bl	8000488 <__aeabi_dmul>
 80011f0:	4602      	mov	r2, r0
 80011f2:	460b      	mov	r3, r1
 80011f4:	4610      	mov	r0, r2
 80011f6:	4619      	mov	r1, r3
 80011f8:	f04f 0200 	mov.w	r2, #0
 80011fc:	4b94      	ldr	r3, [pc, #592]	; (8001450 <RotateToZero+0x2b8>)
 80011fe:	f7ff f943 	bl	8000488 <__aeabi_dmul>
 8001202:	4602      	mov	r2, r0
 8001204:	460b      	mov	r3, r1
 8001206:	4620      	mov	r0, r4
 8001208:	4629      	mov	r1, r5
 800120a:	f7fe ff87 	bl	800011c <__adddf3>
 800120e:	4602      	mov	r2, r0
 8001210:	460b      	mov	r3, r1
 8001212:	4690      	mov	r8, r2
 8001214:	4699      	mov	r9, r3
 8001216:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800121a:	f7ff fbe5 	bl	80009e8 <__aeabi_d2iz>
 800121e:	4603      	mov	r3, r0
 8001220:	ea83 74e3 	eor.w	r4, r3, r3, asr #31
 8001224:	eba4 74e3 	sub.w	r4, r4, r3, asr #31
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800122e:	4610      	mov	r0, r2
 8001230:	4619      	mov	r1, r3
 8001232:	f7ff fbd9 	bl	80009e8 <__aeabi_d2iz>
 8001236:	4603      	mov	r3, r0
 8001238:	2b00      	cmp	r3, #0
 800123a:	bfb8      	it	lt
 800123c:	425b      	neglt	r3, r3
 800123e:	1ae3      	subs	r3, r4, r3
 8001240:	4618      	mov	r0, r3
 8001242:	f7ff f8b7 	bl	80003b4 <__aeabi_i2d>
 8001246:	a380      	add	r3, pc, #512	; (adr r3, 8001448 <RotateToZero+0x2b0>)
 8001248:	e9d3 2300 	ldrd	r2, r3, [r3]
 800124c:	f7ff f91c 	bl	8000488 <__aeabi_dmul>
 8001250:	4602      	mov	r2, r0
 8001252:	460b      	mov	r3, r1
 8001254:	4640      	mov	r0, r8
 8001256:	4649      	mov	r1, r9
 8001258:	f7fe ff60 	bl	800011c <__adddf3>
 800125c:	4602      	mov	r2, r0
 800125e:	460b      	mov	r3, r1
 8001260:	4610      	mov	r0, r2
 8001262:	4619      	mov	r1, r3
 8001264:	f7ff fbc0 	bl	80009e8 <__aeabi_d2iz>
 8001268:	4603      	mov	r3, r0
 800126a:	2b00      	cmp	r3, #0
 800126c:	bfb8      	it	lt
 800126e:	425b      	neglt	r3, r3
 8001270:	61fb      	str	r3, [r7, #28]

	if (u > MAXROTATESPEED) u = MAXROTATESPEED;
 8001272:	69fb      	ldr	r3, [r7, #28]
 8001274:	2b14      	cmp	r3, #20
 8001276:	d901      	bls.n	800127c <RotateToZero+0xe4>
 8001278:	2314      	movs	r3, #20
 800127a:	61fb      	str	r3, [r7, #28]

	uint32_t stmp = 0;
 800127c:	2300      	movs	r3, #0
 800127e:	61bb      	str	r3, [r7, #24]
	int en = e > 0 ? 1 : 0;
 8001280:	2301      	movs	r3, #1
 8001282:	461c      	mov	r4, r3
 8001284:	f04f 0200 	mov.w	r2, #0
 8001288:	f04f 0300 	mov.w	r3, #0
 800128c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001290:	f7ff fb8a 	bl	80009a8 <__aeabi_dcmpgt>
 8001294:	4603      	mov	r3, r0
 8001296:	2b00      	cmp	r3, #0
 8001298:	d101      	bne.n	800129e <RotateToZero+0x106>
 800129a:	2300      	movs	r3, #0
 800129c:	461c      	mov	r4, r3
 800129e:	b2e3      	uxtb	r3, r4
 80012a0:	617b      	str	r3, [r7, #20]

	// adding PID speed each motor speed individually and storing the first speed in the "stmp"
	// and setting it to "Motors" struct so we don't loose the actual speed of each motor
	if(en) {
 80012a2:	697b      	ldr	r3, [r7, #20]
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	f000 8103 	beq.w	80014b0 <RotateToZero+0x318>

		// Setting Motor_1 speed
		if(u > Motors->pwm1) {
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	69fa      	ldr	r2, [r7, #28]
 80012b0:	429a      	cmp	r2, r3
 80012b2:	d921      	bls.n	80012f8 <RotateToZero+0x160>
			stmp = Motors->pwm1;
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	61bb      	str	r3, [r7, #24]
			setPWM(MotorDefs->Motor_1, u - Motors->pwm1, !Motors->e1, Motors);
 80012ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80012bc:	6818      	ldr	r0, [r3, #0]
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	69fa      	ldr	r2, [r7, #28]
 80012c4:	1ad1      	subs	r1, r2, r3
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	685b      	ldr	r3, [r3, #4]
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	bf0c      	ite	eq
 80012ce:	2301      	moveq	r3, #1
 80012d0:	2300      	movne	r3, #0
 80012d2:	b2db      	uxtb	r3, r3
 80012d4:	461a      	mov	r2, r3
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	f7ff fec2 	bl	8001060 <setPWM>
			Motors->pwm1 = stmp;
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	69ba      	ldr	r2, [r7, #24]
 80012e0:	601a      	str	r2, [r3, #0]
			Motors->e1 = !Motors->e1;
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	685b      	ldr	r3, [r3, #4]
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	bf0c      	ite	eq
 80012ea:	2301      	moveq	r3, #1
 80012ec:	2300      	movne	r3, #0
 80012ee:	b2db      	uxtb	r3, r3
 80012f0:	461a      	mov	r2, r3
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	605a      	str	r2, [r3, #4]
 80012f6:	e015      	b.n	8001324 <RotateToZero+0x18c>
		}
		else if (u < Motors->pwm1) {
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	69fa      	ldr	r2, [r7, #28]
 80012fe:	429a      	cmp	r2, r3
 8001300:	d210      	bcs.n	8001324 <RotateToZero+0x18c>
			stmp = Motors->pwm1;
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	61bb      	str	r3, [r7, #24]
			setPWM(MotorDefs->Motor_1, Motors->pwm1 - u, Motors->e1, Motors);
 8001308:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800130a:	6818      	ldr	r0, [r3, #0]
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	681a      	ldr	r2, [r3, #0]
 8001310:	69fb      	ldr	r3, [r7, #28]
 8001312:	1ad1      	subs	r1, r2, r3
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	685a      	ldr	r2, [r3, #4]
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	f7ff fea1 	bl	8001060 <setPWM>
			Motors->pwm1 = stmp;
 800131e:	683b      	ldr	r3, [r7, #0]
 8001320:	69ba      	ldr	r2, [r7, #24]
 8001322:	601a      	str	r2, [r3, #0]
		}

		// Setting Motor_2 speed
		if(u > Motors->pwm2) {
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	689b      	ldr	r3, [r3, #8]
 8001328:	69fa      	ldr	r2, [r7, #28]
 800132a:	429a      	cmp	r2, r3
 800132c:	d921      	bls.n	8001372 <RotateToZero+0x1da>
			stmp = Motors->pwm2;
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	689b      	ldr	r3, [r3, #8]
 8001332:	61bb      	str	r3, [r7, #24]
			setPWM(MotorDefs->Motor_2, u - Motors->pwm2, !Motors->e2, Motors);
 8001334:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001336:	6858      	ldr	r0, [r3, #4]
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	689b      	ldr	r3, [r3, #8]
 800133c:	69fa      	ldr	r2, [r7, #28]
 800133e:	1ad1      	subs	r1, r2, r3
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	68db      	ldr	r3, [r3, #12]
 8001344:	2b00      	cmp	r3, #0
 8001346:	bf0c      	ite	eq
 8001348:	2301      	moveq	r3, #1
 800134a:	2300      	movne	r3, #0
 800134c:	b2db      	uxtb	r3, r3
 800134e:	461a      	mov	r2, r3
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	f7ff fe85 	bl	8001060 <setPWM>
			Motors->pwm2 = stmp;
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	69ba      	ldr	r2, [r7, #24]
 800135a:	609a      	str	r2, [r3, #8]
			Motors->e2 = !Motors->e2;
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	68db      	ldr	r3, [r3, #12]
 8001360:	2b00      	cmp	r3, #0
 8001362:	bf0c      	ite	eq
 8001364:	2301      	moveq	r3, #1
 8001366:	2300      	movne	r3, #0
 8001368:	b2db      	uxtb	r3, r3
 800136a:	461a      	mov	r2, r3
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	60da      	str	r2, [r3, #12]
 8001370:	e015      	b.n	800139e <RotateToZero+0x206>
		}
		else if (u < Motors->pwm2) {
 8001372:	683b      	ldr	r3, [r7, #0]
 8001374:	689b      	ldr	r3, [r3, #8]
 8001376:	69fa      	ldr	r2, [r7, #28]
 8001378:	429a      	cmp	r2, r3
 800137a:	d210      	bcs.n	800139e <RotateToZero+0x206>
			stmp = Motors->pwm2;
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	689b      	ldr	r3, [r3, #8]
 8001380:	61bb      	str	r3, [r7, #24]
			setPWM(MotorDefs->Motor_2, Motors->pwm2 - u, Motors->e2, Motors);
 8001382:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001384:	6858      	ldr	r0, [r3, #4]
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	689a      	ldr	r2, [r3, #8]
 800138a:	69fb      	ldr	r3, [r7, #28]
 800138c:	1ad1      	subs	r1, r2, r3
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	68da      	ldr	r2, [r3, #12]
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	f7ff fe64 	bl	8001060 <setPWM>
			Motors->pwm2 = stmp;
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	69ba      	ldr	r2, [r7, #24]
 800139c:	609a      	str	r2, [r3, #8]
		}

		// Setting Motor_3 speed
		stmp = Motors->pwm3;
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	691b      	ldr	r3, [r3, #16]
 80013a2:	61bb      	str	r3, [r7, #24]
		setPWM(MotorDefs->Motor_3, Motors->pwm3 + (pow(-1, Motors->e3)* u), Motors->e3, Motors);
 80013a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80013a6:	689e      	ldr	r6, [r3, #8]
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	691b      	ldr	r3, [r3, #16]
 80013ac:	4618      	mov	r0, r3
 80013ae:	f7fe fff1 	bl	8000394 <__aeabi_ui2d>
 80013b2:	4604      	mov	r4, r0
 80013b4:	460d      	mov	r5, r1
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	695b      	ldr	r3, [r3, #20]
 80013ba:	4618      	mov	r0, r3
 80013bc:	f7fe fffa 	bl	80003b4 <__aeabi_i2d>
 80013c0:	4602      	mov	r2, r0
 80013c2:	460b      	mov	r3, r1
 80013c4:	f04f 0000 	mov.w	r0, #0
 80013c8:	4922      	ldr	r1, [pc, #136]	; (8001454 <RotateToZero+0x2bc>)
 80013ca:	f005 fa69 	bl	80068a0 <pow>
 80013ce:	4680      	mov	r8, r0
 80013d0:	4689      	mov	r9, r1
 80013d2:	69f8      	ldr	r0, [r7, #28]
 80013d4:	f7fe ffde 	bl	8000394 <__aeabi_ui2d>
 80013d8:	4602      	mov	r2, r0
 80013da:	460b      	mov	r3, r1
 80013dc:	4640      	mov	r0, r8
 80013de:	4649      	mov	r1, r9
 80013e0:	f7ff f852 	bl	8000488 <__aeabi_dmul>
 80013e4:	4602      	mov	r2, r0
 80013e6:	460b      	mov	r3, r1
 80013e8:	4620      	mov	r0, r4
 80013ea:	4629      	mov	r1, r5
 80013ec:	f7fe fe96 	bl	800011c <__adddf3>
 80013f0:	4602      	mov	r2, r0
 80013f2:	460b      	mov	r3, r1
 80013f4:	4610      	mov	r0, r2
 80013f6:	4619      	mov	r1, r3
 80013f8:	f7ff fb1e 	bl	8000a38 <__aeabi_d2uiz>
 80013fc:	4601      	mov	r1, r0
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	695a      	ldr	r2, [r3, #20]
 8001402:	683b      	ldr	r3, [r7, #0]
 8001404:	4630      	mov	r0, r6
 8001406:	f7ff fe2b 	bl	8001060 <setPWM>
		Motors->pwm3 = stmp;
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	69ba      	ldr	r2, [r7, #24]
 800140e:	611a      	str	r2, [r3, #16]

		// Setting Motor_4 speed
		stmp = Motors->pwm4;
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	699b      	ldr	r3, [r3, #24]
 8001414:	61bb      	str	r3, [r7, #24]
		setPWM(MotorDefs->Motor_4, Motors->pwm4 + (pow(-1, !Motors->e4)* u), Motors->e4, Motors);
 8001416:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001418:	68de      	ldr	r6, [r3, #12]
 800141a:	683b      	ldr	r3, [r7, #0]
 800141c:	699b      	ldr	r3, [r3, #24]
 800141e:	4618      	mov	r0, r3
 8001420:	f7fe ffb8 	bl	8000394 <__aeabi_ui2d>
 8001424:	4604      	mov	r4, r0
 8001426:	460d      	mov	r5, r1
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	69db      	ldr	r3, [r3, #28]
 800142c:	2b00      	cmp	r3, #0
 800142e:	d115      	bne.n	800145c <RotateToZero+0x2c4>
 8001430:	f04f 0200 	mov.w	r2, #0
 8001434:	4b08      	ldr	r3, [pc, #32]	; (8001458 <RotateToZero+0x2c0>)
 8001436:	e015      	b.n	8001464 <RotateToZero+0x2cc>
 8001438:	66666666 	.word	0x66666666
 800143c:	3ffe6666 	.word	0x3ffe6666
 8001440:	7110e454 	.word	0x7110e454
 8001444:	3f092a73 	.word	0x3f092a73
 8001448:	9999999a 	.word	0x9999999a
 800144c:	3ff99999 	.word	0x3ff99999
 8001450:	3ff80000 	.word	0x3ff80000
 8001454:	bff00000 	.word	0xbff00000
 8001458:	3ff00000 	.word	0x3ff00000
 800145c:	f04f 0200 	mov.w	r2, #0
 8001460:	f04f 0300 	mov.w	r3, #0
 8001464:	f04f 0000 	mov.w	r0, #0
 8001468:	498e      	ldr	r1, [pc, #568]	; (80016a4 <RotateToZero+0x50c>)
 800146a:	f005 fa19 	bl	80068a0 <pow>
 800146e:	4680      	mov	r8, r0
 8001470:	4689      	mov	r9, r1
 8001472:	69f8      	ldr	r0, [r7, #28]
 8001474:	f7fe ff8e 	bl	8000394 <__aeabi_ui2d>
 8001478:	4602      	mov	r2, r0
 800147a:	460b      	mov	r3, r1
 800147c:	4640      	mov	r0, r8
 800147e:	4649      	mov	r1, r9
 8001480:	f7ff f802 	bl	8000488 <__aeabi_dmul>
 8001484:	4602      	mov	r2, r0
 8001486:	460b      	mov	r3, r1
 8001488:	4620      	mov	r0, r4
 800148a:	4629      	mov	r1, r5
 800148c:	f7fe fe46 	bl	800011c <__adddf3>
 8001490:	4602      	mov	r2, r0
 8001492:	460b      	mov	r3, r1
 8001494:	4610      	mov	r0, r2
 8001496:	4619      	mov	r1, r3
 8001498:	f7ff face 	bl	8000a38 <__aeabi_d2uiz>
 800149c:	4601      	mov	r1, r0
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	69da      	ldr	r2, [r3, #28]
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	4630      	mov	r0, r6
 80014a6:	f7ff fddb 	bl	8001060 <setPWM>
		Motors->pwm4 = stmp;
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	69ba      	ldr	r2, [r7, #24]
 80014ae:	619a      	str	r2, [r3, #24]
	}
	if(!en) {
 80014b0:	697b      	ldr	r3, [r7, #20]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	f040 80ec 	bne.w	8001690 <RotateToZero+0x4f8>
		// Setting Motor_3 speed
		if(u > Motors->pwm3) {
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	691b      	ldr	r3, [r3, #16]
 80014bc:	69fa      	ldr	r2, [r7, #28]
 80014be:	429a      	cmp	r2, r3
 80014c0:	d921      	bls.n	8001506 <RotateToZero+0x36e>
			stmp = Motors->pwm3;
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	691b      	ldr	r3, [r3, #16]
 80014c6:	61bb      	str	r3, [r7, #24]
			setPWM(MotorDefs->Motor_3, u - Motors->pwm3, !Motors->e3, Motors);
 80014c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80014ca:	6898      	ldr	r0, [r3, #8]
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	691b      	ldr	r3, [r3, #16]
 80014d0:	69fa      	ldr	r2, [r7, #28]
 80014d2:	1ad1      	subs	r1, r2, r3
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	695b      	ldr	r3, [r3, #20]
 80014d8:	2b00      	cmp	r3, #0
 80014da:	bf0c      	ite	eq
 80014dc:	2301      	moveq	r3, #1
 80014de:	2300      	movne	r3, #0
 80014e0:	b2db      	uxtb	r3, r3
 80014e2:	461a      	mov	r2, r3
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	f7ff fdbb 	bl	8001060 <setPWM>
			Motors->pwm3 = stmp;
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	69ba      	ldr	r2, [r7, #24]
 80014ee:	611a      	str	r2, [r3, #16]
			Motors->e3 = !Motors->e3;
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	695b      	ldr	r3, [r3, #20]
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	bf0c      	ite	eq
 80014f8:	2301      	moveq	r3, #1
 80014fa:	2300      	movne	r3, #0
 80014fc:	b2db      	uxtb	r3, r3
 80014fe:	461a      	mov	r2, r3
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	615a      	str	r2, [r3, #20]
 8001504:	e015      	b.n	8001532 <RotateToZero+0x39a>
		}
		else if (u < Motors->pwm3) {
 8001506:	683b      	ldr	r3, [r7, #0]
 8001508:	691b      	ldr	r3, [r3, #16]
 800150a:	69fa      	ldr	r2, [r7, #28]
 800150c:	429a      	cmp	r2, r3
 800150e:	d210      	bcs.n	8001532 <RotateToZero+0x39a>
			stmp = Motors->pwm3;
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	691b      	ldr	r3, [r3, #16]
 8001514:	61bb      	str	r3, [r7, #24]
			setPWM(MotorDefs->Motor_3, Motors->pwm1 - u, Motors->e3, Motors);
 8001516:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001518:	6898      	ldr	r0, [r3, #8]
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	681a      	ldr	r2, [r3, #0]
 800151e:	69fb      	ldr	r3, [r7, #28]
 8001520:	1ad1      	subs	r1, r2, r3
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	695a      	ldr	r2, [r3, #20]
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	f7ff fd9a 	bl	8001060 <setPWM>
			Motors->pwm3 = stmp;
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	69ba      	ldr	r2, [r7, #24]
 8001530:	611a      	str	r2, [r3, #16]
		}

		// Setting Motor_4 speed
		if(u > Motors->pwm4) {
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	699b      	ldr	r3, [r3, #24]
 8001536:	69fa      	ldr	r2, [r7, #28]
 8001538:	429a      	cmp	r2, r3
 800153a:	d921      	bls.n	8001580 <RotateToZero+0x3e8>
			stmp = Motors->pwm4;
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	699b      	ldr	r3, [r3, #24]
 8001540:	61bb      	str	r3, [r7, #24]
			setPWM(MotorDefs->Motor_4, u - Motors->pwm4, !Motors->e4, Motors);
 8001542:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001544:	68d8      	ldr	r0, [r3, #12]
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	699b      	ldr	r3, [r3, #24]
 800154a:	69fa      	ldr	r2, [r7, #28]
 800154c:	1ad1      	subs	r1, r2, r3
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	69db      	ldr	r3, [r3, #28]
 8001552:	2b00      	cmp	r3, #0
 8001554:	bf0c      	ite	eq
 8001556:	2301      	moveq	r3, #1
 8001558:	2300      	movne	r3, #0
 800155a:	b2db      	uxtb	r3, r3
 800155c:	461a      	mov	r2, r3
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	f7ff fd7e 	bl	8001060 <setPWM>
			Motors->pwm4 = stmp;
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	69ba      	ldr	r2, [r7, #24]
 8001568:	619a      	str	r2, [r3, #24]
			Motors->e4 = !Motors->e4;
 800156a:	683b      	ldr	r3, [r7, #0]
 800156c:	69db      	ldr	r3, [r3, #28]
 800156e:	2b00      	cmp	r3, #0
 8001570:	bf0c      	ite	eq
 8001572:	2301      	moveq	r3, #1
 8001574:	2300      	movne	r3, #0
 8001576:	b2db      	uxtb	r3, r3
 8001578:	461a      	mov	r2, r3
 800157a:	683b      	ldr	r3, [r7, #0]
 800157c:	61da      	str	r2, [r3, #28]
 800157e:	e015      	b.n	80015ac <RotateToZero+0x414>
		}
		else if (u <= Motors->pwm4) {
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	699b      	ldr	r3, [r3, #24]
 8001584:	69fa      	ldr	r2, [r7, #28]
 8001586:	429a      	cmp	r2, r3
 8001588:	d810      	bhi.n	80015ac <RotateToZero+0x414>
			stmp = Motors->pwm4;
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	699b      	ldr	r3, [r3, #24]
 800158e:	61bb      	str	r3, [r7, #24]
			setPWM(MotorDefs->Motor_4, Motors->pwm4 - u, Motors->e4, Motors);
 8001590:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001592:	68d8      	ldr	r0, [r3, #12]
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	699a      	ldr	r2, [r3, #24]
 8001598:	69fb      	ldr	r3, [r7, #28]
 800159a:	1ad1      	subs	r1, r2, r3
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	69da      	ldr	r2, [r3, #28]
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	f7ff fd5d 	bl	8001060 <setPWM>
			Motors->pwm4 = stmp;
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	69ba      	ldr	r2, [r7, #24]
 80015aa:	619a      	str	r2, [r3, #24]
		}

		// Setting Motor_1 speed
		stmp = Motors->pwm1;
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	61bb      	str	r3, [r7, #24]
		setPWM(MotorDefs->Motor_1, Motors->pwm1 + (pow(-1, Motors->e1)* u), Motors->e1, Motors);
 80015b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80015b4:	681e      	ldr	r6, [r3, #0]
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	4618      	mov	r0, r3
 80015bc:	f7fe feea 	bl	8000394 <__aeabi_ui2d>
 80015c0:	4604      	mov	r4, r0
 80015c2:	460d      	mov	r5, r1
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	685b      	ldr	r3, [r3, #4]
 80015c8:	4618      	mov	r0, r3
 80015ca:	f7fe fef3 	bl	80003b4 <__aeabi_i2d>
 80015ce:	4602      	mov	r2, r0
 80015d0:	460b      	mov	r3, r1
 80015d2:	f04f 0000 	mov.w	r0, #0
 80015d6:	4933      	ldr	r1, [pc, #204]	; (80016a4 <RotateToZero+0x50c>)
 80015d8:	f005 f962 	bl	80068a0 <pow>
 80015dc:	4680      	mov	r8, r0
 80015de:	4689      	mov	r9, r1
 80015e0:	69f8      	ldr	r0, [r7, #28]
 80015e2:	f7fe fed7 	bl	8000394 <__aeabi_ui2d>
 80015e6:	4602      	mov	r2, r0
 80015e8:	460b      	mov	r3, r1
 80015ea:	4640      	mov	r0, r8
 80015ec:	4649      	mov	r1, r9
 80015ee:	f7fe ff4b 	bl	8000488 <__aeabi_dmul>
 80015f2:	4602      	mov	r2, r0
 80015f4:	460b      	mov	r3, r1
 80015f6:	4620      	mov	r0, r4
 80015f8:	4629      	mov	r1, r5
 80015fa:	f7fe fd8f 	bl	800011c <__adddf3>
 80015fe:	4602      	mov	r2, r0
 8001600:	460b      	mov	r3, r1
 8001602:	4610      	mov	r0, r2
 8001604:	4619      	mov	r1, r3
 8001606:	f7ff fa17 	bl	8000a38 <__aeabi_d2uiz>
 800160a:	4601      	mov	r1, r0
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	685a      	ldr	r2, [r3, #4]
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	4630      	mov	r0, r6
 8001614:	f7ff fd24 	bl	8001060 <setPWM>
		Motors->pwm1 = stmp;
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	69ba      	ldr	r2, [r7, #24]
 800161c:	601a      	str	r2, [r3, #0]

		// Setting Motor_2 speed
		stmp = Motors->pwm2;
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	689b      	ldr	r3, [r3, #8]
 8001622:	61bb      	str	r3, [r7, #24]
		setPWM(MotorDefs->Motor_2, Motors->pwm2 + (pow(-1, Motors->e2)* u), Motors->e2, Motors);
 8001624:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001626:	685e      	ldr	r6, [r3, #4]
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	689b      	ldr	r3, [r3, #8]
 800162c:	4618      	mov	r0, r3
 800162e:	f7fe feb1 	bl	8000394 <__aeabi_ui2d>
 8001632:	4604      	mov	r4, r0
 8001634:	460d      	mov	r5, r1
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	68db      	ldr	r3, [r3, #12]
 800163a:	4618      	mov	r0, r3
 800163c:	f7fe feba 	bl	80003b4 <__aeabi_i2d>
 8001640:	4602      	mov	r2, r0
 8001642:	460b      	mov	r3, r1
 8001644:	f04f 0000 	mov.w	r0, #0
 8001648:	4916      	ldr	r1, [pc, #88]	; (80016a4 <RotateToZero+0x50c>)
 800164a:	f005 f929 	bl	80068a0 <pow>
 800164e:	4680      	mov	r8, r0
 8001650:	4689      	mov	r9, r1
 8001652:	69f8      	ldr	r0, [r7, #28]
 8001654:	f7fe fe9e 	bl	8000394 <__aeabi_ui2d>
 8001658:	4602      	mov	r2, r0
 800165a:	460b      	mov	r3, r1
 800165c:	4640      	mov	r0, r8
 800165e:	4649      	mov	r1, r9
 8001660:	f7fe ff12 	bl	8000488 <__aeabi_dmul>
 8001664:	4602      	mov	r2, r0
 8001666:	460b      	mov	r3, r1
 8001668:	4620      	mov	r0, r4
 800166a:	4629      	mov	r1, r5
 800166c:	f7fe fd56 	bl	800011c <__adddf3>
 8001670:	4602      	mov	r2, r0
 8001672:	460b      	mov	r3, r1
 8001674:	4610      	mov	r0, r2
 8001676:	4619      	mov	r1, r3
 8001678:	f7ff f9de 	bl	8000a38 <__aeabi_d2uiz>
 800167c:	4601      	mov	r1, r0
 800167e:	683b      	ldr	r3, [r7, #0]
 8001680:	68da      	ldr	r2, [r3, #12]
 8001682:	683b      	ldr	r3, [r7, #0]
 8001684:	4630      	mov	r0, r6
 8001686:	f7ff fceb 	bl	8001060 <setPWM>
		Motors->pwm2 = stmp;
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	69ba      	ldr	r2, [r7, #24]
 800168e:	609a      	str	r2, [r3, #8]
	}

	*pve = e;
 8001690:	6879      	ldr	r1, [r7, #4]
 8001692:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001696:	e9c1 2300 	strd	r2, r3, [r1]
}
 800169a:	bf00      	nop
 800169c:	3724      	adds	r7, #36	; 0x24
 800169e:	46bd      	mov	sp, r7
 80016a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80016a4:	bff00000 	.word	0xbff00000

080016a8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b088      	sub	sp, #32
 80016ac:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016ae:	f107 0310 	add.w	r3, r7, #16
 80016b2:	2200      	movs	r2, #0
 80016b4:	601a      	str	r2, [r3, #0]
 80016b6:	605a      	str	r2, [r3, #4]
 80016b8:	609a      	str	r2, [r3, #8]
 80016ba:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016bc:	4b62      	ldr	r3, [pc, #392]	; (8001848 <MX_GPIO_Init+0x1a0>)
 80016be:	699b      	ldr	r3, [r3, #24]
 80016c0:	4a61      	ldr	r2, [pc, #388]	; (8001848 <MX_GPIO_Init+0x1a0>)
 80016c2:	f043 0310 	orr.w	r3, r3, #16
 80016c6:	6193      	str	r3, [r2, #24]
 80016c8:	4b5f      	ldr	r3, [pc, #380]	; (8001848 <MX_GPIO_Init+0x1a0>)
 80016ca:	699b      	ldr	r3, [r3, #24]
 80016cc:	f003 0310 	and.w	r3, r3, #16
 80016d0:	60fb      	str	r3, [r7, #12]
 80016d2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016d4:	4b5c      	ldr	r3, [pc, #368]	; (8001848 <MX_GPIO_Init+0x1a0>)
 80016d6:	699b      	ldr	r3, [r3, #24]
 80016d8:	4a5b      	ldr	r2, [pc, #364]	; (8001848 <MX_GPIO_Init+0x1a0>)
 80016da:	f043 0304 	orr.w	r3, r3, #4
 80016de:	6193      	str	r3, [r2, #24]
 80016e0:	4b59      	ldr	r3, [pc, #356]	; (8001848 <MX_GPIO_Init+0x1a0>)
 80016e2:	699b      	ldr	r3, [r3, #24]
 80016e4:	f003 0304 	and.w	r3, r3, #4
 80016e8:	60bb      	str	r3, [r7, #8]
 80016ea:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016ec:	4b56      	ldr	r3, [pc, #344]	; (8001848 <MX_GPIO_Init+0x1a0>)
 80016ee:	699b      	ldr	r3, [r3, #24]
 80016f0:	4a55      	ldr	r2, [pc, #340]	; (8001848 <MX_GPIO_Init+0x1a0>)
 80016f2:	f043 0308 	orr.w	r3, r3, #8
 80016f6:	6193      	str	r3, [r2, #24]
 80016f8:	4b53      	ldr	r3, [pc, #332]	; (8001848 <MX_GPIO_Init+0x1a0>)
 80016fa:	699b      	ldr	r3, [r3, #24]
 80016fc:	f003 0308 	and.w	r3, r3, #8
 8001700:	607b      	str	r3, [r7, #4]
 8001702:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001704:	2200      	movs	r2, #0
 8001706:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800170a:	4850      	ldr	r0, [pc, #320]	; (800184c <MX_GPIO_Init+0x1a4>)
 800170c:	f001 feee 	bl	80034ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SR4TRIG_Pin|SR2TRIG_Pin|GPIO_PIN_4|GPIO_PIN_6
 8001710:	2200      	movs	r2, #0
 8001712:	f241 1153 	movw	r1, #4435	; 0x1153
 8001716:	484e      	ldr	r0, [pc, #312]	; (8001850 <MX_GPIO_Init+0x1a8>)
 8001718:	f001 fee8 	bl	80034ec <HAL_GPIO_WritePin>
                          |GPIO_PIN_8|GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SR3TRIG_Pin|SR1TRIG_Pin, GPIO_PIN_RESET);
 800171c:	2200      	movs	r2, #0
 800171e:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8001722:	484c      	ldr	r0, [pc, #304]	; (8001854 <MX_GPIO_Init+0x1ac>)
 8001724:	f001 fee2 	bl	80034ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001728:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800172c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800172e:	2301      	movs	r3, #1
 8001730:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001732:	2300      	movs	r3, #0
 8001734:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001736:	2302      	movs	r3, #2
 8001738:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800173a:	f107 0310 	add.w	r3, r7, #16
 800173e:	4619      	mov	r1, r3
 8001740:	4842      	ldr	r0, [pc, #264]	; (800184c <MX_GPIO_Init+0x1a4>)
 8001742:	f001 fd4f 	bl	80031e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SR4ECHO_Pin;
 8001746:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800174a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800174c:	2300      	movs	r3, #0
 800174e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001750:	2300      	movs	r3, #0
 8001752:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SR4ECHO_GPIO_Port, &GPIO_InitStruct);
 8001754:	f107 0310 	add.w	r3, r7, #16
 8001758:	4619      	mov	r1, r3
 800175a:	483c      	ldr	r0, [pc, #240]	; (800184c <MX_GPIO_Init+0x1a4>)
 800175c:	f001 fd42 	bl	80031e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001760:	2308      	movs	r3, #8
 8001762:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001764:	4b3c      	ldr	r3, [pc, #240]	; (8001858 <MX_GPIO_Init+0x1b0>)
 8001766:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001768:	2300      	movs	r3, #0
 800176a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800176c:	f107 0310 	add.w	r3, r7, #16
 8001770:	4619      	mov	r1, r3
 8001772:	4836      	ldr	r0, [pc, #216]	; (800184c <MX_GPIO_Init+0x1a4>)
 8001774:	f001 fd36 	bl	80031e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PA4 PA6
                           PA8 PA12 */
  GPIO_InitStruct.Pin = SR4TRIG_Pin|SR2TRIG_Pin|GPIO_PIN_4|GPIO_PIN_6
 8001778:	f241 1353 	movw	r3, #4435	; 0x1153
 800177c:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_8|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800177e:	2301      	movs	r3, #1
 8001780:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001782:	2300      	movs	r3, #0
 8001784:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001786:	2302      	movs	r3, #2
 8001788:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800178a:	f107 0310 	add.w	r3, r7, #16
 800178e:	4619      	mov	r1, r3
 8001790:	482f      	ldr	r0, [pc, #188]	; (8001850 <MX_GPIO_Init+0x1a8>)
 8001792:	f001 fd27 	bl	80031e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SR2ECHO_Pin;
 8001796:	2304      	movs	r3, #4
 8001798:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800179a:	2300      	movs	r3, #0
 800179c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800179e:	2300      	movs	r3, #0
 80017a0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SR2ECHO_GPIO_Port, &GPIO_InitStruct);
 80017a2:	f107 0310 	add.w	r3, r7, #16
 80017a6:	4619      	mov	r1, r3
 80017a8:	4829      	ldr	r0, [pc, #164]	; (8001850 <MX_GPIO_Init+0x1a8>)
 80017aa:	f001 fd1b 	bl	80031e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 80017ae:	2307      	movs	r3, #7
 80017b0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80017b2:	4b29      	ldr	r3, [pc, #164]	; (8001858 <MX_GPIO_Init+0x1b0>)
 80017b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b6:	2300      	movs	r3, #0
 80017b8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017ba:	f107 0310 	add.w	r3, r7, #16
 80017be:	4619      	mov	r1, r3
 80017c0:	4824      	ldr	r0, [pc, #144]	; (8001854 <MX_GPIO_Init+0x1ac>)
 80017c2:	f001 fd0f 	bl	80031e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = SR3ECHO_Pin|SR1ECHO_Pin;
 80017c6:	f44f 4310 	mov.w	r3, #36864	; 0x9000
 80017ca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017cc:	2300      	movs	r3, #0
 80017ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d0:	2300      	movs	r3, #0
 80017d2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017d4:	f107 0310 	add.w	r3, r7, #16
 80017d8:	4619      	mov	r1, r3
 80017da:	481e      	ldr	r0, [pc, #120]	; (8001854 <MX_GPIO_Init+0x1ac>)
 80017dc:	f001 fd02 	bl	80031e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = SR3TRIG_Pin|SR1TRIG_Pin;
 80017e0:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80017e4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017e6:	2301      	movs	r3, #1
 80017e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ea:	2300      	movs	r3, #0
 80017ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017ee:	2302      	movs	r3, #2
 80017f0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017f2:	f107 0310 	add.w	r3, r7, #16
 80017f6:	4619      	mov	r1, r3
 80017f8:	4816      	ldr	r0, [pc, #88]	; (8001854 <MX_GPIO_Init+0x1ac>)
 80017fa:	f001 fcf3 	bl	80031e4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 1, 0);
 80017fe:	2200      	movs	r2, #0
 8001800:	2101      	movs	r1, #1
 8001802:	2006      	movs	r0, #6
 8001804:	f001 fcb7 	bl	8003176 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001808:	2006      	movs	r0, #6
 800180a:	f001 fcd0 	bl	80031ae <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 1, 0);
 800180e:	2200      	movs	r2, #0
 8001810:	2101      	movs	r1, #1
 8001812:	2007      	movs	r0, #7
 8001814:	f001 fcaf 	bl	8003176 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001818:	2007      	movs	r0, #7
 800181a:	f001 fcc8 	bl	80031ae <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 1, 0);
 800181e:	2200      	movs	r2, #0
 8001820:	2101      	movs	r1, #1
 8001822:	2008      	movs	r0, #8
 8001824:	f001 fca7 	bl	8003176 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8001828:	2008      	movs	r0, #8
 800182a:	f001 fcc0 	bl	80031ae <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 1, 0);
 800182e:	2200      	movs	r2, #0
 8001830:	2101      	movs	r1, #1
 8001832:	2009      	movs	r0, #9
 8001834:	f001 fc9f 	bl	8003176 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8001838:	2009      	movs	r0, #9
 800183a:	f001 fcb8 	bl	80031ae <HAL_NVIC_EnableIRQ>

}
 800183e:	bf00      	nop
 8001840:	3720      	adds	r7, #32
 8001842:	46bd      	mov	sp, r7
 8001844:	bd80      	pop	{r7, pc}
 8001846:	bf00      	nop
 8001848:	40021000 	.word	0x40021000
 800184c:	40011000 	.word	0x40011000
 8001850:	40010800 	.word	0x40010800
 8001854:	40010c00 	.word	0x40010c00
 8001858:	10110000 	.word	0x10110000

0800185c <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001860:	4b12      	ldr	r3, [pc, #72]	; (80018ac <MX_I2C2_Init+0x50>)
 8001862:	4a13      	ldr	r2, [pc, #76]	; (80018b0 <MX_I2C2_Init+0x54>)
 8001864:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 8001866:	4b11      	ldr	r3, [pc, #68]	; (80018ac <MX_I2C2_Init+0x50>)
 8001868:	4a12      	ldr	r2, [pc, #72]	; (80018b4 <MX_I2C2_Init+0x58>)
 800186a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800186c:	4b0f      	ldr	r3, [pc, #60]	; (80018ac <MX_I2C2_Init+0x50>)
 800186e:	2200      	movs	r2, #0
 8001870:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001872:	4b0e      	ldr	r3, [pc, #56]	; (80018ac <MX_I2C2_Init+0x50>)
 8001874:	2200      	movs	r2, #0
 8001876:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001878:	4b0c      	ldr	r3, [pc, #48]	; (80018ac <MX_I2C2_Init+0x50>)
 800187a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800187e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001880:	4b0a      	ldr	r3, [pc, #40]	; (80018ac <MX_I2C2_Init+0x50>)
 8001882:	2200      	movs	r2, #0
 8001884:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001886:	4b09      	ldr	r3, [pc, #36]	; (80018ac <MX_I2C2_Init+0x50>)
 8001888:	2200      	movs	r2, #0
 800188a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800188c:	4b07      	ldr	r3, [pc, #28]	; (80018ac <MX_I2C2_Init+0x50>)
 800188e:	2200      	movs	r2, #0
 8001890:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001892:	4b06      	ldr	r3, [pc, #24]	; (80018ac <MX_I2C2_Init+0x50>)
 8001894:	2200      	movs	r2, #0
 8001896:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001898:	4804      	ldr	r0, [pc, #16]	; (80018ac <MX_I2C2_Init+0x50>)
 800189a:	f001 fe61 	bl	8003560 <HAL_I2C_Init>
 800189e:	4603      	mov	r3, r0
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d001      	beq.n	80018a8 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80018a4:	f000 faab 	bl	8001dfe <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80018a8:	bf00      	nop
 80018aa:	bd80      	pop	{r7, pc}
 80018ac:	20000184 	.word	0x20000184
 80018b0:	40005800 	.word	0x40005800
 80018b4:	00061a80 	.word	0x00061a80

080018b8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b088      	sub	sp, #32
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018c0:	f107 0310 	add.w	r3, r7, #16
 80018c4:	2200      	movs	r2, #0
 80018c6:	601a      	str	r2, [r3, #0]
 80018c8:	605a      	str	r2, [r3, #4]
 80018ca:	609a      	str	r2, [r3, #8]
 80018cc:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C2)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	4a16      	ldr	r2, [pc, #88]	; (800192c <HAL_I2C_MspInit+0x74>)
 80018d4:	4293      	cmp	r3, r2
 80018d6:	d124      	bne.n	8001922 <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018d8:	4b15      	ldr	r3, [pc, #84]	; (8001930 <HAL_I2C_MspInit+0x78>)
 80018da:	699b      	ldr	r3, [r3, #24]
 80018dc:	4a14      	ldr	r2, [pc, #80]	; (8001930 <HAL_I2C_MspInit+0x78>)
 80018de:	f043 0308 	orr.w	r3, r3, #8
 80018e2:	6193      	str	r3, [r2, #24]
 80018e4:	4b12      	ldr	r3, [pc, #72]	; (8001930 <HAL_I2C_MspInit+0x78>)
 80018e6:	699b      	ldr	r3, [r3, #24]
 80018e8:	f003 0308 	and.w	r3, r3, #8
 80018ec:	60fb      	str	r3, [r7, #12]
 80018ee:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80018f0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80018f4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80018f6:	2312      	movs	r3, #18
 80018f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80018fa:	2303      	movs	r3, #3
 80018fc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018fe:	f107 0310 	add.w	r3, r7, #16
 8001902:	4619      	mov	r1, r3
 8001904:	480b      	ldr	r0, [pc, #44]	; (8001934 <HAL_I2C_MspInit+0x7c>)
 8001906:	f001 fc6d 	bl	80031e4 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800190a:	4b09      	ldr	r3, [pc, #36]	; (8001930 <HAL_I2C_MspInit+0x78>)
 800190c:	69db      	ldr	r3, [r3, #28]
 800190e:	4a08      	ldr	r2, [pc, #32]	; (8001930 <HAL_I2C_MspInit+0x78>)
 8001910:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001914:	61d3      	str	r3, [r2, #28]
 8001916:	4b06      	ldr	r3, [pc, #24]	; (8001930 <HAL_I2C_MspInit+0x78>)
 8001918:	69db      	ldr	r3, [r3, #28]
 800191a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800191e:	60bb      	str	r3, [r7, #8]
 8001920:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8001922:	bf00      	nop
 8001924:	3720      	adds	r7, #32
 8001926:	46bd      	mov	sp, r7
 8001928:	bd80      	pop	{r7, pc}
 800192a:	bf00      	nop
 800192c:	40005800 	.word	0x40005800
 8001930:	40021000 	.word	0x40021000
 8001934:	40010c00 	.word	0x40010c00

08001938 <CollibrateMPU6050>:

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */

void CollibrateMPU6050(int samples) {
 8001938:	b590      	push	{r4, r7, lr}
 800193a:	b089      	sub	sp, #36	; 0x24
 800193c:	af04      	add	r7, sp, #16
 800193e:	6078      	str	r0, [r7, #4]
	for (int RateCalibrationNumber=0; RateCalibrationNumber < samples; RateCalibrationNumber++) {
 8001940:	2300      	movs	r3, #0
 8001942:	60fb      	str	r3, [r7, #12]
 8001944:	e052      	b.n	80019ec <CollibrateMPU6050+0xb4>
	    MPU6050_Read_All(&hi2c2, &mpu6050, 0, 0, 0);
 8001946:	f04f 0200 	mov.w	r2, #0
 800194a:	f04f 0300 	mov.w	r3, #0
 800194e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001952:	f04f 0200 	mov.w	r2, #0
 8001956:	f04f 0300 	mov.w	r3, #0
 800195a:	e9cd 2300 	strd	r2, r3, [sp]
 800195e:	f04f 0200 	mov.w	r2, #0
 8001962:	f04f 0300 	mov.w	r3, #0
 8001966:	493c      	ldr	r1, [pc, #240]	; (8001a58 <CollibrateMPU6050+0x120>)
 8001968:	483c      	ldr	r0, [pc, #240]	; (8001a5c <CollibrateMPU6050+0x124>)
 800196a:	f000 fab5 	bl	8001ed8 <MPU6050_Read_All>
	    RateCalibrationRoll+=mpu6050.Gx;
 800196e:	4b3c      	ldr	r3, [pc, #240]	; (8001a60 <CollibrateMPU6050+0x128>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	4618      	mov	r0, r3
 8001974:	f7fe fd30 	bl	80003d8 <__aeabi_f2d>
 8001978:	4b37      	ldr	r3, [pc, #220]	; (8001a58 <CollibrateMPU6050+0x120>)
 800197a:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 800197e:	f7fe fbcd 	bl	800011c <__adddf3>
 8001982:	4602      	mov	r2, r0
 8001984:	460b      	mov	r3, r1
 8001986:	4610      	mov	r0, r2
 8001988:	4619      	mov	r1, r3
 800198a:	f7ff f875 	bl	8000a78 <__aeabi_d2f>
 800198e:	4603      	mov	r3, r0
 8001990:	4a33      	ldr	r2, [pc, #204]	; (8001a60 <CollibrateMPU6050+0x128>)
 8001992:	6013      	str	r3, [r2, #0]
	    RateCalibrationPitch+=mpu6050.Gy;
 8001994:	4b33      	ldr	r3, [pc, #204]	; (8001a64 <CollibrateMPU6050+0x12c>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	4618      	mov	r0, r3
 800199a:	f7fe fd1d 	bl	80003d8 <__aeabi_f2d>
 800199e:	4b2e      	ldr	r3, [pc, #184]	; (8001a58 <CollibrateMPU6050+0x120>)
 80019a0:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 80019a4:	f7fe fbba 	bl	800011c <__adddf3>
 80019a8:	4602      	mov	r2, r0
 80019aa:	460b      	mov	r3, r1
 80019ac:	4610      	mov	r0, r2
 80019ae:	4619      	mov	r1, r3
 80019b0:	f7ff f862 	bl	8000a78 <__aeabi_d2f>
 80019b4:	4603      	mov	r3, r0
 80019b6:	4a2b      	ldr	r2, [pc, #172]	; (8001a64 <CollibrateMPU6050+0x12c>)
 80019b8:	6013      	str	r3, [r2, #0]
	    RateCalibrationYaw+=mpu6050.Gz;
 80019ba:	4b2b      	ldr	r3, [pc, #172]	; (8001a68 <CollibrateMPU6050+0x130>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	4618      	mov	r0, r3
 80019c0:	f7fe fd0a 	bl	80003d8 <__aeabi_f2d>
 80019c4:	4b24      	ldr	r3, [pc, #144]	; (8001a58 <CollibrateMPU6050+0x120>)
 80019c6:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 80019ca:	f7fe fba7 	bl	800011c <__adddf3>
 80019ce:	4602      	mov	r2, r0
 80019d0:	460b      	mov	r3, r1
 80019d2:	4610      	mov	r0, r2
 80019d4:	4619      	mov	r1, r3
 80019d6:	f7ff f84f 	bl	8000a78 <__aeabi_d2f>
 80019da:	4603      	mov	r3, r0
 80019dc:	4a22      	ldr	r2, [pc, #136]	; (8001a68 <CollibrateMPU6050+0x130>)
 80019de:	6013      	str	r3, [r2, #0]
	    HAL_Delay(1);
 80019e0:	2001      	movs	r0, #1
 80019e2:	f001 facd 	bl	8002f80 <HAL_Delay>
	for (int RateCalibrationNumber=0; RateCalibrationNumber < samples; RateCalibrationNumber++) {
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	3301      	adds	r3, #1
 80019ea:	60fb      	str	r3, [r7, #12]
 80019ec:	68fa      	ldr	r2, [r7, #12]
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	429a      	cmp	r2, r3
 80019f2:	dba8      	blt.n	8001946 <CollibrateMPU6050+0xe>
	}
	RateCalibrationRoll/=samples;
 80019f4:	4b1a      	ldr	r3, [pc, #104]	; (8001a60 <CollibrateMPU6050+0x128>)
 80019f6:	681c      	ldr	r4, [r3, #0]
 80019f8:	6878      	ldr	r0, [r7, #4]
 80019fa:	f7ff f947 	bl	8000c8c <__aeabi_i2f>
 80019fe:	4603      	mov	r3, r0
 8001a00:	4619      	mov	r1, r3
 8001a02:	4620      	mov	r0, r4
 8001a04:	f7ff fa4a 	bl	8000e9c <__aeabi_fdiv>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	461a      	mov	r2, r3
 8001a0c:	4b14      	ldr	r3, [pc, #80]	; (8001a60 <CollibrateMPU6050+0x128>)
 8001a0e:	601a      	str	r2, [r3, #0]
	RateCalibrationPitch/=samples;
 8001a10:	4b14      	ldr	r3, [pc, #80]	; (8001a64 <CollibrateMPU6050+0x12c>)
 8001a12:	681c      	ldr	r4, [r3, #0]
 8001a14:	6878      	ldr	r0, [r7, #4]
 8001a16:	f7ff f939 	bl	8000c8c <__aeabi_i2f>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	4619      	mov	r1, r3
 8001a1e:	4620      	mov	r0, r4
 8001a20:	f7ff fa3c 	bl	8000e9c <__aeabi_fdiv>
 8001a24:	4603      	mov	r3, r0
 8001a26:	461a      	mov	r2, r3
 8001a28:	4b0e      	ldr	r3, [pc, #56]	; (8001a64 <CollibrateMPU6050+0x12c>)
 8001a2a:	601a      	str	r2, [r3, #0]
	RateCalibrationYaw/=samples;
 8001a2c:	4b0e      	ldr	r3, [pc, #56]	; (8001a68 <CollibrateMPU6050+0x130>)
 8001a2e:	681c      	ldr	r4, [r3, #0]
 8001a30:	6878      	ldr	r0, [r7, #4]
 8001a32:	f7ff f92b 	bl	8000c8c <__aeabi_i2f>
 8001a36:	4603      	mov	r3, r0
 8001a38:	4619      	mov	r1, r3
 8001a3a:	4620      	mov	r0, r4
 8001a3c:	f7ff fa2e 	bl	8000e9c <__aeabi_fdiv>
 8001a40:	4603      	mov	r3, r0
 8001a42:	461a      	mov	r2, r3
 8001a44:	4b08      	ldr	r3, [pc, #32]	; (8001a68 <CollibrateMPU6050+0x130>)
 8001a46:	601a      	str	r2, [r3, #0]

	MPUCollibrated = 1;
 8001a48:	4b08      	ldr	r3, [pc, #32]	; (8001a6c <CollibrateMPU6050+0x134>)
 8001a4a:	2201      	movs	r2, #1
 8001a4c:	601a      	str	r2, [r3, #0]
}
 8001a4e:	bf00      	nop
 8001a50:	3714      	adds	r7, #20
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd90      	pop	{r4, r7, pc}
 8001a56:	bf00      	nop
 8001a58:	200001f0 	.word	0x200001f0
 8001a5c:	20000184 	.word	0x20000184
 8001a60:	20000268 	.word	0x20000268
 8001a64:	2000026c 	.word	0x2000026c
 8001a68:	20000270 	.word	0x20000270
 8001a6c:	20000298 	.word	0x20000298

08001a70 <SetupMPU6050>:

void SetupMPU6050(int cSamples) {
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b082      	sub	sp, #8
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
	  while (MPU6050_Init(&hi2c2) == 1);
 8001a78:	bf00      	nop
 8001a7a:	4808      	ldr	r0, [pc, #32]	; (8001a9c <SetupMPU6050+0x2c>)
 8001a7c:	f000 f9c5 	bl	8001e0a <MPU6050_Init>
 8001a80:	4603      	mov	r3, r0
 8001a82:	2b01      	cmp	r3, #1
 8001a84:	d0f9      	beq.n	8001a7a <SetupMPU6050+0xa>

	  CollibrateMPU6050(cSamples);
 8001a86:	6878      	ldr	r0, [r7, #4]
 8001a88:	f7ff ff56 	bl	8001938 <CollibrateMPU6050>

	  HAL_Delay(500);
 8001a8c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001a90:	f001 fa76 	bl	8002f80 <HAL_Delay>
}
 8001a94:	bf00      	nop
 8001a96:	3708      	adds	r7, #8
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bd80      	pop	{r7, pc}
 8001a9c:	20000184 	.word	0x20000184

08001aa0 <ReadMPU6050>:

void ReadMPU6050() {
 8001aa0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001aa4:	b084      	sub	sp, #16
 8001aa6:	af04      	add	r7, sp, #16
	MPU6050_Read_All(&hi2c2, &mpu6050, RateCalibrationRoll, RateCalibrationPitch, RateCalibrationYaw);
 8001aa8:	4b3c      	ldr	r3, [pc, #240]	; (8001b9c <ReadMPU6050+0xfc>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4618      	mov	r0, r3
 8001aae:	f7fe fc93 	bl	80003d8 <__aeabi_f2d>
 8001ab2:	4680      	mov	r8, r0
 8001ab4:	4689      	mov	r9, r1
 8001ab6:	4b3a      	ldr	r3, [pc, #232]	; (8001ba0 <ReadMPU6050+0x100>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	4618      	mov	r0, r3
 8001abc:	f7fe fc8c 	bl	80003d8 <__aeabi_f2d>
 8001ac0:	4604      	mov	r4, r0
 8001ac2:	460d      	mov	r5, r1
 8001ac4:	4b37      	ldr	r3, [pc, #220]	; (8001ba4 <ReadMPU6050+0x104>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	4618      	mov	r0, r3
 8001aca:	f7fe fc85 	bl	80003d8 <__aeabi_f2d>
 8001ace:	4602      	mov	r2, r0
 8001ad0:	460b      	mov	r3, r1
 8001ad2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001ad6:	e9cd 4500 	strd	r4, r5, [sp]
 8001ada:	4642      	mov	r2, r8
 8001adc:	464b      	mov	r3, r9
 8001ade:	4932      	ldr	r1, [pc, #200]	; (8001ba8 <ReadMPU6050+0x108>)
 8001ae0:	4832      	ldr	r0, [pc, #200]	; (8001bac <ReadMPU6050+0x10c>)
 8001ae2:	f000 f9f9 	bl	8001ed8 <MPU6050_Read_All>

	sx += mpu6050.Gx;
 8001ae6:	4b32      	ldr	r3, [pc, #200]	; (8001bb0 <ReadMPU6050+0x110>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	4618      	mov	r0, r3
 8001aec:	f7fe fc74 	bl	80003d8 <__aeabi_f2d>
 8001af0:	4b2d      	ldr	r3, [pc, #180]	; (8001ba8 <ReadMPU6050+0x108>)
 8001af2:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8001af6:	f7fe fb11 	bl	800011c <__adddf3>
 8001afa:	4602      	mov	r2, r0
 8001afc:	460b      	mov	r3, r1
 8001afe:	4610      	mov	r0, r2
 8001b00:	4619      	mov	r1, r3
 8001b02:	f7fe ffb9 	bl	8000a78 <__aeabi_d2f>
 8001b06:	4603      	mov	r3, r0
 8001b08:	4a29      	ldr	r2, [pc, #164]	; (8001bb0 <ReadMPU6050+0x110>)
 8001b0a:	6013      	str	r3, [r2, #0]
	sy += mpu6050.Gy;
 8001b0c:	4b29      	ldr	r3, [pc, #164]	; (8001bb4 <ReadMPU6050+0x114>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4618      	mov	r0, r3
 8001b12:	f7fe fc61 	bl	80003d8 <__aeabi_f2d>
 8001b16:	4b24      	ldr	r3, [pc, #144]	; (8001ba8 <ReadMPU6050+0x108>)
 8001b18:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8001b1c:	f7fe fafe 	bl	800011c <__adddf3>
 8001b20:	4602      	mov	r2, r0
 8001b22:	460b      	mov	r3, r1
 8001b24:	4610      	mov	r0, r2
 8001b26:	4619      	mov	r1, r3
 8001b28:	f7fe ffa6 	bl	8000a78 <__aeabi_d2f>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	4a21      	ldr	r2, [pc, #132]	; (8001bb4 <ReadMPU6050+0x114>)
 8001b30:	6013      	str	r3, [r2, #0]
	sz += mpu6050.Gz;
 8001b32:	4b21      	ldr	r3, [pc, #132]	; (8001bb8 <ReadMPU6050+0x118>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	4618      	mov	r0, r3
 8001b38:	f7fe fc4e 	bl	80003d8 <__aeabi_f2d>
 8001b3c:	4b1a      	ldr	r3, [pc, #104]	; (8001ba8 <ReadMPU6050+0x108>)
 8001b3e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8001b42:	f7fe faeb 	bl	800011c <__adddf3>
 8001b46:	4602      	mov	r2, r0
 8001b48:	460b      	mov	r3, r1
 8001b4a:	4610      	mov	r0, r2
 8001b4c:	4619      	mov	r1, r3
 8001b4e:	f7fe ff93 	bl	8000a78 <__aeabi_d2f>
 8001b52:	4603      	mov	r3, r0
 8001b54:	4a18      	ldr	r2, [pc, #96]	; (8001bb8 <ReadMPU6050+0x118>)
 8001b56:	6013      	str	r3, [r2, #0]

	Gy.x = sx / 2000;
 8001b58:	4b15      	ldr	r3, [pc, #84]	; (8001bb0 <ReadMPU6050+0x110>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4917      	ldr	r1, [pc, #92]	; (8001bbc <ReadMPU6050+0x11c>)
 8001b5e:	4618      	mov	r0, r3
 8001b60:	f7ff f99c 	bl	8000e9c <__aeabi_fdiv>
 8001b64:	4603      	mov	r3, r0
 8001b66:	461a      	mov	r2, r3
 8001b68:	4b15      	ldr	r3, [pc, #84]	; (8001bc0 <ReadMPU6050+0x120>)
 8001b6a:	601a      	str	r2, [r3, #0]
	Gy.y = sy / 2000;
 8001b6c:	4b11      	ldr	r3, [pc, #68]	; (8001bb4 <ReadMPU6050+0x114>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	4912      	ldr	r1, [pc, #72]	; (8001bbc <ReadMPU6050+0x11c>)
 8001b72:	4618      	mov	r0, r3
 8001b74:	f7ff f992 	bl	8000e9c <__aeabi_fdiv>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	461a      	mov	r2, r3
 8001b7c:	4b10      	ldr	r3, [pc, #64]	; (8001bc0 <ReadMPU6050+0x120>)
 8001b7e:	605a      	str	r2, [r3, #4]
	Gy.z = sz / 2000;
 8001b80:	4b0d      	ldr	r3, [pc, #52]	; (8001bb8 <ReadMPU6050+0x118>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	490d      	ldr	r1, [pc, #52]	; (8001bbc <ReadMPU6050+0x11c>)
 8001b86:	4618      	mov	r0, r3
 8001b88:	f7ff f988 	bl	8000e9c <__aeabi_fdiv>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	461a      	mov	r2, r3
 8001b90:	4b0b      	ldr	r3, [pc, #44]	; (8001bc0 <ReadMPU6050+0x120>)
 8001b92:	609a      	str	r2, [r3, #8]
}
 8001b94:	bf00      	nop
 8001b96:	46bd      	mov	sp, r7
 8001b98:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001b9c:	20000268 	.word	0x20000268
 8001ba0:	2000026c 	.word	0x2000026c
 8001ba4:	20000270 	.word	0x20000270
 8001ba8:	200001f0 	.word	0x200001f0
 8001bac:	20000184 	.word	0x20000184
 8001bb0:	20000274 	.word	0x20000274
 8001bb4:	20000278 	.word	0x20000278
 8001bb8:	2000027c 	.word	0x2000027c
 8001bbc:	44fa0000 	.word	0x44fa0000
 8001bc0:	20000280 	.word	0x20000280

08001bc4 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b082      	sub	sp, #8
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
	if(timcounter % 200 == 0 && pixyChecked) {
 8001bcc:	4b14      	ldr	r3, [pc, #80]	; (8001c20 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8001bce:	681a      	ldr	r2, [r3, #0]
 8001bd0:	4b14      	ldr	r3, [pc, #80]	; (8001c24 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8001bd2:	fba3 1302 	umull	r1, r3, r3, r2
 8001bd6:	099b      	lsrs	r3, r3, #6
 8001bd8:	21c8      	movs	r1, #200	; 0xc8
 8001bda:	fb01 f303 	mul.w	r3, r1, r3
 8001bde:	1ad3      	subs	r3, r2, r3
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d107      	bne.n	8001bf4 <HAL_TIM_PeriodElapsedCallback+0x30>
 8001be4:	4b10      	ldr	r3, [pc, #64]	; (8001c28 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d003      	beq.n	8001bf4 <HAL_TIM_PeriodElapsedCallback+0x30>
		getBallPosition(&ballTransform, &ballInView);
 8001bec:	490f      	ldr	r1, [pc, #60]	; (8001c2c <HAL_TIM_PeriodElapsedCallback+0x68>)
 8001bee:	4810      	ldr	r0, [pc, #64]	; (8001c30 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8001bf0:	f000 fcf0 	bl	80025d4 <getBallPosition>
	}

	if(timcounter % 2 == 0 && MPUCollibrated) {
 8001bf4:	4b0a      	ldr	r3, [pc, #40]	; (8001c20 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f003 0301 	and.w	r3, r3, #1
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d105      	bne.n	8001c0c <HAL_TIM_PeriodElapsedCallback+0x48>
 8001c00:	4b0c      	ldr	r3, [pc, #48]	; (8001c34 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d001      	beq.n	8001c0c <HAL_TIM_PeriodElapsedCallback+0x48>
		ReadMPU6050();
 8001c08:	f7ff ff4a 	bl	8001aa0 <ReadMPU6050>
	}

	timcounter++;
 8001c0c:	4b04      	ldr	r3, [pc, #16]	; (8001c20 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	3301      	adds	r3, #1
 8001c12:	4a03      	ldr	r2, [pc, #12]	; (8001c20 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8001c14:	6013      	str	r3, [r2, #0]
}
 8001c16:	bf00      	nop
 8001c18:	3708      	adds	r7, #8
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	bf00      	nop
 8001c20:	2000029c 	.word	0x2000029c
 8001c24:	51eb851f 	.word	0x51eb851f
 8001c28:	200001ec 	.word	0x200001ec
 8001c2c:	200001e8 	.word	0x200001e8
 8001c30:	200001d8 	.word	0x200001d8
 8001c34:	20000298 	.word	0x20000298

08001c38 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b082      	sub	sp, #8
 8001c3c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
   HAL_Init();
 8001c3e:	f001 f93d 	bl	8002ebc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001c42:	f000 f89b 	bl	8001d7c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001c46:	f7ff fd2f 	bl	80016a8 <MX_GPIO_Init>
  MX_I2C2_Init();
 8001c4a:	f7ff fe07 	bl	800185c <MX_I2C2_Init>
  MX_TIM2_Init();
 8001c4e:	f000 ff4d 	bl	8002aec <MX_TIM2_Init>
  MX_TIM1_Init();
 8001c52:	f000 fe93 	bl	800297c <MX_TIM1_Init>
  MX_TIM3_Init();
 8001c56:	f000 ffbd 	bl	8002bd4 <MX_TIM3_Init>
  MX_SPI1_Init();
 8001c5a:	f000 fd75 	bl	8002748 <MX_SPI1_Init>
  MX_TIM4_Init();
 8001c5e:	f001 f807 	bl	8002c70 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start(&htim1);
 8001c62:	4837      	ldr	r0, [pc, #220]	; (8001d40 <main+0x108>)
 8001c64:	f003 fe3e 	bl	80058e4 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim2);
 8001c68:	4836      	ldr	r0, [pc, #216]	; (8001d44 <main+0x10c>)
 8001c6a:	f003 fe3b 	bl	80058e4 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim3);
 8001c6e:	4836      	ldr	r0, [pc, #216]	; (8001d48 <main+0x110>)
 8001c70:	f003 fe38 	bl	80058e4 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start_IT(&htim4);
 8001c74:	4835      	ldr	r0, [pc, #212]	; (8001d4c <main+0x114>)
 8001c76:	f003 fe7f 	bl	8005978 <HAL_TIM_Base_Start_IT>

  // setting up PWM
  TIM1->CCR2 = 0;
 8001c7a:	4b35      	ldr	r3, [pc, #212]	; (8001d50 <main+0x118>)
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	639a      	str	r2, [r3, #56]	; 0x38
  TIM1->CCR3 = 0;
 8001c80:	4b33      	ldr	r3, [pc, #204]	; (8001d50 <main+0x118>)
 8001c82:	2200      	movs	r2, #0
 8001c84:	63da      	str	r2, [r3, #60]	; 0x3c
  TIM1->CCR4 = 0;
 8001c86:	4b32      	ldr	r3, [pc, #200]	; (8001d50 <main+0x118>)
 8001c88:	2200      	movs	r2, #0
 8001c8a:	641a      	str	r2, [r3, #64]	; 0x40
  TIM2->CCR4 = 0;
 8001c8c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001c90:	2200      	movs	r2, #0
 8001c92:	641a      	str	r2, [r3, #64]	; 0x40

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8001c94:	2104      	movs	r1, #4
 8001c96:	482a      	ldr	r0, [pc, #168]	; (8001d40 <main+0x108>)
 8001c98:	f003 ff18 	bl	8005acc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8001c9c:	2108      	movs	r1, #8
 8001c9e:	4828      	ldr	r0, [pc, #160]	; (8001d40 <main+0x108>)
 8001ca0:	f003 ff14 	bl	8005acc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8001ca4:	210c      	movs	r1, #12
 8001ca6:	4826      	ldr	r0, [pc, #152]	; (8001d40 <main+0x108>)
 8001ca8:	f003 ff10 	bl	8005acc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8001cac:	210c      	movs	r1, #12
 8001cae:	4825      	ldr	r0, [pc, #148]	; (8001d44 <main+0x10c>)
 8001cb0:	f003 ff0c 	bl	8005acc <HAL_TIM_PWM_Start>

  SetupMPU6050(750);
 8001cb4:	f240 20ee 	movw	r0, #750	; 0x2ee
 8001cb8:	f7ff feda 	bl	8001a70 <SetupMPU6050>

  SetupPixy(&pixyChecked);
 8001cbc:	4825      	ldr	r0, [pc, #148]	; (8001d54 <main+0x11c>)
 8001cbe:	f000 fc55 	bl	800256c <SetupPixy>

  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8001cc2:	2201      	movs	r2, #1
 8001cc4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001cc8:	4823      	ldr	r0, [pc, #140]	; (8001d58 <main+0x120>)
 8001cca:	f001 fc0f 	bl	80034ec <HAL_GPIO_WritePin>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  if (abs(Gy.z) > 2) {
 8001cce:	4b23      	ldr	r3, [pc, #140]	; (8001d5c <main+0x124>)
 8001cd0:	689b      	ldr	r3, [r3, #8]
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	f7ff f97e 	bl	8000fd4 <__aeabi_f2iz>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	bfb8      	it	lt
 8001cde:	425b      	neglt	r3, r3
 8001ce0:	2b02      	cmp	r3, #2
 8001ce2:	dd0b      	ble.n	8001cfc <main+0xc4>
		  RotateToZero(Gy.z, &pve, &Motors, &MotorDefs);
 8001ce4:	4b1d      	ldr	r3, [pc, #116]	; (8001d5c <main+0x124>)
 8001ce6:	689b      	ldr	r3, [r3, #8]
 8001ce8:	4618      	mov	r0, r3
 8001cea:	f7fe fb75 	bl	80003d8 <__aeabi_f2d>
 8001cee:	4b1c      	ldr	r3, [pc, #112]	; (8001d60 <main+0x128>)
 8001cf0:	9300      	str	r3, [sp, #0]
 8001cf2:	4b1c      	ldr	r3, [pc, #112]	; (8001d64 <main+0x12c>)
 8001cf4:	4a1c      	ldr	r2, [pc, #112]	; (8001d68 <main+0x130>)
 8001cf6:	f7ff fa4f 	bl	8001198 <RotateToZero>
 8001cfa:	e7e8      	b.n	8001cce <main+0x96>
	  }
	  else {
		  setPWM(&Motor_1, Motors.pwm1, Motors.e1, &Motors);
 8001cfc:	4b19      	ldr	r3, [pc, #100]	; (8001d64 <main+0x12c>)
 8001cfe:	6819      	ldr	r1, [r3, #0]
 8001d00:	4b18      	ldr	r3, [pc, #96]	; (8001d64 <main+0x12c>)
 8001d02:	685a      	ldr	r2, [r3, #4]
 8001d04:	4b17      	ldr	r3, [pc, #92]	; (8001d64 <main+0x12c>)
 8001d06:	4819      	ldr	r0, [pc, #100]	; (8001d6c <main+0x134>)
 8001d08:	f7ff f9aa 	bl	8001060 <setPWM>
		  setPWM(&Motor_2, Motors.pwm2, Motors.e2, &Motors);
 8001d0c:	4b15      	ldr	r3, [pc, #84]	; (8001d64 <main+0x12c>)
 8001d0e:	6899      	ldr	r1, [r3, #8]
 8001d10:	4b14      	ldr	r3, [pc, #80]	; (8001d64 <main+0x12c>)
 8001d12:	68da      	ldr	r2, [r3, #12]
 8001d14:	4b13      	ldr	r3, [pc, #76]	; (8001d64 <main+0x12c>)
 8001d16:	4816      	ldr	r0, [pc, #88]	; (8001d70 <main+0x138>)
 8001d18:	f7ff f9a2 	bl	8001060 <setPWM>
		  setPWM(&Motor_3, Motors.pwm3, Motors.e3, &Motors);
 8001d1c:	4b11      	ldr	r3, [pc, #68]	; (8001d64 <main+0x12c>)
 8001d1e:	6919      	ldr	r1, [r3, #16]
 8001d20:	4b10      	ldr	r3, [pc, #64]	; (8001d64 <main+0x12c>)
 8001d22:	695a      	ldr	r2, [r3, #20]
 8001d24:	4b0f      	ldr	r3, [pc, #60]	; (8001d64 <main+0x12c>)
 8001d26:	4813      	ldr	r0, [pc, #76]	; (8001d74 <main+0x13c>)
 8001d28:	f7ff f99a 	bl	8001060 <setPWM>
		  setPWM(&Motor_4, Motors.pwm4, Motors.e4, &Motors);
 8001d2c:	4b0d      	ldr	r3, [pc, #52]	; (8001d64 <main+0x12c>)
 8001d2e:	6999      	ldr	r1, [r3, #24]
 8001d30:	4b0c      	ldr	r3, [pc, #48]	; (8001d64 <main+0x12c>)
 8001d32:	69da      	ldr	r2, [r3, #28]
 8001d34:	4b0b      	ldr	r3, [pc, #44]	; (8001d64 <main+0x12c>)
 8001d36:	4810      	ldr	r0, [pc, #64]	; (8001d78 <main+0x140>)
 8001d38:	f7ff f992 	bl	8001060 <setPWM>
	  if (abs(Gy.z) > 2) {
 8001d3c:	e7c7      	b.n	8001cce <main+0x96>
 8001d3e:	bf00      	nop
 8001d40:	2000031c 	.word	0x2000031c
 8001d44:	20000364 	.word	0x20000364
 8001d48:	200003ac 	.word	0x200003ac
 8001d4c:	200003f4 	.word	0x200003f4
 8001d50:	40012c00 	.word	0x40012c00
 8001d54:	200001ec 	.word	0x200001ec
 8001d58:	40011000 	.word	0x40011000
 8001d5c:	20000280 	.word	0x20000280
 8001d60:	20000050 	.word	0x20000050
 8001d64:	20000000 	.word	0x20000000
 8001d68:	20000290 	.word	0x20000290
 8001d6c:	20000020 	.word	0x20000020
 8001d70:	2000002c 	.word	0x2000002c
 8001d74:	20000038 	.word	0x20000038
 8001d78:	20000044 	.word	0x20000044

08001d7c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b090      	sub	sp, #64	; 0x40
 8001d80:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d82:	f107 0318 	add.w	r3, r7, #24
 8001d86:	2228      	movs	r2, #40	; 0x28
 8001d88:	2100      	movs	r1, #0
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	f004 fd53 	bl	8006836 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d90:	1d3b      	adds	r3, r7, #4
 8001d92:	2200      	movs	r2, #0
 8001d94:	601a      	str	r2, [r3, #0]
 8001d96:	605a      	str	r2, [r3, #4]
 8001d98:	609a      	str	r2, [r3, #8]
 8001d9a:	60da      	str	r2, [r3, #12]
 8001d9c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001d9e:	2302      	movs	r3, #2
 8001da0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001da2:	2301      	movs	r3, #1
 8001da4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001da6:	2310      	movs	r3, #16
 8001da8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001daa:	2302      	movs	r3, #2
 8001dac:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8001dae:	2300      	movs	r3, #0
 8001db0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8001db2:	f44f 1320 	mov.w	r3, #2621440	; 0x280000
 8001db6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001db8:	f107 0318 	add.w	r3, r7, #24
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	f002 fbcf 	bl	8004560 <HAL_RCC_OscConfig>
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d001      	beq.n	8001dcc <SystemClock_Config+0x50>
  {
    Error_Handler();
 8001dc8:	f000 f819 	bl	8001dfe <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001dcc:	230f      	movs	r3, #15
 8001dce:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001dd0:	2302      	movs	r3, #2
 8001dd2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001dd8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001ddc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001dde:	2300      	movs	r3, #0
 8001de0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001de2:	1d3b      	adds	r3, r7, #4
 8001de4:	2101      	movs	r1, #1
 8001de6:	4618      	mov	r0, r3
 8001de8:	f002 fe3c 	bl	8004a64 <HAL_RCC_ClockConfig>
 8001dec:	4603      	mov	r3, r0
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d001      	beq.n	8001df6 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8001df2:	f000 f804 	bl	8001dfe <Error_Handler>
  }
}
 8001df6:	bf00      	nop
 8001df8:	3740      	adds	r7, #64	; 0x40
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}

08001dfe <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001dfe:	b480      	push	{r7}
 8001e00:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e02:	b672      	cpsid	i
}
 8001e04:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001e06:	bf00      	nop
 8001e08:	e7fd      	b.n	8001e06 <Error_Handler+0x8>

08001e0a <MPU6050_Init>:
    .Q_bias = 0.003f,
    .R_measure = 0.03f,
};

uint8_t MPU6050_Init(I2C_HandleTypeDef *I2Cx)
{
 8001e0a:	b580      	push	{r7, lr}
 8001e0c:	b088      	sub	sp, #32
 8001e0e:	af04      	add	r7, sp, #16
 8001e10:	6078      	str	r0, [r7, #4]
    uint8_t check;
    uint8_t Data;

    // check device ID WHO_AM_I

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, i2c_timeout);
 8001e12:	2364      	movs	r3, #100	; 0x64
 8001e14:	9302      	str	r3, [sp, #8]
 8001e16:	2301      	movs	r3, #1
 8001e18:	9301      	str	r3, [sp, #4]
 8001e1a:	f107 030f 	add.w	r3, r7, #15
 8001e1e:	9300      	str	r3, [sp, #0]
 8001e20:	2301      	movs	r3, #1
 8001e22:	2275      	movs	r2, #117	; 0x75
 8001e24:	21d0      	movs	r1, #208	; 0xd0
 8001e26:	6878      	ldr	r0, [r7, #4]
 8001e28:	f001 fdd8 	bl	80039dc <HAL_I2C_Mem_Read>

    if (check == 104) // 0x68 will be returned by the sensor if everything goes well
 8001e2c:	7bfb      	ldrb	r3, [r7, #15]
 8001e2e:	2b68      	cmp	r3, #104	; 0x68
 8001e30:	d14c      	bne.n	8001ecc <MPU6050_Init+0xc2>
    {
        // power management register 0X6B we should write all 0's to wake the sensor up
        Data = 0;
 8001e32:	2300      	movs	r3, #0
 8001e34:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1, i2c_timeout);
 8001e36:	2364      	movs	r3, #100	; 0x64
 8001e38:	9302      	str	r3, [sp, #8]
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	9301      	str	r3, [sp, #4]
 8001e3e:	f107 030e 	add.w	r3, r7, #14
 8001e42:	9300      	str	r3, [sp, #0]
 8001e44:	2301      	movs	r3, #1
 8001e46:	226b      	movs	r2, #107	; 0x6b
 8001e48:	21d0      	movs	r1, #208	; 0xd0
 8001e4a:	6878      	ldr	r0, [r7, #4]
 8001e4c:	f001 fccc 	bl	80037e8 <HAL_I2C_Mem_Write>

        // Set DATA RATE of 1KHz by writing SMPLRT_DIV register
        Data = 0x07;
 8001e50:	2307      	movs	r3, #7
 8001e52:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, i2c_timeout);
 8001e54:	2364      	movs	r3, #100	; 0x64
 8001e56:	9302      	str	r3, [sp, #8]
 8001e58:	2301      	movs	r3, #1
 8001e5a:	9301      	str	r3, [sp, #4]
 8001e5c:	f107 030e 	add.w	r3, r7, #14
 8001e60:	9300      	str	r3, [sp, #0]
 8001e62:	2301      	movs	r3, #1
 8001e64:	2219      	movs	r2, #25
 8001e66:	21d0      	movs	r1, #208	; 0xd0
 8001e68:	6878      	ldr	r0, [r7, #4]
 8001e6a:	f001 fcbd 	bl	80037e8 <HAL_I2C_Mem_Write>

        Data = 0x01;
 8001e6e:	2301      	movs	r3, #1
 8001e70:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, 0x1A, 1, &Data, 1, i2c_timeout);
 8001e72:	2364      	movs	r3, #100	; 0x64
 8001e74:	9302      	str	r3, [sp, #8]
 8001e76:	2301      	movs	r3, #1
 8001e78:	9301      	str	r3, [sp, #4]
 8001e7a:	f107 030e 	add.w	r3, r7, #14
 8001e7e:	9300      	str	r3, [sp, #0]
 8001e80:	2301      	movs	r3, #1
 8001e82:	221a      	movs	r2, #26
 8001e84:	21d0      	movs	r1, #208	; 0xd0
 8001e86:	6878      	ldr	r0, [r7, #4]
 8001e88:	f001 fcae 	bl	80037e8 <HAL_I2C_Mem_Write>

        // Set accelerometer configuration in ACCEL_CONFIG Register
        // XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> � 2g
        Data = 0x0;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 8001e90:	2364      	movs	r3, #100	; 0x64
 8001e92:	9302      	str	r3, [sp, #8]
 8001e94:	2301      	movs	r3, #1
 8001e96:	9301      	str	r3, [sp, #4]
 8001e98:	f107 030e 	add.w	r3, r7, #14
 8001e9c:	9300      	str	r3, [sp, #0]
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	221c      	movs	r2, #28
 8001ea2:	21d0      	movs	r1, #208	; 0xd0
 8001ea4:	6878      	ldr	r0, [r7, #4]
 8001ea6:	f001 fc9f 	bl	80037e8 <HAL_I2C_Mem_Write>

        // Set Gyroscopic configuration in GYRO_CONFIG Register
        // XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> � 250 �/s
        Data = 0x0;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 8001eae:	2364      	movs	r3, #100	; 0x64
 8001eb0:	9302      	str	r3, [sp, #8]
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	9301      	str	r3, [sp, #4]
 8001eb6:	f107 030e 	add.w	r3, r7, #14
 8001eba:	9300      	str	r3, [sp, #0]
 8001ebc:	2301      	movs	r3, #1
 8001ebe:	221b      	movs	r2, #27
 8001ec0:	21d0      	movs	r1, #208	; 0xd0
 8001ec2:	6878      	ldr	r0, [r7, #4]
 8001ec4:	f001 fc90 	bl	80037e8 <HAL_I2C_Mem_Write>
        return 0;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	e000      	b.n	8001ece <MPU6050_Init+0xc4>
    }
    return 1;
 8001ecc:	2301      	movs	r3, #1
}
 8001ece:	4618      	mov	r0, r3
 8001ed0:	3710      	adds	r7, #16
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bd80      	pop	{r7, pc}
	...

08001ed8 <MPU6050_Read_All>:
    temp = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
    DataStruct->Temperature = (float)((int16_t)temp / (float)340.0 + (float)36.53);
}

void MPU6050_Read_All(I2C_HandleTypeDef *I2Cx, MPU6050_t *DataStruct, double RateCalibrationRoll, double RateCalibrationPitch, double RateCalibrationYaw)
{
 8001ed8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001edc:	b096      	sub	sp, #88	; 0x58
 8001ede:	af04      	add	r7, sp, #16
 8001ee0:	60f8      	str	r0, [r7, #12]
 8001ee2:	60b9      	str	r1, [r7, #8]
 8001ee4:	e9c7 2300 	strd	r2, r3, [r7]
    uint8_t Rec_Data[14];
    int16_t temp;

    // Read 14 BYTES of data starting from ACCEL_XOUT_H register

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 14, i2c_timeout);
 8001ee8:	2364      	movs	r3, #100	; 0x64
 8001eea:	9302      	str	r3, [sp, #8]
 8001eec:	230e      	movs	r3, #14
 8001eee:	9301      	str	r3, [sp, #4]
 8001ef0:	f107 0310 	add.w	r3, r7, #16
 8001ef4:	9300      	str	r3, [sp, #0]
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	223b      	movs	r2, #59	; 0x3b
 8001efa:	21d0      	movs	r1, #208	; 0xd0
 8001efc:	68f8      	ldr	r0, [r7, #12]
 8001efe:	f001 fd6d 	bl	80039dc <HAL_I2C_Mem_Read>

    DataStruct->Accel_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
 8001f02:	7c3b      	ldrb	r3, [r7, #16]
 8001f04:	021b      	lsls	r3, r3, #8
 8001f06:	b21a      	sxth	r2, r3
 8001f08:	7c7b      	ldrb	r3, [r7, #17]
 8001f0a:	b21b      	sxth	r3, r3
 8001f0c:	4313      	orrs	r3, r2
 8001f0e:	b21a      	sxth	r2, r3
 8001f10:	68bb      	ldr	r3, [r7, #8]
 8001f12:	801a      	strh	r2, [r3, #0]
    DataStruct->Accel_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data[3]);
 8001f14:	7cbb      	ldrb	r3, [r7, #18]
 8001f16:	021b      	lsls	r3, r3, #8
 8001f18:	b21a      	sxth	r2, r3
 8001f1a:	7cfb      	ldrb	r3, [r7, #19]
 8001f1c:	b21b      	sxth	r3, r3
 8001f1e:	4313      	orrs	r3, r2
 8001f20:	b21a      	sxth	r2, r3
 8001f22:	68bb      	ldr	r3, [r7, #8]
 8001f24:	805a      	strh	r2, [r3, #2]
    DataStruct->Accel_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data[5]);
 8001f26:	7d3b      	ldrb	r3, [r7, #20]
 8001f28:	021b      	lsls	r3, r3, #8
 8001f2a:	b21a      	sxth	r2, r3
 8001f2c:	7d7b      	ldrb	r3, [r7, #21]
 8001f2e:	b21b      	sxth	r3, r3
 8001f30:	4313      	orrs	r3, r2
 8001f32:	b21a      	sxth	r2, r3
 8001f34:	68bb      	ldr	r3, [r7, #8]
 8001f36:	809a      	strh	r2, [r3, #4]
    temp = (int16_t)(Rec_Data[6] << 8 | Rec_Data[7]);
 8001f38:	7dbb      	ldrb	r3, [r7, #22]
 8001f3a:	021b      	lsls	r3, r3, #8
 8001f3c:	b21a      	sxth	r2, r3
 8001f3e:	7dfb      	ldrb	r3, [r7, #23]
 8001f40:	b21b      	sxth	r3, r3
 8001f42:	4313      	orrs	r3, r2
 8001f44:	87fb      	strh	r3, [r7, #62]	; 0x3e
    DataStruct->Gyro_X_RAW = (int16_t)(Rec_Data[8] << 8 | Rec_Data[9]);
 8001f46:	7e3b      	ldrb	r3, [r7, #24]
 8001f48:	021b      	lsls	r3, r3, #8
 8001f4a:	b21a      	sxth	r2, r3
 8001f4c:	7e7b      	ldrb	r3, [r7, #25]
 8001f4e:	b21b      	sxth	r3, r3
 8001f50:	4313      	orrs	r3, r2
 8001f52:	b21a      	sxth	r2, r3
 8001f54:	68bb      	ldr	r3, [r7, #8]
 8001f56:	841a      	strh	r2, [r3, #32]
    DataStruct->Gyro_Y_RAW = (int16_t)(Rec_Data[10] << 8 | Rec_Data[11]);
 8001f58:	7ebb      	ldrb	r3, [r7, #26]
 8001f5a:	021b      	lsls	r3, r3, #8
 8001f5c:	b21a      	sxth	r2, r3
 8001f5e:	7efb      	ldrb	r3, [r7, #27]
 8001f60:	b21b      	sxth	r3, r3
 8001f62:	4313      	orrs	r3, r2
 8001f64:	b21a      	sxth	r2, r3
 8001f66:	68bb      	ldr	r3, [r7, #8]
 8001f68:	845a      	strh	r2, [r3, #34]	; 0x22
    DataStruct->Gyro_Z_RAW = (int16_t)(Rec_Data[12] << 8 | Rec_Data[13]);
 8001f6a:	7f3b      	ldrb	r3, [r7, #28]
 8001f6c:	021b      	lsls	r3, r3, #8
 8001f6e:	b21a      	sxth	r2, r3
 8001f70:	7f7b      	ldrb	r3, [r7, #29]
 8001f72:	b21b      	sxth	r3, r3
 8001f74:	4313      	orrs	r3, r2
 8001f76:	b21a      	sxth	r2, r3
 8001f78:	68bb      	ldr	r3, [r7, #8]
 8001f7a:	849a      	strh	r2, [r3, #36]	; 0x24

    DataStruct->Ax = DataStruct->Accel_X_RAW / 16384.0;
 8001f7c:	68bb      	ldr	r3, [r7, #8]
 8001f7e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f82:	4618      	mov	r0, r3
 8001f84:	f7fe fa16 	bl	80003b4 <__aeabi_i2d>
 8001f88:	f04f 0200 	mov.w	r2, #0
 8001f8c:	4ba0      	ldr	r3, [pc, #640]	; (8002210 <MPU6050_Read_All+0x338>)
 8001f8e:	f7fe fba5 	bl	80006dc <__aeabi_ddiv>
 8001f92:	4602      	mov	r2, r0
 8001f94:	460b      	mov	r3, r1
 8001f96:	68b9      	ldr	r1, [r7, #8]
 8001f98:	e9c1 2302 	strd	r2, r3, [r1, #8]
    DataStruct->Ay = DataStruct->Accel_Y_RAW / 16384.0;
 8001f9c:	68bb      	ldr	r3, [r7, #8]
 8001f9e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	f7fe fa06 	bl	80003b4 <__aeabi_i2d>
 8001fa8:	f04f 0200 	mov.w	r2, #0
 8001fac:	4b98      	ldr	r3, [pc, #608]	; (8002210 <MPU6050_Read_All+0x338>)
 8001fae:	f7fe fb95 	bl	80006dc <__aeabi_ddiv>
 8001fb2:	4602      	mov	r2, r0
 8001fb4:	460b      	mov	r3, r1
 8001fb6:	68b9      	ldr	r1, [r7, #8]
 8001fb8:	e9c1 2304 	strd	r2, r3, [r1, #16]
    DataStruct->Az = DataStruct->Accel_Z_RAW / Accel_Z_corrector;
 8001fbc:	68bb      	ldr	r3, [r7, #8]
 8001fbe:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	f7fe f9f6 	bl	80003b4 <__aeabi_i2d>
 8001fc8:	a38b      	add	r3, pc, #556	; (adr r3, 80021f8 <MPU6050_Read_All+0x320>)
 8001fca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fce:	f7fe fb85 	bl	80006dc <__aeabi_ddiv>
 8001fd2:	4602      	mov	r2, r0
 8001fd4:	460b      	mov	r3, r1
 8001fd6:	68b9      	ldr	r1, [r7, #8]
 8001fd8:	e9c1 2306 	strd	r2, r3, [r1, #24]
    DataStruct->Temperature = (float)((int16_t)temp / (float)340.0 + (float)36.53);
 8001fdc:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	f7fe fe53 	bl	8000c8c <__aeabi_i2f>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	498a      	ldr	r1, [pc, #552]	; (8002214 <MPU6050_Read_All+0x33c>)
 8001fea:	4618      	mov	r0, r3
 8001fec:	f7fe ff56 	bl	8000e9c <__aeabi_fdiv>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	4989      	ldr	r1, [pc, #548]	; (8002218 <MPU6050_Read_All+0x340>)
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	f7fe fd95 	bl	8000b24 <__addsf3>
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	461a      	mov	r2, r3
 8001ffe:	68bb      	ldr	r3, [r7, #8]
 8002000:	641a      	str	r2, [r3, #64]	; 0x40
    DataStruct->Gx = DataStruct->Gyro_X_RAW / 131.0 - RateCalibrationRoll;
 8002002:	68bb      	ldr	r3, [r7, #8]
 8002004:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8002008:	4618      	mov	r0, r3
 800200a:	f7fe f9d3 	bl	80003b4 <__aeabi_i2d>
 800200e:	a37c      	add	r3, pc, #496	; (adr r3, 8002200 <MPU6050_Read_All+0x328>)
 8002010:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002014:	f7fe fb62 	bl	80006dc <__aeabi_ddiv>
 8002018:	4602      	mov	r2, r0
 800201a:	460b      	mov	r3, r1
 800201c:	4610      	mov	r0, r2
 800201e:	4619      	mov	r1, r3
 8002020:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002024:	f7fe f878 	bl	8000118 <__aeabi_dsub>
 8002028:	4602      	mov	r2, r0
 800202a:	460b      	mov	r3, r1
 800202c:	68b9      	ldr	r1, [r7, #8]
 800202e:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    DataStruct->Gy = DataStruct->Gyro_Y_RAW / 131.0 - RateCalibrationPitch;
 8002032:	68bb      	ldr	r3, [r7, #8]
 8002034:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8002038:	4618      	mov	r0, r3
 800203a:	f7fe f9bb 	bl	80003b4 <__aeabi_i2d>
 800203e:	a370      	add	r3, pc, #448	; (adr r3, 8002200 <MPU6050_Read_All+0x328>)
 8002040:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002044:	f7fe fb4a 	bl	80006dc <__aeabi_ddiv>
 8002048:	4602      	mov	r2, r0
 800204a:	460b      	mov	r3, r1
 800204c:	4610      	mov	r0, r2
 800204e:	4619      	mov	r1, r3
 8002050:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8002054:	f7fe f860 	bl	8000118 <__aeabi_dsub>
 8002058:	4602      	mov	r2, r0
 800205a:	460b      	mov	r3, r1
 800205c:	68b9      	ldr	r1, [r7, #8]
 800205e:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    DataStruct->Gz = DataStruct->Gyro_Z_RAW / 131.0 - RateCalibrationYaw;
 8002062:	68bb      	ldr	r3, [r7, #8]
 8002064:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8002068:	4618      	mov	r0, r3
 800206a:	f7fe f9a3 	bl	80003b4 <__aeabi_i2d>
 800206e:	a364      	add	r3, pc, #400	; (adr r3, 8002200 <MPU6050_Read_All+0x328>)
 8002070:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002074:	f7fe fb32 	bl	80006dc <__aeabi_ddiv>
 8002078:	4602      	mov	r2, r0
 800207a:	460b      	mov	r3, r1
 800207c:	4610      	mov	r0, r2
 800207e:	4619      	mov	r1, r3
 8002080:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8002084:	f7fe f848 	bl	8000118 <__aeabi_dsub>
 8002088:	4602      	mov	r2, r0
 800208a:	460b      	mov	r3, r1
 800208c:	68b9      	ldr	r1, [r7, #8]
 800208e:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

    // Kalman angle solve
    double dt = (double)(HAL_GetTick() - timer) / 1000;
 8002092:	f000 ff6b 	bl	8002f6c <HAL_GetTick>
 8002096:	4602      	mov	r2, r0
 8002098:	4b60      	ldr	r3, [pc, #384]	; (800221c <MPU6050_Read_All+0x344>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	1ad3      	subs	r3, r2, r3
 800209e:	4618      	mov	r0, r3
 80020a0:	f7fe f978 	bl	8000394 <__aeabi_ui2d>
 80020a4:	f04f 0200 	mov.w	r2, #0
 80020a8:	4b5d      	ldr	r3, [pc, #372]	; (8002220 <MPU6050_Read_All+0x348>)
 80020aa:	f7fe fb17 	bl	80006dc <__aeabi_ddiv>
 80020ae:	4602      	mov	r2, r0
 80020b0:	460b      	mov	r3, r1
 80020b2:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    timer = HAL_GetTick();
 80020b6:	f000 ff59 	bl	8002f6c <HAL_GetTick>
 80020ba:	4603      	mov	r3, r0
 80020bc:	4a57      	ldr	r2, [pc, #348]	; (800221c <MPU6050_Read_All+0x344>)
 80020be:	6013      	str	r3, [r2, #0]
    double roll;
    double roll_sqrt = sqrt(
        DataStruct->Accel_X_RAW * DataStruct->Accel_X_RAW + DataStruct->Accel_Z_RAW * DataStruct->Accel_Z_RAW);
 80020c0:	68bb      	ldr	r3, [r7, #8]
 80020c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80020c6:	461a      	mov	r2, r3
 80020c8:	68bb      	ldr	r3, [r7, #8]
 80020ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 80020ce:	fb03 f202 	mul.w	r2, r3, r2
 80020d2:	68bb      	ldr	r3, [r7, #8]
 80020d4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80020d8:	4619      	mov	r1, r3
 80020da:	68bb      	ldr	r3, [r7, #8]
 80020dc:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80020e0:	fb01 f303 	mul.w	r3, r1, r3
 80020e4:	4413      	add	r3, r2
    double roll_sqrt = sqrt(
 80020e6:	4618      	mov	r0, r3
 80020e8:	f7fe f964 	bl	80003b4 <__aeabi_i2d>
 80020ec:	4602      	mov	r2, r0
 80020ee:	460b      	mov	r3, r1
 80020f0:	4610      	mov	r0, r2
 80020f2:	4619      	mov	r1, r3
 80020f4:	f004 fc42 	bl	800697c <sqrt>
 80020f8:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
    if (roll_sqrt != 0.0)
 80020fc:	f04f 0200 	mov.w	r2, #0
 8002100:	f04f 0300 	mov.w	r3, #0
 8002104:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002108:	f7fe fc26 	bl	8000958 <__aeabi_dcmpeq>
 800210c:	4603      	mov	r3, r0
 800210e:	2b00      	cmp	r3, #0
 8002110:	d119      	bne.n	8002146 <MPU6050_Read_All+0x26e>
    {
        roll = atan(DataStruct->Accel_Y_RAW / roll_sqrt) * RAD_TO_DEG;
 8002112:	68bb      	ldr	r3, [r7, #8]
 8002114:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002118:	4618      	mov	r0, r3
 800211a:	f7fe f94b 	bl	80003b4 <__aeabi_i2d>
 800211e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002122:	f7fe fadb 	bl	80006dc <__aeabi_ddiv>
 8002126:	4602      	mov	r2, r0
 8002128:	460b      	mov	r3, r1
 800212a:	4610      	mov	r0, r2
 800212c:	4619      	mov	r1, r3
 800212e:	f004 fc4f 	bl	80069d0 <atan>
 8002132:	a335      	add	r3, pc, #212	; (adr r3, 8002208 <MPU6050_Read_All+0x330>)
 8002134:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002138:	f7fe f9a6 	bl	8000488 <__aeabi_dmul>
 800213c:	4602      	mov	r2, r0
 800213e:	460b      	mov	r3, r1
 8002140:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
 8002144:	e005      	b.n	8002152 <MPU6050_Read_All+0x27a>
    }
    else
    {
        roll = 0.0;
 8002146:	f04f 0200 	mov.w	r2, #0
 800214a:	f04f 0300 	mov.w	r3, #0
 800214e:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    }
    double pitch = atan2(-DataStruct->Accel_X_RAW, DataStruct->Accel_Z_RAW) * RAD_TO_DEG;
 8002152:	68bb      	ldr	r3, [r7, #8]
 8002154:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002158:	425b      	negs	r3, r3
 800215a:	4618      	mov	r0, r3
 800215c:	f7fe f92a 	bl	80003b4 <__aeabi_i2d>
 8002160:	4682      	mov	sl, r0
 8002162:	468b      	mov	fp, r1
 8002164:	68bb      	ldr	r3, [r7, #8]
 8002166:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800216a:	4618      	mov	r0, r3
 800216c:	f7fe f922 	bl	80003b4 <__aeabi_i2d>
 8002170:	4602      	mov	r2, r0
 8002172:	460b      	mov	r3, r1
 8002174:	4650      	mov	r0, sl
 8002176:	4659      	mov	r1, fp
 8002178:	f004 fb90 	bl	800689c <atan2>
 800217c:	a322      	add	r3, pc, #136	; (adr r3, 8002208 <MPU6050_Read_All+0x330>)
 800217e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002182:	f7fe f981 	bl	8000488 <__aeabi_dmul>
 8002186:	4602      	mov	r2, r0
 8002188:	460b      	mov	r3, r1
 800218a:	e9c7 2308 	strd	r2, r3, [r7, #32]
    if ((pitch < -90 && DataStruct->KalmanAngleY > 90) || (pitch > 90 && DataStruct->KalmanAngleY < -90))
 800218e:	f04f 0200 	mov.w	r2, #0
 8002192:	4b24      	ldr	r3, [pc, #144]	; (8002224 <MPU6050_Read_All+0x34c>)
 8002194:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002198:	f7fe fbe8 	bl	800096c <__aeabi_dcmplt>
 800219c:	4603      	mov	r3, r0
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d00a      	beq.n	80021b8 <MPU6050_Read_All+0x2e0>
 80021a2:	68bb      	ldr	r3, [r7, #8]
 80021a4:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 80021a8:	f04f 0200 	mov.w	r2, #0
 80021ac:	4b1e      	ldr	r3, [pc, #120]	; (8002228 <MPU6050_Read_All+0x350>)
 80021ae:	f7fe fbfb 	bl	80009a8 <__aeabi_dcmpgt>
 80021b2:	4603      	mov	r3, r0
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d114      	bne.n	80021e2 <MPU6050_Read_All+0x30a>
 80021b8:	f04f 0200 	mov.w	r2, #0
 80021bc:	4b1a      	ldr	r3, [pc, #104]	; (8002228 <MPU6050_Read_All+0x350>)
 80021be:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80021c2:	f7fe fbf1 	bl	80009a8 <__aeabi_dcmpgt>
 80021c6:	4603      	mov	r3, r0
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d031      	beq.n	8002230 <MPU6050_Read_All+0x358>
 80021cc:	68bb      	ldr	r3, [r7, #8]
 80021ce:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 80021d2:	f04f 0200 	mov.w	r2, #0
 80021d6:	4b13      	ldr	r3, [pc, #76]	; (8002224 <MPU6050_Read_All+0x34c>)
 80021d8:	f7fe fbc8 	bl	800096c <__aeabi_dcmplt>
 80021dc:	4603      	mov	r3, r0
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d026      	beq.n	8002230 <MPU6050_Read_All+0x358>
    {
        KalmanY.angle = pitch;
 80021e2:	4912      	ldr	r1, [pc, #72]	; (800222c <MPU6050_Read_All+0x354>)
 80021e4:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80021e8:	e9c1 2306 	strd	r2, r3, [r1, #24]
        DataStruct->KalmanAngleY = pitch;
 80021ec:	68b9      	ldr	r1, [r7, #8]
 80021ee:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80021f2:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 80021f6:	e02e      	b.n	8002256 <MPU6050_Read_All+0x37e>
 80021f8:	00000000 	.word	0x00000000
 80021fc:	40cc2900 	.word	0x40cc2900
 8002200:	00000000 	.word	0x00000000
 8002204:	40606000 	.word	0x40606000
 8002208:	1a63c1f8 	.word	0x1a63c1f8
 800220c:	404ca5dc 	.word	0x404ca5dc
 8002210:	40d00000 	.word	0x40d00000
 8002214:	43aa0000 	.word	0x43aa0000
 8002218:	42121eb8 	.word	0x42121eb8
 800221c:	200002a0 	.word	0x200002a0
 8002220:	408f4000 	.word	0x408f4000
 8002224:	c0568000 	.word	0xc0568000
 8002228:	40568000 	.word	0x40568000
 800222c:	200000a8 	.word	0x200000a8
    }
    else
    {
        DataStruct->KalmanAngleY = Kalman_getAngle(&KalmanY, pitch, DataStruct->Gy, dt);
 8002230:	68bb      	ldr	r3, [r7, #8]
 8002232:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8002236:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800223a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800223e:	e9cd 2300 	strd	r2, r3, [sp]
 8002242:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002246:	481c      	ldr	r0, [pc, #112]	; (80022b8 <MPU6050_Read_All+0x3e0>)
 8002248:	f000 f83c 	bl	80022c4 <Kalman_getAngle>
 800224c:	4602      	mov	r2, r0
 800224e:	460b      	mov	r3, r1
 8002250:	68b9      	ldr	r1, [r7, #8]
 8002252:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
    }
    if (fabs(DataStruct->KalmanAngleY) > 90)
 8002256:	68bb      	ldr	r3, [r7, #8]
 8002258:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 800225c:	4690      	mov	r8, r2
 800225e:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 8002262:	f04f 0200 	mov.w	r2, #0
 8002266:	4b15      	ldr	r3, [pc, #84]	; (80022bc <MPU6050_Read_All+0x3e4>)
 8002268:	4640      	mov	r0, r8
 800226a:	4649      	mov	r1, r9
 800226c:	f7fe fb9c 	bl	80009a8 <__aeabi_dcmpgt>
 8002270:	4603      	mov	r3, r0
 8002272:	2b00      	cmp	r3, #0
 8002274:	d008      	beq.n	8002288 <MPU6050_Read_All+0x3b0>
        DataStruct->Gx = -DataStruct->Gx;
 8002276:	68bb      	ldr	r3, [r7, #8]
 8002278:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 800227c:	4614      	mov	r4, r2
 800227e:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8002282:	68bb      	ldr	r3, [r7, #8]
 8002284:	e9c3 450a 	strd	r4, r5, [r3, #40]	; 0x28
    DataStruct->KalmanAngleX = Kalman_getAngle(&KalmanX, roll, DataStruct->Gx, dt);
 8002288:	68bb      	ldr	r3, [r7, #8]
 800228a:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 800228e:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8002292:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002296:	e9cd 2300 	strd	r2, r3, [sp]
 800229a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800229e:	4808      	ldr	r0, [pc, #32]	; (80022c0 <MPU6050_Read_All+0x3e8>)
 80022a0:	f000 f810 	bl	80022c4 <Kalman_getAngle>
 80022a4:	4602      	mov	r2, r0
 80022a6:	460b      	mov	r3, r1
 80022a8:	68b9      	ldr	r1, [r7, #8]
 80022aa:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
}
 80022ae:	bf00      	nop
 80022b0:	3748      	adds	r7, #72	; 0x48
 80022b2:	46bd      	mov	sp, r7
 80022b4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80022b8:	200000a8 	.word	0x200000a8
 80022bc:	40568000 	.word	0x40568000
 80022c0:	20000060 	.word	0x20000060

080022c4 <Kalman_getAngle>:

double Kalman_getAngle(Kalman_t *Kalman, double newAngle, double newRate, double dt)
{
 80022c4:	b5b0      	push	{r4, r5, r7, lr}
 80022c6:	b092      	sub	sp, #72	; 0x48
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	60f8      	str	r0, [r7, #12]
 80022cc:	e9c7 2300 	strd	r2, r3, [r7]
    double rate = newRate - Kalman->bias;
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80022d6:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80022da:	f7fd ff1d 	bl	8000118 <__aeabi_dsub>
 80022de:	4602      	mov	r2, r0
 80022e0:	460b      	mov	r3, r1
 80022e2:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    Kalman->angle += dt * rate;
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 80022ec:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80022f0:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80022f4:	f7fe f8c8 	bl	8000488 <__aeabi_dmul>
 80022f8:	4602      	mov	r2, r0
 80022fa:	460b      	mov	r3, r1
 80022fc:	4620      	mov	r0, r4
 80022fe:	4629      	mov	r1, r5
 8002300:	f7fd ff0c 	bl	800011c <__adddf3>
 8002304:	4602      	mov	r2, r0
 8002306:	460b      	mov	r3, r1
 8002308:	68f9      	ldr	r1, [r7, #12]
 800230a:	e9c1 2306 	strd	r2, r3, [r1, #24]

    Kalman->P[0][0] += dt * (dt * Kalman->P[1][1] - Kalman->P[0][1] - Kalman->P[1][0] + Kalman->Q_angle);
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 800231a:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800231e:	f7fe f8b3 	bl	8000488 <__aeabi_dmul>
 8002322:	4602      	mov	r2, r0
 8002324:	460b      	mov	r3, r1
 8002326:	4610      	mov	r0, r2
 8002328:	4619      	mov	r1, r3
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8002330:	f7fd fef2 	bl	8000118 <__aeabi_dsub>
 8002334:	4602      	mov	r2, r0
 8002336:	460b      	mov	r3, r1
 8002338:	4610      	mov	r0, r2
 800233a:	4619      	mov	r1, r3
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8002342:	f7fd fee9 	bl	8000118 <__aeabi_dsub>
 8002346:	4602      	mov	r2, r0
 8002348:	460b      	mov	r3, r1
 800234a:	4610      	mov	r0, r2
 800234c:	4619      	mov	r1, r3
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002354:	f7fd fee2 	bl	800011c <__adddf3>
 8002358:	4602      	mov	r2, r0
 800235a:	460b      	mov	r3, r1
 800235c:	4610      	mov	r0, r2
 800235e:	4619      	mov	r1, r3
 8002360:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8002364:	f7fe f890 	bl	8000488 <__aeabi_dmul>
 8002368:	4602      	mov	r2, r0
 800236a:	460b      	mov	r3, r1
 800236c:	4620      	mov	r0, r4
 800236e:	4629      	mov	r1, r5
 8002370:	f7fd fed4 	bl	800011c <__adddf3>
 8002374:	4602      	mov	r2, r0
 8002376:	460b      	mov	r3, r1
 8002378:	68f9      	ldr	r1, [r7, #12]
 800237a:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    Kalman->P[0][1] -= dt * Kalman->P[1][1];
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 800238a:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800238e:	f7fe f87b 	bl	8000488 <__aeabi_dmul>
 8002392:	4602      	mov	r2, r0
 8002394:	460b      	mov	r3, r1
 8002396:	4620      	mov	r0, r4
 8002398:	4629      	mov	r1, r5
 800239a:	f7fd febd 	bl	8000118 <__aeabi_dsub>
 800239e:	4602      	mov	r2, r0
 80023a0:	460b      	mov	r3, r1
 80023a2:	68f9      	ldr	r1, [r7, #12]
 80023a4:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    Kalman->P[1][0] -= dt * Kalman->P[1][1];
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 80023b4:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80023b8:	f7fe f866 	bl	8000488 <__aeabi_dmul>
 80023bc:	4602      	mov	r2, r0
 80023be:	460b      	mov	r3, r1
 80023c0:	4620      	mov	r0, r4
 80023c2:	4629      	mov	r1, r5
 80023c4:	f7fd fea8 	bl	8000118 <__aeabi_dsub>
 80023c8:	4602      	mov	r2, r0
 80023ca:	460b      	mov	r3, r1
 80023cc:	68f9      	ldr	r1, [r7, #12]
 80023ce:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    Kalman->P[1][1] += Kalman->Q_bias * dt;
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80023de:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80023e2:	f7fe f851 	bl	8000488 <__aeabi_dmul>
 80023e6:	4602      	mov	r2, r0
 80023e8:	460b      	mov	r3, r1
 80023ea:	4620      	mov	r0, r4
 80023ec:	4629      	mov	r1, r5
 80023ee:	f7fd fe95 	bl	800011c <__adddf3>
 80023f2:	4602      	mov	r2, r0
 80023f4:	460b      	mov	r3, r1
 80023f6:	68f9      	ldr	r1, [r7, #12]
 80023f8:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

    double S = Kalman->P[0][0] + Kalman->R_measure;
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002408:	f7fd fe88 	bl	800011c <__adddf3>
 800240c:	4602      	mov	r2, r0
 800240e:	460b      	mov	r3, r1
 8002410:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    double K[2];
    K[0] = Kalman->P[0][0] / S;
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 800241a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800241e:	f7fe f95d 	bl	80006dc <__aeabi_ddiv>
 8002422:	4602      	mov	r2, r0
 8002424:	460b      	mov	r3, r1
 8002426:	e9c7 2304 	strd	r2, r3, [r7, #16]
    K[1] = Kalman->P[1][0] / S;
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8002430:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002434:	f7fe f952 	bl	80006dc <__aeabi_ddiv>
 8002438:	4602      	mov	r2, r0
 800243a:	460b      	mov	r3, r1
 800243c:	e9c7 2306 	strd	r2, r3, [r7, #24]

    double y = newAngle - Kalman->angle;
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8002446:	e9d7 0100 	ldrd	r0, r1, [r7]
 800244a:	f7fd fe65 	bl	8000118 <__aeabi_dsub>
 800244e:	4602      	mov	r2, r0
 8002450:	460b      	mov	r3, r1
 8002452:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    Kalman->angle += K[0] * y;
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 800245c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002460:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002464:	f7fe f810 	bl	8000488 <__aeabi_dmul>
 8002468:	4602      	mov	r2, r0
 800246a:	460b      	mov	r3, r1
 800246c:	4620      	mov	r0, r4
 800246e:	4629      	mov	r1, r5
 8002470:	f7fd fe54 	bl	800011c <__adddf3>
 8002474:	4602      	mov	r2, r0
 8002476:	460b      	mov	r3, r1
 8002478:	68f9      	ldr	r1, [r7, #12]
 800247a:	e9c1 2306 	strd	r2, r3, [r1, #24]
    Kalman->bias += K[1] * y;
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 8002484:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002488:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800248c:	f7fd fffc 	bl	8000488 <__aeabi_dmul>
 8002490:	4602      	mov	r2, r0
 8002492:	460b      	mov	r3, r1
 8002494:	4620      	mov	r0, r4
 8002496:	4629      	mov	r1, r5
 8002498:	f7fd fe40 	bl	800011c <__adddf3>
 800249c:	4602      	mov	r2, r0
 800249e:	460b      	mov	r3, r1
 80024a0:	68f9      	ldr	r1, [r7, #12]
 80024a2:	e9c1 2308 	strd	r2, r3, [r1, #32]

    double P00_temp = Kalman->P[0][0];
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 80024ac:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    double P01_temp = Kalman->P[0][1];
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 80024b6:	e9c7 2308 	strd	r2, r3, [r7, #32]

    Kalman->P[0][0] -= K[0] * P00_temp;
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 80024c0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80024c4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80024c8:	f7fd ffde 	bl	8000488 <__aeabi_dmul>
 80024cc:	4602      	mov	r2, r0
 80024ce:	460b      	mov	r3, r1
 80024d0:	4620      	mov	r0, r4
 80024d2:	4629      	mov	r1, r5
 80024d4:	f7fd fe20 	bl	8000118 <__aeabi_dsub>
 80024d8:	4602      	mov	r2, r0
 80024da:	460b      	mov	r3, r1
 80024dc:	68f9      	ldr	r1, [r7, #12]
 80024de:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    Kalman->P[0][1] -= K[0] * P01_temp;
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 80024e8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80024ec:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80024f0:	f7fd ffca 	bl	8000488 <__aeabi_dmul>
 80024f4:	4602      	mov	r2, r0
 80024f6:	460b      	mov	r3, r1
 80024f8:	4620      	mov	r0, r4
 80024fa:	4629      	mov	r1, r5
 80024fc:	f7fd fe0c 	bl	8000118 <__aeabi_dsub>
 8002500:	4602      	mov	r2, r0
 8002502:	460b      	mov	r3, r1
 8002504:	68f9      	ldr	r1, [r7, #12]
 8002506:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    Kalman->P[1][0] -= K[1] * P00_temp;
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 8002510:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002514:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002518:	f7fd ffb6 	bl	8000488 <__aeabi_dmul>
 800251c:	4602      	mov	r2, r0
 800251e:	460b      	mov	r3, r1
 8002520:	4620      	mov	r0, r4
 8002522:	4629      	mov	r1, r5
 8002524:	f7fd fdf8 	bl	8000118 <__aeabi_dsub>
 8002528:	4602      	mov	r2, r0
 800252a:	460b      	mov	r3, r1
 800252c:	68f9      	ldr	r1, [r7, #12]
 800252e:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    Kalman->P[1][1] -= K[1] * P01_temp;
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 8002538:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800253c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002540:	f7fd ffa2 	bl	8000488 <__aeabi_dmul>
 8002544:	4602      	mov	r2, r0
 8002546:	460b      	mov	r3, r1
 8002548:	4620      	mov	r0, r4
 800254a:	4629      	mov	r1, r5
 800254c:	f7fd fde4 	bl	8000118 <__aeabi_dsub>
 8002550:	4602      	mov	r2, r0
 8002552:	460b      	mov	r3, r1
 8002554:	68f9      	ldr	r1, [r7, #12]
 8002556:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

    return Kalman->angle;
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
};
 8002560:	4610      	mov	r0, r2
 8002562:	4619      	mov	r1, r3
 8002564:	3748      	adds	r7, #72	; 0x48
 8002566:	46bd      	mov	sp, r7
 8002568:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800256c <SetupPixy>:
		1
};

uint8_t buffer_rx[32];

void SetupPixy(int *pixyChecked) {
 800256c:	b580      	push	{r7, lr}
 800256e:	b082      	sub	sp, #8
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
	while(HAL_SPI_Receive(&hspi1, buffer_rx, 1, 1000));
 8002574:	bf00      	nop
 8002576:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800257a:	2201      	movs	r2, #1
 800257c:	4912      	ldr	r1, [pc, #72]	; (80025c8 <SetupPixy+0x5c>)
 800257e:	4813      	ldr	r0, [pc, #76]	; (80025cc <SetupPixy+0x60>)
 8002580:	f002 fdb4 	bl	80050ec <HAL_SPI_Receive>
 8002584:	4603      	mov	r3, r0
 8002586:	2b00      	cmp	r3, #0
 8002588:	d1f5      	bne.n	8002576 <SetupPixy+0xa>

	HAL_SPI_Transmit(&hspi1, versionRequest, 4, 1000);
 800258a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800258e:	2204      	movs	r2, #4
 8002590:	490f      	ldr	r1, [pc, #60]	; (80025d0 <SetupPixy+0x64>)
 8002592:	480e      	ldr	r0, [pc, #56]	; (80025cc <SetupPixy+0x60>)
 8002594:	f002 fc6e 	bl	8004e74 <HAL_SPI_Transmit>
	HAL_Delay(1);
 8002598:	2001      	movs	r0, #1
 800259a:	f000 fcf1 	bl	8002f80 <HAL_Delay>
	HAL_SPI_Receive(&hspi1, buffer_rx, 8, 1000);
 800259e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80025a2:	2208      	movs	r2, #8
 80025a4:	4908      	ldr	r1, [pc, #32]	; (80025c8 <SetupPixy+0x5c>)
 80025a6:	4809      	ldr	r0, [pc, #36]	; (80025cc <SetupPixy+0x60>)
 80025a8:	f002 fda0 	bl	80050ec <HAL_SPI_Receive>
	HAL_SPI_Receive(&hspi1, buffer_rx, 22, 1000);
 80025ac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80025b0:	2216      	movs	r2, #22
 80025b2:	4905      	ldr	r1, [pc, #20]	; (80025c8 <SetupPixy+0x5c>)
 80025b4:	4805      	ldr	r0, [pc, #20]	; (80025cc <SetupPixy+0x60>)
 80025b6:	f002 fd99 	bl	80050ec <HAL_SPI_Receive>

	*pixyChecked = 1;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2201      	movs	r2, #1
 80025be:	601a      	str	r2, [r3, #0]
}
 80025c0:	bf00      	nop
 80025c2:	3708      	adds	r7, #8
 80025c4:	46bd      	mov	sp, r7
 80025c6:	bd80      	pop	{r7, pc}
 80025c8:	200002a4 	.word	0x200002a4
 80025cc:	200002c4 	.word	0x200002c4
 80025d0:	200000f0 	.word	0x200000f0

080025d4 <getBallPosition>:

void getBallPosition(BallTransform *ball_transform, int *ballInView) {
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b084      	sub	sp, #16
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
 80025dc:	6039      	str	r1, [r7, #0]

	// sending the getBlocks request and receiving datas
	// from pixy
	HAL_SPI_Transmit(&hspi1, getBlocks, 6, 1000);
 80025de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80025e2:	2206      	movs	r2, #6
 80025e4:	4955      	ldr	r1, [pc, #340]	; (800273c <getBallPosition+0x168>)
 80025e6:	4856      	ldr	r0, [pc, #344]	; (8002740 <getBallPosition+0x16c>)
 80025e8:	f002 fc44 	bl	8004e74 <HAL_SPI_Transmit>
	HAL_Delay(1);
 80025ec:	2001      	movs	r0, #1
 80025ee:	f000 fcc7 	bl	8002f80 <HAL_Delay>
	HAL_SPI_Receive(&hspi1, buffer_rx, 8, 1000); //garbage values
 80025f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80025f6:	2208      	movs	r2, #8
 80025f8:	4952      	ldr	r1, [pc, #328]	; (8002744 <getBallPosition+0x170>)
 80025fa:	4851      	ldr	r0, [pc, #324]	; (8002740 <getBallPosition+0x16c>)
 80025fc:	f002 fd76 	bl	80050ec <HAL_SPI_Receive>
	HAL_SPI_Receive(&hspi1, buffer_rx, 4, 1000);
 8002600:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002604:	2204      	movs	r2, #4
 8002606:	494f      	ldr	r1, [pc, #316]	; (8002744 <getBallPosition+0x170>)
 8002608:	484d      	ldr	r0, [pc, #308]	; (8002740 <getBallPosition+0x16c>)
 800260a:	f002 fd6f 	bl	80050ec <HAL_SPI_Receive>

	// checking if the length received data is 14 and the
	// ball is in the view and return from the function if it's not
	if (buffer_rx[3] != 14) {
 800260e:	4b4d      	ldr	r3, [pc, #308]	; (8002744 <getBallPosition+0x170>)
 8002610:	78db      	ldrb	r3, [r3, #3]
 8002612:	2b0e      	cmp	r3, #14
 8002614:	d002      	beq.n	800261c <getBallPosition+0x48>
		ballInView = 0;
 8002616:	2300      	movs	r3, #0
 8002618:	603b      	str	r3, [r7, #0]
		return;
 800261a:	e08b      	b.n	8002734 <getBallPosition+0x160>
	}

	// if the length of the data is 14 will receive the 14 remaining bytes
	HAL_SPI_Receive(&hspi1, buffer_rx, 14, 1000);
 800261c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002620:	220e      	movs	r2, #14
 8002622:	4948      	ldr	r1, [pc, #288]	; (8002744 <getBallPosition+0x170>)
 8002624:	4846      	ldr	r0, [pc, #280]	; (8002740 <getBallPosition+0x16c>)
 8002626:	f002 fd61 	bl	80050ec <HAL_SPI_Receive>

	// saving the received data into the stuct
	ball_transform->ballx = buffer_rx[4] + buffer_rx[5] * 255;
 800262a:	4b46      	ldr	r3, [pc, #280]	; (8002744 <getBallPosition+0x170>)
 800262c:	791b      	ldrb	r3, [r3, #4]
 800262e:	4619      	mov	r1, r3
 8002630:	4b44      	ldr	r3, [pc, #272]	; (8002744 <getBallPosition+0x170>)
 8002632:	795b      	ldrb	r3, [r3, #5]
 8002634:	461a      	mov	r2, r3
 8002636:	4613      	mov	r3, r2
 8002638:	021b      	lsls	r3, r3, #8
 800263a:	1a9b      	subs	r3, r3, r2
 800263c:	18ca      	adds	r2, r1, r3
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	601a      	str	r2, [r3, #0]
	ball_transform->bally = buffer_rx[6] + buffer_rx[7] * 255;
 8002642:	4b40      	ldr	r3, [pc, #256]	; (8002744 <getBallPosition+0x170>)
 8002644:	799b      	ldrb	r3, [r3, #6]
 8002646:	4619      	mov	r1, r3
 8002648:	4b3e      	ldr	r3, [pc, #248]	; (8002744 <getBallPosition+0x170>)
 800264a:	79db      	ldrb	r3, [r3, #7]
 800264c:	461a      	mov	r2, r3
 800264e:	4613      	mov	r3, r2
 8002650:	021b      	lsls	r3, r3, #8
 8002652:	1a9b      	subs	r3, r3, r2
 8002654:	18ca      	adds	r2, r1, r3
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	605a      	str	r2, [r3, #4]
	ball_transform->ballWidth = buffer_rx[8] + buffer_rx[9] * 255;
 800265a:	4b3a      	ldr	r3, [pc, #232]	; (8002744 <getBallPosition+0x170>)
 800265c:	7a1b      	ldrb	r3, [r3, #8]
 800265e:	4619      	mov	r1, r3
 8002660:	4b38      	ldr	r3, [pc, #224]	; (8002744 <getBallPosition+0x170>)
 8002662:	7a5b      	ldrb	r3, [r3, #9]
 8002664:	461a      	mov	r2, r3
 8002666:	4613      	mov	r3, r2
 8002668:	021b      	lsls	r3, r3, #8
 800266a:	1a9b      	subs	r3, r3, r2
 800266c:	18ca      	adds	r2, r1, r3
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	60da      	str	r2, [r3, #12]
	ball_transform->ballHeight = buffer_rx[10] + buffer_rx[11] * 255;
 8002672:	4b34      	ldr	r3, [pc, #208]	; (8002744 <getBallPosition+0x170>)
 8002674:	7a9b      	ldrb	r3, [r3, #10]
 8002676:	4619      	mov	r1, r3
 8002678:	4b32      	ldr	r3, [pc, #200]	; (8002744 <getBallPosition+0x170>)
 800267a:	7adb      	ldrb	r3, [r3, #11]
 800267c:	461a      	mov	r2, r3
 800267e:	4613      	mov	r3, r2
 8002680:	021b      	lsls	r3, r3, #8
 8002682:	1a9b      	subs	r3, r3, r2
 8002684:	18ca      	adds	r2, r1, r3
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	609a      	str	r2, [r3, #8]

	// cropping the received ball position to be only in the mirror
	if (!(ball_transform->ballx > PIXY_X_MIN && ball_transform->ballx < PIXY_X_MAX)) {
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	2b44      	cmp	r3, #68	; 0x44
 8002690:	dd03      	ble.n	800269a <getBallPosition+0xc6>
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	2be4      	cmp	r3, #228	; 0xe4
 8002698:	dd03      	ble.n	80026a2 <getBallPosition+0xce>
		*ballInView = 0;
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	2200      	movs	r2, #0
 800269e:	601a      	str	r2, [r3, #0]
		return;
 80026a0:	e048      	b.n	8002734 <getBallPosition+0x160>
	}
	if (!(ball_transform->bally > PIXY_Y_MIN && ball_transform->bally < PIXY_Y_MAX)) {
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	685b      	ldr	r3, [r3, #4]
 80026a6:	2b26      	cmp	r3, #38	; 0x26
 80026a8:	dd03      	ble.n	80026b2 <getBallPosition+0xde>
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	685b      	ldr	r3, [r3, #4]
 80026ae:	2bc4      	cmp	r3, #196	; 0xc4
 80026b0:	dd03      	ble.n	80026ba <getBallPosition+0xe6>
		*ballInView = 0;
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	2200      	movs	r2, #0
 80026b6:	601a      	str	r2, [r3, #0]
		return;
 80026b8:	e03c      	b.n	8002734 <getBallPosition+0x160>
	}

	*ballInView = 1;
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	2201      	movs	r2, #1
 80026be:	601a      	str	r2, [r3, #0]

	// changing the center of the image from the top left corner to the center of mirror
	if (ball_transform->ballx >= PIXY_X_ZERO) {
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	2b9d      	cmp	r3, #157	; 0x9d
 80026c6:	dd06      	ble.n	80026d6 <getBallPosition+0x102>
		ball_transform->ballx -= PIXY_X_ZERO;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f1a3 029e 	sub.w	r2, r3, #158	; 0x9e
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	601a      	str	r2, [r3, #0]
 80026d4:	e005      	b.n	80026e2 <getBallPosition+0x10e>
	}else {
		ball_transform->ballx = -1 * (PIXY_X_ZERO - ball_transform->ballx);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f1a3 029e 	sub.w	r2, r3, #158	; 0x9e
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	601a      	str	r2, [r3, #0]
	}

	if (ball_transform->bally >= PIXY_Y_ZERO) {
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	685b      	ldr	r3, [r3, #4]
 80026e6:	2b75      	cmp	r3, #117	; 0x75
 80026e8:	dd06      	ble.n	80026f8 <getBallPosition+0x124>
		ball_transform->bally = -1 * (PIXY_Y_ZERO - ball_transform->bally);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	685b      	ldr	r3, [r3, #4]
 80026ee:	f1a3 0276 	sub.w	r2, r3, #118	; 0x76
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	605a      	str	r2, [r3, #4]
 80026f6:	e005      	b.n	8002704 <getBallPosition+0x130>
	}else {
		ball_transform->bally -= PIXY_Y_ZERO;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	f1a3 0276 	sub.w	r2, r3, #118	; 0x76
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	605a      	str	r2, [r3, #4]
	}

	ball_transform->ballx *= -1;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	425a      	negs	r2, r3
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	601a      	str	r2, [r3, #0]
	ball_transform->bally *= -1;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	425a      	negs	r2, r3
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	605a      	str	r2, [r3, #4]

	for (int i = 0; i < 26; i++) {
 8002718:	2300      	movs	r3, #0
 800271a:	60fb      	str	r3, [r7, #12]
 800271c:	e007      	b.n	800272e <getBallPosition+0x15a>
		buffer_rx[i] = 0;
 800271e:	4a09      	ldr	r2, [pc, #36]	; (8002744 <getBallPosition+0x170>)
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	4413      	add	r3, r2
 8002724:	2200      	movs	r2, #0
 8002726:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 26; i++) {
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	3301      	adds	r3, #1
 800272c:	60fb      	str	r3, [r7, #12]
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	2b19      	cmp	r3, #25
 8002732:	ddf4      	ble.n	800271e <getBallPosition+0x14a>
	}
}
 8002734:	3710      	adds	r7, #16
 8002736:	46bd      	mov	sp, r7
 8002738:	bd80      	pop	{r7, pc}
 800273a:	bf00      	nop
 800273c:	200000f4 	.word	0x200000f4
 8002740:	200002c4 	.word	0x200002c4
 8002744:	200002a4 	.word	0x200002a4

08002748 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 800274c:	4b17      	ldr	r3, [pc, #92]	; (80027ac <MX_SPI1_Init+0x64>)
 800274e:	4a18      	ldr	r2, [pc, #96]	; (80027b0 <MX_SPI1_Init+0x68>)
 8002750:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002752:	4b16      	ldr	r3, [pc, #88]	; (80027ac <MX_SPI1_Init+0x64>)
 8002754:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002758:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800275a:	4b14      	ldr	r3, [pc, #80]	; (80027ac <MX_SPI1_Init+0x64>)
 800275c:	2200      	movs	r2, #0
 800275e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002760:	4b12      	ldr	r3, [pc, #72]	; (80027ac <MX_SPI1_Init+0x64>)
 8002762:	2200      	movs	r2, #0
 8002764:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002766:	4b11      	ldr	r3, [pc, #68]	; (80027ac <MX_SPI1_Init+0x64>)
 8002768:	2200      	movs	r2, #0
 800276a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800276c:	4b0f      	ldr	r3, [pc, #60]	; (80027ac <MX_SPI1_Init+0x64>)
 800276e:	2200      	movs	r2, #0
 8002770:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002772:	4b0e      	ldr	r3, [pc, #56]	; (80027ac <MX_SPI1_Init+0x64>)
 8002774:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002778:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800277a:	4b0c      	ldr	r3, [pc, #48]	; (80027ac <MX_SPI1_Init+0x64>)
 800277c:	2210      	movs	r2, #16
 800277e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002780:	4b0a      	ldr	r3, [pc, #40]	; (80027ac <MX_SPI1_Init+0x64>)
 8002782:	2200      	movs	r2, #0
 8002784:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002786:	4b09      	ldr	r3, [pc, #36]	; (80027ac <MX_SPI1_Init+0x64>)
 8002788:	2200      	movs	r2, #0
 800278a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800278c:	4b07      	ldr	r3, [pc, #28]	; (80027ac <MX_SPI1_Init+0x64>)
 800278e:	2200      	movs	r2, #0
 8002790:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002792:	4b06      	ldr	r3, [pc, #24]	; (80027ac <MX_SPI1_Init+0x64>)
 8002794:	220a      	movs	r2, #10
 8002796:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002798:	4804      	ldr	r0, [pc, #16]	; (80027ac <MX_SPI1_Init+0x64>)
 800279a:	f002 fae7 	bl	8004d6c <HAL_SPI_Init>
 800279e:	4603      	mov	r3, r0
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d001      	beq.n	80027a8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80027a4:	f7ff fb2b 	bl	8001dfe <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80027a8:	bf00      	nop
 80027aa:	bd80      	pop	{r7, pc}
 80027ac:	200002c4 	.word	0x200002c4
 80027b0:	40013000 	.word	0x40013000

080027b4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b08a      	sub	sp, #40	; 0x28
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027bc:	f107 0314 	add.w	r3, r7, #20
 80027c0:	2200      	movs	r2, #0
 80027c2:	601a      	str	r2, [r3, #0]
 80027c4:	605a      	str	r2, [r3, #4]
 80027c6:	609a      	str	r2, [r3, #8]
 80027c8:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	4a22      	ldr	r2, [pc, #136]	; (8002858 <HAL_SPI_MspInit+0xa4>)
 80027d0:	4293      	cmp	r3, r2
 80027d2:	d13d      	bne.n	8002850 <HAL_SPI_MspInit+0x9c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80027d4:	4b21      	ldr	r3, [pc, #132]	; (800285c <HAL_SPI_MspInit+0xa8>)
 80027d6:	699b      	ldr	r3, [r3, #24]
 80027d8:	4a20      	ldr	r2, [pc, #128]	; (800285c <HAL_SPI_MspInit+0xa8>)
 80027da:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80027de:	6193      	str	r3, [r2, #24]
 80027e0:	4b1e      	ldr	r3, [pc, #120]	; (800285c <HAL_SPI_MspInit+0xa8>)
 80027e2:	699b      	ldr	r3, [r3, #24]
 80027e4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80027e8:	613b      	str	r3, [r7, #16]
 80027ea:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80027ec:	4b1b      	ldr	r3, [pc, #108]	; (800285c <HAL_SPI_MspInit+0xa8>)
 80027ee:	699b      	ldr	r3, [r3, #24]
 80027f0:	4a1a      	ldr	r2, [pc, #104]	; (800285c <HAL_SPI_MspInit+0xa8>)
 80027f2:	f043 0308 	orr.w	r3, r3, #8
 80027f6:	6193      	str	r3, [r2, #24]
 80027f8:	4b18      	ldr	r3, [pc, #96]	; (800285c <HAL_SPI_MspInit+0xa8>)
 80027fa:	699b      	ldr	r3, [r3, #24]
 80027fc:	f003 0308 	and.w	r3, r3, #8
 8002800:	60fb      	str	r3, [r7, #12]
 8002802:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 8002804:	2328      	movs	r3, #40	; 0x28
 8002806:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002808:	2302      	movs	r3, #2
 800280a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800280c:	2303      	movs	r3, #3
 800280e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002810:	f107 0314 	add.w	r3, r7, #20
 8002814:	4619      	mov	r1, r3
 8002816:	4812      	ldr	r0, [pc, #72]	; (8002860 <HAL_SPI_MspInit+0xac>)
 8002818:	f000 fce4 	bl	80031e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800281c:	2310      	movs	r3, #16
 800281e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002820:	2300      	movs	r3, #0
 8002822:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002824:	2300      	movs	r3, #0
 8002826:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002828:	f107 0314 	add.w	r3, r7, #20
 800282c:	4619      	mov	r1, r3
 800282e:	480c      	ldr	r0, [pc, #48]	; (8002860 <HAL_SPI_MspInit+0xac>)
 8002830:	f000 fcd8 	bl	80031e4 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_SPI1_ENABLE();
 8002834:	4b0b      	ldr	r3, [pc, #44]	; (8002864 <HAL_SPI_MspInit+0xb0>)
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	627b      	str	r3, [r7, #36]	; 0x24
 800283a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800283c:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8002840:	627b      	str	r3, [r7, #36]	; 0x24
 8002842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002844:	f043 0301 	orr.w	r3, r3, #1
 8002848:	627b      	str	r3, [r7, #36]	; 0x24
 800284a:	4a06      	ldr	r2, [pc, #24]	; (8002864 <HAL_SPI_MspInit+0xb0>)
 800284c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800284e:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8002850:	bf00      	nop
 8002852:	3728      	adds	r7, #40	; 0x28
 8002854:	46bd      	mov	sp, r7
 8002856:	bd80      	pop	{r7, pc}
 8002858:	40013000 	.word	0x40013000
 800285c:	40021000 	.word	0x40021000
 8002860:	40010c00 	.word	0x40010c00
 8002864:	40010000 	.word	0x40010000

08002868 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002868:	b480      	push	{r7}
 800286a:	b085      	sub	sp, #20
 800286c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800286e:	4b15      	ldr	r3, [pc, #84]	; (80028c4 <HAL_MspInit+0x5c>)
 8002870:	699b      	ldr	r3, [r3, #24]
 8002872:	4a14      	ldr	r2, [pc, #80]	; (80028c4 <HAL_MspInit+0x5c>)
 8002874:	f043 0301 	orr.w	r3, r3, #1
 8002878:	6193      	str	r3, [r2, #24]
 800287a:	4b12      	ldr	r3, [pc, #72]	; (80028c4 <HAL_MspInit+0x5c>)
 800287c:	699b      	ldr	r3, [r3, #24]
 800287e:	f003 0301 	and.w	r3, r3, #1
 8002882:	60bb      	str	r3, [r7, #8]
 8002884:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002886:	4b0f      	ldr	r3, [pc, #60]	; (80028c4 <HAL_MspInit+0x5c>)
 8002888:	69db      	ldr	r3, [r3, #28]
 800288a:	4a0e      	ldr	r2, [pc, #56]	; (80028c4 <HAL_MspInit+0x5c>)
 800288c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002890:	61d3      	str	r3, [r2, #28]
 8002892:	4b0c      	ldr	r3, [pc, #48]	; (80028c4 <HAL_MspInit+0x5c>)
 8002894:	69db      	ldr	r3, [r3, #28]
 8002896:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800289a:	607b      	str	r3, [r7, #4]
 800289c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800289e:	4b0a      	ldr	r3, [pc, #40]	; (80028c8 <HAL_MspInit+0x60>)
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	60fb      	str	r3, [r7, #12]
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80028aa:	60fb      	str	r3, [r7, #12]
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80028b2:	60fb      	str	r3, [r7, #12]
 80028b4:	4a04      	ldr	r2, [pc, #16]	; (80028c8 <HAL_MspInit+0x60>)
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80028ba:	bf00      	nop
 80028bc:	3714      	adds	r7, #20
 80028be:	46bd      	mov	sp, r7
 80028c0:	bc80      	pop	{r7}
 80028c2:	4770      	bx	lr
 80028c4:	40021000 	.word	0x40021000
 80028c8:	40010000 	.word	0x40010000

080028cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80028cc:	b480      	push	{r7}
 80028ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80028d0:	bf00      	nop
 80028d2:	e7fd      	b.n	80028d0 <NMI_Handler+0x4>

080028d4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80028d4:	b480      	push	{r7}
 80028d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80028d8:	bf00      	nop
 80028da:	e7fd      	b.n	80028d8 <HardFault_Handler+0x4>

080028dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80028dc:	b480      	push	{r7}
 80028de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80028e0:	bf00      	nop
 80028e2:	e7fd      	b.n	80028e0 <MemManage_Handler+0x4>

080028e4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80028e4:	b480      	push	{r7}
 80028e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80028e8:	bf00      	nop
 80028ea:	e7fd      	b.n	80028e8 <BusFault_Handler+0x4>

080028ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80028ec:	b480      	push	{r7}
 80028ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80028f0:	bf00      	nop
 80028f2:	e7fd      	b.n	80028f0 <UsageFault_Handler+0x4>

080028f4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80028f4:	b480      	push	{r7}
 80028f6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80028f8:	bf00      	nop
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bc80      	pop	{r7}
 80028fe:	4770      	bx	lr

08002900 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002900:	b480      	push	{r7}
 8002902:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002904:	bf00      	nop
 8002906:	46bd      	mov	sp, r7
 8002908:	bc80      	pop	{r7}
 800290a:	4770      	bx	lr

0800290c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800290c:	b480      	push	{r7}
 800290e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002910:	bf00      	nop
 8002912:	46bd      	mov	sp, r7
 8002914:	bc80      	pop	{r7}
 8002916:	4770      	bx	lr

08002918 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800291c:	f000 fb14 	bl	8002f48 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002920:	bf00      	nop
 8002922:	bd80      	pop	{r7, pc}

08002924 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8002928:	2001      	movs	r0, #1
 800292a:	f000 fdf7 	bl	800351c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800292e:	bf00      	nop
 8002930:	bd80      	pop	{r7, pc}

08002932 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8002932:	b580      	push	{r7, lr}
 8002934:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8002936:	2002      	movs	r0, #2
 8002938:	f000 fdf0 	bl	800351c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 800293c:	bf00      	nop
 800293e:	bd80      	pop	{r7, pc}

08002940 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8002944:	2004      	movs	r0, #4
 8002946:	f000 fde9 	bl	800351c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 800294a:	bf00      	nop
 800294c:	bd80      	pop	{r7, pc}

0800294e <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 800294e:	b580      	push	{r7, lr}
 8002950:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8002952:	2008      	movs	r0, #8
 8002954:	f000 fde2 	bl	800351c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8002958:	bf00      	nop
 800295a:	bd80      	pop	{r7, pc}

0800295c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002960:	4802      	ldr	r0, [pc, #8]	; (800296c <TIM4_IRQHandler+0x10>)
 8002962:	f003 f955 	bl	8005c10 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002966:	bf00      	nop
 8002968:	bd80      	pop	{r7, pc}
 800296a:	bf00      	nop
 800296c:	200003f4 	.word	0x200003f4

08002970 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002970:	b480      	push	{r7}
 8002972:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002974:	bf00      	nop
 8002976:	46bd      	mov	sp, r7
 8002978:	bc80      	pop	{r7}
 800297a:	4770      	bx	lr

0800297c <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b096      	sub	sp, #88	; 0x58
 8002980:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002982:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002986:	2200      	movs	r2, #0
 8002988:	601a      	str	r2, [r3, #0]
 800298a:	605a      	str	r2, [r3, #4]
 800298c:	609a      	str	r2, [r3, #8]
 800298e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002990:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002994:	2200      	movs	r2, #0
 8002996:	601a      	str	r2, [r3, #0]
 8002998:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800299a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800299e:	2200      	movs	r2, #0
 80029a0:	601a      	str	r2, [r3, #0]
 80029a2:	605a      	str	r2, [r3, #4]
 80029a4:	609a      	str	r2, [r3, #8]
 80029a6:	60da      	str	r2, [r3, #12]
 80029a8:	611a      	str	r2, [r3, #16]
 80029aa:	615a      	str	r2, [r3, #20]
 80029ac:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80029ae:	1d3b      	adds	r3, r7, #4
 80029b0:	2220      	movs	r2, #32
 80029b2:	2100      	movs	r1, #0
 80029b4:	4618      	mov	r0, r3
 80029b6:	f003 ff3e 	bl	8006836 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80029ba:	4b4a      	ldr	r3, [pc, #296]	; (8002ae4 <MX_TIM1_Init+0x168>)
 80029bc:	4a4a      	ldr	r2, [pc, #296]	; (8002ae8 <MX_TIM1_Init+0x16c>)
 80029be:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 47;
 80029c0:	4b48      	ldr	r3, [pc, #288]	; (8002ae4 <MX_TIM1_Init+0x168>)
 80029c2:	222f      	movs	r2, #47	; 0x2f
 80029c4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80029c6:	4b47      	ldr	r3, [pc, #284]	; (8002ae4 <MX_TIM1_Init+0x168>)
 80029c8:	2200      	movs	r2, #0
 80029ca:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 99;
 80029cc:	4b45      	ldr	r3, [pc, #276]	; (8002ae4 <MX_TIM1_Init+0x168>)
 80029ce:	2263      	movs	r2, #99	; 0x63
 80029d0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80029d2:	4b44      	ldr	r3, [pc, #272]	; (8002ae4 <MX_TIM1_Init+0x168>)
 80029d4:	2200      	movs	r2, #0
 80029d6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80029d8:	4b42      	ldr	r3, [pc, #264]	; (8002ae4 <MX_TIM1_Init+0x168>)
 80029da:	2200      	movs	r2, #0
 80029dc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80029de:	4b41      	ldr	r3, [pc, #260]	; (8002ae4 <MX_TIM1_Init+0x168>)
 80029e0:	2200      	movs	r2, #0
 80029e2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80029e4:	483f      	ldr	r0, [pc, #252]	; (8002ae4 <MX_TIM1_Init+0x168>)
 80029e6:	f002 ff2d 	bl	8005844 <HAL_TIM_Base_Init>
 80029ea:	4603      	mov	r3, r0
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d001      	beq.n	80029f4 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 80029f0:	f7ff fa05 	bl	8001dfe <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80029f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80029f8:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80029fa:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80029fe:	4619      	mov	r1, r3
 8002a00:	4838      	ldr	r0, [pc, #224]	; (8002ae4 <MX_TIM1_Init+0x168>)
 8002a02:	f003 facb 	bl	8005f9c <HAL_TIM_ConfigClockSource>
 8002a06:	4603      	mov	r3, r0
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d001      	beq.n	8002a10 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8002a0c:	f7ff f9f7 	bl	8001dfe <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002a10:	4834      	ldr	r0, [pc, #208]	; (8002ae4 <MX_TIM1_Init+0x168>)
 8002a12:	f003 f803 	bl	8005a1c <HAL_TIM_PWM_Init>
 8002a16:	4603      	mov	r3, r0
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d001      	beq.n	8002a20 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8002a1c:	f7ff f9ef 	bl	8001dfe <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a20:	2300      	movs	r3, #0
 8002a22:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a24:	2300      	movs	r3, #0
 8002a26:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002a28:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002a2c:	4619      	mov	r1, r3
 8002a2e:	482d      	ldr	r0, [pc, #180]	; (8002ae4 <MX_TIM1_Init+0x168>)
 8002a30:	f003 fe40 	bl	80066b4 <HAL_TIMEx_MasterConfigSynchronization>
 8002a34:	4603      	mov	r3, r0
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d001      	beq.n	8002a3e <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 8002a3a:	f7ff f9e0 	bl	8001dfe <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002a3e:	2360      	movs	r3, #96	; 0x60
 8002a40:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8002a42:	2300      	movs	r3, #0
 8002a44:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002a46:	2300      	movs	r3, #0
 8002a48:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002a4e:	2300      	movs	r3, #0
 8002a50:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002a52:	2300      	movs	r3, #0
 8002a54:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002a56:	2300      	movs	r3, #0
 8002a58:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002a5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a5e:	2204      	movs	r2, #4
 8002a60:	4619      	mov	r1, r3
 8002a62:	4820      	ldr	r0, [pc, #128]	; (8002ae4 <MX_TIM1_Init+0x168>)
 8002a64:	f003 f9dc 	bl	8005e20 <HAL_TIM_PWM_ConfigChannel>
 8002a68:	4603      	mov	r3, r0
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d001      	beq.n	8002a72 <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8002a6e:	f7ff f9c6 	bl	8001dfe <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002a72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a76:	2208      	movs	r2, #8
 8002a78:	4619      	mov	r1, r3
 8002a7a:	481a      	ldr	r0, [pc, #104]	; (8002ae4 <MX_TIM1_Init+0x168>)
 8002a7c:	f003 f9d0 	bl	8005e20 <HAL_TIM_PWM_ConfigChannel>
 8002a80:	4603      	mov	r3, r0
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d001      	beq.n	8002a8a <MX_TIM1_Init+0x10e>
  {
    Error_Handler();
 8002a86:	f7ff f9ba 	bl	8001dfe <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002a8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a8e:	220c      	movs	r2, #12
 8002a90:	4619      	mov	r1, r3
 8002a92:	4814      	ldr	r0, [pc, #80]	; (8002ae4 <MX_TIM1_Init+0x168>)
 8002a94:	f003 f9c4 	bl	8005e20 <HAL_TIM_PWM_ConfigChannel>
 8002a98:	4603      	mov	r3, r0
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d001      	beq.n	8002aa2 <MX_TIM1_Init+0x126>
  {
    Error_Handler();
 8002a9e:	f7ff f9ae 	bl	8001dfe <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002aaa:	2300      	movs	r3, #0
 8002aac:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002aae:	2300      	movs	r3, #0
 8002ab0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002ab6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002aba:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002abc:	2300      	movs	r3, #0
 8002abe:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002ac0:	1d3b      	adds	r3, r7, #4
 8002ac2:	4619      	mov	r1, r3
 8002ac4:	4807      	ldr	r0, [pc, #28]	; (8002ae4 <MX_TIM1_Init+0x168>)
 8002ac6:	f003 fe53 	bl	8006770 <HAL_TIMEx_ConfigBreakDeadTime>
 8002aca:	4603      	mov	r3, r0
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d001      	beq.n	8002ad4 <MX_TIM1_Init+0x158>
  {
    Error_Handler();
 8002ad0:	f7ff f995 	bl	8001dfe <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002ad4:	4803      	ldr	r0, [pc, #12]	; (8002ae4 <MX_TIM1_Init+0x168>)
 8002ad6:	f000 f979 	bl	8002dcc <HAL_TIM_MspPostInit>

}
 8002ada:	bf00      	nop
 8002adc:	3758      	adds	r7, #88	; 0x58
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bd80      	pop	{r7, pc}
 8002ae2:	bf00      	nop
 8002ae4:	2000031c 	.word	0x2000031c
 8002ae8:	40012c00 	.word	0x40012c00

08002aec <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b08e      	sub	sp, #56	; 0x38
 8002af0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002af2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002af6:	2200      	movs	r2, #0
 8002af8:	601a      	str	r2, [r3, #0]
 8002afa:	605a      	str	r2, [r3, #4]
 8002afc:	609a      	str	r2, [r3, #8]
 8002afe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b00:	f107 0320 	add.w	r3, r7, #32
 8002b04:	2200      	movs	r2, #0
 8002b06:	601a      	str	r2, [r3, #0]
 8002b08:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002b0a:	1d3b      	adds	r3, r7, #4
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	601a      	str	r2, [r3, #0]
 8002b10:	605a      	str	r2, [r3, #4]
 8002b12:	609a      	str	r2, [r3, #8]
 8002b14:	60da      	str	r2, [r3, #12]
 8002b16:	611a      	str	r2, [r3, #16]
 8002b18:	615a      	str	r2, [r3, #20]
 8002b1a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002b1c:	4b2c      	ldr	r3, [pc, #176]	; (8002bd0 <MX_TIM2_Init+0xe4>)
 8002b1e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002b22:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 47;
 8002b24:	4b2a      	ldr	r3, [pc, #168]	; (8002bd0 <MX_TIM2_Init+0xe4>)
 8002b26:	222f      	movs	r2, #47	; 0x2f
 8002b28:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b2a:	4b29      	ldr	r3, [pc, #164]	; (8002bd0 <MX_TIM2_Init+0xe4>)
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 99;
 8002b30:	4b27      	ldr	r3, [pc, #156]	; (8002bd0 <MX_TIM2_Init+0xe4>)
 8002b32:	2263      	movs	r2, #99	; 0x63
 8002b34:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b36:	4b26      	ldr	r3, [pc, #152]	; (8002bd0 <MX_TIM2_Init+0xe4>)
 8002b38:	2200      	movs	r2, #0
 8002b3a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b3c:	4b24      	ldr	r3, [pc, #144]	; (8002bd0 <MX_TIM2_Init+0xe4>)
 8002b3e:	2200      	movs	r2, #0
 8002b40:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002b42:	4823      	ldr	r0, [pc, #140]	; (8002bd0 <MX_TIM2_Init+0xe4>)
 8002b44:	f002 fe7e 	bl	8005844 <HAL_TIM_Base_Init>
 8002b48:	4603      	mov	r3, r0
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d001      	beq.n	8002b52 <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 8002b4e:	f7ff f956 	bl	8001dfe <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002b52:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b56:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002b58:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002b5c:	4619      	mov	r1, r3
 8002b5e:	481c      	ldr	r0, [pc, #112]	; (8002bd0 <MX_TIM2_Init+0xe4>)
 8002b60:	f003 fa1c 	bl	8005f9c <HAL_TIM_ConfigClockSource>
 8002b64:	4603      	mov	r3, r0
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d001      	beq.n	8002b6e <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 8002b6a:	f7ff f948 	bl	8001dfe <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002b6e:	4818      	ldr	r0, [pc, #96]	; (8002bd0 <MX_TIM2_Init+0xe4>)
 8002b70:	f002 ff54 	bl	8005a1c <HAL_TIM_PWM_Init>
 8002b74:	4603      	mov	r3, r0
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d001      	beq.n	8002b7e <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 8002b7a:	f7ff f940 	bl	8001dfe <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002b7e:	2300      	movs	r3, #0
 8002b80:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b82:	2300      	movs	r3, #0
 8002b84:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002b86:	f107 0320 	add.w	r3, r7, #32
 8002b8a:	4619      	mov	r1, r3
 8002b8c:	4810      	ldr	r0, [pc, #64]	; (8002bd0 <MX_TIM2_Init+0xe4>)
 8002b8e:	f003 fd91 	bl	80066b4 <HAL_TIMEx_MasterConfigSynchronization>
 8002b92:	4603      	mov	r3, r0
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d001      	beq.n	8002b9c <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 8002b98:	f7ff f931 	bl	8001dfe <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002b9c:	2360      	movs	r3, #96	; 0x60
 8002b9e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002ba8:	2300      	movs	r3, #0
 8002baa:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002bac:	1d3b      	adds	r3, r7, #4
 8002bae:	220c      	movs	r2, #12
 8002bb0:	4619      	mov	r1, r3
 8002bb2:	4807      	ldr	r0, [pc, #28]	; (8002bd0 <MX_TIM2_Init+0xe4>)
 8002bb4:	f003 f934 	bl	8005e20 <HAL_TIM_PWM_ConfigChannel>
 8002bb8:	4603      	mov	r3, r0
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d001      	beq.n	8002bc2 <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 8002bbe:	f7ff f91e 	bl	8001dfe <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002bc2:	4803      	ldr	r0, [pc, #12]	; (8002bd0 <MX_TIM2_Init+0xe4>)
 8002bc4:	f000 f902 	bl	8002dcc <HAL_TIM_MspPostInit>

}
 8002bc8:	bf00      	nop
 8002bca:	3738      	adds	r7, #56	; 0x38
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	bd80      	pop	{r7, pc}
 8002bd0:	20000364 	.word	0x20000364

08002bd4 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b086      	sub	sp, #24
 8002bd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002bda:	f107 0308 	add.w	r3, r7, #8
 8002bde:	2200      	movs	r2, #0
 8002be0:	601a      	str	r2, [r3, #0]
 8002be2:	605a      	str	r2, [r3, #4]
 8002be4:	609a      	str	r2, [r3, #8]
 8002be6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002be8:	463b      	mov	r3, r7
 8002bea:	2200      	movs	r2, #0
 8002bec:	601a      	str	r2, [r3, #0]
 8002bee:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002bf0:	4b1d      	ldr	r3, [pc, #116]	; (8002c68 <MX_TIM3_Init+0x94>)
 8002bf2:	4a1e      	ldr	r2, [pc, #120]	; (8002c6c <MX_TIM3_Init+0x98>)
 8002bf4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 47;
 8002bf6:	4b1c      	ldr	r3, [pc, #112]	; (8002c68 <MX_TIM3_Init+0x94>)
 8002bf8:	222f      	movs	r2, #47	; 0x2f
 8002bfa:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002bfc:	4b1a      	ldr	r3, [pc, #104]	; (8002c68 <MX_TIM3_Init+0x94>)
 8002bfe:	2200      	movs	r2, #0
 8002c00:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0xffff-1;
 8002c02:	4b19      	ldr	r3, [pc, #100]	; (8002c68 <MX_TIM3_Init+0x94>)
 8002c04:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8002c08:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c0a:	4b17      	ldr	r3, [pc, #92]	; (8002c68 <MX_TIM3_Init+0x94>)
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c10:	4b15      	ldr	r3, [pc, #84]	; (8002c68 <MX_TIM3_Init+0x94>)
 8002c12:	2200      	movs	r2, #0
 8002c14:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002c16:	4814      	ldr	r0, [pc, #80]	; (8002c68 <MX_TIM3_Init+0x94>)
 8002c18:	f002 fe14 	bl	8005844 <HAL_TIM_Base_Init>
 8002c1c:	4603      	mov	r3, r0
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d001      	beq.n	8002c26 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8002c22:	f7ff f8ec 	bl	8001dfe <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002c26:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c2a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002c2c:	f107 0308 	add.w	r3, r7, #8
 8002c30:	4619      	mov	r1, r3
 8002c32:	480d      	ldr	r0, [pc, #52]	; (8002c68 <MX_TIM3_Init+0x94>)
 8002c34:	f003 f9b2 	bl	8005f9c <HAL_TIM_ConfigClockSource>
 8002c38:	4603      	mov	r3, r0
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d001      	beq.n	8002c42 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8002c3e:	f7ff f8de 	bl	8001dfe <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002c42:	2300      	movs	r3, #0
 8002c44:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002c46:	2300      	movs	r3, #0
 8002c48:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002c4a:	463b      	mov	r3, r7
 8002c4c:	4619      	mov	r1, r3
 8002c4e:	4806      	ldr	r0, [pc, #24]	; (8002c68 <MX_TIM3_Init+0x94>)
 8002c50:	f003 fd30 	bl	80066b4 <HAL_TIMEx_MasterConfigSynchronization>
 8002c54:	4603      	mov	r3, r0
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d001      	beq.n	8002c5e <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8002c5a:	f7ff f8d0 	bl	8001dfe <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002c5e:	bf00      	nop
 8002c60:	3718      	adds	r7, #24
 8002c62:	46bd      	mov	sp, r7
 8002c64:	bd80      	pop	{r7, pc}
 8002c66:	bf00      	nop
 8002c68:	200003ac 	.word	0x200003ac
 8002c6c:	40000400 	.word	0x40000400

08002c70 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b086      	sub	sp, #24
 8002c74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002c76:	f107 0308 	add.w	r3, r7, #8
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	601a      	str	r2, [r3, #0]
 8002c7e:	605a      	str	r2, [r3, #4]
 8002c80:	609a      	str	r2, [r3, #8]
 8002c82:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002c84:	463b      	mov	r3, r7
 8002c86:	2200      	movs	r2, #0
 8002c88:	601a      	str	r2, [r3, #0]
 8002c8a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002c8c:	4b1d      	ldr	r3, [pc, #116]	; (8002d04 <MX_TIM4_Init+0x94>)
 8002c8e:	4a1e      	ldr	r2, [pc, #120]	; (8002d08 <MX_TIM4_Init+0x98>)
 8002c90:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 47;
 8002c92:	4b1c      	ldr	r3, [pc, #112]	; (8002d04 <MX_TIM4_Init+0x94>)
 8002c94:	222f      	movs	r2, #47	; 0x2f
 8002c96:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c98:	4b1a      	ldr	r3, [pc, #104]	; (8002d04 <MX_TIM4_Init+0x94>)
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 8002c9e:	4b19      	ldr	r3, [pc, #100]	; (8002d04 <MX_TIM4_Init+0x94>)
 8002ca0:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002ca4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ca6:	4b17      	ldr	r3, [pc, #92]	; (8002d04 <MX_TIM4_Init+0x94>)
 8002ca8:	2200      	movs	r2, #0
 8002caa:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002cac:	4b15      	ldr	r3, [pc, #84]	; (8002d04 <MX_TIM4_Init+0x94>)
 8002cae:	2200      	movs	r2, #0
 8002cb0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002cb2:	4814      	ldr	r0, [pc, #80]	; (8002d04 <MX_TIM4_Init+0x94>)
 8002cb4:	f002 fdc6 	bl	8005844 <HAL_TIM_Base_Init>
 8002cb8:	4603      	mov	r3, r0
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d001      	beq.n	8002cc2 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8002cbe:	f7ff f89e 	bl	8001dfe <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002cc2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002cc6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002cc8:	f107 0308 	add.w	r3, r7, #8
 8002ccc:	4619      	mov	r1, r3
 8002cce:	480d      	ldr	r0, [pc, #52]	; (8002d04 <MX_TIM4_Init+0x94>)
 8002cd0:	f003 f964 	bl	8005f9c <HAL_TIM_ConfigClockSource>
 8002cd4:	4603      	mov	r3, r0
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d001      	beq.n	8002cde <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8002cda:	f7ff f890 	bl	8001dfe <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002cde:	2300      	movs	r3, #0
 8002ce0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002ce6:	463b      	mov	r3, r7
 8002ce8:	4619      	mov	r1, r3
 8002cea:	4806      	ldr	r0, [pc, #24]	; (8002d04 <MX_TIM4_Init+0x94>)
 8002cec:	f003 fce2 	bl	80066b4 <HAL_TIMEx_MasterConfigSynchronization>
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d001      	beq.n	8002cfa <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8002cf6:	f7ff f882 	bl	8001dfe <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002cfa:	bf00      	nop
 8002cfc:	3718      	adds	r7, #24
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	bd80      	pop	{r7, pc}
 8002d02:	bf00      	nop
 8002d04:	200003f4 	.word	0x200003f4
 8002d08:	40000800 	.word	0x40000800

08002d0c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b086      	sub	sp, #24
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4a28      	ldr	r2, [pc, #160]	; (8002dbc <HAL_TIM_Base_MspInit+0xb0>)
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d10c      	bne.n	8002d38 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002d1e:	4b28      	ldr	r3, [pc, #160]	; (8002dc0 <HAL_TIM_Base_MspInit+0xb4>)
 8002d20:	699b      	ldr	r3, [r3, #24]
 8002d22:	4a27      	ldr	r2, [pc, #156]	; (8002dc0 <HAL_TIM_Base_MspInit+0xb4>)
 8002d24:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002d28:	6193      	str	r3, [r2, #24]
 8002d2a:	4b25      	ldr	r3, [pc, #148]	; (8002dc0 <HAL_TIM_Base_MspInit+0xb4>)
 8002d2c:	699b      	ldr	r3, [r3, #24]
 8002d2e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d32:	617b      	str	r3, [r7, #20]
 8002d34:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8002d36:	e03c      	b.n	8002db2 <HAL_TIM_Base_MspInit+0xa6>
  else if(tim_baseHandle->Instance==TIM2)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d40:	d10c      	bne.n	8002d5c <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002d42:	4b1f      	ldr	r3, [pc, #124]	; (8002dc0 <HAL_TIM_Base_MspInit+0xb4>)
 8002d44:	69db      	ldr	r3, [r3, #28]
 8002d46:	4a1e      	ldr	r2, [pc, #120]	; (8002dc0 <HAL_TIM_Base_MspInit+0xb4>)
 8002d48:	f043 0301 	orr.w	r3, r3, #1
 8002d4c:	61d3      	str	r3, [r2, #28]
 8002d4e:	4b1c      	ldr	r3, [pc, #112]	; (8002dc0 <HAL_TIM_Base_MspInit+0xb4>)
 8002d50:	69db      	ldr	r3, [r3, #28]
 8002d52:	f003 0301 	and.w	r3, r3, #1
 8002d56:	613b      	str	r3, [r7, #16]
 8002d58:	693b      	ldr	r3, [r7, #16]
}
 8002d5a:	e02a      	b.n	8002db2 <HAL_TIM_Base_MspInit+0xa6>
  else if(tim_baseHandle->Instance==TIM3)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4a18      	ldr	r2, [pc, #96]	; (8002dc4 <HAL_TIM_Base_MspInit+0xb8>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d10c      	bne.n	8002d80 <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002d66:	4b16      	ldr	r3, [pc, #88]	; (8002dc0 <HAL_TIM_Base_MspInit+0xb4>)
 8002d68:	69db      	ldr	r3, [r3, #28]
 8002d6a:	4a15      	ldr	r2, [pc, #84]	; (8002dc0 <HAL_TIM_Base_MspInit+0xb4>)
 8002d6c:	f043 0302 	orr.w	r3, r3, #2
 8002d70:	61d3      	str	r3, [r2, #28]
 8002d72:	4b13      	ldr	r3, [pc, #76]	; (8002dc0 <HAL_TIM_Base_MspInit+0xb4>)
 8002d74:	69db      	ldr	r3, [r3, #28]
 8002d76:	f003 0302 	and.w	r3, r3, #2
 8002d7a:	60fb      	str	r3, [r7, #12]
 8002d7c:	68fb      	ldr	r3, [r7, #12]
}
 8002d7e:	e018      	b.n	8002db2 <HAL_TIM_Base_MspInit+0xa6>
  else if(tim_baseHandle->Instance==TIM4)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4a10      	ldr	r2, [pc, #64]	; (8002dc8 <HAL_TIM_Base_MspInit+0xbc>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d113      	bne.n	8002db2 <HAL_TIM_Base_MspInit+0xa6>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002d8a:	4b0d      	ldr	r3, [pc, #52]	; (8002dc0 <HAL_TIM_Base_MspInit+0xb4>)
 8002d8c:	69db      	ldr	r3, [r3, #28]
 8002d8e:	4a0c      	ldr	r2, [pc, #48]	; (8002dc0 <HAL_TIM_Base_MspInit+0xb4>)
 8002d90:	f043 0304 	orr.w	r3, r3, #4
 8002d94:	61d3      	str	r3, [r2, #28]
 8002d96:	4b0a      	ldr	r3, [pc, #40]	; (8002dc0 <HAL_TIM_Base_MspInit+0xb4>)
 8002d98:	69db      	ldr	r3, [r3, #28]
 8002d9a:	f003 0304 	and.w	r3, r3, #4
 8002d9e:	60bb      	str	r3, [r7, #8]
 8002da0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 2, 0);
 8002da2:	2200      	movs	r2, #0
 8002da4:	2102      	movs	r1, #2
 8002da6:	201e      	movs	r0, #30
 8002da8:	f000 f9e5 	bl	8003176 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002dac:	201e      	movs	r0, #30
 8002dae:	f000 f9fe 	bl	80031ae <HAL_NVIC_EnableIRQ>
}
 8002db2:	bf00      	nop
 8002db4:	3718      	adds	r7, #24
 8002db6:	46bd      	mov	sp, r7
 8002db8:	bd80      	pop	{r7, pc}
 8002dba:	bf00      	nop
 8002dbc:	40012c00 	.word	0x40012c00
 8002dc0:	40021000 	.word	0x40021000
 8002dc4:	40000400 	.word	0x40000400
 8002dc8:	40000800 	.word	0x40000800

08002dcc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b088      	sub	sp, #32
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002dd4:	f107 0310 	add.w	r3, r7, #16
 8002dd8:	2200      	movs	r2, #0
 8002dda:	601a      	str	r2, [r3, #0]
 8002ddc:	605a      	str	r2, [r3, #4]
 8002dde:	609a      	str	r2, [r3, #8]
 8002de0:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM1)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	4a1f      	ldr	r2, [pc, #124]	; (8002e64 <HAL_TIM_MspPostInit+0x98>)
 8002de8:	4293      	cmp	r3, r2
 8002dea:	d119      	bne.n	8002e20 <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002dec:	4b1e      	ldr	r3, [pc, #120]	; (8002e68 <HAL_TIM_MspPostInit+0x9c>)
 8002dee:	699b      	ldr	r3, [r3, #24]
 8002df0:	4a1d      	ldr	r2, [pc, #116]	; (8002e68 <HAL_TIM_MspPostInit+0x9c>)
 8002df2:	f043 0304 	orr.w	r3, r3, #4
 8002df6:	6193      	str	r3, [r2, #24]
 8002df8:	4b1b      	ldr	r3, [pc, #108]	; (8002e68 <HAL_TIM_MspPostInit+0x9c>)
 8002dfa:	699b      	ldr	r3, [r3, #24]
 8002dfc:	f003 0304 	and.w	r3, r3, #4
 8002e00:	60fb      	str	r3, [r7, #12]
 8002e02:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8002e04:	f44f 6360 	mov.w	r3, #3584	; 0xe00
 8002e08:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e0a:	2302      	movs	r3, #2
 8002e0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e0e:	2302      	movs	r3, #2
 8002e10:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e12:	f107 0310 	add.w	r3, r7, #16
 8002e16:	4619      	mov	r1, r3
 8002e18:	4814      	ldr	r0, [pc, #80]	; (8002e6c <HAL_TIM_MspPostInit+0xa0>)
 8002e1a:	f000 f9e3 	bl	80031e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002e1e:	e01c      	b.n	8002e5a <HAL_TIM_MspPostInit+0x8e>
  else if(timHandle->Instance==TIM2)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e28:	d117      	bne.n	8002e5a <HAL_TIM_MspPostInit+0x8e>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e2a:	4b0f      	ldr	r3, [pc, #60]	; (8002e68 <HAL_TIM_MspPostInit+0x9c>)
 8002e2c:	699b      	ldr	r3, [r3, #24]
 8002e2e:	4a0e      	ldr	r2, [pc, #56]	; (8002e68 <HAL_TIM_MspPostInit+0x9c>)
 8002e30:	f043 0304 	orr.w	r3, r3, #4
 8002e34:	6193      	str	r3, [r2, #24]
 8002e36:	4b0c      	ldr	r3, [pc, #48]	; (8002e68 <HAL_TIM_MspPostInit+0x9c>)
 8002e38:	699b      	ldr	r3, [r3, #24]
 8002e3a:	f003 0304 	and.w	r3, r3, #4
 8002e3e:	60bb      	str	r3, [r7, #8]
 8002e40:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002e42:	2308      	movs	r3, #8
 8002e44:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e46:	2302      	movs	r3, #2
 8002e48:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e4a:	2302      	movs	r3, #2
 8002e4c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e4e:	f107 0310 	add.w	r3, r7, #16
 8002e52:	4619      	mov	r1, r3
 8002e54:	4805      	ldr	r0, [pc, #20]	; (8002e6c <HAL_TIM_MspPostInit+0xa0>)
 8002e56:	f000 f9c5 	bl	80031e4 <HAL_GPIO_Init>
}
 8002e5a:	bf00      	nop
 8002e5c:	3720      	adds	r7, #32
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	bd80      	pop	{r7, pc}
 8002e62:	bf00      	nop
 8002e64:	40012c00 	.word	0x40012c00
 8002e68:	40021000 	.word	0x40021000
 8002e6c:	40010800 	.word	0x40010800

08002e70 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002e70:	480c      	ldr	r0, [pc, #48]	; (8002ea4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002e72:	490d      	ldr	r1, [pc, #52]	; (8002ea8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002e74:	4a0d      	ldr	r2, [pc, #52]	; (8002eac <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002e76:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002e78:	e002      	b.n	8002e80 <LoopCopyDataInit>

08002e7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002e7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002e7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002e7e:	3304      	adds	r3, #4

08002e80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002e80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002e82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002e84:	d3f9      	bcc.n	8002e7a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002e86:	4a0a      	ldr	r2, [pc, #40]	; (8002eb0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002e88:	4c0a      	ldr	r4, [pc, #40]	; (8002eb4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002e8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002e8c:	e001      	b.n	8002e92 <LoopFillZerobss>

08002e8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002e8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002e90:	3204      	adds	r2, #4

08002e92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002e92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002e94:	d3fb      	bcc.n	8002e8e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002e96:	f7ff fd6b 	bl	8002970 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002e9a:	f003 fcdb 	bl	8006854 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002e9e:	f7fe fecb 	bl	8001c38 <main>
  bx lr
 8002ea2:	4770      	bx	lr
  ldr r0, =_sdata
 8002ea4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002ea8:	20000168 	.word	0x20000168
  ldr r2, =_sidata
 8002eac:	08007dc8 	.word	0x08007dc8
  ldr r2, =_sbss
 8002eb0:	20000168 	.word	0x20000168
  ldr r4, =_ebss
 8002eb4:	20000578 	.word	0x20000578

08002eb8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002eb8:	e7fe      	b.n	8002eb8 <ADC1_2_IRQHandler>
	...

08002ebc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002ec0:	4b08      	ldr	r3, [pc, #32]	; (8002ee4 <HAL_Init+0x28>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4a07      	ldr	r2, [pc, #28]	; (8002ee4 <HAL_Init+0x28>)
 8002ec6:	f043 0310 	orr.w	r3, r3, #16
 8002eca:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002ecc:	2003      	movs	r0, #3
 8002ece:	f000 f947 	bl	8003160 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002ed2:	2000      	movs	r0, #0
 8002ed4:	f000 f808 	bl	8002ee8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002ed8:	f7ff fcc6 	bl	8002868 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002edc:	2300      	movs	r3, #0
}
 8002ede:	4618      	mov	r0, r3
 8002ee0:	bd80      	pop	{r7, pc}
 8002ee2:	bf00      	nop
 8002ee4:	40022000 	.word	0x40022000

08002ee8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b082      	sub	sp, #8
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002ef0:	4b12      	ldr	r3, [pc, #72]	; (8002f3c <HAL_InitTick+0x54>)
 8002ef2:	681a      	ldr	r2, [r3, #0]
 8002ef4:	4b12      	ldr	r3, [pc, #72]	; (8002f40 <HAL_InitTick+0x58>)
 8002ef6:	781b      	ldrb	r3, [r3, #0]
 8002ef8:	4619      	mov	r1, r3
 8002efa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002efe:	fbb3 f3f1 	udiv	r3, r3, r1
 8002f02:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f06:	4618      	mov	r0, r3
 8002f08:	f000 f95f 	bl	80031ca <HAL_SYSTICK_Config>
 8002f0c:	4603      	mov	r3, r0
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d001      	beq.n	8002f16 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002f12:	2301      	movs	r3, #1
 8002f14:	e00e      	b.n	8002f34 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	2b0f      	cmp	r3, #15
 8002f1a:	d80a      	bhi.n	8002f32 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	6879      	ldr	r1, [r7, #4]
 8002f20:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002f24:	f000 f927 	bl	8003176 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002f28:	4a06      	ldr	r2, [pc, #24]	; (8002f44 <HAL_InitTick+0x5c>)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002f2e:	2300      	movs	r3, #0
 8002f30:	e000      	b.n	8002f34 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002f32:	2301      	movs	r3, #1
}
 8002f34:	4618      	mov	r0, r3
 8002f36:	3708      	adds	r7, #8
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	bd80      	pop	{r7, pc}
 8002f3c:	200000fc 	.word	0x200000fc
 8002f40:	20000104 	.word	0x20000104
 8002f44:	20000100 	.word	0x20000100

08002f48 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002f48:	b480      	push	{r7}
 8002f4a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002f4c:	4b05      	ldr	r3, [pc, #20]	; (8002f64 <HAL_IncTick+0x1c>)
 8002f4e:	781b      	ldrb	r3, [r3, #0]
 8002f50:	461a      	mov	r2, r3
 8002f52:	4b05      	ldr	r3, [pc, #20]	; (8002f68 <HAL_IncTick+0x20>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	4413      	add	r3, r2
 8002f58:	4a03      	ldr	r2, [pc, #12]	; (8002f68 <HAL_IncTick+0x20>)
 8002f5a:	6013      	str	r3, [r2, #0]
}
 8002f5c:	bf00      	nop
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	bc80      	pop	{r7}
 8002f62:	4770      	bx	lr
 8002f64:	20000104 	.word	0x20000104
 8002f68:	2000043c 	.word	0x2000043c

08002f6c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002f6c:	b480      	push	{r7}
 8002f6e:	af00      	add	r7, sp, #0
  return uwTick;
 8002f70:	4b02      	ldr	r3, [pc, #8]	; (8002f7c <HAL_GetTick+0x10>)
 8002f72:	681b      	ldr	r3, [r3, #0]
}
 8002f74:	4618      	mov	r0, r3
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bc80      	pop	{r7}
 8002f7a:	4770      	bx	lr
 8002f7c:	2000043c 	.word	0x2000043c

08002f80 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b084      	sub	sp, #16
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002f88:	f7ff fff0 	bl	8002f6c <HAL_GetTick>
 8002f8c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002f98:	d005      	beq.n	8002fa6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002f9a:	4b0a      	ldr	r3, [pc, #40]	; (8002fc4 <HAL_Delay+0x44>)
 8002f9c:	781b      	ldrb	r3, [r3, #0]
 8002f9e:	461a      	mov	r2, r3
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	4413      	add	r3, r2
 8002fa4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002fa6:	bf00      	nop
 8002fa8:	f7ff ffe0 	bl	8002f6c <HAL_GetTick>
 8002fac:	4602      	mov	r2, r0
 8002fae:	68bb      	ldr	r3, [r7, #8]
 8002fb0:	1ad3      	subs	r3, r2, r3
 8002fb2:	68fa      	ldr	r2, [r7, #12]
 8002fb4:	429a      	cmp	r2, r3
 8002fb6:	d8f7      	bhi.n	8002fa8 <HAL_Delay+0x28>
  {
  }
}
 8002fb8:	bf00      	nop
 8002fba:	bf00      	nop
 8002fbc:	3710      	adds	r7, #16
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	bd80      	pop	{r7, pc}
 8002fc2:	bf00      	nop
 8002fc4:	20000104 	.word	0x20000104

08002fc8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002fc8:	b480      	push	{r7}
 8002fca:	b085      	sub	sp, #20
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	f003 0307 	and.w	r3, r3, #7
 8002fd6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002fd8:	4b0c      	ldr	r3, [pc, #48]	; (800300c <__NVIC_SetPriorityGrouping+0x44>)
 8002fda:	68db      	ldr	r3, [r3, #12]
 8002fdc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002fde:	68ba      	ldr	r2, [r7, #8]
 8002fe0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002fe4:	4013      	ands	r3, r2
 8002fe6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002fec:	68bb      	ldr	r3, [r7, #8]
 8002fee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002ff0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002ff4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ff8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002ffa:	4a04      	ldr	r2, [pc, #16]	; (800300c <__NVIC_SetPriorityGrouping+0x44>)
 8002ffc:	68bb      	ldr	r3, [r7, #8]
 8002ffe:	60d3      	str	r3, [r2, #12]
}
 8003000:	bf00      	nop
 8003002:	3714      	adds	r7, #20
 8003004:	46bd      	mov	sp, r7
 8003006:	bc80      	pop	{r7}
 8003008:	4770      	bx	lr
 800300a:	bf00      	nop
 800300c:	e000ed00 	.word	0xe000ed00

08003010 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003010:	b480      	push	{r7}
 8003012:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003014:	4b04      	ldr	r3, [pc, #16]	; (8003028 <__NVIC_GetPriorityGrouping+0x18>)
 8003016:	68db      	ldr	r3, [r3, #12]
 8003018:	0a1b      	lsrs	r3, r3, #8
 800301a:	f003 0307 	and.w	r3, r3, #7
}
 800301e:	4618      	mov	r0, r3
 8003020:	46bd      	mov	sp, r7
 8003022:	bc80      	pop	{r7}
 8003024:	4770      	bx	lr
 8003026:	bf00      	nop
 8003028:	e000ed00 	.word	0xe000ed00

0800302c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800302c:	b480      	push	{r7}
 800302e:	b083      	sub	sp, #12
 8003030:	af00      	add	r7, sp, #0
 8003032:	4603      	mov	r3, r0
 8003034:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003036:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800303a:	2b00      	cmp	r3, #0
 800303c:	db0b      	blt.n	8003056 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800303e:	79fb      	ldrb	r3, [r7, #7]
 8003040:	f003 021f 	and.w	r2, r3, #31
 8003044:	4906      	ldr	r1, [pc, #24]	; (8003060 <__NVIC_EnableIRQ+0x34>)
 8003046:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800304a:	095b      	lsrs	r3, r3, #5
 800304c:	2001      	movs	r0, #1
 800304e:	fa00 f202 	lsl.w	r2, r0, r2
 8003052:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003056:	bf00      	nop
 8003058:	370c      	adds	r7, #12
 800305a:	46bd      	mov	sp, r7
 800305c:	bc80      	pop	{r7}
 800305e:	4770      	bx	lr
 8003060:	e000e100 	.word	0xe000e100

08003064 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003064:	b480      	push	{r7}
 8003066:	b083      	sub	sp, #12
 8003068:	af00      	add	r7, sp, #0
 800306a:	4603      	mov	r3, r0
 800306c:	6039      	str	r1, [r7, #0]
 800306e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003070:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003074:	2b00      	cmp	r3, #0
 8003076:	db0a      	blt.n	800308e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	b2da      	uxtb	r2, r3
 800307c:	490c      	ldr	r1, [pc, #48]	; (80030b0 <__NVIC_SetPriority+0x4c>)
 800307e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003082:	0112      	lsls	r2, r2, #4
 8003084:	b2d2      	uxtb	r2, r2
 8003086:	440b      	add	r3, r1
 8003088:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800308c:	e00a      	b.n	80030a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	b2da      	uxtb	r2, r3
 8003092:	4908      	ldr	r1, [pc, #32]	; (80030b4 <__NVIC_SetPriority+0x50>)
 8003094:	79fb      	ldrb	r3, [r7, #7]
 8003096:	f003 030f 	and.w	r3, r3, #15
 800309a:	3b04      	subs	r3, #4
 800309c:	0112      	lsls	r2, r2, #4
 800309e:	b2d2      	uxtb	r2, r2
 80030a0:	440b      	add	r3, r1
 80030a2:	761a      	strb	r2, [r3, #24]
}
 80030a4:	bf00      	nop
 80030a6:	370c      	adds	r7, #12
 80030a8:	46bd      	mov	sp, r7
 80030aa:	bc80      	pop	{r7}
 80030ac:	4770      	bx	lr
 80030ae:	bf00      	nop
 80030b0:	e000e100 	.word	0xe000e100
 80030b4:	e000ed00 	.word	0xe000ed00

080030b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80030b8:	b480      	push	{r7}
 80030ba:	b089      	sub	sp, #36	; 0x24
 80030bc:	af00      	add	r7, sp, #0
 80030be:	60f8      	str	r0, [r7, #12]
 80030c0:	60b9      	str	r1, [r7, #8]
 80030c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	f003 0307 	and.w	r3, r3, #7
 80030ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80030cc:	69fb      	ldr	r3, [r7, #28]
 80030ce:	f1c3 0307 	rsb	r3, r3, #7
 80030d2:	2b04      	cmp	r3, #4
 80030d4:	bf28      	it	cs
 80030d6:	2304      	movcs	r3, #4
 80030d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80030da:	69fb      	ldr	r3, [r7, #28]
 80030dc:	3304      	adds	r3, #4
 80030de:	2b06      	cmp	r3, #6
 80030e0:	d902      	bls.n	80030e8 <NVIC_EncodePriority+0x30>
 80030e2:	69fb      	ldr	r3, [r7, #28]
 80030e4:	3b03      	subs	r3, #3
 80030e6:	e000      	b.n	80030ea <NVIC_EncodePriority+0x32>
 80030e8:	2300      	movs	r3, #0
 80030ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030ec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80030f0:	69bb      	ldr	r3, [r7, #24]
 80030f2:	fa02 f303 	lsl.w	r3, r2, r3
 80030f6:	43da      	mvns	r2, r3
 80030f8:	68bb      	ldr	r3, [r7, #8]
 80030fa:	401a      	ands	r2, r3
 80030fc:	697b      	ldr	r3, [r7, #20]
 80030fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003100:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003104:	697b      	ldr	r3, [r7, #20]
 8003106:	fa01 f303 	lsl.w	r3, r1, r3
 800310a:	43d9      	mvns	r1, r3
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003110:	4313      	orrs	r3, r2
         );
}
 8003112:	4618      	mov	r0, r3
 8003114:	3724      	adds	r7, #36	; 0x24
 8003116:	46bd      	mov	sp, r7
 8003118:	bc80      	pop	{r7}
 800311a:	4770      	bx	lr

0800311c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b082      	sub	sp, #8
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	3b01      	subs	r3, #1
 8003128:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800312c:	d301      	bcc.n	8003132 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800312e:	2301      	movs	r3, #1
 8003130:	e00f      	b.n	8003152 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003132:	4a0a      	ldr	r2, [pc, #40]	; (800315c <SysTick_Config+0x40>)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	3b01      	subs	r3, #1
 8003138:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800313a:	210f      	movs	r1, #15
 800313c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003140:	f7ff ff90 	bl	8003064 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003144:	4b05      	ldr	r3, [pc, #20]	; (800315c <SysTick_Config+0x40>)
 8003146:	2200      	movs	r2, #0
 8003148:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800314a:	4b04      	ldr	r3, [pc, #16]	; (800315c <SysTick_Config+0x40>)
 800314c:	2207      	movs	r2, #7
 800314e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003150:	2300      	movs	r3, #0
}
 8003152:	4618      	mov	r0, r3
 8003154:	3708      	adds	r7, #8
 8003156:	46bd      	mov	sp, r7
 8003158:	bd80      	pop	{r7, pc}
 800315a:	bf00      	nop
 800315c:	e000e010 	.word	0xe000e010

08003160 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b082      	sub	sp, #8
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003168:	6878      	ldr	r0, [r7, #4]
 800316a:	f7ff ff2d 	bl	8002fc8 <__NVIC_SetPriorityGrouping>
}
 800316e:	bf00      	nop
 8003170:	3708      	adds	r7, #8
 8003172:	46bd      	mov	sp, r7
 8003174:	bd80      	pop	{r7, pc}

08003176 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003176:	b580      	push	{r7, lr}
 8003178:	b086      	sub	sp, #24
 800317a:	af00      	add	r7, sp, #0
 800317c:	4603      	mov	r3, r0
 800317e:	60b9      	str	r1, [r7, #8]
 8003180:	607a      	str	r2, [r7, #4]
 8003182:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003184:	2300      	movs	r3, #0
 8003186:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003188:	f7ff ff42 	bl	8003010 <__NVIC_GetPriorityGrouping>
 800318c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800318e:	687a      	ldr	r2, [r7, #4]
 8003190:	68b9      	ldr	r1, [r7, #8]
 8003192:	6978      	ldr	r0, [r7, #20]
 8003194:	f7ff ff90 	bl	80030b8 <NVIC_EncodePriority>
 8003198:	4602      	mov	r2, r0
 800319a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800319e:	4611      	mov	r1, r2
 80031a0:	4618      	mov	r0, r3
 80031a2:	f7ff ff5f 	bl	8003064 <__NVIC_SetPriority>
}
 80031a6:	bf00      	nop
 80031a8:	3718      	adds	r7, #24
 80031aa:	46bd      	mov	sp, r7
 80031ac:	bd80      	pop	{r7, pc}

080031ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031ae:	b580      	push	{r7, lr}
 80031b0:	b082      	sub	sp, #8
 80031b2:	af00      	add	r7, sp, #0
 80031b4:	4603      	mov	r3, r0
 80031b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80031b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031bc:	4618      	mov	r0, r3
 80031be:	f7ff ff35 	bl	800302c <__NVIC_EnableIRQ>
}
 80031c2:	bf00      	nop
 80031c4:	3708      	adds	r7, #8
 80031c6:	46bd      	mov	sp, r7
 80031c8:	bd80      	pop	{r7, pc}

080031ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80031ca:	b580      	push	{r7, lr}
 80031cc:	b082      	sub	sp, #8
 80031ce:	af00      	add	r7, sp, #0
 80031d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80031d2:	6878      	ldr	r0, [r7, #4]
 80031d4:	f7ff ffa2 	bl	800311c <SysTick_Config>
 80031d8:	4603      	mov	r3, r0
}
 80031da:	4618      	mov	r0, r3
 80031dc:	3708      	adds	r7, #8
 80031de:	46bd      	mov	sp, r7
 80031e0:	bd80      	pop	{r7, pc}
	...

080031e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80031e4:	b480      	push	{r7}
 80031e6:	b08b      	sub	sp, #44	; 0x2c
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
 80031ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80031ee:	2300      	movs	r3, #0
 80031f0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80031f2:	2300      	movs	r3, #0
 80031f4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80031f6:	e169      	b.n	80034cc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80031f8:	2201      	movs	r2, #1
 80031fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003200:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	69fa      	ldr	r2, [r7, #28]
 8003208:	4013      	ands	r3, r2
 800320a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800320c:	69ba      	ldr	r2, [r7, #24]
 800320e:	69fb      	ldr	r3, [r7, #28]
 8003210:	429a      	cmp	r2, r3
 8003212:	f040 8158 	bne.w	80034c6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003216:	683b      	ldr	r3, [r7, #0]
 8003218:	685b      	ldr	r3, [r3, #4]
 800321a:	4a9a      	ldr	r2, [pc, #616]	; (8003484 <HAL_GPIO_Init+0x2a0>)
 800321c:	4293      	cmp	r3, r2
 800321e:	d05e      	beq.n	80032de <HAL_GPIO_Init+0xfa>
 8003220:	4a98      	ldr	r2, [pc, #608]	; (8003484 <HAL_GPIO_Init+0x2a0>)
 8003222:	4293      	cmp	r3, r2
 8003224:	d875      	bhi.n	8003312 <HAL_GPIO_Init+0x12e>
 8003226:	4a98      	ldr	r2, [pc, #608]	; (8003488 <HAL_GPIO_Init+0x2a4>)
 8003228:	4293      	cmp	r3, r2
 800322a:	d058      	beq.n	80032de <HAL_GPIO_Init+0xfa>
 800322c:	4a96      	ldr	r2, [pc, #600]	; (8003488 <HAL_GPIO_Init+0x2a4>)
 800322e:	4293      	cmp	r3, r2
 8003230:	d86f      	bhi.n	8003312 <HAL_GPIO_Init+0x12e>
 8003232:	4a96      	ldr	r2, [pc, #600]	; (800348c <HAL_GPIO_Init+0x2a8>)
 8003234:	4293      	cmp	r3, r2
 8003236:	d052      	beq.n	80032de <HAL_GPIO_Init+0xfa>
 8003238:	4a94      	ldr	r2, [pc, #592]	; (800348c <HAL_GPIO_Init+0x2a8>)
 800323a:	4293      	cmp	r3, r2
 800323c:	d869      	bhi.n	8003312 <HAL_GPIO_Init+0x12e>
 800323e:	4a94      	ldr	r2, [pc, #592]	; (8003490 <HAL_GPIO_Init+0x2ac>)
 8003240:	4293      	cmp	r3, r2
 8003242:	d04c      	beq.n	80032de <HAL_GPIO_Init+0xfa>
 8003244:	4a92      	ldr	r2, [pc, #584]	; (8003490 <HAL_GPIO_Init+0x2ac>)
 8003246:	4293      	cmp	r3, r2
 8003248:	d863      	bhi.n	8003312 <HAL_GPIO_Init+0x12e>
 800324a:	4a92      	ldr	r2, [pc, #584]	; (8003494 <HAL_GPIO_Init+0x2b0>)
 800324c:	4293      	cmp	r3, r2
 800324e:	d046      	beq.n	80032de <HAL_GPIO_Init+0xfa>
 8003250:	4a90      	ldr	r2, [pc, #576]	; (8003494 <HAL_GPIO_Init+0x2b0>)
 8003252:	4293      	cmp	r3, r2
 8003254:	d85d      	bhi.n	8003312 <HAL_GPIO_Init+0x12e>
 8003256:	2b12      	cmp	r3, #18
 8003258:	d82a      	bhi.n	80032b0 <HAL_GPIO_Init+0xcc>
 800325a:	2b12      	cmp	r3, #18
 800325c:	d859      	bhi.n	8003312 <HAL_GPIO_Init+0x12e>
 800325e:	a201      	add	r2, pc, #4	; (adr r2, 8003264 <HAL_GPIO_Init+0x80>)
 8003260:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003264:	080032df 	.word	0x080032df
 8003268:	080032b9 	.word	0x080032b9
 800326c:	080032cb 	.word	0x080032cb
 8003270:	0800330d 	.word	0x0800330d
 8003274:	08003313 	.word	0x08003313
 8003278:	08003313 	.word	0x08003313
 800327c:	08003313 	.word	0x08003313
 8003280:	08003313 	.word	0x08003313
 8003284:	08003313 	.word	0x08003313
 8003288:	08003313 	.word	0x08003313
 800328c:	08003313 	.word	0x08003313
 8003290:	08003313 	.word	0x08003313
 8003294:	08003313 	.word	0x08003313
 8003298:	08003313 	.word	0x08003313
 800329c:	08003313 	.word	0x08003313
 80032a0:	08003313 	.word	0x08003313
 80032a4:	08003313 	.word	0x08003313
 80032a8:	080032c1 	.word	0x080032c1
 80032ac:	080032d5 	.word	0x080032d5
 80032b0:	4a79      	ldr	r2, [pc, #484]	; (8003498 <HAL_GPIO_Init+0x2b4>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d013      	beq.n	80032de <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80032b6:	e02c      	b.n	8003312 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	68db      	ldr	r3, [r3, #12]
 80032bc:	623b      	str	r3, [r7, #32]
          break;
 80032be:	e029      	b.n	8003314 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	68db      	ldr	r3, [r3, #12]
 80032c4:	3304      	adds	r3, #4
 80032c6:	623b      	str	r3, [r7, #32]
          break;
 80032c8:	e024      	b.n	8003314 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	68db      	ldr	r3, [r3, #12]
 80032ce:	3308      	adds	r3, #8
 80032d0:	623b      	str	r3, [r7, #32]
          break;
 80032d2:	e01f      	b.n	8003314 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	68db      	ldr	r3, [r3, #12]
 80032d8:	330c      	adds	r3, #12
 80032da:	623b      	str	r3, [r7, #32]
          break;
 80032dc:	e01a      	b.n	8003314 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80032de:	683b      	ldr	r3, [r7, #0]
 80032e0:	689b      	ldr	r3, [r3, #8]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d102      	bne.n	80032ec <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80032e6:	2304      	movs	r3, #4
 80032e8:	623b      	str	r3, [r7, #32]
          break;
 80032ea:	e013      	b.n	8003314 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	689b      	ldr	r3, [r3, #8]
 80032f0:	2b01      	cmp	r3, #1
 80032f2:	d105      	bne.n	8003300 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80032f4:	2308      	movs	r3, #8
 80032f6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	69fa      	ldr	r2, [r7, #28]
 80032fc:	611a      	str	r2, [r3, #16]
          break;
 80032fe:	e009      	b.n	8003314 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003300:	2308      	movs	r3, #8
 8003302:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	69fa      	ldr	r2, [r7, #28]
 8003308:	615a      	str	r2, [r3, #20]
          break;
 800330a:	e003      	b.n	8003314 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800330c:	2300      	movs	r3, #0
 800330e:	623b      	str	r3, [r7, #32]
          break;
 8003310:	e000      	b.n	8003314 <HAL_GPIO_Init+0x130>
          break;
 8003312:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003314:	69bb      	ldr	r3, [r7, #24]
 8003316:	2bff      	cmp	r3, #255	; 0xff
 8003318:	d801      	bhi.n	800331e <HAL_GPIO_Init+0x13a>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	e001      	b.n	8003322 <HAL_GPIO_Init+0x13e>
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	3304      	adds	r3, #4
 8003322:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003324:	69bb      	ldr	r3, [r7, #24]
 8003326:	2bff      	cmp	r3, #255	; 0xff
 8003328:	d802      	bhi.n	8003330 <HAL_GPIO_Init+0x14c>
 800332a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800332c:	009b      	lsls	r3, r3, #2
 800332e:	e002      	b.n	8003336 <HAL_GPIO_Init+0x152>
 8003330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003332:	3b08      	subs	r3, #8
 8003334:	009b      	lsls	r3, r3, #2
 8003336:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003338:	697b      	ldr	r3, [r7, #20]
 800333a:	681a      	ldr	r2, [r3, #0]
 800333c:	210f      	movs	r1, #15
 800333e:	693b      	ldr	r3, [r7, #16]
 8003340:	fa01 f303 	lsl.w	r3, r1, r3
 8003344:	43db      	mvns	r3, r3
 8003346:	401a      	ands	r2, r3
 8003348:	6a39      	ldr	r1, [r7, #32]
 800334a:	693b      	ldr	r3, [r7, #16]
 800334c:	fa01 f303 	lsl.w	r3, r1, r3
 8003350:	431a      	orrs	r2, r3
 8003352:	697b      	ldr	r3, [r7, #20]
 8003354:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	685b      	ldr	r3, [r3, #4]
 800335a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800335e:	2b00      	cmp	r3, #0
 8003360:	f000 80b1 	beq.w	80034c6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003364:	4b4d      	ldr	r3, [pc, #308]	; (800349c <HAL_GPIO_Init+0x2b8>)
 8003366:	699b      	ldr	r3, [r3, #24]
 8003368:	4a4c      	ldr	r2, [pc, #304]	; (800349c <HAL_GPIO_Init+0x2b8>)
 800336a:	f043 0301 	orr.w	r3, r3, #1
 800336e:	6193      	str	r3, [r2, #24]
 8003370:	4b4a      	ldr	r3, [pc, #296]	; (800349c <HAL_GPIO_Init+0x2b8>)
 8003372:	699b      	ldr	r3, [r3, #24]
 8003374:	f003 0301 	and.w	r3, r3, #1
 8003378:	60bb      	str	r3, [r7, #8]
 800337a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800337c:	4a48      	ldr	r2, [pc, #288]	; (80034a0 <HAL_GPIO_Init+0x2bc>)
 800337e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003380:	089b      	lsrs	r3, r3, #2
 8003382:	3302      	adds	r3, #2
 8003384:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003388:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800338a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800338c:	f003 0303 	and.w	r3, r3, #3
 8003390:	009b      	lsls	r3, r3, #2
 8003392:	220f      	movs	r2, #15
 8003394:	fa02 f303 	lsl.w	r3, r2, r3
 8003398:	43db      	mvns	r3, r3
 800339a:	68fa      	ldr	r2, [r7, #12]
 800339c:	4013      	ands	r3, r2
 800339e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	4a40      	ldr	r2, [pc, #256]	; (80034a4 <HAL_GPIO_Init+0x2c0>)
 80033a4:	4293      	cmp	r3, r2
 80033a6:	d013      	beq.n	80033d0 <HAL_GPIO_Init+0x1ec>
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	4a3f      	ldr	r2, [pc, #252]	; (80034a8 <HAL_GPIO_Init+0x2c4>)
 80033ac:	4293      	cmp	r3, r2
 80033ae:	d00d      	beq.n	80033cc <HAL_GPIO_Init+0x1e8>
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	4a3e      	ldr	r2, [pc, #248]	; (80034ac <HAL_GPIO_Init+0x2c8>)
 80033b4:	4293      	cmp	r3, r2
 80033b6:	d007      	beq.n	80033c8 <HAL_GPIO_Init+0x1e4>
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	4a3d      	ldr	r2, [pc, #244]	; (80034b0 <HAL_GPIO_Init+0x2cc>)
 80033bc:	4293      	cmp	r3, r2
 80033be:	d101      	bne.n	80033c4 <HAL_GPIO_Init+0x1e0>
 80033c0:	2303      	movs	r3, #3
 80033c2:	e006      	b.n	80033d2 <HAL_GPIO_Init+0x1ee>
 80033c4:	2304      	movs	r3, #4
 80033c6:	e004      	b.n	80033d2 <HAL_GPIO_Init+0x1ee>
 80033c8:	2302      	movs	r3, #2
 80033ca:	e002      	b.n	80033d2 <HAL_GPIO_Init+0x1ee>
 80033cc:	2301      	movs	r3, #1
 80033ce:	e000      	b.n	80033d2 <HAL_GPIO_Init+0x1ee>
 80033d0:	2300      	movs	r3, #0
 80033d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033d4:	f002 0203 	and.w	r2, r2, #3
 80033d8:	0092      	lsls	r2, r2, #2
 80033da:	4093      	lsls	r3, r2
 80033dc:	68fa      	ldr	r2, [r7, #12]
 80033de:	4313      	orrs	r3, r2
 80033e0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80033e2:	492f      	ldr	r1, [pc, #188]	; (80034a0 <HAL_GPIO_Init+0x2bc>)
 80033e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033e6:	089b      	lsrs	r3, r3, #2
 80033e8:	3302      	adds	r3, #2
 80033ea:	68fa      	ldr	r2, [r7, #12]
 80033ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	685b      	ldr	r3, [r3, #4]
 80033f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d006      	beq.n	800340a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80033fc:	4b2d      	ldr	r3, [pc, #180]	; (80034b4 <HAL_GPIO_Init+0x2d0>)
 80033fe:	681a      	ldr	r2, [r3, #0]
 8003400:	492c      	ldr	r1, [pc, #176]	; (80034b4 <HAL_GPIO_Init+0x2d0>)
 8003402:	69bb      	ldr	r3, [r7, #24]
 8003404:	4313      	orrs	r3, r2
 8003406:	600b      	str	r3, [r1, #0]
 8003408:	e006      	b.n	8003418 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800340a:	4b2a      	ldr	r3, [pc, #168]	; (80034b4 <HAL_GPIO_Init+0x2d0>)
 800340c:	681a      	ldr	r2, [r3, #0]
 800340e:	69bb      	ldr	r3, [r7, #24]
 8003410:	43db      	mvns	r3, r3
 8003412:	4928      	ldr	r1, [pc, #160]	; (80034b4 <HAL_GPIO_Init+0x2d0>)
 8003414:	4013      	ands	r3, r2
 8003416:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	685b      	ldr	r3, [r3, #4]
 800341c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003420:	2b00      	cmp	r3, #0
 8003422:	d006      	beq.n	8003432 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003424:	4b23      	ldr	r3, [pc, #140]	; (80034b4 <HAL_GPIO_Init+0x2d0>)
 8003426:	685a      	ldr	r2, [r3, #4]
 8003428:	4922      	ldr	r1, [pc, #136]	; (80034b4 <HAL_GPIO_Init+0x2d0>)
 800342a:	69bb      	ldr	r3, [r7, #24]
 800342c:	4313      	orrs	r3, r2
 800342e:	604b      	str	r3, [r1, #4]
 8003430:	e006      	b.n	8003440 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003432:	4b20      	ldr	r3, [pc, #128]	; (80034b4 <HAL_GPIO_Init+0x2d0>)
 8003434:	685a      	ldr	r2, [r3, #4]
 8003436:	69bb      	ldr	r3, [r7, #24]
 8003438:	43db      	mvns	r3, r3
 800343a:	491e      	ldr	r1, [pc, #120]	; (80034b4 <HAL_GPIO_Init+0x2d0>)
 800343c:	4013      	ands	r3, r2
 800343e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	685b      	ldr	r3, [r3, #4]
 8003444:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003448:	2b00      	cmp	r3, #0
 800344a:	d006      	beq.n	800345a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800344c:	4b19      	ldr	r3, [pc, #100]	; (80034b4 <HAL_GPIO_Init+0x2d0>)
 800344e:	689a      	ldr	r2, [r3, #8]
 8003450:	4918      	ldr	r1, [pc, #96]	; (80034b4 <HAL_GPIO_Init+0x2d0>)
 8003452:	69bb      	ldr	r3, [r7, #24]
 8003454:	4313      	orrs	r3, r2
 8003456:	608b      	str	r3, [r1, #8]
 8003458:	e006      	b.n	8003468 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800345a:	4b16      	ldr	r3, [pc, #88]	; (80034b4 <HAL_GPIO_Init+0x2d0>)
 800345c:	689a      	ldr	r2, [r3, #8]
 800345e:	69bb      	ldr	r3, [r7, #24]
 8003460:	43db      	mvns	r3, r3
 8003462:	4914      	ldr	r1, [pc, #80]	; (80034b4 <HAL_GPIO_Init+0x2d0>)
 8003464:	4013      	ands	r3, r2
 8003466:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003470:	2b00      	cmp	r3, #0
 8003472:	d021      	beq.n	80034b8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003474:	4b0f      	ldr	r3, [pc, #60]	; (80034b4 <HAL_GPIO_Init+0x2d0>)
 8003476:	68da      	ldr	r2, [r3, #12]
 8003478:	490e      	ldr	r1, [pc, #56]	; (80034b4 <HAL_GPIO_Init+0x2d0>)
 800347a:	69bb      	ldr	r3, [r7, #24]
 800347c:	4313      	orrs	r3, r2
 800347e:	60cb      	str	r3, [r1, #12]
 8003480:	e021      	b.n	80034c6 <HAL_GPIO_Init+0x2e2>
 8003482:	bf00      	nop
 8003484:	10320000 	.word	0x10320000
 8003488:	10310000 	.word	0x10310000
 800348c:	10220000 	.word	0x10220000
 8003490:	10210000 	.word	0x10210000
 8003494:	10120000 	.word	0x10120000
 8003498:	10110000 	.word	0x10110000
 800349c:	40021000 	.word	0x40021000
 80034a0:	40010000 	.word	0x40010000
 80034a4:	40010800 	.word	0x40010800
 80034a8:	40010c00 	.word	0x40010c00
 80034ac:	40011000 	.word	0x40011000
 80034b0:	40011400 	.word	0x40011400
 80034b4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80034b8:	4b0b      	ldr	r3, [pc, #44]	; (80034e8 <HAL_GPIO_Init+0x304>)
 80034ba:	68da      	ldr	r2, [r3, #12]
 80034bc:	69bb      	ldr	r3, [r7, #24]
 80034be:	43db      	mvns	r3, r3
 80034c0:	4909      	ldr	r1, [pc, #36]	; (80034e8 <HAL_GPIO_Init+0x304>)
 80034c2:	4013      	ands	r3, r2
 80034c4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80034c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034c8:	3301      	adds	r3, #1
 80034ca:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	681a      	ldr	r2, [r3, #0]
 80034d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034d2:	fa22 f303 	lsr.w	r3, r2, r3
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	f47f ae8e 	bne.w	80031f8 <HAL_GPIO_Init+0x14>
  }
}
 80034dc:	bf00      	nop
 80034de:	bf00      	nop
 80034e0:	372c      	adds	r7, #44	; 0x2c
 80034e2:	46bd      	mov	sp, r7
 80034e4:	bc80      	pop	{r7}
 80034e6:	4770      	bx	lr
 80034e8:	40010400 	.word	0x40010400

080034ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80034ec:	b480      	push	{r7}
 80034ee:	b083      	sub	sp, #12
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
 80034f4:	460b      	mov	r3, r1
 80034f6:	807b      	strh	r3, [r7, #2]
 80034f8:	4613      	mov	r3, r2
 80034fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80034fc:	787b      	ldrb	r3, [r7, #1]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d003      	beq.n	800350a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003502:	887a      	ldrh	r2, [r7, #2]
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003508:	e003      	b.n	8003512 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800350a:	887b      	ldrh	r3, [r7, #2]
 800350c:	041a      	lsls	r2, r3, #16
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	611a      	str	r2, [r3, #16]
}
 8003512:	bf00      	nop
 8003514:	370c      	adds	r7, #12
 8003516:	46bd      	mov	sp, r7
 8003518:	bc80      	pop	{r7}
 800351a:	4770      	bx	lr

0800351c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	b082      	sub	sp, #8
 8003520:	af00      	add	r7, sp, #0
 8003522:	4603      	mov	r3, r0
 8003524:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003526:	4b08      	ldr	r3, [pc, #32]	; (8003548 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003528:	695a      	ldr	r2, [r3, #20]
 800352a:	88fb      	ldrh	r3, [r7, #6]
 800352c:	4013      	ands	r3, r2
 800352e:	2b00      	cmp	r3, #0
 8003530:	d006      	beq.n	8003540 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003532:	4a05      	ldr	r2, [pc, #20]	; (8003548 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003534:	88fb      	ldrh	r3, [r7, #6]
 8003536:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003538:	88fb      	ldrh	r3, [r7, #6]
 800353a:	4618      	mov	r0, r3
 800353c:	f000 f806 	bl	800354c <HAL_GPIO_EXTI_Callback>
  }
}
 8003540:	bf00      	nop
 8003542:	3708      	adds	r7, #8
 8003544:	46bd      	mov	sp, r7
 8003546:	bd80      	pop	{r7, pc}
 8003548:	40010400 	.word	0x40010400

0800354c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800354c:	b480      	push	{r7}
 800354e:	b083      	sub	sp, #12
 8003550:	af00      	add	r7, sp, #0
 8003552:	4603      	mov	r3, r0
 8003554:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003556:	bf00      	nop
 8003558:	370c      	adds	r7, #12
 800355a:	46bd      	mov	sp, r7
 800355c:	bc80      	pop	{r7}
 800355e:	4770      	bx	lr

08003560 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	b084      	sub	sp, #16
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2b00      	cmp	r3, #0
 800356c:	d101      	bne.n	8003572 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800356e:	2301      	movs	r3, #1
 8003570:	e12b      	b.n	80037ca <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003578:	b2db      	uxtb	r3, r3
 800357a:	2b00      	cmp	r3, #0
 800357c:	d106      	bne.n	800358c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2200      	movs	r2, #0
 8003582:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003586:	6878      	ldr	r0, [r7, #4]
 8003588:	f7fe f996 	bl	80018b8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2224      	movs	r2, #36	; 0x24
 8003590:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	681a      	ldr	r2, [r3, #0]
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f022 0201 	bic.w	r2, r2, #1
 80035a2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	681a      	ldr	r2, [r3, #0]
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80035b2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	681a      	ldr	r2, [r3, #0]
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80035c2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80035c4:	f001 fba0 	bl	8004d08 <HAL_RCC_GetPCLK1Freq>
 80035c8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	685b      	ldr	r3, [r3, #4]
 80035ce:	4a81      	ldr	r2, [pc, #516]	; (80037d4 <HAL_I2C_Init+0x274>)
 80035d0:	4293      	cmp	r3, r2
 80035d2:	d807      	bhi.n	80035e4 <HAL_I2C_Init+0x84>
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	4a80      	ldr	r2, [pc, #512]	; (80037d8 <HAL_I2C_Init+0x278>)
 80035d8:	4293      	cmp	r3, r2
 80035da:	bf94      	ite	ls
 80035dc:	2301      	movls	r3, #1
 80035de:	2300      	movhi	r3, #0
 80035e0:	b2db      	uxtb	r3, r3
 80035e2:	e006      	b.n	80035f2 <HAL_I2C_Init+0x92>
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	4a7d      	ldr	r2, [pc, #500]	; (80037dc <HAL_I2C_Init+0x27c>)
 80035e8:	4293      	cmp	r3, r2
 80035ea:	bf94      	ite	ls
 80035ec:	2301      	movls	r3, #1
 80035ee:	2300      	movhi	r3, #0
 80035f0:	b2db      	uxtb	r3, r3
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d001      	beq.n	80035fa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80035f6:	2301      	movs	r3, #1
 80035f8:	e0e7      	b.n	80037ca <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	4a78      	ldr	r2, [pc, #480]	; (80037e0 <HAL_I2C_Init+0x280>)
 80035fe:	fba2 2303 	umull	r2, r3, r2, r3
 8003602:	0c9b      	lsrs	r3, r3, #18
 8003604:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	685b      	ldr	r3, [r3, #4]
 800360c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	68ba      	ldr	r2, [r7, #8]
 8003616:	430a      	orrs	r2, r1
 8003618:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	6a1b      	ldr	r3, [r3, #32]
 8003620:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	685b      	ldr	r3, [r3, #4]
 8003628:	4a6a      	ldr	r2, [pc, #424]	; (80037d4 <HAL_I2C_Init+0x274>)
 800362a:	4293      	cmp	r3, r2
 800362c:	d802      	bhi.n	8003634 <HAL_I2C_Init+0xd4>
 800362e:	68bb      	ldr	r3, [r7, #8]
 8003630:	3301      	adds	r3, #1
 8003632:	e009      	b.n	8003648 <HAL_I2C_Init+0xe8>
 8003634:	68bb      	ldr	r3, [r7, #8]
 8003636:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800363a:	fb02 f303 	mul.w	r3, r2, r3
 800363e:	4a69      	ldr	r2, [pc, #420]	; (80037e4 <HAL_I2C_Init+0x284>)
 8003640:	fba2 2303 	umull	r2, r3, r2, r3
 8003644:	099b      	lsrs	r3, r3, #6
 8003646:	3301      	adds	r3, #1
 8003648:	687a      	ldr	r2, [r7, #4]
 800364a:	6812      	ldr	r2, [r2, #0]
 800364c:	430b      	orrs	r3, r1
 800364e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	69db      	ldr	r3, [r3, #28]
 8003656:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800365a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	685b      	ldr	r3, [r3, #4]
 8003662:	495c      	ldr	r1, [pc, #368]	; (80037d4 <HAL_I2C_Init+0x274>)
 8003664:	428b      	cmp	r3, r1
 8003666:	d819      	bhi.n	800369c <HAL_I2C_Init+0x13c>
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	1e59      	subs	r1, r3, #1
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	685b      	ldr	r3, [r3, #4]
 8003670:	005b      	lsls	r3, r3, #1
 8003672:	fbb1 f3f3 	udiv	r3, r1, r3
 8003676:	1c59      	adds	r1, r3, #1
 8003678:	f640 73fc 	movw	r3, #4092	; 0xffc
 800367c:	400b      	ands	r3, r1
 800367e:	2b00      	cmp	r3, #0
 8003680:	d00a      	beq.n	8003698 <HAL_I2C_Init+0x138>
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	1e59      	subs	r1, r3, #1
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	685b      	ldr	r3, [r3, #4]
 800368a:	005b      	lsls	r3, r3, #1
 800368c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003690:	3301      	adds	r3, #1
 8003692:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003696:	e051      	b.n	800373c <HAL_I2C_Init+0x1dc>
 8003698:	2304      	movs	r3, #4
 800369a:	e04f      	b.n	800373c <HAL_I2C_Init+0x1dc>
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	689b      	ldr	r3, [r3, #8]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d111      	bne.n	80036c8 <HAL_I2C_Init+0x168>
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	1e58      	subs	r0, r3, #1
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6859      	ldr	r1, [r3, #4]
 80036ac:	460b      	mov	r3, r1
 80036ae:	005b      	lsls	r3, r3, #1
 80036b0:	440b      	add	r3, r1
 80036b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80036b6:	3301      	adds	r3, #1
 80036b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036bc:	2b00      	cmp	r3, #0
 80036be:	bf0c      	ite	eq
 80036c0:	2301      	moveq	r3, #1
 80036c2:	2300      	movne	r3, #0
 80036c4:	b2db      	uxtb	r3, r3
 80036c6:	e012      	b.n	80036ee <HAL_I2C_Init+0x18e>
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	1e58      	subs	r0, r3, #1
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6859      	ldr	r1, [r3, #4]
 80036d0:	460b      	mov	r3, r1
 80036d2:	009b      	lsls	r3, r3, #2
 80036d4:	440b      	add	r3, r1
 80036d6:	0099      	lsls	r1, r3, #2
 80036d8:	440b      	add	r3, r1
 80036da:	fbb0 f3f3 	udiv	r3, r0, r3
 80036de:	3301      	adds	r3, #1
 80036e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	bf0c      	ite	eq
 80036e8:	2301      	moveq	r3, #1
 80036ea:	2300      	movne	r3, #0
 80036ec:	b2db      	uxtb	r3, r3
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d001      	beq.n	80036f6 <HAL_I2C_Init+0x196>
 80036f2:	2301      	movs	r3, #1
 80036f4:	e022      	b.n	800373c <HAL_I2C_Init+0x1dc>
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	689b      	ldr	r3, [r3, #8]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d10e      	bne.n	800371c <HAL_I2C_Init+0x1bc>
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	1e58      	subs	r0, r3, #1
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6859      	ldr	r1, [r3, #4]
 8003706:	460b      	mov	r3, r1
 8003708:	005b      	lsls	r3, r3, #1
 800370a:	440b      	add	r3, r1
 800370c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003710:	3301      	adds	r3, #1
 8003712:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003716:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800371a:	e00f      	b.n	800373c <HAL_I2C_Init+0x1dc>
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	1e58      	subs	r0, r3, #1
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6859      	ldr	r1, [r3, #4]
 8003724:	460b      	mov	r3, r1
 8003726:	009b      	lsls	r3, r3, #2
 8003728:	440b      	add	r3, r1
 800372a:	0099      	lsls	r1, r3, #2
 800372c:	440b      	add	r3, r1
 800372e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003732:	3301      	adds	r3, #1
 8003734:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003738:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800373c:	6879      	ldr	r1, [r7, #4]
 800373e:	6809      	ldr	r1, [r1, #0]
 8003740:	4313      	orrs	r3, r2
 8003742:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	69da      	ldr	r2, [r3, #28]
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6a1b      	ldr	r3, [r3, #32]
 8003756:	431a      	orrs	r2, r3
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	430a      	orrs	r2, r1
 800375e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	689b      	ldr	r3, [r3, #8]
 8003766:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800376a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800376e:	687a      	ldr	r2, [r7, #4]
 8003770:	6911      	ldr	r1, [r2, #16]
 8003772:	687a      	ldr	r2, [r7, #4]
 8003774:	68d2      	ldr	r2, [r2, #12]
 8003776:	4311      	orrs	r1, r2
 8003778:	687a      	ldr	r2, [r7, #4]
 800377a:	6812      	ldr	r2, [r2, #0]
 800377c:	430b      	orrs	r3, r1
 800377e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	68db      	ldr	r3, [r3, #12]
 8003786:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	695a      	ldr	r2, [r3, #20]
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	699b      	ldr	r3, [r3, #24]
 8003792:	431a      	orrs	r2, r3
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	430a      	orrs	r2, r1
 800379a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	681a      	ldr	r2, [r3, #0]
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f042 0201 	orr.w	r2, r2, #1
 80037aa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2200      	movs	r2, #0
 80037b0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	2220      	movs	r2, #32
 80037b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2200      	movs	r2, #0
 80037be:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2200      	movs	r2, #0
 80037c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80037c8:	2300      	movs	r3, #0
}
 80037ca:	4618      	mov	r0, r3
 80037cc:	3710      	adds	r7, #16
 80037ce:	46bd      	mov	sp, r7
 80037d0:	bd80      	pop	{r7, pc}
 80037d2:	bf00      	nop
 80037d4:	000186a0 	.word	0x000186a0
 80037d8:	001e847f 	.word	0x001e847f
 80037dc:	003d08ff 	.word	0x003d08ff
 80037e0:	431bde83 	.word	0x431bde83
 80037e4:	10624dd3 	.word	0x10624dd3

080037e8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b088      	sub	sp, #32
 80037ec:	af02      	add	r7, sp, #8
 80037ee:	60f8      	str	r0, [r7, #12]
 80037f0:	4608      	mov	r0, r1
 80037f2:	4611      	mov	r1, r2
 80037f4:	461a      	mov	r2, r3
 80037f6:	4603      	mov	r3, r0
 80037f8:	817b      	strh	r3, [r7, #10]
 80037fa:	460b      	mov	r3, r1
 80037fc:	813b      	strh	r3, [r7, #8]
 80037fe:	4613      	mov	r3, r2
 8003800:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003802:	f7ff fbb3 	bl	8002f6c <HAL_GetTick>
 8003806:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800380e:	b2db      	uxtb	r3, r3
 8003810:	2b20      	cmp	r3, #32
 8003812:	f040 80d9 	bne.w	80039c8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003816:	697b      	ldr	r3, [r7, #20]
 8003818:	9300      	str	r3, [sp, #0]
 800381a:	2319      	movs	r3, #25
 800381c:	2201      	movs	r2, #1
 800381e:	496d      	ldr	r1, [pc, #436]	; (80039d4 <HAL_I2C_Mem_Write+0x1ec>)
 8003820:	68f8      	ldr	r0, [r7, #12]
 8003822:	f000 fcc1 	bl	80041a8 <I2C_WaitOnFlagUntilTimeout>
 8003826:	4603      	mov	r3, r0
 8003828:	2b00      	cmp	r3, #0
 800382a:	d001      	beq.n	8003830 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800382c:	2302      	movs	r3, #2
 800382e:	e0cc      	b.n	80039ca <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003836:	2b01      	cmp	r3, #1
 8003838:	d101      	bne.n	800383e <HAL_I2C_Mem_Write+0x56>
 800383a:	2302      	movs	r3, #2
 800383c:	e0c5      	b.n	80039ca <HAL_I2C_Mem_Write+0x1e2>
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	2201      	movs	r2, #1
 8003842:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f003 0301 	and.w	r3, r3, #1
 8003850:	2b01      	cmp	r3, #1
 8003852:	d007      	beq.n	8003864 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	681a      	ldr	r2, [r3, #0]
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f042 0201 	orr.w	r2, r2, #1
 8003862:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	681a      	ldr	r2, [r3, #0]
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003872:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	2221      	movs	r2, #33	; 0x21
 8003878:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	2240      	movs	r2, #64	; 0x40
 8003880:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	2200      	movs	r2, #0
 8003888:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	6a3a      	ldr	r2, [r7, #32]
 800388e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003894:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800389a:	b29a      	uxth	r2, r3
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	4a4d      	ldr	r2, [pc, #308]	; (80039d8 <HAL_I2C_Mem_Write+0x1f0>)
 80038a4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80038a6:	88f8      	ldrh	r0, [r7, #6]
 80038a8:	893a      	ldrh	r2, [r7, #8]
 80038aa:	8979      	ldrh	r1, [r7, #10]
 80038ac:	697b      	ldr	r3, [r7, #20]
 80038ae:	9301      	str	r3, [sp, #4]
 80038b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038b2:	9300      	str	r3, [sp, #0]
 80038b4:	4603      	mov	r3, r0
 80038b6:	68f8      	ldr	r0, [r7, #12]
 80038b8:	f000 faf8 	bl	8003eac <I2C_RequestMemoryWrite>
 80038bc:	4603      	mov	r3, r0
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d052      	beq.n	8003968 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80038c2:	2301      	movs	r3, #1
 80038c4:	e081      	b.n	80039ca <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80038c6:	697a      	ldr	r2, [r7, #20]
 80038c8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80038ca:	68f8      	ldr	r0, [r7, #12]
 80038cc:	f000 fd42 	bl	8004354 <I2C_WaitOnTXEFlagUntilTimeout>
 80038d0:	4603      	mov	r3, r0
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d00d      	beq.n	80038f2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038da:	2b04      	cmp	r3, #4
 80038dc:	d107      	bne.n	80038ee <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	681a      	ldr	r2, [r3, #0]
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038ec:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80038ee:	2301      	movs	r3, #1
 80038f0:	e06b      	b.n	80039ca <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038f6:	781a      	ldrb	r2, [r3, #0]
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003902:	1c5a      	adds	r2, r3, #1
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800390c:	3b01      	subs	r3, #1
 800390e:	b29a      	uxth	r2, r3
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003918:	b29b      	uxth	r3, r3
 800391a:	3b01      	subs	r3, #1
 800391c:	b29a      	uxth	r2, r3
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	695b      	ldr	r3, [r3, #20]
 8003928:	f003 0304 	and.w	r3, r3, #4
 800392c:	2b04      	cmp	r3, #4
 800392e:	d11b      	bne.n	8003968 <HAL_I2C_Mem_Write+0x180>
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003934:	2b00      	cmp	r3, #0
 8003936:	d017      	beq.n	8003968 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800393c:	781a      	ldrb	r2, [r3, #0]
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003948:	1c5a      	adds	r2, r3, #1
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003952:	3b01      	subs	r3, #1
 8003954:	b29a      	uxth	r2, r3
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800395e:	b29b      	uxth	r3, r3
 8003960:	3b01      	subs	r3, #1
 8003962:	b29a      	uxth	r2, r3
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800396c:	2b00      	cmp	r3, #0
 800396e:	d1aa      	bne.n	80038c6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003970:	697a      	ldr	r2, [r7, #20]
 8003972:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003974:	68f8      	ldr	r0, [r7, #12]
 8003976:	f000 fd2e 	bl	80043d6 <I2C_WaitOnBTFFlagUntilTimeout>
 800397a:	4603      	mov	r3, r0
 800397c:	2b00      	cmp	r3, #0
 800397e:	d00d      	beq.n	800399c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003984:	2b04      	cmp	r3, #4
 8003986:	d107      	bne.n	8003998 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	681a      	ldr	r2, [r3, #0]
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003996:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003998:	2301      	movs	r3, #1
 800399a:	e016      	b.n	80039ca <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	681a      	ldr	r2, [r3, #0]
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80039aa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	2220      	movs	r2, #32
 80039b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	2200      	movs	r2, #0
 80039b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	2200      	movs	r2, #0
 80039c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80039c4:	2300      	movs	r3, #0
 80039c6:	e000      	b.n	80039ca <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80039c8:	2302      	movs	r3, #2
  }
}
 80039ca:	4618      	mov	r0, r3
 80039cc:	3718      	adds	r7, #24
 80039ce:	46bd      	mov	sp, r7
 80039d0:	bd80      	pop	{r7, pc}
 80039d2:	bf00      	nop
 80039d4:	00100002 	.word	0x00100002
 80039d8:	ffff0000 	.word	0xffff0000

080039dc <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	b08c      	sub	sp, #48	; 0x30
 80039e0:	af02      	add	r7, sp, #8
 80039e2:	60f8      	str	r0, [r7, #12]
 80039e4:	4608      	mov	r0, r1
 80039e6:	4611      	mov	r1, r2
 80039e8:	461a      	mov	r2, r3
 80039ea:	4603      	mov	r3, r0
 80039ec:	817b      	strh	r3, [r7, #10]
 80039ee:	460b      	mov	r3, r1
 80039f0:	813b      	strh	r3, [r7, #8]
 80039f2:	4613      	mov	r3, r2
 80039f4:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 80039f6:	2300      	movs	r3, #0
 80039f8:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80039fa:	f7ff fab7 	bl	8002f6c <HAL_GetTick>
 80039fe:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a06:	b2db      	uxtb	r3, r3
 8003a08:	2b20      	cmp	r3, #32
 8003a0a:	f040 8244 	bne.w	8003e96 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a10:	9300      	str	r3, [sp, #0]
 8003a12:	2319      	movs	r3, #25
 8003a14:	2201      	movs	r2, #1
 8003a16:	4982      	ldr	r1, [pc, #520]	; (8003c20 <HAL_I2C_Mem_Read+0x244>)
 8003a18:	68f8      	ldr	r0, [r7, #12]
 8003a1a:	f000 fbc5 	bl	80041a8 <I2C_WaitOnFlagUntilTimeout>
 8003a1e:	4603      	mov	r3, r0
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d001      	beq.n	8003a28 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8003a24:	2302      	movs	r3, #2
 8003a26:	e237      	b.n	8003e98 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a2e:	2b01      	cmp	r3, #1
 8003a30:	d101      	bne.n	8003a36 <HAL_I2C_Mem_Read+0x5a>
 8003a32:	2302      	movs	r3, #2
 8003a34:	e230      	b.n	8003e98 <HAL_I2C_Mem_Read+0x4bc>
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	2201      	movs	r2, #1
 8003a3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f003 0301 	and.w	r3, r3, #1
 8003a48:	2b01      	cmp	r3, #1
 8003a4a:	d007      	beq.n	8003a5c <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	681a      	ldr	r2, [r3, #0]
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f042 0201 	orr.w	r2, r2, #1
 8003a5a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	681a      	ldr	r2, [r3, #0]
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003a6a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	2222      	movs	r2, #34	; 0x22
 8003a70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	2240      	movs	r2, #64	; 0x40
 8003a78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	2200      	movs	r2, #0
 8003a80:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a86:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003a8c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a92:	b29a      	uxth	r2, r3
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	4a62      	ldr	r2, [pc, #392]	; (8003c24 <HAL_I2C_Mem_Read+0x248>)
 8003a9c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003a9e:	88f8      	ldrh	r0, [r7, #6]
 8003aa0:	893a      	ldrh	r2, [r7, #8]
 8003aa2:	8979      	ldrh	r1, [r7, #10]
 8003aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aa6:	9301      	str	r3, [sp, #4]
 8003aa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003aaa:	9300      	str	r3, [sp, #0]
 8003aac:	4603      	mov	r3, r0
 8003aae:	68f8      	ldr	r0, [r7, #12]
 8003ab0:	f000 fa92 	bl	8003fd8 <I2C_RequestMemoryRead>
 8003ab4:	4603      	mov	r3, r0
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d001      	beq.n	8003abe <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8003aba:	2301      	movs	r3, #1
 8003abc:	e1ec      	b.n	8003e98 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d113      	bne.n	8003aee <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	61fb      	str	r3, [r7, #28]
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	695b      	ldr	r3, [r3, #20]
 8003ad0:	61fb      	str	r3, [r7, #28]
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	699b      	ldr	r3, [r3, #24]
 8003ad8:	61fb      	str	r3, [r7, #28]
 8003ada:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	681a      	ldr	r2, [r3, #0]
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003aea:	601a      	str	r2, [r3, #0]
 8003aec:	e1c0      	b.n	8003e70 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003af2:	2b01      	cmp	r3, #1
 8003af4:	d11e      	bne.n	8003b34 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	681a      	ldr	r2, [r3, #0]
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b04:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003b06:	b672      	cpsid	i
}
 8003b08:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	61bb      	str	r3, [r7, #24]
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	695b      	ldr	r3, [r3, #20]
 8003b14:	61bb      	str	r3, [r7, #24]
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	699b      	ldr	r3, [r3, #24]
 8003b1c:	61bb      	str	r3, [r7, #24]
 8003b1e:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	681a      	ldr	r2, [r3, #0]
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b2e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003b30:	b662      	cpsie	i
}
 8003b32:	e035      	b.n	8003ba0 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b38:	2b02      	cmp	r3, #2
 8003b3a:	d11e      	bne.n	8003b7a <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	681a      	ldr	r2, [r3, #0]
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003b4a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003b4c:	b672      	cpsid	i
}
 8003b4e:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b50:	2300      	movs	r3, #0
 8003b52:	617b      	str	r3, [r7, #20]
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	695b      	ldr	r3, [r3, #20]
 8003b5a:	617b      	str	r3, [r7, #20]
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	699b      	ldr	r3, [r3, #24]
 8003b62:	617b      	str	r3, [r7, #20]
 8003b64:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	681a      	ldr	r2, [r3, #0]
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b74:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003b76:	b662      	cpsie	i
}
 8003b78:	e012      	b.n	8003ba0 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	681a      	ldr	r2, [r3, #0]
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003b88:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	613b      	str	r3, [r7, #16]
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	695b      	ldr	r3, [r3, #20]
 8003b94:	613b      	str	r3, [r7, #16]
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	699b      	ldr	r3, [r3, #24]
 8003b9c:	613b      	str	r3, [r7, #16]
 8003b9e:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8003ba0:	e166      	b.n	8003e70 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ba6:	2b03      	cmp	r3, #3
 8003ba8:	f200 811f 	bhi.w	8003dea <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bb0:	2b01      	cmp	r3, #1
 8003bb2:	d123      	bne.n	8003bfc <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003bb4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bb6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003bb8:	68f8      	ldr	r0, [r7, #12]
 8003bba:	f000 fc4d 	bl	8004458 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003bbe:	4603      	mov	r3, r0
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d001      	beq.n	8003bc8 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8003bc4:	2301      	movs	r3, #1
 8003bc6:	e167      	b.n	8003e98 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	691a      	ldr	r2, [r3, #16]
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bd2:	b2d2      	uxtb	r2, r2
 8003bd4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bda:	1c5a      	adds	r2, r3, #1
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003be4:	3b01      	subs	r3, #1
 8003be6:	b29a      	uxth	r2, r3
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bf0:	b29b      	uxth	r3, r3
 8003bf2:	3b01      	subs	r3, #1
 8003bf4:	b29a      	uxth	r2, r3
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003bfa:	e139      	b.n	8003e70 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c00:	2b02      	cmp	r3, #2
 8003c02:	d152      	bne.n	8003caa <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c06:	9300      	str	r3, [sp, #0]
 8003c08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	4906      	ldr	r1, [pc, #24]	; (8003c28 <HAL_I2C_Mem_Read+0x24c>)
 8003c0e:	68f8      	ldr	r0, [r7, #12]
 8003c10:	f000 faca 	bl	80041a8 <I2C_WaitOnFlagUntilTimeout>
 8003c14:	4603      	mov	r3, r0
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d008      	beq.n	8003c2c <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	e13c      	b.n	8003e98 <HAL_I2C_Mem_Read+0x4bc>
 8003c1e:	bf00      	nop
 8003c20:	00100002 	.word	0x00100002
 8003c24:	ffff0000 	.word	0xffff0000
 8003c28:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8003c2c:	b672      	cpsid	i
}
 8003c2e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	681a      	ldr	r2, [r3, #0]
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c3e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	691a      	ldr	r2, [r3, #16]
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c4a:	b2d2      	uxtb	r2, r2
 8003c4c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c52:	1c5a      	adds	r2, r3, #1
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c5c:	3b01      	subs	r3, #1
 8003c5e:	b29a      	uxth	r2, r3
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c68:	b29b      	uxth	r3, r3
 8003c6a:	3b01      	subs	r3, #1
 8003c6c:	b29a      	uxth	r2, r3
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003c72:	b662      	cpsie	i
}
 8003c74:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	691a      	ldr	r2, [r3, #16]
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c80:	b2d2      	uxtb	r2, r2
 8003c82:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c88:	1c5a      	adds	r2, r3, #1
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c92:	3b01      	subs	r3, #1
 8003c94:	b29a      	uxth	r2, r3
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c9e:	b29b      	uxth	r3, r3
 8003ca0:	3b01      	subs	r3, #1
 8003ca2:	b29a      	uxth	r2, r3
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003ca8:	e0e2      	b.n	8003e70 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cac:	9300      	str	r3, [sp, #0]
 8003cae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	497b      	ldr	r1, [pc, #492]	; (8003ea0 <HAL_I2C_Mem_Read+0x4c4>)
 8003cb4:	68f8      	ldr	r0, [r7, #12]
 8003cb6:	f000 fa77 	bl	80041a8 <I2C_WaitOnFlagUntilTimeout>
 8003cba:	4603      	mov	r3, r0
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d001      	beq.n	8003cc4 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8003cc0:	2301      	movs	r3, #1
 8003cc2:	e0e9      	b.n	8003e98 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	681a      	ldr	r2, [r3, #0]
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003cd2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003cd4:	b672      	cpsid	i
}
 8003cd6:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	691a      	ldr	r2, [r3, #16]
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ce2:	b2d2      	uxtb	r2, r2
 8003ce4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cea:	1c5a      	adds	r2, r3, #1
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cf4:	3b01      	subs	r3, #1
 8003cf6:	b29a      	uxth	r2, r3
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d00:	b29b      	uxth	r3, r3
 8003d02:	3b01      	subs	r3, #1
 8003d04:	b29a      	uxth	r2, r3
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003d0a:	4b66      	ldr	r3, [pc, #408]	; (8003ea4 <HAL_I2C_Mem_Read+0x4c8>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	08db      	lsrs	r3, r3, #3
 8003d10:	4a65      	ldr	r2, [pc, #404]	; (8003ea8 <HAL_I2C_Mem_Read+0x4cc>)
 8003d12:	fba2 2303 	umull	r2, r3, r2, r3
 8003d16:	0a1a      	lsrs	r2, r3, #8
 8003d18:	4613      	mov	r3, r2
 8003d1a:	009b      	lsls	r3, r3, #2
 8003d1c:	4413      	add	r3, r2
 8003d1e:	00da      	lsls	r2, r3, #3
 8003d20:	1ad3      	subs	r3, r2, r3
 8003d22:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8003d24:	6a3b      	ldr	r3, [r7, #32]
 8003d26:	3b01      	subs	r3, #1
 8003d28:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8003d2a:	6a3b      	ldr	r3, [r7, #32]
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d118      	bne.n	8003d62 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	2200      	movs	r2, #0
 8003d34:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	2220      	movs	r2, #32
 8003d3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	2200      	movs	r2, #0
 8003d42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d4a:	f043 0220 	orr.w	r2, r3, #32
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8003d52:	b662      	cpsie	i
}
 8003d54:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	2200      	movs	r2, #0
 8003d5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8003d5e:	2301      	movs	r3, #1
 8003d60:	e09a      	b.n	8003e98 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	695b      	ldr	r3, [r3, #20]
 8003d68:	f003 0304 	and.w	r3, r3, #4
 8003d6c:	2b04      	cmp	r3, #4
 8003d6e:	d1d9      	bne.n	8003d24 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	681a      	ldr	r2, [r3, #0]
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d7e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	691a      	ldr	r2, [r3, #16]
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d8a:	b2d2      	uxtb	r2, r2
 8003d8c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d92:	1c5a      	adds	r2, r3, #1
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d9c:	3b01      	subs	r3, #1
 8003d9e:	b29a      	uxth	r2, r3
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003da8:	b29b      	uxth	r3, r3
 8003daa:	3b01      	subs	r3, #1
 8003dac:	b29a      	uxth	r2, r3
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003db2:	b662      	cpsie	i
}
 8003db4:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	691a      	ldr	r2, [r3, #16]
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dc0:	b2d2      	uxtb	r2, r2
 8003dc2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dc8:	1c5a      	adds	r2, r3, #1
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dd2:	3b01      	subs	r3, #1
 8003dd4:	b29a      	uxth	r2, r3
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dde:	b29b      	uxth	r3, r3
 8003de0:	3b01      	subs	r3, #1
 8003de2:	b29a      	uxth	r2, r3
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003de8:	e042      	b.n	8003e70 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003dea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003dec:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003dee:	68f8      	ldr	r0, [r7, #12]
 8003df0:	f000 fb32 	bl	8004458 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003df4:	4603      	mov	r3, r0
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d001      	beq.n	8003dfe <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8003dfa:	2301      	movs	r3, #1
 8003dfc:	e04c      	b.n	8003e98 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	691a      	ldr	r2, [r3, #16]
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e08:	b2d2      	uxtb	r2, r2
 8003e0a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e10:	1c5a      	adds	r2, r3, #1
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e1a:	3b01      	subs	r3, #1
 8003e1c:	b29a      	uxth	r2, r3
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e26:	b29b      	uxth	r3, r3
 8003e28:	3b01      	subs	r3, #1
 8003e2a:	b29a      	uxth	r2, r3
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	695b      	ldr	r3, [r3, #20]
 8003e36:	f003 0304 	and.w	r3, r3, #4
 8003e3a:	2b04      	cmp	r3, #4
 8003e3c:	d118      	bne.n	8003e70 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	691a      	ldr	r2, [r3, #16]
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e48:	b2d2      	uxtb	r2, r2
 8003e4a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e50:	1c5a      	adds	r2, r3, #1
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e5a:	3b01      	subs	r3, #1
 8003e5c:	b29a      	uxth	r2, r3
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e66:	b29b      	uxth	r3, r3
 8003e68:	3b01      	subs	r3, #1
 8003e6a:	b29a      	uxth	r2, r3
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	f47f ae94 	bne.w	8003ba2 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	2220      	movs	r2, #32
 8003e7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	2200      	movs	r2, #0
 8003e86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003e92:	2300      	movs	r3, #0
 8003e94:	e000      	b.n	8003e98 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8003e96:	2302      	movs	r3, #2
  }
}
 8003e98:	4618      	mov	r0, r3
 8003e9a:	3728      	adds	r7, #40	; 0x28
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	bd80      	pop	{r7, pc}
 8003ea0:	00010004 	.word	0x00010004
 8003ea4:	200000fc 	.word	0x200000fc
 8003ea8:	14f8b589 	.word	0x14f8b589

08003eac <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	b088      	sub	sp, #32
 8003eb0:	af02      	add	r7, sp, #8
 8003eb2:	60f8      	str	r0, [r7, #12]
 8003eb4:	4608      	mov	r0, r1
 8003eb6:	4611      	mov	r1, r2
 8003eb8:	461a      	mov	r2, r3
 8003eba:	4603      	mov	r3, r0
 8003ebc:	817b      	strh	r3, [r7, #10]
 8003ebe:	460b      	mov	r3, r1
 8003ec0:	813b      	strh	r3, [r7, #8]
 8003ec2:	4613      	mov	r3, r2
 8003ec4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	681a      	ldr	r2, [r3, #0]
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003ed4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ed8:	9300      	str	r3, [sp, #0]
 8003eda:	6a3b      	ldr	r3, [r7, #32]
 8003edc:	2200      	movs	r2, #0
 8003ede:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003ee2:	68f8      	ldr	r0, [r7, #12]
 8003ee4:	f000 f960 	bl	80041a8 <I2C_WaitOnFlagUntilTimeout>
 8003ee8:	4603      	mov	r3, r0
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d00d      	beq.n	8003f0a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ef8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003efc:	d103      	bne.n	8003f06 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003f04:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003f06:	2303      	movs	r3, #3
 8003f08:	e05f      	b.n	8003fca <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003f0a:	897b      	ldrh	r3, [r7, #10]
 8003f0c:	b2db      	uxtb	r3, r3
 8003f0e:	461a      	mov	r2, r3
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003f18:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f1c:	6a3a      	ldr	r2, [r7, #32]
 8003f1e:	492d      	ldr	r1, [pc, #180]	; (8003fd4 <I2C_RequestMemoryWrite+0x128>)
 8003f20:	68f8      	ldr	r0, [r7, #12]
 8003f22:	f000 f998 	bl	8004256 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003f26:	4603      	mov	r3, r0
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d001      	beq.n	8003f30 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003f2c:	2301      	movs	r3, #1
 8003f2e:	e04c      	b.n	8003fca <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f30:	2300      	movs	r3, #0
 8003f32:	617b      	str	r3, [r7, #20]
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	695b      	ldr	r3, [r3, #20]
 8003f3a:	617b      	str	r3, [r7, #20]
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	699b      	ldr	r3, [r3, #24]
 8003f42:	617b      	str	r3, [r7, #20]
 8003f44:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f48:	6a39      	ldr	r1, [r7, #32]
 8003f4a:	68f8      	ldr	r0, [r7, #12]
 8003f4c:	f000 fa02 	bl	8004354 <I2C_WaitOnTXEFlagUntilTimeout>
 8003f50:	4603      	mov	r3, r0
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d00d      	beq.n	8003f72 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f5a:	2b04      	cmp	r3, #4
 8003f5c:	d107      	bne.n	8003f6e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	681a      	ldr	r2, [r3, #0]
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f6c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003f6e:	2301      	movs	r3, #1
 8003f70:	e02b      	b.n	8003fca <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003f72:	88fb      	ldrh	r3, [r7, #6]
 8003f74:	2b01      	cmp	r3, #1
 8003f76:	d105      	bne.n	8003f84 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003f78:	893b      	ldrh	r3, [r7, #8]
 8003f7a:	b2da      	uxtb	r2, r3
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	611a      	str	r2, [r3, #16]
 8003f82:	e021      	b.n	8003fc8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003f84:	893b      	ldrh	r3, [r7, #8]
 8003f86:	0a1b      	lsrs	r3, r3, #8
 8003f88:	b29b      	uxth	r3, r3
 8003f8a:	b2da      	uxtb	r2, r3
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f94:	6a39      	ldr	r1, [r7, #32]
 8003f96:	68f8      	ldr	r0, [r7, #12]
 8003f98:	f000 f9dc 	bl	8004354 <I2C_WaitOnTXEFlagUntilTimeout>
 8003f9c:	4603      	mov	r3, r0
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d00d      	beq.n	8003fbe <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fa6:	2b04      	cmp	r3, #4
 8003fa8:	d107      	bne.n	8003fba <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	681a      	ldr	r2, [r3, #0]
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003fb8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003fba:	2301      	movs	r3, #1
 8003fbc:	e005      	b.n	8003fca <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003fbe:	893b      	ldrh	r3, [r7, #8]
 8003fc0:	b2da      	uxtb	r2, r3
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003fc8:	2300      	movs	r3, #0
}
 8003fca:	4618      	mov	r0, r3
 8003fcc:	3718      	adds	r7, #24
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	bd80      	pop	{r7, pc}
 8003fd2:	bf00      	nop
 8003fd4:	00010002 	.word	0x00010002

08003fd8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b088      	sub	sp, #32
 8003fdc:	af02      	add	r7, sp, #8
 8003fde:	60f8      	str	r0, [r7, #12]
 8003fe0:	4608      	mov	r0, r1
 8003fe2:	4611      	mov	r1, r2
 8003fe4:	461a      	mov	r2, r3
 8003fe6:	4603      	mov	r3, r0
 8003fe8:	817b      	strh	r3, [r7, #10]
 8003fea:	460b      	mov	r3, r1
 8003fec:	813b      	strh	r3, [r7, #8]
 8003fee:	4613      	mov	r3, r2
 8003ff0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	681a      	ldr	r2, [r3, #0]
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004000:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	681a      	ldr	r2, [r3, #0]
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004010:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004014:	9300      	str	r3, [sp, #0]
 8004016:	6a3b      	ldr	r3, [r7, #32]
 8004018:	2200      	movs	r2, #0
 800401a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800401e:	68f8      	ldr	r0, [r7, #12]
 8004020:	f000 f8c2 	bl	80041a8 <I2C_WaitOnFlagUntilTimeout>
 8004024:	4603      	mov	r3, r0
 8004026:	2b00      	cmp	r3, #0
 8004028:	d00d      	beq.n	8004046 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004034:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004038:	d103      	bne.n	8004042 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004040:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004042:	2303      	movs	r3, #3
 8004044:	e0aa      	b.n	800419c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004046:	897b      	ldrh	r3, [r7, #10]
 8004048:	b2db      	uxtb	r3, r3
 800404a:	461a      	mov	r2, r3
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004054:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004058:	6a3a      	ldr	r2, [r7, #32]
 800405a:	4952      	ldr	r1, [pc, #328]	; (80041a4 <I2C_RequestMemoryRead+0x1cc>)
 800405c:	68f8      	ldr	r0, [r7, #12]
 800405e:	f000 f8fa 	bl	8004256 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004062:	4603      	mov	r3, r0
 8004064:	2b00      	cmp	r3, #0
 8004066:	d001      	beq.n	800406c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004068:	2301      	movs	r3, #1
 800406a:	e097      	b.n	800419c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800406c:	2300      	movs	r3, #0
 800406e:	617b      	str	r3, [r7, #20]
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	695b      	ldr	r3, [r3, #20]
 8004076:	617b      	str	r3, [r7, #20]
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	699b      	ldr	r3, [r3, #24]
 800407e:	617b      	str	r3, [r7, #20]
 8004080:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004082:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004084:	6a39      	ldr	r1, [r7, #32]
 8004086:	68f8      	ldr	r0, [r7, #12]
 8004088:	f000 f964 	bl	8004354 <I2C_WaitOnTXEFlagUntilTimeout>
 800408c:	4603      	mov	r3, r0
 800408e:	2b00      	cmp	r3, #0
 8004090:	d00d      	beq.n	80040ae <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004096:	2b04      	cmp	r3, #4
 8004098:	d107      	bne.n	80040aa <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	681a      	ldr	r2, [r3, #0]
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80040a8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80040aa:	2301      	movs	r3, #1
 80040ac:	e076      	b.n	800419c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80040ae:	88fb      	ldrh	r3, [r7, #6]
 80040b0:	2b01      	cmp	r3, #1
 80040b2:	d105      	bne.n	80040c0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80040b4:	893b      	ldrh	r3, [r7, #8]
 80040b6:	b2da      	uxtb	r2, r3
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	611a      	str	r2, [r3, #16]
 80040be:	e021      	b.n	8004104 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80040c0:	893b      	ldrh	r3, [r7, #8]
 80040c2:	0a1b      	lsrs	r3, r3, #8
 80040c4:	b29b      	uxth	r3, r3
 80040c6:	b2da      	uxtb	r2, r3
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80040ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040d0:	6a39      	ldr	r1, [r7, #32]
 80040d2:	68f8      	ldr	r0, [r7, #12]
 80040d4:	f000 f93e 	bl	8004354 <I2C_WaitOnTXEFlagUntilTimeout>
 80040d8:	4603      	mov	r3, r0
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d00d      	beq.n	80040fa <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040e2:	2b04      	cmp	r3, #4
 80040e4:	d107      	bne.n	80040f6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	681a      	ldr	r2, [r3, #0]
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80040f4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80040f6:	2301      	movs	r3, #1
 80040f8:	e050      	b.n	800419c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80040fa:	893b      	ldrh	r3, [r7, #8]
 80040fc:	b2da      	uxtb	r2, r3
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004104:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004106:	6a39      	ldr	r1, [r7, #32]
 8004108:	68f8      	ldr	r0, [r7, #12]
 800410a:	f000 f923 	bl	8004354 <I2C_WaitOnTXEFlagUntilTimeout>
 800410e:	4603      	mov	r3, r0
 8004110:	2b00      	cmp	r3, #0
 8004112:	d00d      	beq.n	8004130 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004118:	2b04      	cmp	r3, #4
 800411a:	d107      	bne.n	800412c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	681a      	ldr	r2, [r3, #0]
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800412a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800412c:	2301      	movs	r3, #1
 800412e:	e035      	b.n	800419c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	681a      	ldr	r2, [r3, #0]
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800413e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004142:	9300      	str	r3, [sp, #0]
 8004144:	6a3b      	ldr	r3, [r7, #32]
 8004146:	2200      	movs	r2, #0
 8004148:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800414c:	68f8      	ldr	r0, [r7, #12]
 800414e:	f000 f82b 	bl	80041a8 <I2C_WaitOnFlagUntilTimeout>
 8004152:	4603      	mov	r3, r0
 8004154:	2b00      	cmp	r3, #0
 8004156:	d00d      	beq.n	8004174 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004162:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004166:	d103      	bne.n	8004170 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800416e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004170:	2303      	movs	r3, #3
 8004172:	e013      	b.n	800419c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004174:	897b      	ldrh	r3, [r7, #10]
 8004176:	b2db      	uxtb	r3, r3
 8004178:	f043 0301 	orr.w	r3, r3, #1
 800417c:	b2da      	uxtb	r2, r3
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004186:	6a3a      	ldr	r2, [r7, #32]
 8004188:	4906      	ldr	r1, [pc, #24]	; (80041a4 <I2C_RequestMemoryRead+0x1cc>)
 800418a:	68f8      	ldr	r0, [r7, #12]
 800418c:	f000 f863 	bl	8004256 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004190:	4603      	mov	r3, r0
 8004192:	2b00      	cmp	r3, #0
 8004194:	d001      	beq.n	800419a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004196:	2301      	movs	r3, #1
 8004198:	e000      	b.n	800419c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800419a:	2300      	movs	r3, #0
}
 800419c:	4618      	mov	r0, r3
 800419e:	3718      	adds	r7, #24
 80041a0:	46bd      	mov	sp, r7
 80041a2:	bd80      	pop	{r7, pc}
 80041a4:	00010002 	.word	0x00010002

080041a8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b084      	sub	sp, #16
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	60f8      	str	r0, [r7, #12]
 80041b0:	60b9      	str	r1, [r7, #8]
 80041b2:	603b      	str	r3, [r7, #0]
 80041b4:	4613      	mov	r3, r2
 80041b6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80041b8:	e025      	b.n	8004206 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80041c0:	d021      	beq.n	8004206 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041c2:	f7fe fed3 	bl	8002f6c <HAL_GetTick>
 80041c6:	4602      	mov	r2, r0
 80041c8:	69bb      	ldr	r3, [r7, #24]
 80041ca:	1ad3      	subs	r3, r2, r3
 80041cc:	683a      	ldr	r2, [r7, #0]
 80041ce:	429a      	cmp	r2, r3
 80041d0:	d302      	bcc.n	80041d8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80041d2:	683b      	ldr	r3, [r7, #0]
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d116      	bne.n	8004206 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	2200      	movs	r2, #0
 80041dc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	2220      	movs	r2, #32
 80041e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	2200      	movs	r2, #0
 80041ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041f2:	f043 0220 	orr.w	r2, r3, #32
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	2200      	movs	r2, #0
 80041fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004202:	2301      	movs	r3, #1
 8004204:	e023      	b.n	800424e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004206:	68bb      	ldr	r3, [r7, #8]
 8004208:	0c1b      	lsrs	r3, r3, #16
 800420a:	b2db      	uxtb	r3, r3
 800420c:	2b01      	cmp	r3, #1
 800420e:	d10d      	bne.n	800422c <I2C_WaitOnFlagUntilTimeout+0x84>
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	695b      	ldr	r3, [r3, #20]
 8004216:	43da      	mvns	r2, r3
 8004218:	68bb      	ldr	r3, [r7, #8]
 800421a:	4013      	ands	r3, r2
 800421c:	b29b      	uxth	r3, r3
 800421e:	2b00      	cmp	r3, #0
 8004220:	bf0c      	ite	eq
 8004222:	2301      	moveq	r3, #1
 8004224:	2300      	movne	r3, #0
 8004226:	b2db      	uxtb	r3, r3
 8004228:	461a      	mov	r2, r3
 800422a:	e00c      	b.n	8004246 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	699b      	ldr	r3, [r3, #24]
 8004232:	43da      	mvns	r2, r3
 8004234:	68bb      	ldr	r3, [r7, #8]
 8004236:	4013      	ands	r3, r2
 8004238:	b29b      	uxth	r3, r3
 800423a:	2b00      	cmp	r3, #0
 800423c:	bf0c      	ite	eq
 800423e:	2301      	moveq	r3, #1
 8004240:	2300      	movne	r3, #0
 8004242:	b2db      	uxtb	r3, r3
 8004244:	461a      	mov	r2, r3
 8004246:	79fb      	ldrb	r3, [r7, #7]
 8004248:	429a      	cmp	r2, r3
 800424a:	d0b6      	beq.n	80041ba <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800424c:	2300      	movs	r3, #0
}
 800424e:	4618      	mov	r0, r3
 8004250:	3710      	adds	r7, #16
 8004252:	46bd      	mov	sp, r7
 8004254:	bd80      	pop	{r7, pc}

08004256 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004256:	b580      	push	{r7, lr}
 8004258:	b084      	sub	sp, #16
 800425a:	af00      	add	r7, sp, #0
 800425c:	60f8      	str	r0, [r7, #12]
 800425e:	60b9      	str	r1, [r7, #8]
 8004260:	607a      	str	r2, [r7, #4]
 8004262:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004264:	e051      	b.n	800430a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	695b      	ldr	r3, [r3, #20]
 800426c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004270:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004274:	d123      	bne.n	80042be <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	681a      	ldr	r2, [r3, #0]
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004284:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800428e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	2200      	movs	r2, #0
 8004294:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	2220      	movs	r2, #32
 800429a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	2200      	movs	r2, #0
 80042a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042aa:	f043 0204 	orr.w	r2, r3, #4
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	2200      	movs	r2, #0
 80042b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80042ba:	2301      	movs	r3, #1
 80042bc:	e046      	b.n	800434c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80042c4:	d021      	beq.n	800430a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042c6:	f7fe fe51 	bl	8002f6c <HAL_GetTick>
 80042ca:	4602      	mov	r2, r0
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	1ad3      	subs	r3, r2, r3
 80042d0:	687a      	ldr	r2, [r7, #4]
 80042d2:	429a      	cmp	r2, r3
 80042d4:	d302      	bcc.n	80042dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d116      	bne.n	800430a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	2200      	movs	r2, #0
 80042e0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	2220      	movs	r2, #32
 80042e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	2200      	movs	r2, #0
 80042ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042f6:	f043 0220 	orr.w	r2, r3, #32
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	2200      	movs	r2, #0
 8004302:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004306:	2301      	movs	r3, #1
 8004308:	e020      	b.n	800434c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800430a:	68bb      	ldr	r3, [r7, #8]
 800430c:	0c1b      	lsrs	r3, r3, #16
 800430e:	b2db      	uxtb	r3, r3
 8004310:	2b01      	cmp	r3, #1
 8004312:	d10c      	bne.n	800432e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	695b      	ldr	r3, [r3, #20]
 800431a:	43da      	mvns	r2, r3
 800431c:	68bb      	ldr	r3, [r7, #8]
 800431e:	4013      	ands	r3, r2
 8004320:	b29b      	uxth	r3, r3
 8004322:	2b00      	cmp	r3, #0
 8004324:	bf14      	ite	ne
 8004326:	2301      	movne	r3, #1
 8004328:	2300      	moveq	r3, #0
 800432a:	b2db      	uxtb	r3, r3
 800432c:	e00b      	b.n	8004346 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	699b      	ldr	r3, [r3, #24]
 8004334:	43da      	mvns	r2, r3
 8004336:	68bb      	ldr	r3, [r7, #8]
 8004338:	4013      	ands	r3, r2
 800433a:	b29b      	uxth	r3, r3
 800433c:	2b00      	cmp	r3, #0
 800433e:	bf14      	ite	ne
 8004340:	2301      	movne	r3, #1
 8004342:	2300      	moveq	r3, #0
 8004344:	b2db      	uxtb	r3, r3
 8004346:	2b00      	cmp	r3, #0
 8004348:	d18d      	bne.n	8004266 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800434a:	2300      	movs	r3, #0
}
 800434c:	4618      	mov	r0, r3
 800434e:	3710      	adds	r7, #16
 8004350:	46bd      	mov	sp, r7
 8004352:	bd80      	pop	{r7, pc}

08004354 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004354:	b580      	push	{r7, lr}
 8004356:	b084      	sub	sp, #16
 8004358:	af00      	add	r7, sp, #0
 800435a:	60f8      	str	r0, [r7, #12]
 800435c:	60b9      	str	r1, [r7, #8]
 800435e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004360:	e02d      	b.n	80043be <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004362:	68f8      	ldr	r0, [r7, #12]
 8004364:	f000 f8ce 	bl	8004504 <I2C_IsAcknowledgeFailed>
 8004368:	4603      	mov	r3, r0
 800436a:	2b00      	cmp	r3, #0
 800436c:	d001      	beq.n	8004372 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800436e:	2301      	movs	r3, #1
 8004370:	e02d      	b.n	80043ce <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004372:	68bb      	ldr	r3, [r7, #8]
 8004374:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004378:	d021      	beq.n	80043be <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800437a:	f7fe fdf7 	bl	8002f6c <HAL_GetTick>
 800437e:	4602      	mov	r2, r0
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	1ad3      	subs	r3, r2, r3
 8004384:	68ba      	ldr	r2, [r7, #8]
 8004386:	429a      	cmp	r2, r3
 8004388:	d302      	bcc.n	8004390 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800438a:	68bb      	ldr	r3, [r7, #8]
 800438c:	2b00      	cmp	r3, #0
 800438e:	d116      	bne.n	80043be <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	2200      	movs	r2, #0
 8004394:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	2220      	movs	r2, #32
 800439a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	2200      	movs	r2, #0
 80043a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043aa:	f043 0220 	orr.w	r2, r3, #32
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	2200      	movs	r2, #0
 80043b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80043ba:	2301      	movs	r3, #1
 80043bc:	e007      	b.n	80043ce <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	695b      	ldr	r3, [r3, #20]
 80043c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043c8:	2b80      	cmp	r3, #128	; 0x80
 80043ca:	d1ca      	bne.n	8004362 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80043cc:	2300      	movs	r3, #0
}
 80043ce:	4618      	mov	r0, r3
 80043d0:	3710      	adds	r7, #16
 80043d2:	46bd      	mov	sp, r7
 80043d4:	bd80      	pop	{r7, pc}

080043d6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80043d6:	b580      	push	{r7, lr}
 80043d8:	b084      	sub	sp, #16
 80043da:	af00      	add	r7, sp, #0
 80043dc:	60f8      	str	r0, [r7, #12]
 80043de:	60b9      	str	r1, [r7, #8]
 80043e0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80043e2:	e02d      	b.n	8004440 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80043e4:	68f8      	ldr	r0, [r7, #12]
 80043e6:	f000 f88d 	bl	8004504 <I2C_IsAcknowledgeFailed>
 80043ea:	4603      	mov	r3, r0
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d001      	beq.n	80043f4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80043f0:	2301      	movs	r3, #1
 80043f2:	e02d      	b.n	8004450 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043f4:	68bb      	ldr	r3, [r7, #8]
 80043f6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80043fa:	d021      	beq.n	8004440 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043fc:	f7fe fdb6 	bl	8002f6c <HAL_GetTick>
 8004400:	4602      	mov	r2, r0
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	1ad3      	subs	r3, r2, r3
 8004406:	68ba      	ldr	r2, [r7, #8]
 8004408:	429a      	cmp	r2, r3
 800440a:	d302      	bcc.n	8004412 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800440c:	68bb      	ldr	r3, [r7, #8]
 800440e:	2b00      	cmp	r3, #0
 8004410:	d116      	bne.n	8004440 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	2200      	movs	r2, #0
 8004416:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	2220      	movs	r2, #32
 800441c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	2200      	movs	r2, #0
 8004424:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800442c:	f043 0220 	orr.w	r2, r3, #32
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	2200      	movs	r2, #0
 8004438:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800443c:	2301      	movs	r3, #1
 800443e:	e007      	b.n	8004450 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	695b      	ldr	r3, [r3, #20]
 8004446:	f003 0304 	and.w	r3, r3, #4
 800444a:	2b04      	cmp	r3, #4
 800444c:	d1ca      	bne.n	80043e4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800444e:	2300      	movs	r3, #0
}
 8004450:	4618      	mov	r0, r3
 8004452:	3710      	adds	r7, #16
 8004454:	46bd      	mov	sp, r7
 8004456:	bd80      	pop	{r7, pc}

08004458 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004458:	b580      	push	{r7, lr}
 800445a:	b084      	sub	sp, #16
 800445c:	af00      	add	r7, sp, #0
 800445e:	60f8      	str	r0, [r7, #12]
 8004460:	60b9      	str	r1, [r7, #8]
 8004462:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004464:	e042      	b.n	80044ec <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	695b      	ldr	r3, [r3, #20]
 800446c:	f003 0310 	and.w	r3, r3, #16
 8004470:	2b10      	cmp	r3, #16
 8004472:	d119      	bne.n	80044a8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f06f 0210 	mvn.w	r2, #16
 800447c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	2200      	movs	r2, #0
 8004482:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	2220      	movs	r2, #32
 8004488:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	2200      	movs	r2, #0
 8004490:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	2200      	movs	r2, #0
 80044a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80044a4:	2301      	movs	r3, #1
 80044a6:	e029      	b.n	80044fc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044a8:	f7fe fd60 	bl	8002f6c <HAL_GetTick>
 80044ac:	4602      	mov	r2, r0
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	1ad3      	subs	r3, r2, r3
 80044b2:	68ba      	ldr	r2, [r7, #8]
 80044b4:	429a      	cmp	r2, r3
 80044b6:	d302      	bcc.n	80044be <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80044b8:	68bb      	ldr	r3, [r7, #8]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d116      	bne.n	80044ec <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	2200      	movs	r2, #0
 80044c2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	2220      	movs	r2, #32
 80044c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	2200      	movs	r2, #0
 80044d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044d8:	f043 0220 	orr.w	r2, r3, #32
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	2200      	movs	r2, #0
 80044e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80044e8:	2301      	movs	r3, #1
 80044ea:	e007      	b.n	80044fc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	695b      	ldr	r3, [r3, #20]
 80044f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044f6:	2b40      	cmp	r3, #64	; 0x40
 80044f8:	d1b5      	bne.n	8004466 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80044fa:	2300      	movs	r3, #0
}
 80044fc:	4618      	mov	r0, r3
 80044fe:	3710      	adds	r7, #16
 8004500:	46bd      	mov	sp, r7
 8004502:	bd80      	pop	{r7, pc}

08004504 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004504:	b480      	push	{r7}
 8004506:	b083      	sub	sp, #12
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	695b      	ldr	r3, [r3, #20]
 8004512:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004516:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800451a:	d11b      	bne.n	8004554 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004524:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	2200      	movs	r2, #0
 800452a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2220      	movs	r2, #32
 8004530:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2200      	movs	r2, #0
 8004538:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004540:	f043 0204 	orr.w	r2, r3, #4
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2200      	movs	r2, #0
 800454c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004550:	2301      	movs	r3, #1
 8004552:	e000      	b.n	8004556 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004554:	2300      	movs	r3, #0
}
 8004556:	4618      	mov	r0, r3
 8004558:	370c      	adds	r7, #12
 800455a:	46bd      	mov	sp, r7
 800455c:	bc80      	pop	{r7}
 800455e:	4770      	bx	lr

08004560 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004560:	b580      	push	{r7, lr}
 8004562:	b086      	sub	sp, #24
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2b00      	cmp	r3, #0
 800456c:	d101      	bne.n	8004572 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800456e:	2301      	movs	r3, #1
 8004570:	e272      	b.n	8004a58 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f003 0301 	and.w	r3, r3, #1
 800457a:	2b00      	cmp	r3, #0
 800457c:	f000 8087 	beq.w	800468e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004580:	4b92      	ldr	r3, [pc, #584]	; (80047cc <HAL_RCC_OscConfig+0x26c>)
 8004582:	685b      	ldr	r3, [r3, #4]
 8004584:	f003 030c 	and.w	r3, r3, #12
 8004588:	2b04      	cmp	r3, #4
 800458a:	d00c      	beq.n	80045a6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800458c:	4b8f      	ldr	r3, [pc, #572]	; (80047cc <HAL_RCC_OscConfig+0x26c>)
 800458e:	685b      	ldr	r3, [r3, #4]
 8004590:	f003 030c 	and.w	r3, r3, #12
 8004594:	2b08      	cmp	r3, #8
 8004596:	d112      	bne.n	80045be <HAL_RCC_OscConfig+0x5e>
 8004598:	4b8c      	ldr	r3, [pc, #560]	; (80047cc <HAL_RCC_OscConfig+0x26c>)
 800459a:	685b      	ldr	r3, [r3, #4]
 800459c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80045a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045a4:	d10b      	bne.n	80045be <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045a6:	4b89      	ldr	r3, [pc, #548]	; (80047cc <HAL_RCC_OscConfig+0x26c>)
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d06c      	beq.n	800468c <HAL_RCC_OscConfig+0x12c>
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	685b      	ldr	r3, [r3, #4]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d168      	bne.n	800468c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80045ba:	2301      	movs	r3, #1
 80045bc:	e24c      	b.n	8004a58 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	685b      	ldr	r3, [r3, #4]
 80045c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045c6:	d106      	bne.n	80045d6 <HAL_RCC_OscConfig+0x76>
 80045c8:	4b80      	ldr	r3, [pc, #512]	; (80047cc <HAL_RCC_OscConfig+0x26c>)
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	4a7f      	ldr	r2, [pc, #508]	; (80047cc <HAL_RCC_OscConfig+0x26c>)
 80045ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045d2:	6013      	str	r3, [r2, #0]
 80045d4:	e02e      	b.n	8004634 <HAL_RCC_OscConfig+0xd4>
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	685b      	ldr	r3, [r3, #4]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d10c      	bne.n	80045f8 <HAL_RCC_OscConfig+0x98>
 80045de:	4b7b      	ldr	r3, [pc, #492]	; (80047cc <HAL_RCC_OscConfig+0x26c>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	4a7a      	ldr	r2, [pc, #488]	; (80047cc <HAL_RCC_OscConfig+0x26c>)
 80045e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80045e8:	6013      	str	r3, [r2, #0]
 80045ea:	4b78      	ldr	r3, [pc, #480]	; (80047cc <HAL_RCC_OscConfig+0x26c>)
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	4a77      	ldr	r2, [pc, #476]	; (80047cc <HAL_RCC_OscConfig+0x26c>)
 80045f0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80045f4:	6013      	str	r3, [r2, #0]
 80045f6:	e01d      	b.n	8004634 <HAL_RCC_OscConfig+0xd4>
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	685b      	ldr	r3, [r3, #4]
 80045fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004600:	d10c      	bne.n	800461c <HAL_RCC_OscConfig+0xbc>
 8004602:	4b72      	ldr	r3, [pc, #456]	; (80047cc <HAL_RCC_OscConfig+0x26c>)
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	4a71      	ldr	r2, [pc, #452]	; (80047cc <HAL_RCC_OscConfig+0x26c>)
 8004608:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800460c:	6013      	str	r3, [r2, #0]
 800460e:	4b6f      	ldr	r3, [pc, #444]	; (80047cc <HAL_RCC_OscConfig+0x26c>)
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	4a6e      	ldr	r2, [pc, #440]	; (80047cc <HAL_RCC_OscConfig+0x26c>)
 8004614:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004618:	6013      	str	r3, [r2, #0]
 800461a:	e00b      	b.n	8004634 <HAL_RCC_OscConfig+0xd4>
 800461c:	4b6b      	ldr	r3, [pc, #428]	; (80047cc <HAL_RCC_OscConfig+0x26c>)
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	4a6a      	ldr	r2, [pc, #424]	; (80047cc <HAL_RCC_OscConfig+0x26c>)
 8004622:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004626:	6013      	str	r3, [r2, #0]
 8004628:	4b68      	ldr	r3, [pc, #416]	; (80047cc <HAL_RCC_OscConfig+0x26c>)
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	4a67      	ldr	r2, [pc, #412]	; (80047cc <HAL_RCC_OscConfig+0x26c>)
 800462e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004632:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	685b      	ldr	r3, [r3, #4]
 8004638:	2b00      	cmp	r3, #0
 800463a:	d013      	beq.n	8004664 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800463c:	f7fe fc96 	bl	8002f6c <HAL_GetTick>
 8004640:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004642:	e008      	b.n	8004656 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004644:	f7fe fc92 	bl	8002f6c <HAL_GetTick>
 8004648:	4602      	mov	r2, r0
 800464a:	693b      	ldr	r3, [r7, #16]
 800464c:	1ad3      	subs	r3, r2, r3
 800464e:	2b64      	cmp	r3, #100	; 0x64
 8004650:	d901      	bls.n	8004656 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004652:	2303      	movs	r3, #3
 8004654:	e200      	b.n	8004a58 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004656:	4b5d      	ldr	r3, [pc, #372]	; (80047cc <HAL_RCC_OscConfig+0x26c>)
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800465e:	2b00      	cmp	r3, #0
 8004660:	d0f0      	beq.n	8004644 <HAL_RCC_OscConfig+0xe4>
 8004662:	e014      	b.n	800468e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004664:	f7fe fc82 	bl	8002f6c <HAL_GetTick>
 8004668:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800466a:	e008      	b.n	800467e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800466c:	f7fe fc7e 	bl	8002f6c <HAL_GetTick>
 8004670:	4602      	mov	r2, r0
 8004672:	693b      	ldr	r3, [r7, #16]
 8004674:	1ad3      	subs	r3, r2, r3
 8004676:	2b64      	cmp	r3, #100	; 0x64
 8004678:	d901      	bls.n	800467e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800467a:	2303      	movs	r3, #3
 800467c:	e1ec      	b.n	8004a58 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800467e:	4b53      	ldr	r3, [pc, #332]	; (80047cc <HAL_RCC_OscConfig+0x26c>)
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004686:	2b00      	cmp	r3, #0
 8004688:	d1f0      	bne.n	800466c <HAL_RCC_OscConfig+0x10c>
 800468a:	e000      	b.n	800468e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800468c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f003 0302 	and.w	r3, r3, #2
 8004696:	2b00      	cmp	r3, #0
 8004698:	d063      	beq.n	8004762 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800469a:	4b4c      	ldr	r3, [pc, #304]	; (80047cc <HAL_RCC_OscConfig+0x26c>)
 800469c:	685b      	ldr	r3, [r3, #4]
 800469e:	f003 030c 	and.w	r3, r3, #12
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d00b      	beq.n	80046be <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80046a6:	4b49      	ldr	r3, [pc, #292]	; (80047cc <HAL_RCC_OscConfig+0x26c>)
 80046a8:	685b      	ldr	r3, [r3, #4]
 80046aa:	f003 030c 	and.w	r3, r3, #12
 80046ae:	2b08      	cmp	r3, #8
 80046b0:	d11c      	bne.n	80046ec <HAL_RCC_OscConfig+0x18c>
 80046b2:	4b46      	ldr	r3, [pc, #280]	; (80047cc <HAL_RCC_OscConfig+0x26c>)
 80046b4:	685b      	ldr	r3, [r3, #4]
 80046b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d116      	bne.n	80046ec <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80046be:	4b43      	ldr	r3, [pc, #268]	; (80047cc <HAL_RCC_OscConfig+0x26c>)
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f003 0302 	and.w	r3, r3, #2
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d005      	beq.n	80046d6 <HAL_RCC_OscConfig+0x176>
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	691b      	ldr	r3, [r3, #16]
 80046ce:	2b01      	cmp	r3, #1
 80046d0:	d001      	beq.n	80046d6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80046d2:	2301      	movs	r3, #1
 80046d4:	e1c0      	b.n	8004a58 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046d6:	4b3d      	ldr	r3, [pc, #244]	; (80047cc <HAL_RCC_OscConfig+0x26c>)
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	695b      	ldr	r3, [r3, #20]
 80046e2:	00db      	lsls	r3, r3, #3
 80046e4:	4939      	ldr	r1, [pc, #228]	; (80047cc <HAL_RCC_OscConfig+0x26c>)
 80046e6:	4313      	orrs	r3, r2
 80046e8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80046ea:	e03a      	b.n	8004762 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	691b      	ldr	r3, [r3, #16]
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d020      	beq.n	8004736 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80046f4:	4b36      	ldr	r3, [pc, #216]	; (80047d0 <HAL_RCC_OscConfig+0x270>)
 80046f6:	2201      	movs	r2, #1
 80046f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046fa:	f7fe fc37 	bl	8002f6c <HAL_GetTick>
 80046fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004700:	e008      	b.n	8004714 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004702:	f7fe fc33 	bl	8002f6c <HAL_GetTick>
 8004706:	4602      	mov	r2, r0
 8004708:	693b      	ldr	r3, [r7, #16]
 800470a:	1ad3      	subs	r3, r2, r3
 800470c:	2b02      	cmp	r3, #2
 800470e:	d901      	bls.n	8004714 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004710:	2303      	movs	r3, #3
 8004712:	e1a1      	b.n	8004a58 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004714:	4b2d      	ldr	r3, [pc, #180]	; (80047cc <HAL_RCC_OscConfig+0x26c>)
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f003 0302 	and.w	r3, r3, #2
 800471c:	2b00      	cmp	r3, #0
 800471e:	d0f0      	beq.n	8004702 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004720:	4b2a      	ldr	r3, [pc, #168]	; (80047cc <HAL_RCC_OscConfig+0x26c>)
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	695b      	ldr	r3, [r3, #20]
 800472c:	00db      	lsls	r3, r3, #3
 800472e:	4927      	ldr	r1, [pc, #156]	; (80047cc <HAL_RCC_OscConfig+0x26c>)
 8004730:	4313      	orrs	r3, r2
 8004732:	600b      	str	r3, [r1, #0]
 8004734:	e015      	b.n	8004762 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004736:	4b26      	ldr	r3, [pc, #152]	; (80047d0 <HAL_RCC_OscConfig+0x270>)
 8004738:	2200      	movs	r2, #0
 800473a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800473c:	f7fe fc16 	bl	8002f6c <HAL_GetTick>
 8004740:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004742:	e008      	b.n	8004756 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004744:	f7fe fc12 	bl	8002f6c <HAL_GetTick>
 8004748:	4602      	mov	r2, r0
 800474a:	693b      	ldr	r3, [r7, #16]
 800474c:	1ad3      	subs	r3, r2, r3
 800474e:	2b02      	cmp	r3, #2
 8004750:	d901      	bls.n	8004756 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004752:	2303      	movs	r3, #3
 8004754:	e180      	b.n	8004a58 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004756:	4b1d      	ldr	r3, [pc, #116]	; (80047cc <HAL_RCC_OscConfig+0x26c>)
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f003 0302 	and.w	r3, r3, #2
 800475e:	2b00      	cmp	r3, #0
 8004760:	d1f0      	bne.n	8004744 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f003 0308 	and.w	r3, r3, #8
 800476a:	2b00      	cmp	r3, #0
 800476c:	d03a      	beq.n	80047e4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	699b      	ldr	r3, [r3, #24]
 8004772:	2b00      	cmp	r3, #0
 8004774:	d019      	beq.n	80047aa <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004776:	4b17      	ldr	r3, [pc, #92]	; (80047d4 <HAL_RCC_OscConfig+0x274>)
 8004778:	2201      	movs	r2, #1
 800477a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800477c:	f7fe fbf6 	bl	8002f6c <HAL_GetTick>
 8004780:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004782:	e008      	b.n	8004796 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004784:	f7fe fbf2 	bl	8002f6c <HAL_GetTick>
 8004788:	4602      	mov	r2, r0
 800478a:	693b      	ldr	r3, [r7, #16]
 800478c:	1ad3      	subs	r3, r2, r3
 800478e:	2b02      	cmp	r3, #2
 8004790:	d901      	bls.n	8004796 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004792:	2303      	movs	r3, #3
 8004794:	e160      	b.n	8004a58 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004796:	4b0d      	ldr	r3, [pc, #52]	; (80047cc <HAL_RCC_OscConfig+0x26c>)
 8004798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800479a:	f003 0302 	and.w	r3, r3, #2
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d0f0      	beq.n	8004784 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80047a2:	2001      	movs	r0, #1
 80047a4:	f000 fac4 	bl	8004d30 <RCC_Delay>
 80047a8:	e01c      	b.n	80047e4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80047aa:	4b0a      	ldr	r3, [pc, #40]	; (80047d4 <HAL_RCC_OscConfig+0x274>)
 80047ac:	2200      	movs	r2, #0
 80047ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80047b0:	f7fe fbdc 	bl	8002f6c <HAL_GetTick>
 80047b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80047b6:	e00f      	b.n	80047d8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80047b8:	f7fe fbd8 	bl	8002f6c <HAL_GetTick>
 80047bc:	4602      	mov	r2, r0
 80047be:	693b      	ldr	r3, [r7, #16]
 80047c0:	1ad3      	subs	r3, r2, r3
 80047c2:	2b02      	cmp	r3, #2
 80047c4:	d908      	bls.n	80047d8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80047c6:	2303      	movs	r3, #3
 80047c8:	e146      	b.n	8004a58 <HAL_RCC_OscConfig+0x4f8>
 80047ca:	bf00      	nop
 80047cc:	40021000 	.word	0x40021000
 80047d0:	42420000 	.word	0x42420000
 80047d4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80047d8:	4b92      	ldr	r3, [pc, #584]	; (8004a24 <HAL_RCC_OscConfig+0x4c4>)
 80047da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047dc:	f003 0302 	and.w	r3, r3, #2
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d1e9      	bne.n	80047b8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f003 0304 	and.w	r3, r3, #4
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	f000 80a6 	beq.w	800493e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80047f2:	2300      	movs	r3, #0
 80047f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80047f6:	4b8b      	ldr	r3, [pc, #556]	; (8004a24 <HAL_RCC_OscConfig+0x4c4>)
 80047f8:	69db      	ldr	r3, [r3, #28]
 80047fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d10d      	bne.n	800481e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004802:	4b88      	ldr	r3, [pc, #544]	; (8004a24 <HAL_RCC_OscConfig+0x4c4>)
 8004804:	69db      	ldr	r3, [r3, #28]
 8004806:	4a87      	ldr	r2, [pc, #540]	; (8004a24 <HAL_RCC_OscConfig+0x4c4>)
 8004808:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800480c:	61d3      	str	r3, [r2, #28]
 800480e:	4b85      	ldr	r3, [pc, #532]	; (8004a24 <HAL_RCC_OscConfig+0x4c4>)
 8004810:	69db      	ldr	r3, [r3, #28]
 8004812:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004816:	60bb      	str	r3, [r7, #8]
 8004818:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800481a:	2301      	movs	r3, #1
 800481c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800481e:	4b82      	ldr	r3, [pc, #520]	; (8004a28 <HAL_RCC_OscConfig+0x4c8>)
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004826:	2b00      	cmp	r3, #0
 8004828:	d118      	bne.n	800485c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800482a:	4b7f      	ldr	r3, [pc, #508]	; (8004a28 <HAL_RCC_OscConfig+0x4c8>)
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	4a7e      	ldr	r2, [pc, #504]	; (8004a28 <HAL_RCC_OscConfig+0x4c8>)
 8004830:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004834:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004836:	f7fe fb99 	bl	8002f6c <HAL_GetTick>
 800483a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800483c:	e008      	b.n	8004850 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800483e:	f7fe fb95 	bl	8002f6c <HAL_GetTick>
 8004842:	4602      	mov	r2, r0
 8004844:	693b      	ldr	r3, [r7, #16]
 8004846:	1ad3      	subs	r3, r2, r3
 8004848:	2b64      	cmp	r3, #100	; 0x64
 800484a:	d901      	bls.n	8004850 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800484c:	2303      	movs	r3, #3
 800484e:	e103      	b.n	8004a58 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004850:	4b75      	ldr	r3, [pc, #468]	; (8004a28 <HAL_RCC_OscConfig+0x4c8>)
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004858:	2b00      	cmp	r3, #0
 800485a:	d0f0      	beq.n	800483e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	68db      	ldr	r3, [r3, #12]
 8004860:	2b01      	cmp	r3, #1
 8004862:	d106      	bne.n	8004872 <HAL_RCC_OscConfig+0x312>
 8004864:	4b6f      	ldr	r3, [pc, #444]	; (8004a24 <HAL_RCC_OscConfig+0x4c4>)
 8004866:	6a1b      	ldr	r3, [r3, #32]
 8004868:	4a6e      	ldr	r2, [pc, #440]	; (8004a24 <HAL_RCC_OscConfig+0x4c4>)
 800486a:	f043 0301 	orr.w	r3, r3, #1
 800486e:	6213      	str	r3, [r2, #32]
 8004870:	e02d      	b.n	80048ce <HAL_RCC_OscConfig+0x36e>
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	68db      	ldr	r3, [r3, #12]
 8004876:	2b00      	cmp	r3, #0
 8004878:	d10c      	bne.n	8004894 <HAL_RCC_OscConfig+0x334>
 800487a:	4b6a      	ldr	r3, [pc, #424]	; (8004a24 <HAL_RCC_OscConfig+0x4c4>)
 800487c:	6a1b      	ldr	r3, [r3, #32]
 800487e:	4a69      	ldr	r2, [pc, #420]	; (8004a24 <HAL_RCC_OscConfig+0x4c4>)
 8004880:	f023 0301 	bic.w	r3, r3, #1
 8004884:	6213      	str	r3, [r2, #32]
 8004886:	4b67      	ldr	r3, [pc, #412]	; (8004a24 <HAL_RCC_OscConfig+0x4c4>)
 8004888:	6a1b      	ldr	r3, [r3, #32]
 800488a:	4a66      	ldr	r2, [pc, #408]	; (8004a24 <HAL_RCC_OscConfig+0x4c4>)
 800488c:	f023 0304 	bic.w	r3, r3, #4
 8004890:	6213      	str	r3, [r2, #32]
 8004892:	e01c      	b.n	80048ce <HAL_RCC_OscConfig+0x36e>
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	68db      	ldr	r3, [r3, #12]
 8004898:	2b05      	cmp	r3, #5
 800489a:	d10c      	bne.n	80048b6 <HAL_RCC_OscConfig+0x356>
 800489c:	4b61      	ldr	r3, [pc, #388]	; (8004a24 <HAL_RCC_OscConfig+0x4c4>)
 800489e:	6a1b      	ldr	r3, [r3, #32]
 80048a0:	4a60      	ldr	r2, [pc, #384]	; (8004a24 <HAL_RCC_OscConfig+0x4c4>)
 80048a2:	f043 0304 	orr.w	r3, r3, #4
 80048a6:	6213      	str	r3, [r2, #32]
 80048a8:	4b5e      	ldr	r3, [pc, #376]	; (8004a24 <HAL_RCC_OscConfig+0x4c4>)
 80048aa:	6a1b      	ldr	r3, [r3, #32]
 80048ac:	4a5d      	ldr	r2, [pc, #372]	; (8004a24 <HAL_RCC_OscConfig+0x4c4>)
 80048ae:	f043 0301 	orr.w	r3, r3, #1
 80048b2:	6213      	str	r3, [r2, #32]
 80048b4:	e00b      	b.n	80048ce <HAL_RCC_OscConfig+0x36e>
 80048b6:	4b5b      	ldr	r3, [pc, #364]	; (8004a24 <HAL_RCC_OscConfig+0x4c4>)
 80048b8:	6a1b      	ldr	r3, [r3, #32]
 80048ba:	4a5a      	ldr	r2, [pc, #360]	; (8004a24 <HAL_RCC_OscConfig+0x4c4>)
 80048bc:	f023 0301 	bic.w	r3, r3, #1
 80048c0:	6213      	str	r3, [r2, #32]
 80048c2:	4b58      	ldr	r3, [pc, #352]	; (8004a24 <HAL_RCC_OscConfig+0x4c4>)
 80048c4:	6a1b      	ldr	r3, [r3, #32]
 80048c6:	4a57      	ldr	r2, [pc, #348]	; (8004a24 <HAL_RCC_OscConfig+0x4c4>)
 80048c8:	f023 0304 	bic.w	r3, r3, #4
 80048cc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	68db      	ldr	r3, [r3, #12]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d015      	beq.n	8004902 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80048d6:	f7fe fb49 	bl	8002f6c <HAL_GetTick>
 80048da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80048dc:	e00a      	b.n	80048f4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048de:	f7fe fb45 	bl	8002f6c <HAL_GetTick>
 80048e2:	4602      	mov	r2, r0
 80048e4:	693b      	ldr	r3, [r7, #16]
 80048e6:	1ad3      	subs	r3, r2, r3
 80048e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80048ec:	4293      	cmp	r3, r2
 80048ee:	d901      	bls.n	80048f4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80048f0:	2303      	movs	r3, #3
 80048f2:	e0b1      	b.n	8004a58 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80048f4:	4b4b      	ldr	r3, [pc, #300]	; (8004a24 <HAL_RCC_OscConfig+0x4c4>)
 80048f6:	6a1b      	ldr	r3, [r3, #32]
 80048f8:	f003 0302 	and.w	r3, r3, #2
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d0ee      	beq.n	80048de <HAL_RCC_OscConfig+0x37e>
 8004900:	e014      	b.n	800492c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004902:	f7fe fb33 	bl	8002f6c <HAL_GetTick>
 8004906:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004908:	e00a      	b.n	8004920 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800490a:	f7fe fb2f 	bl	8002f6c <HAL_GetTick>
 800490e:	4602      	mov	r2, r0
 8004910:	693b      	ldr	r3, [r7, #16]
 8004912:	1ad3      	subs	r3, r2, r3
 8004914:	f241 3288 	movw	r2, #5000	; 0x1388
 8004918:	4293      	cmp	r3, r2
 800491a:	d901      	bls.n	8004920 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800491c:	2303      	movs	r3, #3
 800491e:	e09b      	b.n	8004a58 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004920:	4b40      	ldr	r3, [pc, #256]	; (8004a24 <HAL_RCC_OscConfig+0x4c4>)
 8004922:	6a1b      	ldr	r3, [r3, #32]
 8004924:	f003 0302 	and.w	r3, r3, #2
 8004928:	2b00      	cmp	r3, #0
 800492a:	d1ee      	bne.n	800490a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800492c:	7dfb      	ldrb	r3, [r7, #23]
 800492e:	2b01      	cmp	r3, #1
 8004930:	d105      	bne.n	800493e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004932:	4b3c      	ldr	r3, [pc, #240]	; (8004a24 <HAL_RCC_OscConfig+0x4c4>)
 8004934:	69db      	ldr	r3, [r3, #28]
 8004936:	4a3b      	ldr	r2, [pc, #236]	; (8004a24 <HAL_RCC_OscConfig+0x4c4>)
 8004938:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800493c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	69db      	ldr	r3, [r3, #28]
 8004942:	2b00      	cmp	r3, #0
 8004944:	f000 8087 	beq.w	8004a56 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004948:	4b36      	ldr	r3, [pc, #216]	; (8004a24 <HAL_RCC_OscConfig+0x4c4>)
 800494a:	685b      	ldr	r3, [r3, #4]
 800494c:	f003 030c 	and.w	r3, r3, #12
 8004950:	2b08      	cmp	r3, #8
 8004952:	d061      	beq.n	8004a18 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	69db      	ldr	r3, [r3, #28]
 8004958:	2b02      	cmp	r3, #2
 800495a:	d146      	bne.n	80049ea <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800495c:	4b33      	ldr	r3, [pc, #204]	; (8004a2c <HAL_RCC_OscConfig+0x4cc>)
 800495e:	2200      	movs	r2, #0
 8004960:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004962:	f7fe fb03 	bl	8002f6c <HAL_GetTick>
 8004966:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004968:	e008      	b.n	800497c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800496a:	f7fe faff 	bl	8002f6c <HAL_GetTick>
 800496e:	4602      	mov	r2, r0
 8004970:	693b      	ldr	r3, [r7, #16]
 8004972:	1ad3      	subs	r3, r2, r3
 8004974:	2b02      	cmp	r3, #2
 8004976:	d901      	bls.n	800497c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004978:	2303      	movs	r3, #3
 800497a:	e06d      	b.n	8004a58 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800497c:	4b29      	ldr	r3, [pc, #164]	; (8004a24 <HAL_RCC_OscConfig+0x4c4>)
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004984:	2b00      	cmp	r3, #0
 8004986:	d1f0      	bne.n	800496a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	6a1b      	ldr	r3, [r3, #32]
 800498c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004990:	d108      	bne.n	80049a4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004992:	4b24      	ldr	r3, [pc, #144]	; (8004a24 <HAL_RCC_OscConfig+0x4c4>)
 8004994:	685b      	ldr	r3, [r3, #4]
 8004996:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	689b      	ldr	r3, [r3, #8]
 800499e:	4921      	ldr	r1, [pc, #132]	; (8004a24 <HAL_RCC_OscConfig+0x4c4>)
 80049a0:	4313      	orrs	r3, r2
 80049a2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80049a4:	4b1f      	ldr	r3, [pc, #124]	; (8004a24 <HAL_RCC_OscConfig+0x4c4>)
 80049a6:	685b      	ldr	r3, [r3, #4]
 80049a8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	6a19      	ldr	r1, [r3, #32]
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049b4:	430b      	orrs	r3, r1
 80049b6:	491b      	ldr	r1, [pc, #108]	; (8004a24 <HAL_RCC_OscConfig+0x4c4>)
 80049b8:	4313      	orrs	r3, r2
 80049ba:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80049bc:	4b1b      	ldr	r3, [pc, #108]	; (8004a2c <HAL_RCC_OscConfig+0x4cc>)
 80049be:	2201      	movs	r2, #1
 80049c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049c2:	f7fe fad3 	bl	8002f6c <HAL_GetTick>
 80049c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80049c8:	e008      	b.n	80049dc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049ca:	f7fe facf 	bl	8002f6c <HAL_GetTick>
 80049ce:	4602      	mov	r2, r0
 80049d0:	693b      	ldr	r3, [r7, #16]
 80049d2:	1ad3      	subs	r3, r2, r3
 80049d4:	2b02      	cmp	r3, #2
 80049d6:	d901      	bls.n	80049dc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80049d8:	2303      	movs	r3, #3
 80049da:	e03d      	b.n	8004a58 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80049dc:	4b11      	ldr	r3, [pc, #68]	; (8004a24 <HAL_RCC_OscConfig+0x4c4>)
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d0f0      	beq.n	80049ca <HAL_RCC_OscConfig+0x46a>
 80049e8:	e035      	b.n	8004a56 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80049ea:	4b10      	ldr	r3, [pc, #64]	; (8004a2c <HAL_RCC_OscConfig+0x4cc>)
 80049ec:	2200      	movs	r2, #0
 80049ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049f0:	f7fe fabc 	bl	8002f6c <HAL_GetTick>
 80049f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80049f6:	e008      	b.n	8004a0a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049f8:	f7fe fab8 	bl	8002f6c <HAL_GetTick>
 80049fc:	4602      	mov	r2, r0
 80049fe:	693b      	ldr	r3, [r7, #16]
 8004a00:	1ad3      	subs	r3, r2, r3
 8004a02:	2b02      	cmp	r3, #2
 8004a04:	d901      	bls.n	8004a0a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004a06:	2303      	movs	r3, #3
 8004a08:	e026      	b.n	8004a58 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004a0a:	4b06      	ldr	r3, [pc, #24]	; (8004a24 <HAL_RCC_OscConfig+0x4c4>)
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d1f0      	bne.n	80049f8 <HAL_RCC_OscConfig+0x498>
 8004a16:	e01e      	b.n	8004a56 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	69db      	ldr	r3, [r3, #28]
 8004a1c:	2b01      	cmp	r3, #1
 8004a1e:	d107      	bne.n	8004a30 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004a20:	2301      	movs	r3, #1
 8004a22:	e019      	b.n	8004a58 <HAL_RCC_OscConfig+0x4f8>
 8004a24:	40021000 	.word	0x40021000
 8004a28:	40007000 	.word	0x40007000
 8004a2c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004a30:	4b0b      	ldr	r3, [pc, #44]	; (8004a60 <HAL_RCC_OscConfig+0x500>)
 8004a32:	685b      	ldr	r3, [r3, #4]
 8004a34:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	6a1b      	ldr	r3, [r3, #32]
 8004a40:	429a      	cmp	r2, r3
 8004a42:	d106      	bne.n	8004a52 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a4e:	429a      	cmp	r2, r3
 8004a50:	d001      	beq.n	8004a56 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004a52:	2301      	movs	r3, #1
 8004a54:	e000      	b.n	8004a58 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004a56:	2300      	movs	r3, #0
}
 8004a58:	4618      	mov	r0, r3
 8004a5a:	3718      	adds	r7, #24
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	bd80      	pop	{r7, pc}
 8004a60:	40021000 	.word	0x40021000

08004a64 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004a64:	b580      	push	{r7, lr}
 8004a66:	b084      	sub	sp, #16
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
 8004a6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d101      	bne.n	8004a78 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004a74:	2301      	movs	r3, #1
 8004a76:	e0d0      	b.n	8004c1a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004a78:	4b6a      	ldr	r3, [pc, #424]	; (8004c24 <HAL_RCC_ClockConfig+0x1c0>)
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f003 0307 	and.w	r3, r3, #7
 8004a80:	683a      	ldr	r2, [r7, #0]
 8004a82:	429a      	cmp	r2, r3
 8004a84:	d910      	bls.n	8004aa8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a86:	4b67      	ldr	r3, [pc, #412]	; (8004c24 <HAL_RCC_ClockConfig+0x1c0>)
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f023 0207 	bic.w	r2, r3, #7
 8004a8e:	4965      	ldr	r1, [pc, #404]	; (8004c24 <HAL_RCC_ClockConfig+0x1c0>)
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	4313      	orrs	r3, r2
 8004a94:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a96:	4b63      	ldr	r3, [pc, #396]	; (8004c24 <HAL_RCC_ClockConfig+0x1c0>)
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f003 0307 	and.w	r3, r3, #7
 8004a9e:	683a      	ldr	r2, [r7, #0]
 8004aa0:	429a      	cmp	r2, r3
 8004aa2:	d001      	beq.n	8004aa8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004aa4:	2301      	movs	r3, #1
 8004aa6:	e0b8      	b.n	8004c1a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f003 0302 	and.w	r3, r3, #2
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d020      	beq.n	8004af6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f003 0304 	and.w	r3, r3, #4
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d005      	beq.n	8004acc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004ac0:	4b59      	ldr	r3, [pc, #356]	; (8004c28 <HAL_RCC_ClockConfig+0x1c4>)
 8004ac2:	685b      	ldr	r3, [r3, #4]
 8004ac4:	4a58      	ldr	r2, [pc, #352]	; (8004c28 <HAL_RCC_ClockConfig+0x1c4>)
 8004ac6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004aca:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f003 0308 	and.w	r3, r3, #8
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d005      	beq.n	8004ae4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004ad8:	4b53      	ldr	r3, [pc, #332]	; (8004c28 <HAL_RCC_ClockConfig+0x1c4>)
 8004ada:	685b      	ldr	r3, [r3, #4]
 8004adc:	4a52      	ldr	r2, [pc, #328]	; (8004c28 <HAL_RCC_ClockConfig+0x1c4>)
 8004ade:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004ae2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004ae4:	4b50      	ldr	r3, [pc, #320]	; (8004c28 <HAL_RCC_ClockConfig+0x1c4>)
 8004ae6:	685b      	ldr	r3, [r3, #4]
 8004ae8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	689b      	ldr	r3, [r3, #8]
 8004af0:	494d      	ldr	r1, [pc, #308]	; (8004c28 <HAL_RCC_ClockConfig+0x1c4>)
 8004af2:	4313      	orrs	r3, r2
 8004af4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f003 0301 	and.w	r3, r3, #1
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d040      	beq.n	8004b84 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	685b      	ldr	r3, [r3, #4]
 8004b06:	2b01      	cmp	r3, #1
 8004b08:	d107      	bne.n	8004b1a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b0a:	4b47      	ldr	r3, [pc, #284]	; (8004c28 <HAL_RCC_ClockConfig+0x1c4>)
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d115      	bne.n	8004b42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b16:	2301      	movs	r3, #1
 8004b18:	e07f      	b.n	8004c1a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	685b      	ldr	r3, [r3, #4]
 8004b1e:	2b02      	cmp	r3, #2
 8004b20:	d107      	bne.n	8004b32 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b22:	4b41      	ldr	r3, [pc, #260]	; (8004c28 <HAL_RCC_ClockConfig+0x1c4>)
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d109      	bne.n	8004b42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b2e:	2301      	movs	r3, #1
 8004b30:	e073      	b.n	8004c1a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b32:	4b3d      	ldr	r3, [pc, #244]	; (8004c28 <HAL_RCC_ClockConfig+0x1c4>)
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f003 0302 	and.w	r3, r3, #2
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d101      	bne.n	8004b42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b3e:	2301      	movs	r3, #1
 8004b40:	e06b      	b.n	8004c1a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004b42:	4b39      	ldr	r3, [pc, #228]	; (8004c28 <HAL_RCC_ClockConfig+0x1c4>)
 8004b44:	685b      	ldr	r3, [r3, #4]
 8004b46:	f023 0203 	bic.w	r2, r3, #3
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	685b      	ldr	r3, [r3, #4]
 8004b4e:	4936      	ldr	r1, [pc, #216]	; (8004c28 <HAL_RCC_ClockConfig+0x1c4>)
 8004b50:	4313      	orrs	r3, r2
 8004b52:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004b54:	f7fe fa0a 	bl	8002f6c <HAL_GetTick>
 8004b58:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b5a:	e00a      	b.n	8004b72 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b5c:	f7fe fa06 	bl	8002f6c <HAL_GetTick>
 8004b60:	4602      	mov	r2, r0
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	1ad3      	subs	r3, r2, r3
 8004b66:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b6a:	4293      	cmp	r3, r2
 8004b6c:	d901      	bls.n	8004b72 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004b6e:	2303      	movs	r3, #3
 8004b70:	e053      	b.n	8004c1a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b72:	4b2d      	ldr	r3, [pc, #180]	; (8004c28 <HAL_RCC_ClockConfig+0x1c4>)
 8004b74:	685b      	ldr	r3, [r3, #4]
 8004b76:	f003 020c 	and.w	r2, r3, #12
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	685b      	ldr	r3, [r3, #4]
 8004b7e:	009b      	lsls	r3, r3, #2
 8004b80:	429a      	cmp	r2, r3
 8004b82:	d1eb      	bne.n	8004b5c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004b84:	4b27      	ldr	r3, [pc, #156]	; (8004c24 <HAL_RCC_ClockConfig+0x1c0>)
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f003 0307 	and.w	r3, r3, #7
 8004b8c:	683a      	ldr	r2, [r7, #0]
 8004b8e:	429a      	cmp	r2, r3
 8004b90:	d210      	bcs.n	8004bb4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b92:	4b24      	ldr	r3, [pc, #144]	; (8004c24 <HAL_RCC_ClockConfig+0x1c0>)
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f023 0207 	bic.w	r2, r3, #7
 8004b9a:	4922      	ldr	r1, [pc, #136]	; (8004c24 <HAL_RCC_ClockConfig+0x1c0>)
 8004b9c:	683b      	ldr	r3, [r7, #0]
 8004b9e:	4313      	orrs	r3, r2
 8004ba0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ba2:	4b20      	ldr	r3, [pc, #128]	; (8004c24 <HAL_RCC_ClockConfig+0x1c0>)
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f003 0307 	and.w	r3, r3, #7
 8004baa:	683a      	ldr	r2, [r7, #0]
 8004bac:	429a      	cmp	r2, r3
 8004bae:	d001      	beq.n	8004bb4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004bb0:	2301      	movs	r3, #1
 8004bb2:	e032      	b.n	8004c1a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f003 0304 	and.w	r3, r3, #4
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d008      	beq.n	8004bd2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004bc0:	4b19      	ldr	r3, [pc, #100]	; (8004c28 <HAL_RCC_ClockConfig+0x1c4>)
 8004bc2:	685b      	ldr	r3, [r3, #4]
 8004bc4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	68db      	ldr	r3, [r3, #12]
 8004bcc:	4916      	ldr	r1, [pc, #88]	; (8004c28 <HAL_RCC_ClockConfig+0x1c4>)
 8004bce:	4313      	orrs	r3, r2
 8004bd0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f003 0308 	and.w	r3, r3, #8
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d009      	beq.n	8004bf2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004bde:	4b12      	ldr	r3, [pc, #72]	; (8004c28 <HAL_RCC_ClockConfig+0x1c4>)
 8004be0:	685b      	ldr	r3, [r3, #4]
 8004be2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	691b      	ldr	r3, [r3, #16]
 8004bea:	00db      	lsls	r3, r3, #3
 8004bec:	490e      	ldr	r1, [pc, #56]	; (8004c28 <HAL_RCC_ClockConfig+0x1c4>)
 8004bee:	4313      	orrs	r3, r2
 8004bf0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004bf2:	f000 f821 	bl	8004c38 <HAL_RCC_GetSysClockFreq>
 8004bf6:	4602      	mov	r2, r0
 8004bf8:	4b0b      	ldr	r3, [pc, #44]	; (8004c28 <HAL_RCC_ClockConfig+0x1c4>)
 8004bfa:	685b      	ldr	r3, [r3, #4]
 8004bfc:	091b      	lsrs	r3, r3, #4
 8004bfe:	f003 030f 	and.w	r3, r3, #15
 8004c02:	490a      	ldr	r1, [pc, #40]	; (8004c2c <HAL_RCC_ClockConfig+0x1c8>)
 8004c04:	5ccb      	ldrb	r3, [r1, r3]
 8004c06:	fa22 f303 	lsr.w	r3, r2, r3
 8004c0a:	4a09      	ldr	r2, [pc, #36]	; (8004c30 <HAL_RCC_ClockConfig+0x1cc>)
 8004c0c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004c0e:	4b09      	ldr	r3, [pc, #36]	; (8004c34 <HAL_RCC_ClockConfig+0x1d0>)
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	4618      	mov	r0, r3
 8004c14:	f7fe f968 	bl	8002ee8 <HAL_InitTick>

  return HAL_OK;
 8004c18:	2300      	movs	r3, #0
}
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	3710      	adds	r7, #16
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	bd80      	pop	{r7, pc}
 8004c22:	bf00      	nop
 8004c24:	40022000 	.word	0x40022000
 8004c28:	40021000 	.word	0x40021000
 8004c2c:	08007d38 	.word	0x08007d38
 8004c30:	200000fc 	.word	0x200000fc
 8004c34:	20000100 	.word	0x20000100

08004c38 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004c38:	b490      	push	{r4, r7}
 8004c3a:	b08a      	sub	sp, #40	; 0x28
 8004c3c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004c3e:	4b29      	ldr	r3, [pc, #164]	; (8004ce4 <HAL_RCC_GetSysClockFreq+0xac>)
 8004c40:	1d3c      	adds	r4, r7, #4
 8004c42:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004c44:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004c48:	f240 2301 	movw	r3, #513	; 0x201
 8004c4c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004c4e:	2300      	movs	r3, #0
 8004c50:	61fb      	str	r3, [r7, #28]
 8004c52:	2300      	movs	r3, #0
 8004c54:	61bb      	str	r3, [r7, #24]
 8004c56:	2300      	movs	r3, #0
 8004c58:	627b      	str	r3, [r7, #36]	; 0x24
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004c5e:	2300      	movs	r3, #0
 8004c60:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004c62:	4b21      	ldr	r3, [pc, #132]	; (8004ce8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8004c64:	685b      	ldr	r3, [r3, #4]
 8004c66:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004c68:	69fb      	ldr	r3, [r7, #28]
 8004c6a:	f003 030c 	and.w	r3, r3, #12
 8004c6e:	2b04      	cmp	r3, #4
 8004c70:	d002      	beq.n	8004c78 <HAL_RCC_GetSysClockFreq+0x40>
 8004c72:	2b08      	cmp	r3, #8
 8004c74:	d003      	beq.n	8004c7e <HAL_RCC_GetSysClockFreq+0x46>
 8004c76:	e02b      	b.n	8004cd0 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004c78:	4b1c      	ldr	r3, [pc, #112]	; (8004cec <HAL_RCC_GetSysClockFreq+0xb4>)
 8004c7a:	623b      	str	r3, [r7, #32]
      break;
 8004c7c:	e02b      	b.n	8004cd6 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004c7e:	69fb      	ldr	r3, [r7, #28]
 8004c80:	0c9b      	lsrs	r3, r3, #18
 8004c82:	f003 030f 	and.w	r3, r3, #15
 8004c86:	3328      	adds	r3, #40	; 0x28
 8004c88:	443b      	add	r3, r7
 8004c8a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004c8e:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004c90:	69fb      	ldr	r3, [r7, #28]
 8004c92:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d012      	beq.n	8004cc0 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004c9a:	4b13      	ldr	r3, [pc, #76]	; (8004ce8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8004c9c:	685b      	ldr	r3, [r3, #4]
 8004c9e:	0c5b      	lsrs	r3, r3, #17
 8004ca0:	f003 0301 	and.w	r3, r3, #1
 8004ca4:	3328      	adds	r3, #40	; 0x28
 8004ca6:	443b      	add	r3, r7
 8004ca8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004cac:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004cae:	697b      	ldr	r3, [r7, #20]
 8004cb0:	4a0e      	ldr	r2, [pc, #56]	; (8004cec <HAL_RCC_GetSysClockFreq+0xb4>)
 8004cb2:	fb03 f202 	mul.w	r2, r3, r2
 8004cb6:	69bb      	ldr	r3, [r7, #24]
 8004cb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cbc:	627b      	str	r3, [r7, #36]	; 0x24
 8004cbe:	e004      	b.n	8004cca <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004cc0:	697b      	ldr	r3, [r7, #20]
 8004cc2:	4a0b      	ldr	r2, [pc, #44]	; (8004cf0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004cc4:	fb02 f303 	mul.w	r3, r2, r3
 8004cc8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8004cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ccc:	623b      	str	r3, [r7, #32]
      break;
 8004cce:	e002      	b.n	8004cd6 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004cd0:	4b06      	ldr	r3, [pc, #24]	; (8004cec <HAL_RCC_GetSysClockFreq+0xb4>)
 8004cd2:	623b      	str	r3, [r7, #32]
      break;
 8004cd4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004cd6:	6a3b      	ldr	r3, [r7, #32]
}
 8004cd8:	4618      	mov	r0, r3
 8004cda:	3728      	adds	r7, #40	; 0x28
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	bc90      	pop	{r4, r7}
 8004ce0:	4770      	bx	lr
 8004ce2:	bf00      	nop
 8004ce4:	08007d28 	.word	0x08007d28
 8004ce8:	40021000 	.word	0x40021000
 8004cec:	007a1200 	.word	0x007a1200
 8004cf0:	003d0900 	.word	0x003d0900

08004cf4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004cf4:	b480      	push	{r7}
 8004cf6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004cf8:	4b02      	ldr	r3, [pc, #8]	; (8004d04 <HAL_RCC_GetHCLKFreq+0x10>)
 8004cfa:	681b      	ldr	r3, [r3, #0]
}
 8004cfc:	4618      	mov	r0, r3
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	bc80      	pop	{r7}
 8004d02:	4770      	bx	lr
 8004d04:	200000fc 	.word	0x200000fc

08004d08 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004d0c:	f7ff fff2 	bl	8004cf4 <HAL_RCC_GetHCLKFreq>
 8004d10:	4602      	mov	r2, r0
 8004d12:	4b05      	ldr	r3, [pc, #20]	; (8004d28 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004d14:	685b      	ldr	r3, [r3, #4]
 8004d16:	0a1b      	lsrs	r3, r3, #8
 8004d18:	f003 0307 	and.w	r3, r3, #7
 8004d1c:	4903      	ldr	r1, [pc, #12]	; (8004d2c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004d1e:	5ccb      	ldrb	r3, [r1, r3]
 8004d20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d24:	4618      	mov	r0, r3
 8004d26:	bd80      	pop	{r7, pc}
 8004d28:	40021000 	.word	0x40021000
 8004d2c:	08007d48 	.word	0x08007d48

08004d30 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004d30:	b480      	push	{r7}
 8004d32:	b085      	sub	sp, #20
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004d38:	4b0a      	ldr	r3, [pc, #40]	; (8004d64 <RCC_Delay+0x34>)
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	4a0a      	ldr	r2, [pc, #40]	; (8004d68 <RCC_Delay+0x38>)
 8004d3e:	fba2 2303 	umull	r2, r3, r2, r3
 8004d42:	0a5b      	lsrs	r3, r3, #9
 8004d44:	687a      	ldr	r2, [r7, #4]
 8004d46:	fb02 f303 	mul.w	r3, r2, r3
 8004d4a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004d4c:	bf00      	nop
  }
  while (Delay --);
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	1e5a      	subs	r2, r3, #1
 8004d52:	60fa      	str	r2, [r7, #12]
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d1f9      	bne.n	8004d4c <RCC_Delay+0x1c>
}
 8004d58:	bf00      	nop
 8004d5a:	bf00      	nop
 8004d5c:	3714      	adds	r7, #20
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	bc80      	pop	{r7}
 8004d62:	4770      	bx	lr
 8004d64:	200000fc 	.word	0x200000fc
 8004d68:	10624dd3 	.word	0x10624dd3

08004d6c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004d6c:	b580      	push	{r7, lr}
 8004d6e:	b082      	sub	sp, #8
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d101      	bne.n	8004d7e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004d7a:	2301      	movs	r3, #1
 8004d7c:	e076      	b.n	8004e6c <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d108      	bne.n	8004d98 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	685b      	ldr	r3, [r3, #4]
 8004d8a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004d8e:	d009      	beq.n	8004da4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2200      	movs	r2, #0
 8004d94:	61da      	str	r2, [r3, #28]
 8004d96:	e005      	b.n	8004da4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	2200      	movs	r2, #0
 8004da2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2200      	movs	r2, #0
 8004da8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004db0:	b2db      	uxtb	r3, r3
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d106      	bne.n	8004dc4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	2200      	movs	r2, #0
 8004dba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004dbe:	6878      	ldr	r0, [r7, #4]
 8004dc0:	f7fd fcf8 	bl	80027b4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2202      	movs	r2, #2
 8004dc8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	681a      	ldr	r2, [r3, #0]
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004dda:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	685b      	ldr	r3, [r3, #4]
 8004de0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	689b      	ldr	r3, [r3, #8]
 8004de8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004dec:	431a      	orrs	r2, r3
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	68db      	ldr	r3, [r3, #12]
 8004df2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004df6:	431a      	orrs	r2, r3
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	691b      	ldr	r3, [r3, #16]
 8004dfc:	f003 0302 	and.w	r3, r3, #2
 8004e00:	431a      	orrs	r2, r3
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	695b      	ldr	r3, [r3, #20]
 8004e06:	f003 0301 	and.w	r3, r3, #1
 8004e0a:	431a      	orrs	r2, r3
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	699b      	ldr	r3, [r3, #24]
 8004e10:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004e14:	431a      	orrs	r2, r3
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	69db      	ldr	r3, [r3, #28]
 8004e1a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004e1e:	431a      	orrs	r2, r3
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	6a1b      	ldr	r3, [r3, #32]
 8004e24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e28:	ea42 0103 	orr.w	r1, r2, r3
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e30:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	430a      	orrs	r2, r1
 8004e3a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	699b      	ldr	r3, [r3, #24]
 8004e40:	0c1a      	lsrs	r2, r3, #16
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f002 0204 	and.w	r2, r2, #4
 8004e4a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	69da      	ldr	r2, [r3, #28]
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004e5a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2200      	movs	r2, #0
 8004e60:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	2201      	movs	r2, #1
 8004e66:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004e6a:	2300      	movs	r3, #0
}
 8004e6c:	4618      	mov	r0, r3
 8004e6e:	3708      	adds	r7, #8
 8004e70:	46bd      	mov	sp, r7
 8004e72:	bd80      	pop	{r7, pc}

08004e74 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e74:	b580      	push	{r7, lr}
 8004e76:	b088      	sub	sp, #32
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	60f8      	str	r0, [r7, #12]
 8004e7c:	60b9      	str	r1, [r7, #8]
 8004e7e:	603b      	str	r3, [r7, #0]
 8004e80:	4613      	mov	r3, r2
 8004e82:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004e84:	2300      	movs	r3, #0
 8004e86:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004e8e:	2b01      	cmp	r3, #1
 8004e90:	d101      	bne.n	8004e96 <HAL_SPI_Transmit+0x22>
 8004e92:	2302      	movs	r3, #2
 8004e94:	e126      	b.n	80050e4 <HAL_SPI_Transmit+0x270>
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	2201      	movs	r2, #1
 8004e9a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004e9e:	f7fe f865 	bl	8002f6c <HAL_GetTick>
 8004ea2:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004ea4:	88fb      	ldrh	r3, [r7, #6]
 8004ea6:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004eae:	b2db      	uxtb	r3, r3
 8004eb0:	2b01      	cmp	r3, #1
 8004eb2:	d002      	beq.n	8004eba <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004eb4:	2302      	movs	r3, #2
 8004eb6:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004eb8:	e10b      	b.n	80050d2 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004eba:	68bb      	ldr	r3, [r7, #8]
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d002      	beq.n	8004ec6 <HAL_SPI_Transmit+0x52>
 8004ec0:	88fb      	ldrh	r3, [r7, #6]
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d102      	bne.n	8004ecc <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004ec6:	2301      	movs	r3, #1
 8004ec8:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004eca:	e102      	b.n	80050d2 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	2203      	movs	r2, #3
 8004ed0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	2200      	movs	r2, #0
 8004ed8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	68ba      	ldr	r2, [r7, #8]
 8004ede:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	88fa      	ldrh	r2, [r7, #6]
 8004ee4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	88fa      	ldrh	r2, [r7, #6]
 8004eea:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	2200      	movs	r2, #0
 8004ef0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	2200      	movs	r2, #0
 8004efc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	2200      	movs	r2, #0
 8004f02:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	2200      	movs	r2, #0
 8004f08:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	689b      	ldr	r3, [r3, #8]
 8004f0e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f12:	d10f      	bne.n	8004f34 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	681a      	ldr	r2, [r3, #0]
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f22:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	681a      	ldr	r2, [r3, #0]
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004f32:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f3e:	2b40      	cmp	r3, #64	; 0x40
 8004f40:	d007      	beq.n	8004f52 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	681a      	ldr	r2, [r3, #0]
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004f50:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	68db      	ldr	r3, [r3, #12]
 8004f56:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f5a:	d14b      	bne.n	8004ff4 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	685b      	ldr	r3, [r3, #4]
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d002      	beq.n	8004f6a <HAL_SPI_Transmit+0xf6>
 8004f64:	8afb      	ldrh	r3, [r7, #22]
 8004f66:	2b01      	cmp	r3, #1
 8004f68:	d13e      	bne.n	8004fe8 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f6e:	881a      	ldrh	r2, [r3, #0]
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f7a:	1c9a      	adds	r2, r3, #2
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f84:	b29b      	uxth	r3, r3
 8004f86:	3b01      	subs	r3, #1
 8004f88:	b29a      	uxth	r2, r3
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004f8e:	e02b      	b.n	8004fe8 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	689b      	ldr	r3, [r3, #8]
 8004f96:	f003 0302 	and.w	r3, r3, #2
 8004f9a:	2b02      	cmp	r3, #2
 8004f9c:	d112      	bne.n	8004fc4 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fa2:	881a      	ldrh	r2, [r3, #0]
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fae:	1c9a      	adds	r2, r3, #2
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004fb8:	b29b      	uxth	r3, r3
 8004fba:	3b01      	subs	r3, #1
 8004fbc:	b29a      	uxth	r2, r3
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	86da      	strh	r2, [r3, #54]	; 0x36
 8004fc2:	e011      	b.n	8004fe8 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004fc4:	f7fd ffd2 	bl	8002f6c <HAL_GetTick>
 8004fc8:	4602      	mov	r2, r0
 8004fca:	69bb      	ldr	r3, [r7, #24]
 8004fcc:	1ad3      	subs	r3, r2, r3
 8004fce:	683a      	ldr	r2, [r7, #0]
 8004fd0:	429a      	cmp	r2, r3
 8004fd2:	d803      	bhi.n	8004fdc <HAL_SPI_Transmit+0x168>
 8004fd4:	683b      	ldr	r3, [r7, #0]
 8004fd6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004fda:	d102      	bne.n	8004fe2 <HAL_SPI_Transmit+0x16e>
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d102      	bne.n	8004fe8 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8004fe2:	2303      	movs	r3, #3
 8004fe4:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004fe6:	e074      	b.n	80050d2 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004fec:	b29b      	uxth	r3, r3
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d1ce      	bne.n	8004f90 <HAL_SPI_Transmit+0x11c>
 8004ff2:	e04c      	b.n	800508e <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	685b      	ldr	r3, [r3, #4]
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d002      	beq.n	8005002 <HAL_SPI_Transmit+0x18e>
 8004ffc:	8afb      	ldrh	r3, [r7, #22]
 8004ffe:	2b01      	cmp	r3, #1
 8005000:	d140      	bne.n	8005084 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	330c      	adds	r3, #12
 800500c:	7812      	ldrb	r2, [r2, #0]
 800500e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005014:	1c5a      	adds	r2, r3, #1
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800501e:	b29b      	uxth	r3, r3
 8005020:	3b01      	subs	r3, #1
 8005022:	b29a      	uxth	r2, r3
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005028:	e02c      	b.n	8005084 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	689b      	ldr	r3, [r3, #8]
 8005030:	f003 0302 	and.w	r3, r3, #2
 8005034:	2b02      	cmp	r3, #2
 8005036:	d113      	bne.n	8005060 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	330c      	adds	r3, #12
 8005042:	7812      	ldrb	r2, [r2, #0]
 8005044:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800504a:	1c5a      	adds	r2, r3, #1
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005054:	b29b      	uxth	r3, r3
 8005056:	3b01      	subs	r3, #1
 8005058:	b29a      	uxth	r2, r3
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	86da      	strh	r2, [r3, #54]	; 0x36
 800505e:	e011      	b.n	8005084 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005060:	f7fd ff84 	bl	8002f6c <HAL_GetTick>
 8005064:	4602      	mov	r2, r0
 8005066:	69bb      	ldr	r3, [r7, #24]
 8005068:	1ad3      	subs	r3, r2, r3
 800506a:	683a      	ldr	r2, [r7, #0]
 800506c:	429a      	cmp	r2, r3
 800506e:	d803      	bhi.n	8005078 <HAL_SPI_Transmit+0x204>
 8005070:	683b      	ldr	r3, [r7, #0]
 8005072:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005076:	d102      	bne.n	800507e <HAL_SPI_Transmit+0x20a>
 8005078:	683b      	ldr	r3, [r7, #0]
 800507a:	2b00      	cmp	r3, #0
 800507c:	d102      	bne.n	8005084 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800507e:	2303      	movs	r3, #3
 8005080:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005082:	e026      	b.n	80050d2 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005088:	b29b      	uxth	r3, r3
 800508a:	2b00      	cmp	r3, #0
 800508c:	d1cd      	bne.n	800502a <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800508e:	69ba      	ldr	r2, [r7, #24]
 8005090:	6839      	ldr	r1, [r7, #0]
 8005092:	68f8      	ldr	r0, [r7, #12]
 8005094:	f000 fbb8 	bl	8005808 <SPI_EndRxTxTransaction>
 8005098:	4603      	mov	r3, r0
 800509a:	2b00      	cmp	r3, #0
 800509c:	d002      	beq.n	80050a4 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	2220      	movs	r2, #32
 80050a2:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	689b      	ldr	r3, [r3, #8]
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d10a      	bne.n	80050c2 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80050ac:	2300      	movs	r3, #0
 80050ae:	613b      	str	r3, [r7, #16]
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	68db      	ldr	r3, [r3, #12]
 80050b6:	613b      	str	r3, [r7, #16]
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	689b      	ldr	r3, [r3, #8]
 80050be:	613b      	str	r3, [r7, #16]
 80050c0:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d002      	beq.n	80050d0 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80050ca:	2301      	movs	r3, #1
 80050cc:	77fb      	strb	r3, [r7, #31]
 80050ce:	e000      	b.n	80050d2 <HAL_SPI_Transmit+0x25e>
  }

error:
 80050d0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	2201      	movs	r2, #1
 80050d6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	2200      	movs	r2, #0
 80050de:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80050e2:	7ffb      	ldrb	r3, [r7, #31]
}
 80050e4:	4618      	mov	r0, r3
 80050e6:	3720      	adds	r7, #32
 80050e8:	46bd      	mov	sp, r7
 80050ea:	bd80      	pop	{r7, pc}

080050ec <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80050ec:	b580      	push	{r7, lr}
 80050ee:	b088      	sub	sp, #32
 80050f0:	af02      	add	r7, sp, #8
 80050f2:	60f8      	str	r0, [r7, #12]
 80050f4:	60b9      	str	r1, [r7, #8]
 80050f6:	603b      	str	r3, [r7, #0]
 80050f8:	4613      	mov	r3, r2
 80050fa:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80050fc:	2300      	movs	r3, #0
 80050fe:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	685b      	ldr	r3, [r3, #4]
 8005104:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005108:	d112      	bne.n	8005130 <HAL_SPI_Receive+0x44>
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	689b      	ldr	r3, [r3, #8]
 800510e:	2b00      	cmp	r3, #0
 8005110:	d10e      	bne.n	8005130 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	2204      	movs	r2, #4
 8005116:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800511a:	88fa      	ldrh	r2, [r7, #6]
 800511c:	683b      	ldr	r3, [r7, #0]
 800511e:	9300      	str	r3, [sp, #0]
 8005120:	4613      	mov	r3, r2
 8005122:	68ba      	ldr	r2, [r7, #8]
 8005124:	68b9      	ldr	r1, [r7, #8]
 8005126:	68f8      	ldr	r0, [r7, #12]
 8005128:	f000 f8f1 	bl	800530e <HAL_SPI_TransmitReceive>
 800512c:	4603      	mov	r3, r0
 800512e:	e0ea      	b.n	8005306 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005136:	2b01      	cmp	r3, #1
 8005138:	d101      	bne.n	800513e <HAL_SPI_Receive+0x52>
 800513a:	2302      	movs	r3, #2
 800513c:	e0e3      	b.n	8005306 <HAL_SPI_Receive+0x21a>
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	2201      	movs	r2, #1
 8005142:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005146:	f7fd ff11 	bl	8002f6c <HAL_GetTick>
 800514a:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005152:	b2db      	uxtb	r3, r3
 8005154:	2b01      	cmp	r3, #1
 8005156:	d002      	beq.n	800515e <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8005158:	2302      	movs	r3, #2
 800515a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800515c:	e0ca      	b.n	80052f4 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 800515e:	68bb      	ldr	r3, [r7, #8]
 8005160:	2b00      	cmp	r3, #0
 8005162:	d002      	beq.n	800516a <HAL_SPI_Receive+0x7e>
 8005164:	88fb      	ldrh	r3, [r7, #6]
 8005166:	2b00      	cmp	r3, #0
 8005168:	d102      	bne.n	8005170 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800516a:	2301      	movs	r3, #1
 800516c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800516e:	e0c1      	b.n	80052f4 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	2204      	movs	r2, #4
 8005174:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	2200      	movs	r2, #0
 800517c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	68ba      	ldr	r2, [r7, #8]
 8005182:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	88fa      	ldrh	r2, [r7, #6]
 8005188:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	88fa      	ldrh	r2, [r7, #6]
 800518e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	2200      	movs	r2, #0
 8005194:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	2200      	movs	r2, #0
 800519a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	2200      	movs	r2, #0
 80051a0:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	2200      	movs	r2, #0
 80051a6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	2200      	movs	r2, #0
 80051ac:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	689b      	ldr	r3, [r3, #8]
 80051b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80051b6:	d10f      	bne.n	80051d8 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	681a      	ldr	r2, [r3, #0]
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80051c6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	681a      	ldr	r2, [r3, #0]
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80051d6:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051e2:	2b40      	cmp	r3, #64	; 0x40
 80051e4:	d007      	beq.n	80051f6 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	681a      	ldr	r2, [r3, #0]
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80051f4:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	68db      	ldr	r3, [r3, #12]
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d162      	bne.n	80052c4 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80051fe:	e02e      	b.n	800525e <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	689b      	ldr	r3, [r3, #8]
 8005206:	f003 0301 	and.w	r3, r3, #1
 800520a:	2b01      	cmp	r3, #1
 800520c:	d115      	bne.n	800523a <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f103 020c 	add.w	r2, r3, #12
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800521a:	7812      	ldrb	r2, [r2, #0]
 800521c:	b2d2      	uxtb	r2, r2
 800521e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005224:	1c5a      	adds	r2, r3, #1
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800522e:	b29b      	uxth	r3, r3
 8005230:	3b01      	subs	r3, #1
 8005232:	b29a      	uxth	r2, r3
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005238:	e011      	b.n	800525e <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800523a:	f7fd fe97 	bl	8002f6c <HAL_GetTick>
 800523e:	4602      	mov	r2, r0
 8005240:	693b      	ldr	r3, [r7, #16]
 8005242:	1ad3      	subs	r3, r2, r3
 8005244:	683a      	ldr	r2, [r7, #0]
 8005246:	429a      	cmp	r2, r3
 8005248:	d803      	bhi.n	8005252 <HAL_SPI_Receive+0x166>
 800524a:	683b      	ldr	r3, [r7, #0]
 800524c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005250:	d102      	bne.n	8005258 <HAL_SPI_Receive+0x16c>
 8005252:	683b      	ldr	r3, [r7, #0]
 8005254:	2b00      	cmp	r3, #0
 8005256:	d102      	bne.n	800525e <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8005258:	2303      	movs	r3, #3
 800525a:	75fb      	strb	r3, [r7, #23]
          goto error;
 800525c:	e04a      	b.n	80052f4 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005262:	b29b      	uxth	r3, r3
 8005264:	2b00      	cmp	r3, #0
 8005266:	d1cb      	bne.n	8005200 <HAL_SPI_Receive+0x114>
 8005268:	e031      	b.n	80052ce <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	689b      	ldr	r3, [r3, #8]
 8005270:	f003 0301 	and.w	r3, r3, #1
 8005274:	2b01      	cmp	r3, #1
 8005276:	d113      	bne.n	80052a0 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	68da      	ldr	r2, [r3, #12]
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005282:	b292      	uxth	r2, r2
 8005284:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800528a:	1c9a      	adds	r2, r3, #2
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005294:	b29b      	uxth	r3, r3
 8005296:	3b01      	subs	r3, #1
 8005298:	b29a      	uxth	r2, r3
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800529e:	e011      	b.n	80052c4 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80052a0:	f7fd fe64 	bl	8002f6c <HAL_GetTick>
 80052a4:	4602      	mov	r2, r0
 80052a6:	693b      	ldr	r3, [r7, #16]
 80052a8:	1ad3      	subs	r3, r2, r3
 80052aa:	683a      	ldr	r2, [r7, #0]
 80052ac:	429a      	cmp	r2, r3
 80052ae:	d803      	bhi.n	80052b8 <HAL_SPI_Receive+0x1cc>
 80052b0:	683b      	ldr	r3, [r7, #0]
 80052b2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80052b6:	d102      	bne.n	80052be <HAL_SPI_Receive+0x1d2>
 80052b8:	683b      	ldr	r3, [r7, #0]
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d102      	bne.n	80052c4 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 80052be:	2303      	movs	r3, #3
 80052c0:	75fb      	strb	r3, [r7, #23]
          goto error;
 80052c2:	e017      	b.n	80052f4 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80052c8:	b29b      	uxth	r3, r3
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d1cd      	bne.n	800526a <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80052ce:	693a      	ldr	r2, [r7, #16]
 80052d0:	6839      	ldr	r1, [r7, #0]
 80052d2:	68f8      	ldr	r0, [r7, #12]
 80052d4:	f000 fa46 	bl	8005764 <SPI_EndRxTransaction>
 80052d8:	4603      	mov	r3, r0
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d002      	beq.n	80052e4 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	2220      	movs	r2, #32
 80052e2:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d002      	beq.n	80052f2 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 80052ec:	2301      	movs	r3, #1
 80052ee:	75fb      	strb	r3, [r7, #23]
 80052f0:	e000      	b.n	80052f4 <HAL_SPI_Receive+0x208>
  }

error :
 80052f2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	2201      	movs	r2, #1
 80052f8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	2200      	movs	r2, #0
 8005300:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005304:	7dfb      	ldrb	r3, [r7, #23]
}
 8005306:	4618      	mov	r0, r3
 8005308:	3718      	adds	r7, #24
 800530a:	46bd      	mov	sp, r7
 800530c:	bd80      	pop	{r7, pc}

0800530e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800530e:	b580      	push	{r7, lr}
 8005310:	b08c      	sub	sp, #48	; 0x30
 8005312:	af00      	add	r7, sp, #0
 8005314:	60f8      	str	r0, [r7, #12]
 8005316:	60b9      	str	r1, [r7, #8]
 8005318:	607a      	str	r2, [r7, #4]
 800531a:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800531c:	2301      	movs	r3, #1
 800531e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005320:	2300      	movs	r3, #0
 8005322:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800532c:	2b01      	cmp	r3, #1
 800532e:	d101      	bne.n	8005334 <HAL_SPI_TransmitReceive+0x26>
 8005330:	2302      	movs	r3, #2
 8005332:	e18a      	b.n	800564a <HAL_SPI_TransmitReceive+0x33c>
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	2201      	movs	r2, #1
 8005338:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800533c:	f7fd fe16 	bl	8002f6c <HAL_GetTick>
 8005340:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005348:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	685b      	ldr	r3, [r3, #4]
 8005350:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8005352:	887b      	ldrh	r3, [r7, #2]
 8005354:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005356:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800535a:	2b01      	cmp	r3, #1
 800535c:	d00f      	beq.n	800537e <HAL_SPI_TransmitReceive+0x70>
 800535e:	69fb      	ldr	r3, [r7, #28]
 8005360:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005364:	d107      	bne.n	8005376 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	689b      	ldr	r3, [r3, #8]
 800536a:	2b00      	cmp	r3, #0
 800536c:	d103      	bne.n	8005376 <HAL_SPI_TransmitReceive+0x68>
 800536e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005372:	2b04      	cmp	r3, #4
 8005374:	d003      	beq.n	800537e <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8005376:	2302      	movs	r3, #2
 8005378:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800537c:	e15b      	b.n	8005636 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800537e:	68bb      	ldr	r3, [r7, #8]
 8005380:	2b00      	cmp	r3, #0
 8005382:	d005      	beq.n	8005390 <HAL_SPI_TransmitReceive+0x82>
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2b00      	cmp	r3, #0
 8005388:	d002      	beq.n	8005390 <HAL_SPI_TransmitReceive+0x82>
 800538a:	887b      	ldrh	r3, [r7, #2]
 800538c:	2b00      	cmp	r3, #0
 800538e:	d103      	bne.n	8005398 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8005390:	2301      	movs	r3, #1
 8005392:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005396:	e14e      	b.n	8005636 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800539e:	b2db      	uxtb	r3, r3
 80053a0:	2b04      	cmp	r3, #4
 80053a2:	d003      	beq.n	80053ac <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	2205      	movs	r2, #5
 80053a8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	2200      	movs	r2, #0
 80053b0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	687a      	ldr	r2, [r7, #4]
 80053b6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	887a      	ldrh	r2, [r7, #2]
 80053bc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	887a      	ldrh	r2, [r7, #2]
 80053c2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	68ba      	ldr	r2, [r7, #8]
 80053c8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	887a      	ldrh	r2, [r7, #2]
 80053ce:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	887a      	ldrh	r2, [r7, #2]
 80053d4:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	2200      	movs	r2, #0
 80053da:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	2200      	movs	r2, #0
 80053e0:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053ec:	2b40      	cmp	r3, #64	; 0x40
 80053ee:	d007      	beq.n	8005400 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	681a      	ldr	r2, [r3, #0]
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80053fe:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	68db      	ldr	r3, [r3, #12]
 8005404:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005408:	d178      	bne.n	80054fc <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	685b      	ldr	r3, [r3, #4]
 800540e:	2b00      	cmp	r3, #0
 8005410:	d002      	beq.n	8005418 <HAL_SPI_TransmitReceive+0x10a>
 8005412:	8b7b      	ldrh	r3, [r7, #26]
 8005414:	2b01      	cmp	r3, #1
 8005416:	d166      	bne.n	80054e6 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800541c:	881a      	ldrh	r2, [r3, #0]
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005428:	1c9a      	adds	r2, r3, #2
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005432:	b29b      	uxth	r3, r3
 8005434:	3b01      	subs	r3, #1
 8005436:	b29a      	uxth	r2, r3
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800543c:	e053      	b.n	80054e6 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	689b      	ldr	r3, [r3, #8]
 8005444:	f003 0302 	and.w	r3, r3, #2
 8005448:	2b02      	cmp	r3, #2
 800544a:	d11b      	bne.n	8005484 <HAL_SPI_TransmitReceive+0x176>
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005450:	b29b      	uxth	r3, r3
 8005452:	2b00      	cmp	r3, #0
 8005454:	d016      	beq.n	8005484 <HAL_SPI_TransmitReceive+0x176>
 8005456:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005458:	2b01      	cmp	r3, #1
 800545a:	d113      	bne.n	8005484 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005460:	881a      	ldrh	r2, [r3, #0]
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800546c:	1c9a      	adds	r2, r3, #2
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005476:	b29b      	uxth	r3, r3
 8005478:	3b01      	subs	r3, #1
 800547a:	b29a      	uxth	r2, r3
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005480:	2300      	movs	r3, #0
 8005482:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	689b      	ldr	r3, [r3, #8]
 800548a:	f003 0301 	and.w	r3, r3, #1
 800548e:	2b01      	cmp	r3, #1
 8005490:	d119      	bne.n	80054c6 <HAL_SPI_TransmitReceive+0x1b8>
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005496:	b29b      	uxth	r3, r3
 8005498:	2b00      	cmp	r3, #0
 800549a:	d014      	beq.n	80054c6 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	68da      	ldr	r2, [r3, #12]
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054a6:	b292      	uxth	r2, r2
 80054a8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054ae:	1c9a      	adds	r2, r3, #2
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80054b8:	b29b      	uxth	r3, r3
 80054ba:	3b01      	subs	r3, #1
 80054bc:	b29a      	uxth	r2, r3
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80054c2:	2301      	movs	r3, #1
 80054c4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80054c6:	f7fd fd51 	bl	8002f6c <HAL_GetTick>
 80054ca:	4602      	mov	r2, r0
 80054cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054ce:	1ad3      	subs	r3, r2, r3
 80054d0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80054d2:	429a      	cmp	r2, r3
 80054d4:	d807      	bhi.n	80054e6 <HAL_SPI_TransmitReceive+0x1d8>
 80054d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054d8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80054dc:	d003      	beq.n	80054e6 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80054de:	2303      	movs	r3, #3
 80054e0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80054e4:	e0a7      	b.n	8005636 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80054ea:	b29b      	uxth	r3, r3
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d1a6      	bne.n	800543e <HAL_SPI_TransmitReceive+0x130>
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80054f4:	b29b      	uxth	r3, r3
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d1a1      	bne.n	800543e <HAL_SPI_TransmitReceive+0x130>
 80054fa:	e07c      	b.n	80055f6 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	685b      	ldr	r3, [r3, #4]
 8005500:	2b00      	cmp	r3, #0
 8005502:	d002      	beq.n	800550a <HAL_SPI_TransmitReceive+0x1fc>
 8005504:	8b7b      	ldrh	r3, [r7, #26]
 8005506:	2b01      	cmp	r3, #1
 8005508:	d16b      	bne.n	80055e2 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	330c      	adds	r3, #12
 8005514:	7812      	ldrb	r2, [r2, #0]
 8005516:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800551c:	1c5a      	adds	r2, r3, #1
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005526:	b29b      	uxth	r3, r3
 8005528:	3b01      	subs	r3, #1
 800552a:	b29a      	uxth	r2, r3
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005530:	e057      	b.n	80055e2 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	689b      	ldr	r3, [r3, #8]
 8005538:	f003 0302 	and.w	r3, r3, #2
 800553c:	2b02      	cmp	r3, #2
 800553e:	d11c      	bne.n	800557a <HAL_SPI_TransmitReceive+0x26c>
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005544:	b29b      	uxth	r3, r3
 8005546:	2b00      	cmp	r3, #0
 8005548:	d017      	beq.n	800557a <HAL_SPI_TransmitReceive+0x26c>
 800554a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800554c:	2b01      	cmp	r3, #1
 800554e:	d114      	bne.n	800557a <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	330c      	adds	r3, #12
 800555a:	7812      	ldrb	r2, [r2, #0]
 800555c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005562:	1c5a      	adds	r2, r3, #1
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800556c:	b29b      	uxth	r3, r3
 800556e:	3b01      	subs	r3, #1
 8005570:	b29a      	uxth	r2, r3
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005576:	2300      	movs	r3, #0
 8005578:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	689b      	ldr	r3, [r3, #8]
 8005580:	f003 0301 	and.w	r3, r3, #1
 8005584:	2b01      	cmp	r3, #1
 8005586:	d119      	bne.n	80055bc <HAL_SPI_TransmitReceive+0x2ae>
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800558c:	b29b      	uxth	r3, r3
 800558e:	2b00      	cmp	r3, #0
 8005590:	d014      	beq.n	80055bc <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	68da      	ldr	r2, [r3, #12]
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800559c:	b2d2      	uxtb	r2, r2
 800559e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055a4:	1c5a      	adds	r2, r3, #1
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80055ae:	b29b      	uxth	r3, r3
 80055b0:	3b01      	subs	r3, #1
 80055b2:	b29a      	uxth	r2, r3
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80055b8:	2301      	movs	r3, #1
 80055ba:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80055bc:	f7fd fcd6 	bl	8002f6c <HAL_GetTick>
 80055c0:	4602      	mov	r2, r0
 80055c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055c4:	1ad3      	subs	r3, r2, r3
 80055c6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80055c8:	429a      	cmp	r2, r3
 80055ca:	d803      	bhi.n	80055d4 <HAL_SPI_TransmitReceive+0x2c6>
 80055cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055ce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80055d2:	d102      	bne.n	80055da <HAL_SPI_TransmitReceive+0x2cc>
 80055d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d103      	bne.n	80055e2 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80055da:	2303      	movs	r3, #3
 80055dc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80055e0:	e029      	b.n	8005636 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80055e6:	b29b      	uxth	r3, r3
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d1a2      	bne.n	8005532 <HAL_SPI_TransmitReceive+0x224>
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80055f0:	b29b      	uxth	r3, r3
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d19d      	bne.n	8005532 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80055f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055f8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80055fa:	68f8      	ldr	r0, [r7, #12]
 80055fc:	f000 f904 	bl	8005808 <SPI_EndRxTxTransaction>
 8005600:	4603      	mov	r3, r0
 8005602:	2b00      	cmp	r3, #0
 8005604:	d006      	beq.n	8005614 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8005606:	2301      	movs	r3, #1
 8005608:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	2220      	movs	r2, #32
 8005610:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8005612:	e010      	b.n	8005636 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	689b      	ldr	r3, [r3, #8]
 8005618:	2b00      	cmp	r3, #0
 800561a:	d10b      	bne.n	8005634 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800561c:	2300      	movs	r3, #0
 800561e:	617b      	str	r3, [r7, #20]
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	68db      	ldr	r3, [r3, #12]
 8005626:	617b      	str	r3, [r7, #20]
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	689b      	ldr	r3, [r3, #8]
 800562e:	617b      	str	r3, [r7, #20]
 8005630:	697b      	ldr	r3, [r7, #20]
 8005632:	e000      	b.n	8005636 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8005634:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	2201      	movs	r2, #1
 800563a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	2200      	movs	r2, #0
 8005642:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005646:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800564a:	4618      	mov	r0, r3
 800564c:	3730      	adds	r7, #48	; 0x30
 800564e:	46bd      	mov	sp, r7
 8005650:	bd80      	pop	{r7, pc}
	...

08005654 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005654:	b580      	push	{r7, lr}
 8005656:	b088      	sub	sp, #32
 8005658:	af00      	add	r7, sp, #0
 800565a:	60f8      	str	r0, [r7, #12]
 800565c:	60b9      	str	r1, [r7, #8]
 800565e:	603b      	str	r3, [r7, #0]
 8005660:	4613      	mov	r3, r2
 8005662:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005664:	f7fd fc82 	bl	8002f6c <HAL_GetTick>
 8005668:	4602      	mov	r2, r0
 800566a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800566c:	1a9b      	subs	r3, r3, r2
 800566e:	683a      	ldr	r2, [r7, #0]
 8005670:	4413      	add	r3, r2
 8005672:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005674:	f7fd fc7a 	bl	8002f6c <HAL_GetTick>
 8005678:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800567a:	4b39      	ldr	r3, [pc, #228]	; (8005760 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	015b      	lsls	r3, r3, #5
 8005680:	0d1b      	lsrs	r3, r3, #20
 8005682:	69fa      	ldr	r2, [r7, #28]
 8005684:	fb02 f303 	mul.w	r3, r2, r3
 8005688:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800568a:	e054      	b.n	8005736 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800568c:	683b      	ldr	r3, [r7, #0]
 800568e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005692:	d050      	beq.n	8005736 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005694:	f7fd fc6a 	bl	8002f6c <HAL_GetTick>
 8005698:	4602      	mov	r2, r0
 800569a:	69bb      	ldr	r3, [r7, #24]
 800569c:	1ad3      	subs	r3, r2, r3
 800569e:	69fa      	ldr	r2, [r7, #28]
 80056a0:	429a      	cmp	r2, r3
 80056a2:	d902      	bls.n	80056aa <SPI_WaitFlagStateUntilTimeout+0x56>
 80056a4:	69fb      	ldr	r3, [r7, #28]
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d13d      	bne.n	8005726 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	685a      	ldr	r2, [r3, #4]
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80056b8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	685b      	ldr	r3, [r3, #4]
 80056be:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80056c2:	d111      	bne.n	80056e8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	689b      	ldr	r3, [r3, #8]
 80056c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80056cc:	d004      	beq.n	80056d8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	689b      	ldr	r3, [r3, #8]
 80056d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80056d6:	d107      	bne.n	80056e8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	681a      	ldr	r2, [r3, #0]
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80056e6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80056f0:	d10f      	bne.n	8005712 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	681a      	ldr	r2, [r3, #0]
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005700:	601a      	str	r2, [r3, #0]
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	681a      	ldr	r2, [r3, #0]
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005710:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	2201      	movs	r2, #1
 8005716:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	2200      	movs	r2, #0
 800571e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005722:	2303      	movs	r3, #3
 8005724:	e017      	b.n	8005756 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8005726:	697b      	ldr	r3, [r7, #20]
 8005728:	2b00      	cmp	r3, #0
 800572a:	d101      	bne.n	8005730 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800572c:	2300      	movs	r3, #0
 800572e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005730:	697b      	ldr	r3, [r7, #20]
 8005732:	3b01      	subs	r3, #1
 8005734:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	689a      	ldr	r2, [r3, #8]
 800573c:	68bb      	ldr	r3, [r7, #8]
 800573e:	4013      	ands	r3, r2
 8005740:	68ba      	ldr	r2, [r7, #8]
 8005742:	429a      	cmp	r2, r3
 8005744:	bf0c      	ite	eq
 8005746:	2301      	moveq	r3, #1
 8005748:	2300      	movne	r3, #0
 800574a:	b2db      	uxtb	r3, r3
 800574c:	461a      	mov	r2, r3
 800574e:	79fb      	ldrb	r3, [r7, #7]
 8005750:	429a      	cmp	r2, r3
 8005752:	d19b      	bne.n	800568c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005754:	2300      	movs	r3, #0
}
 8005756:	4618      	mov	r0, r3
 8005758:	3720      	adds	r7, #32
 800575a:	46bd      	mov	sp, r7
 800575c:	bd80      	pop	{r7, pc}
 800575e:	bf00      	nop
 8005760:	200000fc 	.word	0x200000fc

08005764 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005764:	b580      	push	{r7, lr}
 8005766:	b086      	sub	sp, #24
 8005768:	af02      	add	r7, sp, #8
 800576a:	60f8      	str	r0, [r7, #12]
 800576c:	60b9      	str	r1, [r7, #8]
 800576e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	685b      	ldr	r3, [r3, #4]
 8005774:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005778:	d111      	bne.n	800579e <SPI_EndRxTransaction+0x3a>
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	689b      	ldr	r3, [r3, #8]
 800577e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005782:	d004      	beq.n	800578e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	689b      	ldr	r3, [r3, #8]
 8005788:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800578c:	d107      	bne.n	800579e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	681a      	ldr	r2, [r3, #0]
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800579c:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	685b      	ldr	r3, [r3, #4]
 80057a2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80057a6:	d117      	bne.n	80057d8 <SPI_EndRxTransaction+0x74>
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	689b      	ldr	r3, [r3, #8]
 80057ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80057b0:	d112      	bne.n	80057d8 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	9300      	str	r3, [sp, #0]
 80057b6:	68bb      	ldr	r3, [r7, #8]
 80057b8:	2200      	movs	r2, #0
 80057ba:	2101      	movs	r1, #1
 80057bc:	68f8      	ldr	r0, [r7, #12]
 80057be:	f7ff ff49 	bl	8005654 <SPI_WaitFlagStateUntilTimeout>
 80057c2:	4603      	mov	r3, r0
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d01a      	beq.n	80057fe <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057cc:	f043 0220 	orr.w	r2, r3, #32
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80057d4:	2303      	movs	r3, #3
 80057d6:	e013      	b.n	8005800 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	9300      	str	r3, [sp, #0]
 80057dc:	68bb      	ldr	r3, [r7, #8]
 80057de:	2200      	movs	r2, #0
 80057e0:	2180      	movs	r1, #128	; 0x80
 80057e2:	68f8      	ldr	r0, [r7, #12]
 80057e4:	f7ff ff36 	bl	8005654 <SPI_WaitFlagStateUntilTimeout>
 80057e8:	4603      	mov	r3, r0
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d007      	beq.n	80057fe <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057f2:	f043 0220 	orr.w	r2, r3, #32
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80057fa:	2303      	movs	r3, #3
 80057fc:	e000      	b.n	8005800 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 80057fe:	2300      	movs	r3, #0
}
 8005800:	4618      	mov	r0, r3
 8005802:	3710      	adds	r7, #16
 8005804:	46bd      	mov	sp, r7
 8005806:	bd80      	pop	{r7, pc}

08005808 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005808:	b580      	push	{r7, lr}
 800580a:	b086      	sub	sp, #24
 800580c:	af02      	add	r7, sp, #8
 800580e:	60f8      	str	r0, [r7, #12]
 8005810:	60b9      	str	r1, [r7, #8]
 8005812:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	9300      	str	r3, [sp, #0]
 8005818:	68bb      	ldr	r3, [r7, #8]
 800581a:	2200      	movs	r2, #0
 800581c:	2180      	movs	r1, #128	; 0x80
 800581e:	68f8      	ldr	r0, [r7, #12]
 8005820:	f7ff ff18 	bl	8005654 <SPI_WaitFlagStateUntilTimeout>
 8005824:	4603      	mov	r3, r0
 8005826:	2b00      	cmp	r3, #0
 8005828:	d007      	beq.n	800583a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800582e:	f043 0220 	orr.w	r2, r3, #32
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8005836:	2303      	movs	r3, #3
 8005838:	e000      	b.n	800583c <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 800583a:	2300      	movs	r3, #0
}
 800583c:	4618      	mov	r0, r3
 800583e:	3710      	adds	r7, #16
 8005840:	46bd      	mov	sp, r7
 8005842:	bd80      	pop	{r7, pc}

08005844 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005844:	b580      	push	{r7, lr}
 8005846:	b082      	sub	sp, #8
 8005848:	af00      	add	r7, sp, #0
 800584a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	2b00      	cmp	r3, #0
 8005850:	d101      	bne.n	8005856 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005852:	2301      	movs	r3, #1
 8005854:	e041      	b.n	80058da <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800585c:	b2db      	uxtb	r3, r3
 800585e:	2b00      	cmp	r3, #0
 8005860:	d106      	bne.n	8005870 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	2200      	movs	r2, #0
 8005866:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800586a:	6878      	ldr	r0, [r7, #4]
 800586c:	f7fd fa4e 	bl	8002d0c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	2202      	movs	r2, #2
 8005874:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681a      	ldr	r2, [r3, #0]
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	3304      	adds	r3, #4
 8005880:	4619      	mov	r1, r3
 8005882:	4610      	mov	r0, r2
 8005884:	f000 fc72 	bl	800616c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	2201      	movs	r2, #1
 800588c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	2201      	movs	r2, #1
 8005894:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	2201      	movs	r2, #1
 800589c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	2201      	movs	r2, #1
 80058a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	2201      	movs	r2, #1
 80058ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	2201      	movs	r2, #1
 80058b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	2201      	movs	r2, #1
 80058bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2201      	movs	r2, #1
 80058c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	2201      	movs	r2, #1
 80058cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2201      	movs	r2, #1
 80058d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80058d8:	2300      	movs	r3, #0
}
 80058da:	4618      	mov	r0, r3
 80058dc:	3708      	adds	r7, #8
 80058de:	46bd      	mov	sp, r7
 80058e0:	bd80      	pop	{r7, pc}
	...

080058e4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80058e4:	b480      	push	{r7}
 80058e6:	b085      	sub	sp, #20
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058f2:	b2db      	uxtb	r3, r3
 80058f4:	2b01      	cmp	r3, #1
 80058f6:	d001      	beq.n	80058fc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80058f8:	2301      	movs	r3, #1
 80058fa:	e032      	b.n	8005962 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	2202      	movs	r2, #2
 8005900:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	4a18      	ldr	r2, [pc, #96]	; (800596c <HAL_TIM_Base_Start+0x88>)
 800590a:	4293      	cmp	r3, r2
 800590c:	d00e      	beq.n	800592c <HAL_TIM_Base_Start+0x48>
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005916:	d009      	beq.n	800592c <HAL_TIM_Base_Start+0x48>
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	4a14      	ldr	r2, [pc, #80]	; (8005970 <HAL_TIM_Base_Start+0x8c>)
 800591e:	4293      	cmp	r3, r2
 8005920:	d004      	beq.n	800592c <HAL_TIM_Base_Start+0x48>
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	4a13      	ldr	r2, [pc, #76]	; (8005974 <HAL_TIM_Base_Start+0x90>)
 8005928:	4293      	cmp	r3, r2
 800592a:	d111      	bne.n	8005950 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	689b      	ldr	r3, [r3, #8]
 8005932:	f003 0307 	and.w	r3, r3, #7
 8005936:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	2b06      	cmp	r3, #6
 800593c:	d010      	beq.n	8005960 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	681a      	ldr	r2, [r3, #0]
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	f042 0201 	orr.w	r2, r2, #1
 800594c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800594e:	e007      	b.n	8005960 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	681a      	ldr	r2, [r3, #0]
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f042 0201 	orr.w	r2, r2, #1
 800595e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005960:	2300      	movs	r3, #0
}
 8005962:	4618      	mov	r0, r3
 8005964:	3714      	adds	r7, #20
 8005966:	46bd      	mov	sp, r7
 8005968:	bc80      	pop	{r7}
 800596a:	4770      	bx	lr
 800596c:	40012c00 	.word	0x40012c00
 8005970:	40000400 	.word	0x40000400
 8005974:	40000800 	.word	0x40000800

08005978 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005978:	b480      	push	{r7}
 800597a:	b085      	sub	sp, #20
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005986:	b2db      	uxtb	r3, r3
 8005988:	2b01      	cmp	r3, #1
 800598a:	d001      	beq.n	8005990 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800598c:	2301      	movs	r3, #1
 800598e:	e03a      	b.n	8005a06 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	2202      	movs	r2, #2
 8005994:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	68da      	ldr	r2, [r3, #12]
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	f042 0201 	orr.w	r2, r2, #1
 80059a6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	4a18      	ldr	r2, [pc, #96]	; (8005a10 <HAL_TIM_Base_Start_IT+0x98>)
 80059ae:	4293      	cmp	r3, r2
 80059b0:	d00e      	beq.n	80059d0 <HAL_TIM_Base_Start_IT+0x58>
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059ba:	d009      	beq.n	80059d0 <HAL_TIM_Base_Start_IT+0x58>
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	4a14      	ldr	r2, [pc, #80]	; (8005a14 <HAL_TIM_Base_Start_IT+0x9c>)
 80059c2:	4293      	cmp	r3, r2
 80059c4:	d004      	beq.n	80059d0 <HAL_TIM_Base_Start_IT+0x58>
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	4a13      	ldr	r2, [pc, #76]	; (8005a18 <HAL_TIM_Base_Start_IT+0xa0>)
 80059cc:	4293      	cmp	r3, r2
 80059ce:	d111      	bne.n	80059f4 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	689b      	ldr	r3, [r3, #8]
 80059d6:	f003 0307 	and.w	r3, r3, #7
 80059da:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	2b06      	cmp	r3, #6
 80059e0:	d010      	beq.n	8005a04 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	681a      	ldr	r2, [r3, #0]
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f042 0201 	orr.w	r2, r2, #1
 80059f0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059f2:	e007      	b.n	8005a04 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	681a      	ldr	r2, [r3, #0]
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	f042 0201 	orr.w	r2, r2, #1
 8005a02:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005a04:	2300      	movs	r3, #0
}
 8005a06:	4618      	mov	r0, r3
 8005a08:	3714      	adds	r7, #20
 8005a0a:	46bd      	mov	sp, r7
 8005a0c:	bc80      	pop	{r7}
 8005a0e:	4770      	bx	lr
 8005a10:	40012c00 	.word	0x40012c00
 8005a14:	40000400 	.word	0x40000400
 8005a18:	40000800 	.word	0x40000800

08005a1c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005a1c:	b580      	push	{r7, lr}
 8005a1e:	b082      	sub	sp, #8
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d101      	bne.n	8005a2e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005a2a:	2301      	movs	r3, #1
 8005a2c:	e041      	b.n	8005ab2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a34:	b2db      	uxtb	r3, r3
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d106      	bne.n	8005a48 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	2200      	movs	r2, #0
 8005a3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005a42:	6878      	ldr	r0, [r7, #4]
 8005a44:	f000 f839 	bl	8005aba <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	2202      	movs	r2, #2
 8005a4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681a      	ldr	r2, [r3, #0]
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	3304      	adds	r3, #4
 8005a58:	4619      	mov	r1, r3
 8005a5a:	4610      	mov	r0, r2
 8005a5c:	f000 fb86 	bl	800616c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	2201      	movs	r2, #1
 8005a64:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	2201      	movs	r2, #1
 8005a6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	2201      	movs	r2, #1
 8005a74:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2201      	movs	r2, #1
 8005a7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	2201      	movs	r2, #1
 8005a84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	2201      	movs	r2, #1
 8005a8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	2201      	movs	r2, #1
 8005a94:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	2201      	movs	r2, #1
 8005a9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	2201      	movs	r2, #1
 8005aa4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	2201      	movs	r2, #1
 8005aac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005ab0:	2300      	movs	r3, #0
}
 8005ab2:	4618      	mov	r0, r3
 8005ab4:	3708      	adds	r7, #8
 8005ab6:	46bd      	mov	sp, r7
 8005ab8:	bd80      	pop	{r7, pc}

08005aba <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005aba:	b480      	push	{r7}
 8005abc:	b083      	sub	sp, #12
 8005abe:	af00      	add	r7, sp, #0
 8005ac0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005ac2:	bf00      	nop
 8005ac4:	370c      	adds	r7, #12
 8005ac6:	46bd      	mov	sp, r7
 8005ac8:	bc80      	pop	{r7}
 8005aca:	4770      	bx	lr

08005acc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005acc:	b580      	push	{r7, lr}
 8005ace:	b084      	sub	sp, #16
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	6078      	str	r0, [r7, #4]
 8005ad4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005ad6:	683b      	ldr	r3, [r7, #0]
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d109      	bne.n	8005af0 <HAL_TIM_PWM_Start+0x24>
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005ae2:	b2db      	uxtb	r3, r3
 8005ae4:	2b01      	cmp	r3, #1
 8005ae6:	bf14      	ite	ne
 8005ae8:	2301      	movne	r3, #1
 8005aea:	2300      	moveq	r3, #0
 8005aec:	b2db      	uxtb	r3, r3
 8005aee:	e022      	b.n	8005b36 <HAL_TIM_PWM_Start+0x6a>
 8005af0:	683b      	ldr	r3, [r7, #0]
 8005af2:	2b04      	cmp	r3, #4
 8005af4:	d109      	bne.n	8005b0a <HAL_TIM_PWM_Start+0x3e>
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005afc:	b2db      	uxtb	r3, r3
 8005afe:	2b01      	cmp	r3, #1
 8005b00:	bf14      	ite	ne
 8005b02:	2301      	movne	r3, #1
 8005b04:	2300      	moveq	r3, #0
 8005b06:	b2db      	uxtb	r3, r3
 8005b08:	e015      	b.n	8005b36 <HAL_TIM_PWM_Start+0x6a>
 8005b0a:	683b      	ldr	r3, [r7, #0]
 8005b0c:	2b08      	cmp	r3, #8
 8005b0e:	d109      	bne.n	8005b24 <HAL_TIM_PWM_Start+0x58>
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005b16:	b2db      	uxtb	r3, r3
 8005b18:	2b01      	cmp	r3, #1
 8005b1a:	bf14      	ite	ne
 8005b1c:	2301      	movne	r3, #1
 8005b1e:	2300      	moveq	r3, #0
 8005b20:	b2db      	uxtb	r3, r3
 8005b22:	e008      	b.n	8005b36 <HAL_TIM_PWM_Start+0x6a>
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005b2a:	b2db      	uxtb	r3, r3
 8005b2c:	2b01      	cmp	r3, #1
 8005b2e:	bf14      	ite	ne
 8005b30:	2301      	movne	r3, #1
 8005b32:	2300      	moveq	r3, #0
 8005b34:	b2db      	uxtb	r3, r3
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d001      	beq.n	8005b3e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005b3a:	2301      	movs	r3, #1
 8005b3c:	e05e      	b.n	8005bfc <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005b3e:	683b      	ldr	r3, [r7, #0]
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d104      	bne.n	8005b4e <HAL_TIM_PWM_Start+0x82>
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	2202      	movs	r2, #2
 8005b48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005b4c:	e013      	b.n	8005b76 <HAL_TIM_PWM_Start+0xaa>
 8005b4e:	683b      	ldr	r3, [r7, #0]
 8005b50:	2b04      	cmp	r3, #4
 8005b52:	d104      	bne.n	8005b5e <HAL_TIM_PWM_Start+0x92>
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	2202      	movs	r2, #2
 8005b58:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005b5c:	e00b      	b.n	8005b76 <HAL_TIM_PWM_Start+0xaa>
 8005b5e:	683b      	ldr	r3, [r7, #0]
 8005b60:	2b08      	cmp	r3, #8
 8005b62:	d104      	bne.n	8005b6e <HAL_TIM_PWM_Start+0xa2>
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	2202      	movs	r2, #2
 8005b68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005b6c:	e003      	b.n	8005b76 <HAL_TIM_PWM_Start+0xaa>
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	2202      	movs	r2, #2
 8005b72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	2201      	movs	r2, #1
 8005b7c:	6839      	ldr	r1, [r7, #0]
 8005b7e:	4618      	mov	r0, r3
 8005b80:	f000 fd74 	bl	800666c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	4a1e      	ldr	r2, [pc, #120]	; (8005c04 <HAL_TIM_PWM_Start+0x138>)
 8005b8a:	4293      	cmp	r3, r2
 8005b8c:	d107      	bne.n	8005b9e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005b9c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	4a18      	ldr	r2, [pc, #96]	; (8005c04 <HAL_TIM_PWM_Start+0x138>)
 8005ba4:	4293      	cmp	r3, r2
 8005ba6:	d00e      	beq.n	8005bc6 <HAL_TIM_PWM_Start+0xfa>
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005bb0:	d009      	beq.n	8005bc6 <HAL_TIM_PWM_Start+0xfa>
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	4a14      	ldr	r2, [pc, #80]	; (8005c08 <HAL_TIM_PWM_Start+0x13c>)
 8005bb8:	4293      	cmp	r3, r2
 8005bba:	d004      	beq.n	8005bc6 <HAL_TIM_PWM_Start+0xfa>
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	4a12      	ldr	r2, [pc, #72]	; (8005c0c <HAL_TIM_PWM_Start+0x140>)
 8005bc2:	4293      	cmp	r3, r2
 8005bc4:	d111      	bne.n	8005bea <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	689b      	ldr	r3, [r3, #8]
 8005bcc:	f003 0307 	and.w	r3, r3, #7
 8005bd0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	2b06      	cmp	r3, #6
 8005bd6:	d010      	beq.n	8005bfa <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	681a      	ldr	r2, [r3, #0]
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	f042 0201 	orr.w	r2, r2, #1
 8005be6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005be8:	e007      	b.n	8005bfa <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	681a      	ldr	r2, [r3, #0]
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	f042 0201 	orr.w	r2, r2, #1
 8005bf8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005bfa:	2300      	movs	r3, #0
}
 8005bfc:	4618      	mov	r0, r3
 8005bfe:	3710      	adds	r7, #16
 8005c00:	46bd      	mov	sp, r7
 8005c02:	bd80      	pop	{r7, pc}
 8005c04:	40012c00 	.word	0x40012c00
 8005c08:	40000400 	.word	0x40000400
 8005c0c:	40000800 	.word	0x40000800

08005c10 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005c10:	b580      	push	{r7, lr}
 8005c12:	b082      	sub	sp, #8
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	691b      	ldr	r3, [r3, #16]
 8005c1e:	f003 0302 	and.w	r3, r3, #2
 8005c22:	2b02      	cmp	r3, #2
 8005c24:	d122      	bne.n	8005c6c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	68db      	ldr	r3, [r3, #12]
 8005c2c:	f003 0302 	and.w	r3, r3, #2
 8005c30:	2b02      	cmp	r3, #2
 8005c32:	d11b      	bne.n	8005c6c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	f06f 0202 	mvn.w	r2, #2
 8005c3c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	2201      	movs	r2, #1
 8005c42:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	699b      	ldr	r3, [r3, #24]
 8005c4a:	f003 0303 	and.w	r3, r3, #3
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d003      	beq.n	8005c5a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005c52:	6878      	ldr	r0, [r7, #4]
 8005c54:	f000 fa6f 	bl	8006136 <HAL_TIM_IC_CaptureCallback>
 8005c58:	e005      	b.n	8005c66 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c5a:	6878      	ldr	r0, [r7, #4]
 8005c5c:	f000 fa62 	bl	8006124 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c60:	6878      	ldr	r0, [r7, #4]
 8005c62:	f000 fa71 	bl	8006148 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	2200      	movs	r2, #0
 8005c6a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	691b      	ldr	r3, [r3, #16]
 8005c72:	f003 0304 	and.w	r3, r3, #4
 8005c76:	2b04      	cmp	r3, #4
 8005c78:	d122      	bne.n	8005cc0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	68db      	ldr	r3, [r3, #12]
 8005c80:	f003 0304 	and.w	r3, r3, #4
 8005c84:	2b04      	cmp	r3, #4
 8005c86:	d11b      	bne.n	8005cc0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	f06f 0204 	mvn.w	r2, #4
 8005c90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	2202      	movs	r2, #2
 8005c96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	699b      	ldr	r3, [r3, #24]
 8005c9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d003      	beq.n	8005cae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ca6:	6878      	ldr	r0, [r7, #4]
 8005ca8:	f000 fa45 	bl	8006136 <HAL_TIM_IC_CaptureCallback>
 8005cac:	e005      	b.n	8005cba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005cae:	6878      	ldr	r0, [r7, #4]
 8005cb0:	f000 fa38 	bl	8006124 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005cb4:	6878      	ldr	r0, [r7, #4]
 8005cb6:	f000 fa47 	bl	8006148 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	2200      	movs	r2, #0
 8005cbe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	691b      	ldr	r3, [r3, #16]
 8005cc6:	f003 0308 	and.w	r3, r3, #8
 8005cca:	2b08      	cmp	r3, #8
 8005ccc:	d122      	bne.n	8005d14 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	68db      	ldr	r3, [r3, #12]
 8005cd4:	f003 0308 	and.w	r3, r3, #8
 8005cd8:	2b08      	cmp	r3, #8
 8005cda:	d11b      	bne.n	8005d14 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	f06f 0208 	mvn.w	r2, #8
 8005ce4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	2204      	movs	r2, #4
 8005cea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	69db      	ldr	r3, [r3, #28]
 8005cf2:	f003 0303 	and.w	r3, r3, #3
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d003      	beq.n	8005d02 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005cfa:	6878      	ldr	r0, [r7, #4]
 8005cfc:	f000 fa1b 	bl	8006136 <HAL_TIM_IC_CaptureCallback>
 8005d00:	e005      	b.n	8005d0e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d02:	6878      	ldr	r0, [r7, #4]
 8005d04:	f000 fa0e 	bl	8006124 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d08:	6878      	ldr	r0, [r7, #4]
 8005d0a:	f000 fa1d 	bl	8006148 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	2200      	movs	r2, #0
 8005d12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	691b      	ldr	r3, [r3, #16]
 8005d1a:	f003 0310 	and.w	r3, r3, #16
 8005d1e:	2b10      	cmp	r3, #16
 8005d20:	d122      	bne.n	8005d68 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	68db      	ldr	r3, [r3, #12]
 8005d28:	f003 0310 	and.w	r3, r3, #16
 8005d2c:	2b10      	cmp	r3, #16
 8005d2e:	d11b      	bne.n	8005d68 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	f06f 0210 	mvn.w	r2, #16
 8005d38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	2208      	movs	r2, #8
 8005d3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	69db      	ldr	r3, [r3, #28]
 8005d46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d003      	beq.n	8005d56 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d4e:	6878      	ldr	r0, [r7, #4]
 8005d50:	f000 f9f1 	bl	8006136 <HAL_TIM_IC_CaptureCallback>
 8005d54:	e005      	b.n	8005d62 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d56:	6878      	ldr	r0, [r7, #4]
 8005d58:	f000 f9e4 	bl	8006124 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d5c:	6878      	ldr	r0, [r7, #4]
 8005d5e:	f000 f9f3 	bl	8006148 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	2200      	movs	r2, #0
 8005d66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	691b      	ldr	r3, [r3, #16]
 8005d6e:	f003 0301 	and.w	r3, r3, #1
 8005d72:	2b01      	cmp	r3, #1
 8005d74:	d10e      	bne.n	8005d94 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	68db      	ldr	r3, [r3, #12]
 8005d7c:	f003 0301 	and.w	r3, r3, #1
 8005d80:	2b01      	cmp	r3, #1
 8005d82:	d107      	bne.n	8005d94 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	f06f 0201 	mvn.w	r2, #1
 8005d8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005d8e:	6878      	ldr	r0, [r7, #4]
 8005d90:	f7fb ff18 	bl	8001bc4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	691b      	ldr	r3, [r3, #16]
 8005d9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d9e:	2b80      	cmp	r3, #128	; 0x80
 8005da0:	d10e      	bne.n	8005dc0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	68db      	ldr	r3, [r3, #12]
 8005da8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005dac:	2b80      	cmp	r3, #128	; 0x80
 8005dae:	d107      	bne.n	8005dc0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005db8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005dba:	6878      	ldr	r0, [r7, #4]
 8005dbc:	f000 fd32 	bl	8006824 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	691b      	ldr	r3, [r3, #16]
 8005dc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005dca:	2b40      	cmp	r3, #64	; 0x40
 8005dcc:	d10e      	bne.n	8005dec <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	68db      	ldr	r3, [r3, #12]
 8005dd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005dd8:	2b40      	cmp	r3, #64	; 0x40
 8005dda:	d107      	bne.n	8005dec <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005de4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005de6:	6878      	ldr	r0, [r7, #4]
 8005de8:	f000 f9b7 	bl	800615a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	691b      	ldr	r3, [r3, #16]
 8005df2:	f003 0320 	and.w	r3, r3, #32
 8005df6:	2b20      	cmp	r3, #32
 8005df8:	d10e      	bne.n	8005e18 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	68db      	ldr	r3, [r3, #12]
 8005e00:	f003 0320 	and.w	r3, r3, #32
 8005e04:	2b20      	cmp	r3, #32
 8005e06:	d107      	bne.n	8005e18 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	f06f 0220 	mvn.w	r2, #32
 8005e10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005e12:	6878      	ldr	r0, [r7, #4]
 8005e14:	f000 fcfd 	bl	8006812 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005e18:	bf00      	nop
 8005e1a:	3708      	adds	r7, #8
 8005e1c:	46bd      	mov	sp, r7
 8005e1e:	bd80      	pop	{r7, pc}

08005e20 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005e20:	b580      	push	{r7, lr}
 8005e22:	b084      	sub	sp, #16
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	60f8      	str	r0, [r7, #12]
 8005e28:	60b9      	str	r1, [r7, #8]
 8005e2a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e32:	2b01      	cmp	r3, #1
 8005e34:	d101      	bne.n	8005e3a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8005e36:	2302      	movs	r3, #2
 8005e38:	e0ac      	b.n	8005f94 <HAL_TIM_PWM_ConfigChannel+0x174>
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	2201      	movs	r2, #1
 8005e3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	2b0c      	cmp	r3, #12
 8005e46:	f200 809f 	bhi.w	8005f88 <HAL_TIM_PWM_ConfigChannel+0x168>
 8005e4a:	a201      	add	r2, pc, #4	; (adr r2, 8005e50 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8005e4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e50:	08005e85 	.word	0x08005e85
 8005e54:	08005f89 	.word	0x08005f89
 8005e58:	08005f89 	.word	0x08005f89
 8005e5c:	08005f89 	.word	0x08005f89
 8005e60:	08005ec5 	.word	0x08005ec5
 8005e64:	08005f89 	.word	0x08005f89
 8005e68:	08005f89 	.word	0x08005f89
 8005e6c:	08005f89 	.word	0x08005f89
 8005e70:	08005f07 	.word	0x08005f07
 8005e74:	08005f89 	.word	0x08005f89
 8005e78:	08005f89 	.word	0x08005f89
 8005e7c:	08005f89 	.word	0x08005f89
 8005e80:	08005f47 	.word	0x08005f47
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	68b9      	ldr	r1, [r7, #8]
 8005e8a:	4618      	mov	r0, r3
 8005e8c:	f000 f9d0 	bl	8006230 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	699a      	ldr	r2, [r3, #24]
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	f042 0208 	orr.w	r2, r2, #8
 8005e9e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	699a      	ldr	r2, [r3, #24]
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	f022 0204 	bic.w	r2, r2, #4
 8005eae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	6999      	ldr	r1, [r3, #24]
 8005eb6:	68bb      	ldr	r3, [r7, #8]
 8005eb8:	691a      	ldr	r2, [r3, #16]
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	430a      	orrs	r2, r1
 8005ec0:	619a      	str	r2, [r3, #24]
      break;
 8005ec2:	e062      	b.n	8005f8a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	68b9      	ldr	r1, [r7, #8]
 8005eca:	4618      	mov	r0, r3
 8005ecc:	f000 fa16 	bl	80062fc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	699a      	ldr	r2, [r3, #24]
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005ede:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	699a      	ldr	r2, [r3, #24]
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005eee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	6999      	ldr	r1, [r3, #24]
 8005ef6:	68bb      	ldr	r3, [r7, #8]
 8005ef8:	691b      	ldr	r3, [r3, #16]
 8005efa:	021a      	lsls	r2, r3, #8
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	430a      	orrs	r2, r1
 8005f02:	619a      	str	r2, [r3, #24]
      break;
 8005f04:	e041      	b.n	8005f8a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	68b9      	ldr	r1, [r7, #8]
 8005f0c:	4618      	mov	r0, r3
 8005f0e:	f000 fa5f 	bl	80063d0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	69da      	ldr	r2, [r3, #28]
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	f042 0208 	orr.w	r2, r2, #8
 8005f20:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	69da      	ldr	r2, [r3, #28]
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	f022 0204 	bic.w	r2, r2, #4
 8005f30:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	69d9      	ldr	r1, [r3, #28]
 8005f38:	68bb      	ldr	r3, [r7, #8]
 8005f3a:	691a      	ldr	r2, [r3, #16]
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	430a      	orrs	r2, r1
 8005f42:	61da      	str	r2, [r3, #28]
      break;
 8005f44:	e021      	b.n	8005f8a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	68b9      	ldr	r1, [r7, #8]
 8005f4c:	4618      	mov	r0, r3
 8005f4e:	f000 faa9 	bl	80064a4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	69da      	ldr	r2, [r3, #28]
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005f60:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	69da      	ldr	r2, [r3, #28]
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005f70:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	69d9      	ldr	r1, [r3, #28]
 8005f78:	68bb      	ldr	r3, [r7, #8]
 8005f7a:	691b      	ldr	r3, [r3, #16]
 8005f7c:	021a      	lsls	r2, r3, #8
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	430a      	orrs	r2, r1
 8005f84:	61da      	str	r2, [r3, #28]
      break;
 8005f86:	e000      	b.n	8005f8a <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8005f88:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	2200      	movs	r2, #0
 8005f8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005f92:	2300      	movs	r3, #0
}
 8005f94:	4618      	mov	r0, r3
 8005f96:	3710      	adds	r7, #16
 8005f98:	46bd      	mov	sp, r7
 8005f9a:	bd80      	pop	{r7, pc}

08005f9c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005f9c:	b580      	push	{r7, lr}
 8005f9e:	b084      	sub	sp, #16
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	6078      	str	r0, [r7, #4]
 8005fa4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005fac:	2b01      	cmp	r3, #1
 8005fae:	d101      	bne.n	8005fb4 <HAL_TIM_ConfigClockSource+0x18>
 8005fb0:	2302      	movs	r3, #2
 8005fb2:	e0b3      	b.n	800611c <HAL_TIM_ConfigClockSource+0x180>
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	2201      	movs	r2, #1
 8005fb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	2202      	movs	r2, #2
 8005fc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	689b      	ldr	r3, [r3, #8]
 8005fca:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005fd2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005fda:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	68fa      	ldr	r2, [r7, #12]
 8005fe2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005fe4:	683b      	ldr	r3, [r7, #0]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005fec:	d03e      	beq.n	800606c <HAL_TIM_ConfigClockSource+0xd0>
 8005fee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ff2:	f200 8087 	bhi.w	8006104 <HAL_TIM_ConfigClockSource+0x168>
 8005ff6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ffa:	f000 8085 	beq.w	8006108 <HAL_TIM_ConfigClockSource+0x16c>
 8005ffe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006002:	d87f      	bhi.n	8006104 <HAL_TIM_ConfigClockSource+0x168>
 8006004:	2b70      	cmp	r3, #112	; 0x70
 8006006:	d01a      	beq.n	800603e <HAL_TIM_ConfigClockSource+0xa2>
 8006008:	2b70      	cmp	r3, #112	; 0x70
 800600a:	d87b      	bhi.n	8006104 <HAL_TIM_ConfigClockSource+0x168>
 800600c:	2b60      	cmp	r3, #96	; 0x60
 800600e:	d050      	beq.n	80060b2 <HAL_TIM_ConfigClockSource+0x116>
 8006010:	2b60      	cmp	r3, #96	; 0x60
 8006012:	d877      	bhi.n	8006104 <HAL_TIM_ConfigClockSource+0x168>
 8006014:	2b50      	cmp	r3, #80	; 0x50
 8006016:	d03c      	beq.n	8006092 <HAL_TIM_ConfigClockSource+0xf6>
 8006018:	2b50      	cmp	r3, #80	; 0x50
 800601a:	d873      	bhi.n	8006104 <HAL_TIM_ConfigClockSource+0x168>
 800601c:	2b40      	cmp	r3, #64	; 0x40
 800601e:	d058      	beq.n	80060d2 <HAL_TIM_ConfigClockSource+0x136>
 8006020:	2b40      	cmp	r3, #64	; 0x40
 8006022:	d86f      	bhi.n	8006104 <HAL_TIM_ConfigClockSource+0x168>
 8006024:	2b30      	cmp	r3, #48	; 0x30
 8006026:	d064      	beq.n	80060f2 <HAL_TIM_ConfigClockSource+0x156>
 8006028:	2b30      	cmp	r3, #48	; 0x30
 800602a:	d86b      	bhi.n	8006104 <HAL_TIM_ConfigClockSource+0x168>
 800602c:	2b20      	cmp	r3, #32
 800602e:	d060      	beq.n	80060f2 <HAL_TIM_ConfigClockSource+0x156>
 8006030:	2b20      	cmp	r3, #32
 8006032:	d867      	bhi.n	8006104 <HAL_TIM_ConfigClockSource+0x168>
 8006034:	2b00      	cmp	r3, #0
 8006036:	d05c      	beq.n	80060f2 <HAL_TIM_ConfigClockSource+0x156>
 8006038:	2b10      	cmp	r3, #16
 800603a:	d05a      	beq.n	80060f2 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800603c:	e062      	b.n	8006104 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	6818      	ldr	r0, [r3, #0]
 8006042:	683b      	ldr	r3, [r7, #0]
 8006044:	6899      	ldr	r1, [r3, #8]
 8006046:	683b      	ldr	r3, [r7, #0]
 8006048:	685a      	ldr	r2, [r3, #4]
 800604a:	683b      	ldr	r3, [r7, #0]
 800604c:	68db      	ldr	r3, [r3, #12]
 800604e:	f000 faee 	bl	800662e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	689b      	ldr	r3, [r3, #8]
 8006058:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006060:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	68fa      	ldr	r2, [r7, #12]
 8006068:	609a      	str	r2, [r3, #8]
      break;
 800606a:	e04e      	b.n	800610a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	6818      	ldr	r0, [r3, #0]
 8006070:	683b      	ldr	r3, [r7, #0]
 8006072:	6899      	ldr	r1, [r3, #8]
 8006074:	683b      	ldr	r3, [r7, #0]
 8006076:	685a      	ldr	r2, [r3, #4]
 8006078:	683b      	ldr	r3, [r7, #0]
 800607a:	68db      	ldr	r3, [r3, #12]
 800607c:	f000 fad7 	bl	800662e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	689a      	ldr	r2, [r3, #8]
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800608e:	609a      	str	r2, [r3, #8]
      break;
 8006090:	e03b      	b.n	800610a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	6818      	ldr	r0, [r3, #0]
 8006096:	683b      	ldr	r3, [r7, #0]
 8006098:	6859      	ldr	r1, [r3, #4]
 800609a:	683b      	ldr	r3, [r7, #0]
 800609c:	68db      	ldr	r3, [r3, #12]
 800609e:	461a      	mov	r2, r3
 80060a0:	f000 fa4e 	bl	8006540 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	2150      	movs	r1, #80	; 0x50
 80060aa:	4618      	mov	r0, r3
 80060ac:	f000 faa5 	bl	80065fa <TIM_ITRx_SetConfig>
      break;
 80060b0:	e02b      	b.n	800610a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	6818      	ldr	r0, [r3, #0]
 80060b6:	683b      	ldr	r3, [r7, #0]
 80060b8:	6859      	ldr	r1, [r3, #4]
 80060ba:	683b      	ldr	r3, [r7, #0]
 80060bc:	68db      	ldr	r3, [r3, #12]
 80060be:	461a      	mov	r2, r3
 80060c0:	f000 fa6c 	bl	800659c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	2160      	movs	r1, #96	; 0x60
 80060ca:	4618      	mov	r0, r3
 80060cc:	f000 fa95 	bl	80065fa <TIM_ITRx_SetConfig>
      break;
 80060d0:	e01b      	b.n	800610a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	6818      	ldr	r0, [r3, #0]
 80060d6:	683b      	ldr	r3, [r7, #0]
 80060d8:	6859      	ldr	r1, [r3, #4]
 80060da:	683b      	ldr	r3, [r7, #0]
 80060dc:	68db      	ldr	r3, [r3, #12]
 80060de:	461a      	mov	r2, r3
 80060e0:	f000 fa2e 	bl	8006540 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	2140      	movs	r1, #64	; 0x40
 80060ea:	4618      	mov	r0, r3
 80060ec:	f000 fa85 	bl	80065fa <TIM_ITRx_SetConfig>
      break;
 80060f0:	e00b      	b.n	800610a <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681a      	ldr	r2, [r3, #0]
 80060f6:	683b      	ldr	r3, [r7, #0]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	4619      	mov	r1, r3
 80060fc:	4610      	mov	r0, r2
 80060fe:	f000 fa7c 	bl	80065fa <TIM_ITRx_SetConfig>
        break;
 8006102:	e002      	b.n	800610a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8006104:	bf00      	nop
 8006106:	e000      	b.n	800610a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8006108:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	2201      	movs	r2, #1
 800610e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	2200      	movs	r2, #0
 8006116:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800611a:	2300      	movs	r3, #0
}
 800611c:	4618      	mov	r0, r3
 800611e:	3710      	adds	r7, #16
 8006120:	46bd      	mov	sp, r7
 8006122:	bd80      	pop	{r7, pc}

08006124 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006124:	b480      	push	{r7}
 8006126:	b083      	sub	sp, #12
 8006128:	af00      	add	r7, sp, #0
 800612a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800612c:	bf00      	nop
 800612e:	370c      	adds	r7, #12
 8006130:	46bd      	mov	sp, r7
 8006132:	bc80      	pop	{r7}
 8006134:	4770      	bx	lr

08006136 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006136:	b480      	push	{r7}
 8006138:	b083      	sub	sp, #12
 800613a:	af00      	add	r7, sp, #0
 800613c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800613e:	bf00      	nop
 8006140:	370c      	adds	r7, #12
 8006142:	46bd      	mov	sp, r7
 8006144:	bc80      	pop	{r7}
 8006146:	4770      	bx	lr

08006148 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006148:	b480      	push	{r7}
 800614a:	b083      	sub	sp, #12
 800614c:	af00      	add	r7, sp, #0
 800614e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006150:	bf00      	nop
 8006152:	370c      	adds	r7, #12
 8006154:	46bd      	mov	sp, r7
 8006156:	bc80      	pop	{r7}
 8006158:	4770      	bx	lr

0800615a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800615a:	b480      	push	{r7}
 800615c:	b083      	sub	sp, #12
 800615e:	af00      	add	r7, sp, #0
 8006160:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006162:	bf00      	nop
 8006164:	370c      	adds	r7, #12
 8006166:	46bd      	mov	sp, r7
 8006168:	bc80      	pop	{r7}
 800616a:	4770      	bx	lr

0800616c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800616c:	b480      	push	{r7}
 800616e:	b085      	sub	sp, #20
 8006170:	af00      	add	r7, sp, #0
 8006172:	6078      	str	r0, [r7, #4]
 8006174:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	4a29      	ldr	r2, [pc, #164]	; (8006224 <TIM_Base_SetConfig+0xb8>)
 8006180:	4293      	cmp	r3, r2
 8006182:	d00b      	beq.n	800619c <TIM_Base_SetConfig+0x30>
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800618a:	d007      	beq.n	800619c <TIM_Base_SetConfig+0x30>
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	4a26      	ldr	r2, [pc, #152]	; (8006228 <TIM_Base_SetConfig+0xbc>)
 8006190:	4293      	cmp	r3, r2
 8006192:	d003      	beq.n	800619c <TIM_Base_SetConfig+0x30>
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	4a25      	ldr	r2, [pc, #148]	; (800622c <TIM_Base_SetConfig+0xc0>)
 8006198:	4293      	cmp	r3, r2
 800619a:	d108      	bne.n	80061ae <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80061a4:	683b      	ldr	r3, [r7, #0]
 80061a6:	685b      	ldr	r3, [r3, #4]
 80061a8:	68fa      	ldr	r2, [r7, #12]
 80061aa:	4313      	orrs	r3, r2
 80061ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	4a1c      	ldr	r2, [pc, #112]	; (8006224 <TIM_Base_SetConfig+0xb8>)
 80061b2:	4293      	cmp	r3, r2
 80061b4:	d00b      	beq.n	80061ce <TIM_Base_SetConfig+0x62>
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80061bc:	d007      	beq.n	80061ce <TIM_Base_SetConfig+0x62>
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	4a19      	ldr	r2, [pc, #100]	; (8006228 <TIM_Base_SetConfig+0xbc>)
 80061c2:	4293      	cmp	r3, r2
 80061c4:	d003      	beq.n	80061ce <TIM_Base_SetConfig+0x62>
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	4a18      	ldr	r2, [pc, #96]	; (800622c <TIM_Base_SetConfig+0xc0>)
 80061ca:	4293      	cmp	r3, r2
 80061cc:	d108      	bne.n	80061e0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80061d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80061d6:	683b      	ldr	r3, [r7, #0]
 80061d8:	68db      	ldr	r3, [r3, #12]
 80061da:	68fa      	ldr	r2, [r7, #12]
 80061dc:	4313      	orrs	r3, r2
 80061de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80061e6:	683b      	ldr	r3, [r7, #0]
 80061e8:	695b      	ldr	r3, [r3, #20]
 80061ea:	4313      	orrs	r3, r2
 80061ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	68fa      	ldr	r2, [r7, #12]
 80061f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80061f4:	683b      	ldr	r3, [r7, #0]
 80061f6:	689a      	ldr	r2, [r3, #8]
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80061fc:	683b      	ldr	r3, [r7, #0]
 80061fe:	681a      	ldr	r2, [r3, #0]
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	4a07      	ldr	r2, [pc, #28]	; (8006224 <TIM_Base_SetConfig+0xb8>)
 8006208:	4293      	cmp	r3, r2
 800620a:	d103      	bne.n	8006214 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800620c:	683b      	ldr	r3, [r7, #0]
 800620e:	691a      	ldr	r2, [r3, #16]
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	2201      	movs	r2, #1
 8006218:	615a      	str	r2, [r3, #20]
}
 800621a:	bf00      	nop
 800621c:	3714      	adds	r7, #20
 800621e:	46bd      	mov	sp, r7
 8006220:	bc80      	pop	{r7}
 8006222:	4770      	bx	lr
 8006224:	40012c00 	.word	0x40012c00
 8006228:	40000400 	.word	0x40000400
 800622c:	40000800 	.word	0x40000800

08006230 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006230:	b480      	push	{r7}
 8006232:	b087      	sub	sp, #28
 8006234:	af00      	add	r7, sp, #0
 8006236:	6078      	str	r0, [r7, #4]
 8006238:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	6a1b      	ldr	r3, [r3, #32]
 800623e:	f023 0201 	bic.w	r2, r3, #1
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	6a1b      	ldr	r3, [r3, #32]
 800624a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	685b      	ldr	r3, [r3, #4]
 8006250:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	699b      	ldr	r3, [r3, #24]
 8006256:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800625e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	f023 0303 	bic.w	r3, r3, #3
 8006266:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006268:	683b      	ldr	r3, [r7, #0]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	68fa      	ldr	r2, [r7, #12]
 800626e:	4313      	orrs	r3, r2
 8006270:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006272:	697b      	ldr	r3, [r7, #20]
 8006274:	f023 0302 	bic.w	r3, r3, #2
 8006278:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800627a:	683b      	ldr	r3, [r7, #0]
 800627c:	689b      	ldr	r3, [r3, #8]
 800627e:	697a      	ldr	r2, [r7, #20]
 8006280:	4313      	orrs	r3, r2
 8006282:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	4a1c      	ldr	r2, [pc, #112]	; (80062f8 <TIM_OC1_SetConfig+0xc8>)
 8006288:	4293      	cmp	r3, r2
 800628a:	d10c      	bne.n	80062a6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800628c:	697b      	ldr	r3, [r7, #20]
 800628e:	f023 0308 	bic.w	r3, r3, #8
 8006292:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006294:	683b      	ldr	r3, [r7, #0]
 8006296:	68db      	ldr	r3, [r3, #12]
 8006298:	697a      	ldr	r2, [r7, #20]
 800629a:	4313      	orrs	r3, r2
 800629c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800629e:	697b      	ldr	r3, [r7, #20]
 80062a0:	f023 0304 	bic.w	r3, r3, #4
 80062a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	4a13      	ldr	r2, [pc, #76]	; (80062f8 <TIM_OC1_SetConfig+0xc8>)
 80062aa:	4293      	cmp	r3, r2
 80062ac:	d111      	bne.n	80062d2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80062ae:	693b      	ldr	r3, [r7, #16]
 80062b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80062b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80062b6:	693b      	ldr	r3, [r7, #16]
 80062b8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80062bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80062be:	683b      	ldr	r3, [r7, #0]
 80062c0:	695b      	ldr	r3, [r3, #20]
 80062c2:	693a      	ldr	r2, [r7, #16]
 80062c4:	4313      	orrs	r3, r2
 80062c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80062c8:	683b      	ldr	r3, [r7, #0]
 80062ca:	699b      	ldr	r3, [r3, #24]
 80062cc:	693a      	ldr	r2, [r7, #16]
 80062ce:	4313      	orrs	r3, r2
 80062d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	693a      	ldr	r2, [r7, #16]
 80062d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	68fa      	ldr	r2, [r7, #12]
 80062dc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80062de:	683b      	ldr	r3, [r7, #0]
 80062e0:	685a      	ldr	r2, [r3, #4]
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	697a      	ldr	r2, [r7, #20]
 80062ea:	621a      	str	r2, [r3, #32]
}
 80062ec:	bf00      	nop
 80062ee:	371c      	adds	r7, #28
 80062f0:	46bd      	mov	sp, r7
 80062f2:	bc80      	pop	{r7}
 80062f4:	4770      	bx	lr
 80062f6:	bf00      	nop
 80062f8:	40012c00 	.word	0x40012c00

080062fc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80062fc:	b480      	push	{r7}
 80062fe:	b087      	sub	sp, #28
 8006300:	af00      	add	r7, sp, #0
 8006302:	6078      	str	r0, [r7, #4]
 8006304:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	6a1b      	ldr	r3, [r3, #32]
 800630a:	f023 0210 	bic.w	r2, r3, #16
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	6a1b      	ldr	r3, [r3, #32]
 8006316:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	685b      	ldr	r3, [r3, #4]
 800631c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	699b      	ldr	r3, [r3, #24]
 8006322:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800632a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006332:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006334:	683b      	ldr	r3, [r7, #0]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	021b      	lsls	r3, r3, #8
 800633a:	68fa      	ldr	r2, [r7, #12]
 800633c:	4313      	orrs	r3, r2
 800633e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006340:	697b      	ldr	r3, [r7, #20]
 8006342:	f023 0320 	bic.w	r3, r3, #32
 8006346:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006348:	683b      	ldr	r3, [r7, #0]
 800634a:	689b      	ldr	r3, [r3, #8]
 800634c:	011b      	lsls	r3, r3, #4
 800634e:	697a      	ldr	r2, [r7, #20]
 8006350:	4313      	orrs	r3, r2
 8006352:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	4a1d      	ldr	r2, [pc, #116]	; (80063cc <TIM_OC2_SetConfig+0xd0>)
 8006358:	4293      	cmp	r3, r2
 800635a:	d10d      	bne.n	8006378 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800635c:	697b      	ldr	r3, [r7, #20]
 800635e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006362:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006364:	683b      	ldr	r3, [r7, #0]
 8006366:	68db      	ldr	r3, [r3, #12]
 8006368:	011b      	lsls	r3, r3, #4
 800636a:	697a      	ldr	r2, [r7, #20]
 800636c:	4313      	orrs	r3, r2
 800636e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006370:	697b      	ldr	r3, [r7, #20]
 8006372:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006376:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	4a14      	ldr	r2, [pc, #80]	; (80063cc <TIM_OC2_SetConfig+0xd0>)
 800637c:	4293      	cmp	r3, r2
 800637e:	d113      	bne.n	80063a8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006380:	693b      	ldr	r3, [r7, #16]
 8006382:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006386:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006388:	693b      	ldr	r3, [r7, #16]
 800638a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800638e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006390:	683b      	ldr	r3, [r7, #0]
 8006392:	695b      	ldr	r3, [r3, #20]
 8006394:	009b      	lsls	r3, r3, #2
 8006396:	693a      	ldr	r2, [r7, #16]
 8006398:	4313      	orrs	r3, r2
 800639a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800639c:	683b      	ldr	r3, [r7, #0]
 800639e:	699b      	ldr	r3, [r3, #24]
 80063a0:	009b      	lsls	r3, r3, #2
 80063a2:	693a      	ldr	r2, [r7, #16]
 80063a4:	4313      	orrs	r3, r2
 80063a6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	693a      	ldr	r2, [r7, #16]
 80063ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	68fa      	ldr	r2, [r7, #12]
 80063b2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80063b4:	683b      	ldr	r3, [r7, #0]
 80063b6:	685a      	ldr	r2, [r3, #4]
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	697a      	ldr	r2, [r7, #20]
 80063c0:	621a      	str	r2, [r3, #32]
}
 80063c2:	bf00      	nop
 80063c4:	371c      	adds	r7, #28
 80063c6:	46bd      	mov	sp, r7
 80063c8:	bc80      	pop	{r7}
 80063ca:	4770      	bx	lr
 80063cc:	40012c00 	.word	0x40012c00

080063d0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80063d0:	b480      	push	{r7}
 80063d2:	b087      	sub	sp, #28
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	6078      	str	r0, [r7, #4]
 80063d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	6a1b      	ldr	r3, [r3, #32]
 80063de:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	6a1b      	ldr	r3, [r3, #32]
 80063ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	685b      	ldr	r3, [r3, #4]
 80063f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	69db      	ldr	r3, [r3, #28]
 80063f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	f023 0303 	bic.w	r3, r3, #3
 8006406:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006408:	683b      	ldr	r3, [r7, #0]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	68fa      	ldr	r2, [r7, #12]
 800640e:	4313      	orrs	r3, r2
 8006410:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006412:	697b      	ldr	r3, [r7, #20]
 8006414:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006418:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800641a:	683b      	ldr	r3, [r7, #0]
 800641c:	689b      	ldr	r3, [r3, #8]
 800641e:	021b      	lsls	r3, r3, #8
 8006420:	697a      	ldr	r2, [r7, #20]
 8006422:	4313      	orrs	r3, r2
 8006424:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	4a1d      	ldr	r2, [pc, #116]	; (80064a0 <TIM_OC3_SetConfig+0xd0>)
 800642a:	4293      	cmp	r3, r2
 800642c:	d10d      	bne.n	800644a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800642e:	697b      	ldr	r3, [r7, #20]
 8006430:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006434:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006436:	683b      	ldr	r3, [r7, #0]
 8006438:	68db      	ldr	r3, [r3, #12]
 800643a:	021b      	lsls	r3, r3, #8
 800643c:	697a      	ldr	r2, [r7, #20]
 800643e:	4313      	orrs	r3, r2
 8006440:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006442:	697b      	ldr	r3, [r7, #20]
 8006444:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006448:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	4a14      	ldr	r2, [pc, #80]	; (80064a0 <TIM_OC3_SetConfig+0xd0>)
 800644e:	4293      	cmp	r3, r2
 8006450:	d113      	bne.n	800647a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006452:	693b      	ldr	r3, [r7, #16]
 8006454:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006458:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800645a:	693b      	ldr	r3, [r7, #16]
 800645c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006460:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006462:	683b      	ldr	r3, [r7, #0]
 8006464:	695b      	ldr	r3, [r3, #20]
 8006466:	011b      	lsls	r3, r3, #4
 8006468:	693a      	ldr	r2, [r7, #16]
 800646a:	4313      	orrs	r3, r2
 800646c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800646e:	683b      	ldr	r3, [r7, #0]
 8006470:	699b      	ldr	r3, [r3, #24]
 8006472:	011b      	lsls	r3, r3, #4
 8006474:	693a      	ldr	r2, [r7, #16]
 8006476:	4313      	orrs	r3, r2
 8006478:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	693a      	ldr	r2, [r7, #16]
 800647e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	68fa      	ldr	r2, [r7, #12]
 8006484:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006486:	683b      	ldr	r3, [r7, #0]
 8006488:	685a      	ldr	r2, [r3, #4]
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	697a      	ldr	r2, [r7, #20]
 8006492:	621a      	str	r2, [r3, #32]
}
 8006494:	bf00      	nop
 8006496:	371c      	adds	r7, #28
 8006498:	46bd      	mov	sp, r7
 800649a:	bc80      	pop	{r7}
 800649c:	4770      	bx	lr
 800649e:	bf00      	nop
 80064a0:	40012c00 	.word	0x40012c00

080064a4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80064a4:	b480      	push	{r7}
 80064a6:	b087      	sub	sp, #28
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	6078      	str	r0, [r7, #4]
 80064ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	6a1b      	ldr	r3, [r3, #32]
 80064b2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	6a1b      	ldr	r3, [r3, #32]
 80064be:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	685b      	ldr	r3, [r3, #4]
 80064c4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	69db      	ldr	r3, [r3, #28]
 80064ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80064d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80064da:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80064dc:	683b      	ldr	r3, [r7, #0]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	021b      	lsls	r3, r3, #8
 80064e2:	68fa      	ldr	r2, [r7, #12]
 80064e4:	4313      	orrs	r3, r2
 80064e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80064e8:	693b      	ldr	r3, [r7, #16]
 80064ea:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80064ee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80064f0:	683b      	ldr	r3, [r7, #0]
 80064f2:	689b      	ldr	r3, [r3, #8]
 80064f4:	031b      	lsls	r3, r3, #12
 80064f6:	693a      	ldr	r2, [r7, #16]
 80064f8:	4313      	orrs	r3, r2
 80064fa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	4a0f      	ldr	r2, [pc, #60]	; (800653c <TIM_OC4_SetConfig+0x98>)
 8006500:	4293      	cmp	r3, r2
 8006502:	d109      	bne.n	8006518 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006504:	697b      	ldr	r3, [r7, #20]
 8006506:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800650a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800650c:	683b      	ldr	r3, [r7, #0]
 800650e:	695b      	ldr	r3, [r3, #20]
 8006510:	019b      	lsls	r3, r3, #6
 8006512:	697a      	ldr	r2, [r7, #20]
 8006514:	4313      	orrs	r3, r2
 8006516:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	697a      	ldr	r2, [r7, #20]
 800651c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	68fa      	ldr	r2, [r7, #12]
 8006522:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006524:	683b      	ldr	r3, [r7, #0]
 8006526:	685a      	ldr	r2, [r3, #4]
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	693a      	ldr	r2, [r7, #16]
 8006530:	621a      	str	r2, [r3, #32]
}
 8006532:	bf00      	nop
 8006534:	371c      	adds	r7, #28
 8006536:	46bd      	mov	sp, r7
 8006538:	bc80      	pop	{r7}
 800653a:	4770      	bx	lr
 800653c:	40012c00 	.word	0x40012c00

08006540 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006540:	b480      	push	{r7}
 8006542:	b087      	sub	sp, #28
 8006544:	af00      	add	r7, sp, #0
 8006546:	60f8      	str	r0, [r7, #12]
 8006548:	60b9      	str	r1, [r7, #8]
 800654a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	6a1b      	ldr	r3, [r3, #32]
 8006550:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	6a1b      	ldr	r3, [r3, #32]
 8006556:	f023 0201 	bic.w	r2, r3, #1
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	699b      	ldr	r3, [r3, #24]
 8006562:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006564:	693b      	ldr	r3, [r7, #16]
 8006566:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800656a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	011b      	lsls	r3, r3, #4
 8006570:	693a      	ldr	r2, [r7, #16]
 8006572:	4313      	orrs	r3, r2
 8006574:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006576:	697b      	ldr	r3, [r7, #20]
 8006578:	f023 030a 	bic.w	r3, r3, #10
 800657c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800657e:	697a      	ldr	r2, [r7, #20]
 8006580:	68bb      	ldr	r3, [r7, #8]
 8006582:	4313      	orrs	r3, r2
 8006584:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	693a      	ldr	r2, [r7, #16]
 800658a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	697a      	ldr	r2, [r7, #20]
 8006590:	621a      	str	r2, [r3, #32]
}
 8006592:	bf00      	nop
 8006594:	371c      	adds	r7, #28
 8006596:	46bd      	mov	sp, r7
 8006598:	bc80      	pop	{r7}
 800659a:	4770      	bx	lr

0800659c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800659c:	b480      	push	{r7}
 800659e:	b087      	sub	sp, #28
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	60f8      	str	r0, [r7, #12]
 80065a4:	60b9      	str	r1, [r7, #8]
 80065a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	6a1b      	ldr	r3, [r3, #32]
 80065ac:	f023 0210 	bic.w	r2, r3, #16
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	699b      	ldr	r3, [r3, #24]
 80065b8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	6a1b      	ldr	r3, [r3, #32]
 80065be:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80065c0:	697b      	ldr	r3, [r7, #20]
 80065c2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80065c6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	031b      	lsls	r3, r3, #12
 80065cc:	697a      	ldr	r2, [r7, #20]
 80065ce:	4313      	orrs	r3, r2
 80065d0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80065d2:	693b      	ldr	r3, [r7, #16]
 80065d4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80065d8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80065da:	68bb      	ldr	r3, [r7, #8]
 80065dc:	011b      	lsls	r3, r3, #4
 80065de:	693a      	ldr	r2, [r7, #16]
 80065e0:	4313      	orrs	r3, r2
 80065e2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	697a      	ldr	r2, [r7, #20]
 80065e8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	693a      	ldr	r2, [r7, #16]
 80065ee:	621a      	str	r2, [r3, #32]
}
 80065f0:	bf00      	nop
 80065f2:	371c      	adds	r7, #28
 80065f4:	46bd      	mov	sp, r7
 80065f6:	bc80      	pop	{r7}
 80065f8:	4770      	bx	lr

080065fa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80065fa:	b480      	push	{r7}
 80065fc:	b085      	sub	sp, #20
 80065fe:	af00      	add	r7, sp, #0
 8006600:	6078      	str	r0, [r7, #4]
 8006602:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	689b      	ldr	r3, [r3, #8]
 8006608:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006610:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006612:	683a      	ldr	r2, [r7, #0]
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	4313      	orrs	r3, r2
 8006618:	f043 0307 	orr.w	r3, r3, #7
 800661c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	68fa      	ldr	r2, [r7, #12]
 8006622:	609a      	str	r2, [r3, #8]
}
 8006624:	bf00      	nop
 8006626:	3714      	adds	r7, #20
 8006628:	46bd      	mov	sp, r7
 800662a:	bc80      	pop	{r7}
 800662c:	4770      	bx	lr

0800662e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800662e:	b480      	push	{r7}
 8006630:	b087      	sub	sp, #28
 8006632:	af00      	add	r7, sp, #0
 8006634:	60f8      	str	r0, [r7, #12]
 8006636:	60b9      	str	r1, [r7, #8]
 8006638:	607a      	str	r2, [r7, #4]
 800663a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	689b      	ldr	r3, [r3, #8]
 8006640:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006642:	697b      	ldr	r3, [r7, #20]
 8006644:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006648:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800664a:	683b      	ldr	r3, [r7, #0]
 800664c:	021a      	lsls	r2, r3, #8
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	431a      	orrs	r2, r3
 8006652:	68bb      	ldr	r3, [r7, #8]
 8006654:	4313      	orrs	r3, r2
 8006656:	697a      	ldr	r2, [r7, #20]
 8006658:	4313      	orrs	r3, r2
 800665a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	697a      	ldr	r2, [r7, #20]
 8006660:	609a      	str	r2, [r3, #8]
}
 8006662:	bf00      	nop
 8006664:	371c      	adds	r7, #28
 8006666:	46bd      	mov	sp, r7
 8006668:	bc80      	pop	{r7}
 800666a:	4770      	bx	lr

0800666c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800666c:	b480      	push	{r7}
 800666e:	b087      	sub	sp, #28
 8006670:	af00      	add	r7, sp, #0
 8006672:	60f8      	str	r0, [r7, #12]
 8006674:	60b9      	str	r1, [r7, #8]
 8006676:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006678:	68bb      	ldr	r3, [r7, #8]
 800667a:	f003 031f 	and.w	r3, r3, #31
 800667e:	2201      	movs	r2, #1
 8006680:	fa02 f303 	lsl.w	r3, r2, r3
 8006684:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	6a1a      	ldr	r2, [r3, #32]
 800668a:	697b      	ldr	r3, [r7, #20]
 800668c:	43db      	mvns	r3, r3
 800668e:	401a      	ands	r2, r3
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	6a1a      	ldr	r2, [r3, #32]
 8006698:	68bb      	ldr	r3, [r7, #8]
 800669a:	f003 031f 	and.w	r3, r3, #31
 800669e:	6879      	ldr	r1, [r7, #4]
 80066a0:	fa01 f303 	lsl.w	r3, r1, r3
 80066a4:	431a      	orrs	r2, r3
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	621a      	str	r2, [r3, #32]
}
 80066aa:	bf00      	nop
 80066ac:	371c      	adds	r7, #28
 80066ae:	46bd      	mov	sp, r7
 80066b0:	bc80      	pop	{r7}
 80066b2:	4770      	bx	lr

080066b4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80066b4:	b480      	push	{r7}
 80066b6:	b085      	sub	sp, #20
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	6078      	str	r0, [r7, #4]
 80066bc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80066c4:	2b01      	cmp	r3, #1
 80066c6:	d101      	bne.n	80066cc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80066c8:	2302      	movs	r3, #2
 80066ca:	e046      	b.n	800675a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	2201      	movs	r2, #1
 80066d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	2202      	movs	r2, #2
 80066d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	685b      	ldr	r3, [r3, #4]
 80066e2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	689b      	ldr	r3, [r3, #8]
 80066ea:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066f2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80066f4:	683b      	ldr	r3, [r7, #0]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	68fa      	ldr	r2, [r7, #12]
 80066fa:	4313      	orrs	r3, r2
 80066fc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	68fa      	ldr	r2, [r7, #12]
 8006704:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	4a16      	ldr	r2, [pc, #88]	; (8006764 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800670c:	4293      	cmp	r3, r2
 800670e:	d00e      	beq.n	800672e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006718:	d009      	beq.n	800672e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	4a12      	ldr	r2, [pc, #72]	; (8006768 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8006720:	4293      	cmp	r3, r2
 8006722:	d004      	beq.n	800672e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	4a10      	ldr	r2, [pc, #64]	; (800676c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800672a:	4293      	cmp	r3, r2
 800672c:	d10c      	bne.n	8006748 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800672e:	68bb      	ldr	r3, [r7, #8]
 8006730:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006734:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006736:	683b      	ldr	r3, [r7, #0]
 8006738:	685b      	ldr	r3, [r3, #4]
 800673a:	68ba      	ldr	r2, [r7, #8]
 800673c:	4313      	orrs	r3, r2
 800673e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	68ba      	ldr	r2, [r7, #8]
 8006746:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	2201      	movs	r2, #1
 800674c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	2200      	movs	r2, #0
 8006754:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006758:	2300      	movs	r3, #0
}
 800675a:	4618      	mov	r0, r3
 800675c:	3714      	adds	r7, #20
 800675e:	46bd      	mov	sp, r7
 8006760:	bc80      	pop	{r7}
 8006762:	4770      	bx	lr
 8006764:	40012c00 	.word	0x40012c00
 8006768:	40000400 	.word	0x40000400
 800676c:	40000800 	.word	0x40000800

08006770 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006770:	b480      	push	{r7}
 8006772:	b085      	sub	sp, #20
 8006774:	af00      	add	r7, sp, #0
 8006776:	6078      	str	r0, [r7, #4]
 8006778:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800677a:	2300      	movs	r3, #0
 800677c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006784:	2b01      	cmp	r3, #1
 8006786:	d101      	bne.n	800678c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006788:	2302      	movs	r3, #2
 800678a:	e03d      	b.n	8006808 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	2201      	movs	r2, #1
 8006790:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800679a:	683b      	ldr	r3, [r7, #0]
 800679c:	68db      	ldr	r3, [r3, #12]
 800679e:	4313      	orrs	r3, r2
 80067a0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80067a8:	683b      	ldr	r3, [r7, #0]
 80067aa:	689b      	ldr	r3, [r3, #8]
 80067ac:	4313      	orrs	r3, r2
 80067ae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80067b6:	683b      	ldr	r3, [r7, #0]
 80067b8:	685b      	ldr	r3, [r3, #4]
 80067ba:	4313      	orrs	r3, r2
 80067bc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80067c4:	683b      	ldr	r3, [r7, #0]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	4313      	orrs	r3, r2
 80067ca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80067d2:	683b      	ldr	r3, [r7, #0]
 80067d4:	691b      	ldr	r3, [r3, #16]
 80067d6:	4313      	orrs	r3, r2
 80067d8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80067e0:	683b      	ldr	r3, [r7, #0]
 80067e2:	695b      	ldr	r3, [r3, #20]
 80067e4:	4313      	orrs	r3, r2
 80067e6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80067ee:	683b      	ldr	r3, [r7, #0]
 80067f0:	69db      	ldr	r3, [r3, #28]
 80067f2:	4313      	orrs	r3, r2
 80067f4:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	68fa      	ldr	r2, [r7, #12]
 80067fc:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	2200      	movs	r2, #0
 8006802:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006806:	2300      	movs	r3, #0
}
 8006808:	4618      	mov	r0, r3
 800680a:	3714      	adds	r7, #20
 800680c:	46bd      	mov	sp, r7
 800680e:	bc80      	pop	{r7}
 8006810:	4770      	bx	lr

08006812 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006812:	b480      	push	{r7}
 8006814:	b083      	sub	sp, #12
 8006816:	af00      	add	r7, sp, #0
 8006818:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800681a:	bf00      	nop
 800681c:	370c      	adds	r7, #12
 800681e:	46bd      	mov	sp, r7
 8006820:	bc80      	pop	{r7}
 8006822:	4770      	bx	lr

08006824 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006824:	b480      	push	{r7}
 8006826:	b083      	sub	sp, #12
 8006828:	af00      	add	r7, sp, #0
 800682a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800682c:	bf00      	nop
 800682e:	370c      	adds	r7, #12
 8006830:	46bd      	mov	sp, r7
 8006832:	bc80      	pop	{r7}
 8006834:	4770      	bx	lr

08006836 <memset>:
 8006836:	4603      	mov	r3, r0
 8006838:	4402      	add	r2, r0
 800683a:	4293      	cmp	r3, r2
 800683c:	d100      	bne.n	8006840 <memset+0xa>
 800683e:	4770      	bx	lr
 8006840:	f803 1b01 	strb.w	r1, [r3], #1
 8006844:	e7f9      	b.n	800683a <memset+0x4>
	...

08006848 <__errno>:
 8006848:	4b01      	ldr	r3, [pc, #4]	; (8006850 <__errno+0x8>)
 800684a:	6818      	ldr	r0, [r3, #0]
 800684c:	4770      	bx	lr
 800684e:	bf00      	nop
 8006850:	20000108 	.word	0x20000108

08006854 <__libc_init_array>:
 8006854:	b570      	push	{r4, r5, r6, lr}
 8006856:	2600      	movs	r6, #0
 8006858:	4d0c      	ldr	r5, [pc, #48]	; (800688c <__libc_init_array+0x38>)
 800685a:	4c0d      	ldr	r4, [pc, #52]	; (8006890 <__libc_init_array+0x3c>)
 800685c:	1b64      	subs	r4, r4, r5
 800685e:	10a4      	asrs	r4, r4, #2
 8006860:	42a6      	cmp	r6, r4
 8006862:	d109      	bne.n	8006878 <__libc_init_array+0x24>
 8006864:	f001 fa52 	bl	8007d0c <_init>
 8006868:	2600      	movs	r6, #0
 800686a:	4d0a      	ldr	r5, [pc, #40]	; (8006894 <__libc_init_array+0x40>)
 800686c:	4c0a      	ldr	r4, [pc, #40]	; (8006898 <__libc_init_array+0x44>)
 800686e:	1b64      	subs	r4, r4, r5
 8006870:	10a4      	asrs	r4, r4, #2
 8006872:	42a6      	cmp	r6, r4
 8006874:	d105      	bne.n	8006882 <__libc_init_array+0x2e>
 8006876:	bd70      	pop	{r4, r5, r6, pc}
 8006878:	f855 3b04 	ldr.w	r3, [r5], #4
 800687c:	4798      	blx	r3
 800687e:	3601      	adds	r6, #1
 8006880:	e7ee      	b.n	8006860 <__libc_init_array+0xc>
 8006882:	f855 3b04 	ldr.w	r3, [r5], #4
 8006886:	4798      	blx	r3
 8006888:	3601      	adds	r6, #1
 800688a:	e7f2      	b.n	8006872 <__libc_init_array+0x1e>
 800688c:	08007dc0 	.word	0x08007dc0
 8006890:	08007dc0 	.word	0x08007dc0
 8006894:	08007dc0 	.word	0x08007dc0
 8006898:	08007dc4 	.word	0x08007dc4

0800689c <atan2>:
 800689c:	f000 bb14 	b.w	8006ec8 <__ieee754_atan2>

080068a0 <pow>:
 80068a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80068a4:	4614      	mov	r4, r2
 80068a6:	461d      	mov	r5, r3
 80068a8:	4680      	mov	r8, r0
 80068aa:	4689      	mov	r9, r1
 80068ac:	f000 fbd8 	bl	8007060 <__ieee754_pow>
 80068b0:	4622      	mov	r2, r4
 80068b2:	4606      	mov	r6, r0
 80068b4:	460f      	mov	r7, r1
 80068b6:	462b      	mov	r3, r5
 80068b8:	4620      	mov	r0, r4
 80068ba:	4629      	mov	r1, r5
 80068bc:	f7fa f87e 	bl	80009bc <__aeabi_dcmpun>
 80068c0:	b978      	cbnz	r0, 80068e2 <pow+0x42>
 80068c2:	2200      	movs	r2, #0
 80068c4:	2300      	movs	r3, #0
 80068c6:	4640      	mov	r0, r8
 80068c8:	4649      	mov	r1, r9
 80068ca:	f7fa f845 	bl	8000958 <__aeabi_dcmpeq>
 80068ce:	b1d8      	cbz	r0, 8006908 <pow+0x68>
 80068d0:	2200      	movs	r2, #0
 80068d2:	2300      	movs	r3, #0
 80068d4:	4620      	mov	r0, r4
 80068d6:	4629      	mov	r1, r5
 80068d8:	f7fa f83e 	bl	8000958 <__aeabi_dcmpeq>
 80068dc:	b128      	cbz	r0, 80068ea <pow+0x4a>
 80068de:	2600      	movs	r6, #0
 80068e0:	4f25      	ldr	r7, [pc, #148]	; (8006978 <pow+0xd8>)
 80068e2:	4630      	mov	r0, r6
 80068e4:	4639      	mov	r1, r7
 80068e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80068ea:	4620      	mov	r0, r4
 80068ec:	4629      	mov	r1, r5
 80068ee:	f000 f9f7 	bl	8006ce0 <finite>
 80068f2:	2800      	cmp	r0, #0
 80068f4:	d0f5      	beq.n	80068e2 <pow+0x42>
 80068f6:	4620      	mov	r0, r4
 80068f8:	4629      	mov	r1, r5
 80068fa:	2200      	movs	r2, #0
 80068fc:	2300      	movs	r3, #0
 80068fe:	f7fa f835 	bl	800096c <__aeabi_dcmplt>
 8006902:	2800      	cmp	r0, #0
 8006904:	d0ed      	beq.n	80068e2 <pow+0x42>
 8006906:	e02c      	b.n	8006962 <pow+0xc2>
 8006908:	4630      	mov	r0, r6
 800690a:	4639      	mov	r1, r7
 800690c:	f000 f9e8 	bl	8006ce0 <finite>
 8006910:	b1a0      	cbz	r0, 800693c <pow+0x9c>
 8006912:	2200      	movs	r2, #0
 8006914:	2300      	movs	r3, #0
 8006916:	4630      	mov	r0, r6
 8006918:	4639      	mov	r1, r7
 800691a:	f7fa f81d 	bl	8000958 <__aeabi_dcmpeq>
 800691e:	2800      	cmp	r0, #0
 8006920:	d0df      	beq.n	80068e2 <pow+0x42>
 8006922:	4640      	mov	r0, r8
 8006924:	4649      	mov	r1, r9
 8006926:	f000 f9db 	bl	8006ce0 <finite>
 800692a:	2800      	cmp	r0, #0
 800692c:	d0d9      	beq.n	80068e2 <pow+0x42>
 800692e:	4620      	mov	r0, r4
 8006930:	4629      	mov	r1, r5
 8006932:	f000 f9d5 	bl	8006ce0 <finite>
 8006936:	2800      	cmp	r0, #0
 8006938:	d0d3      	beq.n	80068e2 <pow+0x42>
 800693a:	e012      	b.n	8006962 <pow+0xc2>
 800693c:	4640      	mov	r0, r8
 800693e:	4649      	mov	r1, r9
 8006940:	f000 f9ce 	bl	8006ce0 <finite>
 8006944:	2800      	cmp	r0, #0
 8006946:	d0e4      	beq.n	8006912 <pow+0x72>
 8006948:	4620      	mov	r0, r4
 800694a:	4629      	mov	r1, r5
 800694c:	f000 f9c8 	bl	8006ce0 <finite>
 8006950:	2800      	cmp	r0, #0
 8006952:	d0de      	beq.n	8006912 <pow+0x72>
 8006954:	4632      	mov	r2, r6
 8006956:	463b      	mov	r3, r7
 8006958:	4630      	mov	r0, r6
 800695a:	4639      	mov	r1, r7
 800695c:	f7fa f82e 	bl	80009bc <__aeabi_dcmpun>
 8006960:	b920      	cbnz	r0, 800696c <pow+0xcc>
 8006962:	f7ff ff71 	bl	8006848 <__errno>
 8006966:	2322      	movs	r3, #34	; 0x22
 8006968:	6003      	str	r3, [r0, #0]
 800696a:	e7ba      	b.n	80068e2 <pow+0x42>
 800696c:	f7ff ff6c 	bl	8006848 <__errno>
 8006970:	2321      	movs	r3, #33	; 0x21
 8006972:	6003      	str	r3, [r0, #0]
 8006974:	e7b5      	b.n	80068e2 <pow+0x42>
 8006976:	bf00      	nop
 8006978:	3ff00000 	.word	0x3ff00000

0800697c <sqrt>:
 800697c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800697e:	4604      	mov	r4, r0
 8006980:	460d      	mov	r5, r1
 8006982:	f000 f9b3 	bl	8006cec <__ieee754_sqrt>
 8006986:	4622      	mov	r2, r4
 8006988:	4606      	mov	r6, r0
 800698a:	460f      	mov	r7, r1
 800698c:	462b      	mov	r3, r5
 800698e:	4620      	mov	r0, r4
 8006990:	4629      	mov	r1, r5
 8006992:	f7fa f813 	bl	80009bc <__aeabi_dcmpun>
 8006996:	b930      	cbnz	r0, 80069a6 <sqrt+0x2a>
 8006998:	4620      	mov	r0, r4
 800699a:	4629      	mov	r1, r5
 800699c:	2200      	movs	r2, #0
 800699e:	2300      	movs	r3, #0
 80069a0:	f7f9 ffe4 	bl	800096c <__aeabi_dcmplt>
 80069a4:	b910      	cbnz	r0, 80069ac <sqrt+0x30>
 80069a6:	4630      	mov	r0, r6
 80069a8:	4639      	mov	r1, r7
 80069aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80069ac:	f7ff ff4c 	bl	8006848 <__errno>
 80069b0:	2200      	movs	r2, #0
 80069b2:	2300      	movs	r3, #0
 80069b4:	2121      	movs	r1, #33	; 0x21
 80069b6:	6001      	str	r1, [r0, #0]
 80069b8:	4610      	mov	r0, r2
 80069ba:	4619      	mov	r1, r3
 80069bc:	f7f9 fe8e 	bl	80006dc <__aeabi_ddiv>
 80069c0:	4606      	mov	r6, r0
 80069c2:	460f      	mov	r7, r1
 80069c4:	4630      	mov	r0, r6
 80069c6:	4639      	mov	r1, r7
 80069c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80069ca:	bf00      	nop
 80069cc:	0000      	movs	r0, r0
	...

080069d0 <atan>:
 80069d0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069d4:	4bb6      	ldr	r3, [pc, #728]	; (8006cb0 <atan+0x2e0>)
 80069d6:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80069da:	429e      	cmp	r6, r3
 80069dc:	4604      	mov	r4, r0
 80069de:	460d      	mov	r5, r1
 80069e0:	468a      	mov	sl, r1
 80069e2:	d916      	bls.n	8006a12 <atan+0x42>
 80069e4:	4bb3      	ldr	r3, [pc, #716]	; (8006cb4 <atan+0x2e4>)
 80069e6:	429e      	cmp	r6, r3
 80069e8:	d80b      	bhi.n	8006a02 <atan+0x32>
 80069ea:	d008      	beq.n	80069fe <atan+0x2e>
 80069ec:	f1ba 0f00 	cmp.w	sl, #0
 80069f0:	f340 80c2 	ble.w	8006b78 <atan+0x1a8>
 80069f4:	a192      	add	r1, pc, #584	; (adr r1, 8006c40 <atan+0x270>)
 80069f6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80069fa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80069fe:	2800      	cmp	r0, #0
 8006a00:	d0f4      	beq.n	80069ec <atan+0x1c>
 8006a02:	4622      	mov	r2, r4
 8006a04:	462b      	mov	r3, r5
 8006a06:	4620      	mov	r0, r4
 8006a08:	4629      	mov	r1, r5
 8006a0a:	f7f9 fb87 	bl	800011c <__adddf3>
 8006a0e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a12:	4ba9      	ldr	r3, [pc, #676]	; (8006cb8 <atan+0x2e8>)
 8006a14:	429e      	cmp	r6, r3
 8006a16:	f200 80b4 	bhi.w	8006b82 <atan+0x1b2>
 8006a1a:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8006a1e:	429e      	cmp	r6, r3
 8006a20:	f240 809b 	bls.w	8006b5a <atan+0x18a>
 8006a24:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 8006a28:	4622      	mov	r2, r4
 8006a2a:	462b      	mov	r3, r5
 8006a2c:	4620      	mov	r0, r4
 8006a2e:	4629      	mov	r1, r5
 8006a30:	f7f9 fd2a 	bl	8000488 <__aeabi_dmul>
 8006a34:	4602      	mov	r2, r0
 8006a36:	460b      	mov	r3, r1
 8006a38:	4680      	mov	r8, r0
 8006a3a:	4689      	mov	r9, r1
 8006a3c:	f7f9 fd24 	bl	8000488 <__aeabi_dmul>
 8006a40:	a381      	add	r3, pc, #516	; (adr r3, 8006c48 <atan+0x278>)
 8006a42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a46:	4606      	mov	r6, r0
 8006a48:	460f      	mov	r7, r1
 8006a4a:	f7f9 fd1d 	bl	8000488 <__aeabi_dmul>
 8006a4e:	a380      	add	r3, pc, #512	; (adr r3, 8006c50 <atan+0x280>)
 8006a50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a54:	f7f9 fb62 	bl	800011c <__adddf3>
 8006a58:	4632      	mov	r2, r6
 8006a5a:	463b      	mov	r3, r7
 8006a5c:	f7f9 fd14 	bl	8000488 <__aeabi_dmul>
 8006a60:	a37d      	add	r3, pc, #500	; (adr r3, 8006c58 <atan+0x288>)
 8006a62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a66:	f7f9 fb59 	bl	800011c <__adddf3>
 8006a6a:	4632      	mov	r2, r6
 8006a6c:	463b      	mov	r3, r7
 8006a6e:	f7f9 fd0b 	bl	8000488 <__aeabi_dmul>
 8006a72:	a37b      	add	r3, pc, #492	; (adr r3, 8006c60 <atan+0x290>)
 8006a74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a78:	f7f9 fb50 	bl	800011c <__adddf3>
 8006a7c:	4632      	mov	r2, r6
 8006a7e:	463b      	mov	r3, r7
 8006a80:	f7f9 fd02 	bl	8000488 <__aeabi_dmul>
 8006a84:	a378      	add	r3, pc, #480	; (adr r3, 8006c68 <atan+0x298>)
 8006a86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a8a:	f7f9 fb47 	bl	800011c <__adddf3>
 8006a8e:	4632      	mov	r2, r6
 8006a90:	463b      	mov	r3, r7
 8006a92:	f7f9 fcf9 	bl	8000488 <__aeabi_dmul>
 8006a96:	a376      	add	r3, pc, #472	; (adr r3, 8006c70 <atan+0x2a0>)
 8006a98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a9c:	f7f9 fb3e 	bl	800011c <__adddf3>
 8006aa0:	4642      	mov	r2, r8
 8006aa2:	464b      	mov	r3, r9
 8006aa4:	f7f9 fcf0 	bl	8000488 <__aeabi_dmul>
 8006aa8:	a373      	add	r3, pc, #460	; (adr r3, 8006c78 <atan+0x2a8>)
 8006aaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006aae:	4680      	mov	r8, r0
 8006ab0:	4689      	mov	r9, r1
 8006ab2:	4630      	mov	r0, r6
 8006ab4:	4639      	mov	r1, r7
 8006ab6:	f7f9 fce7 	bl	8000488 <__aeabi_dmul>
 8006aba:	a371      	add	r3, pc, #452	; (adr r3, 8006c80 <atan+0x2b0>)
 8006abc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ac0:	f7f9 fb2a 	bl	8000118 <__aeabi_dsub>
 8006ac4:	4632      	mov	r2, r6
 8006ac6:	463b      	mov	r3, r7
 8006ac8:	f7f9 fcde 	bl	8000488 <__aeabi_dmul>
 8006acc:	a36e      	add	r3, pc, #440	; (adr r3, 8006c88 <atan+0x2b8>)
 8006ace:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ad2:	f7f9 fb21 	bl	8000118 <__aeabi_dsub>
 8006ad6:	4632      	mov	r2, r6
 8006ad8:	463b      	mov	r3, r7
 8006ada:	f7f9 fcd5 	bl	8000488 <__aeabi_dmul>
 8006ade:	a36c      	add	r3, pc, #432	; (adr r3, 8006c90 <atan+0x2c0>)
 8006ae0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ae4:	f7f9 fb18 	bl	8000118 <__aeabi_dsub>
 8006ae8:	4632      	mov	r2, r6
 8006aea:	463b      	mov	r3, r7
 8006aec:	f7f9 fccc 	bl	8000488 <__aeabi_dmul>
 8006af0:	a369      	add	r3, pc, #420	; (adr r3, 8006c98 <atan+0x2c8>)
 8006af2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006af6:	f7f9 fb0f 	bl	8000118 <__aeabi_dsub>
 8006afa:	4632      	mov	r2, r6
 8006afc:	463b      	mov	r3, r7
 8006afe:	f7f9 fcc3 	bl	8000488 <__aeabi_dmul>
 8006b02:	4602      	mov	r2, r0
 8006b04:	460b      	mov	r3, r1
 8006b06:	4640      	mov	r0, r8
 8006b08:	4649      	mov	r1, r9
 8006b0a:	f7f9 fb07 	bl	800011c <__adddf3>
 8006b0e:	4622      	mov	r2, r4
 8006b10:	462b      	mov	r3, r5
 8006b12:	f7f9 fcb9 	bl	8000488 <__aeabi_dmul>
 8006b16:	f1bb 3fff 	cmp.w	fp, #4294967295	; 0xffffffff
 8006b1a:	4602      	mov	r2, r0
 8006b1c:	460b      	mov	r3, r1
 8006b1e:	d04f      	beq.n	8006bc0 <atan+0x1f0>
 8006b20:	4b66      	ldr	r3, [pc, #408]	; (8006cbc <atan+0x2ec>)
 8006b22:	4e67      	ldr	r6, [pc, #412]	; (8006cc0 <atan+0x2f0>)
 8006b24:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006b28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b2c:	f7f9 faf4 	bl	8000118 <__aeabi_dsub>
 8006b30:	4622      	mov	r2, r4
 8006b32:	462b      	mov	r3, r5
 8006b34:	f7f9 faf0 	bl	8000118 <__aeabi_dsub>
 8006b38:	eb06 06cb 	add.w	r6, r6, fp, lsl #3
 8006b3c:	4602      	mov	r2, r0
 8006b3e:	460b      	mov	r3, r1
 8006b40:	e9d6 0100 	ldrd	r0, r1, [r6]
 8006b44:	f7f9 fae8 	bl	8000118 <__aeabi_dsub>
 8006b48:	f1ba 0f00 	cmp.w	sl, #0
 8006b4c:	f6bf af5f 	bge.w	8006a0e <atan+0x3e>
 8006b50:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006b54:	4619      	mov	r1, r3
 8006b56:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b5a:	a351      	add	r3, pc, #324	; (adr r3, 8006ca0 <atan+0x2d0>)
 8006b5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b60:	f7f9 fadc 	bl	800011c <__adddf3>
 8006b64:	2200      	movs	r2, #0
 8006b66:	4b57      	ldr	r3, [pc, #348]	; (8006cc4 <atan+0x2f4>)
 8006b68:	f7f9 ff1e 	bl	80009a8 <__aeabi_dcmpgt>
 8006b6c:	2800      	cmp	r0, #0
 8006b6e:	f43f af59 	beq.w	8006a24 <atan+0x54>
 8006b72:	4620      	mov	r0, r4
 8006b74:	4629      	mov	r1, r5
 8006b76:	e74a      	b.n	8006a0e <atan+0x3e>
 8006b78:	a14b      	add	r1, pc, #300	; (adr r1, 8006ca8 <atan+0x2d8>)
 8006b7a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006b7e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b82:	f000 f8a9 	bl	8006cd8 <fabs>
 8006b86:	4b50      	ldr	r3, [pc, #320]	; (8006cc8 <atan+0x2f8>)
 8006b88:	4604      	mov	r4, r0
 8006b8a:	429e      	cmp	r6, r3
 8006b8c:	460d      	mov	r5, r1
 8006b8e:	d81d      	bhi.n	8006bcc <atan+0x1fc>
 8006b90:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8006b94:	429e      	cmp	r6, r3
 8006b96:	d844      	bhi.n	8006c22 <atan+0x252>
 8006b98:	4602      	mov	r2, r0
 8006b9a:	460b      	mov	r3, r1
 8006b9c:	f7f9 fabe 	bl	800011c <__adddf3>
 8006ba0:	2200      	movs	r2, #0
 8006ba2:	4b48      	ldr	r3, [pc, #288]	; (8006cc4 <atan+0x2f4>)
 8006ba4:	f7f9 fab8 	bl	8000118 <__aeabi_dsub>
 8006ba8:	4602      	mov	r2, r0
 8006baa:	460b      	mov	r3, r1
 8006bac:	4620      	mov	r0, r4
 8006bae:	4629      	mov	r1, r5
 8006bb0:	4614      	mov	r4, r2
 8006bb2:	461d      	mov	r5, r3
 8006bb4:	f04f 0b00 	mov.w	fp, #0
 8006bb8:	2200      	movs	r2, #0
 8006bba:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006bbe:	e01a      	b.n	8006bf6 <atan+0x226>
 8006bc0:	4620      	mov	r0, r4
 8006bc2:	4629      	mov	r1, r5
 8006bc4:	f7f9 faa8 	bl	8000118 <__aeabi_dsub>
 8006bc8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006bcc:	4b3f      	ldr	r3, [pc, #252]	; (8006ccc <atan+0x2fc>)
 8006bce:	429e      	cmp	r6, r3
 8006bd0:	d21c      	bcs.n	8006c0c <atan+0x23c>
 8006bd2:	2200      	movs	r2, #0
 8006bd4:	4b3e      	ldr	r3, [pc, #248]	; (8006cd0 <atan+0x300>)
 8006bd6:	f7f9 fa9f 	bl	8000118 <__aeabi_dsub>
 8006bda:	4602      	mov	r2, r0
 8006bdc:	460b      	mov	r3, r1
 8006bde:	4620      	mov	r0, r4
 8006be0:	4629      	mov	r1, r5
 8006be2:	4614      	mov	r4, r2
 8006be4:	461d      	mov	r5, r3
 8006be6:	2200      	movs	r2, #0
 8006be8:	4b39      	ldr	r3, [pc, #228]	; (8006cd0 <atan+0x300>)
 8006bea:	f04f 0b02 	mov.w	fp, #2
 8006bee:	f7f9 fc4b 	bl	8000488 <__aeabi_dmul>
 8006bf2:	2200      	movs	r2, #0
 8006bf4:	4b33      	ldr	r3, [pc, #204]	; (8006cc4 <atan+0x2f4>)
 8006bf6:	f7f9 fa91 	bl	800011c <__adddf3>
 8006bfa:	4602      	mov	r2, r0
 8006bfc:	460b      	mov	r3, r1
 8006bfe:	4620      	mov	r0, r4
 8006c00:	4629      	mov	r1, r5
 8006c02:	f7f9 fd6b 	bl	80006dc <__aeabi_ddiv>
 8006c06:	4604      	mov	r4, r0
 8006c08:	460d      	mov	r5, r1
 8006c0a:	e70d      	b.n	8006a28 <atan+0x58>
 8006c0c:	4602      	mov	r2, r0
 8006c0e:	460b      	mov	r3, r1
 8006c10:	2000      	movs	r0, #0
 8006c12:	4930      	ldr	r1, [pc, #192]	; (8006cd4 <atan+0x304>)
 8006c14:	f7f9 fd62 	bl	80006dc <__aeabi_ddiv>
 8006c18:	f04f 0b03 	mov.w	fp, #3
 8006c1c:	4604      	mov	r4, r0
 8006c1e:	460d      	mov	r5, r1
 8006c20:	e702      	b.n	8006a28 <atan+0x58>
 8006c22:	2200      	movs	r2, #0
 8006c24:	4b27      	ldr	r3, [pc, #156]	; (8006cc4 <atan+0x2f4>)
 8006c26:	f7f9 fa77 	bl	8000118 <__aeabi_dsub>
 8006c2a:	4602      	mov	r2, r0
 8006c2c:	460b      	mov	r3, r1
 8006c2e:	4620      	mov	r0, r4
 8006c30:	4629      	mov	r1, r5
 8006c32:	f04f 0b01 	mov.w	fp, #1
 8006c36:	4614      	mov	r4, r2
 8006c38:	461d      	mov	r5, r3
 8006c3a:	e7da      	b.n	8006bf2 <atan+0x222>
 8006c3c:	f3af 8000 	nop.w
 8006c40:	54442d18 	.word	0x54442d18
 8006c44:	3ff921fb 	.word	0x3ff921fb
 8006c48:	e322da11 	.word	0xe322da11
 8006c4c:	3f90ad3a 	.word	0x3f90ad3a
 8006c50:	24760deb 	.word	0x24760deb
 8006c54:	3fa97b4b 	.word	0x3fa97b4b
 8006c58:	a0d03d51 	.word	0xa0d03d51
 8006c5c:	3fb10d66 	.word	0x3fb10d66
 8006c60:	c54c206e 	.word	0xc54c206e
 8006c64:	3fb745cd 	.word	0x3fb745cd
 8006c68:	920083ff 	.word	0x920083ff
 8006c6c:	3fc24924 	.word	0x3fc24924
 8006c70:	5555550d 	.word	0x5555550d
 8006c74:	3fd55555 	.word	0x3fd55555
 8006c78:	2c6a6c2f 	.word	0x2c6a6c2f
 8006c7c:	bfa2b444 	.word	0xbfa2b444
 8006c80:	52defd9a 	.word	0x52defd9a
 8006c84:	3fadde2d 	.word	0x3fadde2d
 8006c88:	af749a6d 	.word	0xaf749a6d
 8006c8c:	3fb3b0f2 	.word	0x3fb3b0f2
 8006c90:	fe231671 	.word	0xfe231671
 8006c94:	3fbc71c6 	.word	0x3fbc71c6
 8006c98:	9998ebc4 	.word	0x9998ebc4
 8006c9c:	3fc99999 	.word	0x3fc99999
 8006ca0:	8800759c 	.word	0x8800759c
 8006ca4:	7e37e43c 	.word	0x7e37e43c
 8006ca8:	54442d18 	.word	0x54442d18
 8006cac:	bff921fb 	.word	0xbff921fb
 8006cb0:	440fffff 	.word	0x440fffff
 8006cb4:	7ff00000 	.word	0x7ff00000
 8006cb8:	3fdbffff 	.word	0x3fdbffff
 8006cbc:	08007d50 	.word	0x08007d50
 8006cc0:	08007d70 	.word	0x08007d70
 8006cc4:	3ff00000 	.word	0x3ff00000
 8006cc8:	3ff2ffff 	.word	0x3ff2ffff
 8006ccc:	40038000 	.word	0x40038000
 8006cd0:	3ff80000 	.word	0x3ff80000
 8006cd4:	bff00000 	.word	0xbff00000

08006cd8 <fabs>:
 8006cd8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8006cdc:	4619      	mov	r1, r3
 8006cde:	4770      	bx	lr

08006ce0 <finite>:
 8006ce0:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
 8006ce4:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8006ce8:	0fc0      	lsrs	r0, r0, #31
 8006cea:	4770      	bx	lr

08006cec <__ieee754_sqrt>:
 8006cec:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006cf0:	4f72      	ldr	r7, [pc, #456]	; (8006ebc <__ieee754_sqrt+0x1d0>)
 8006cf2:	4604      	mov	r4, r0
 8006cf4:	438f      	bics	r7, r1
 8006cf6:	460d      	mov	r5, r1
 8006cf8:	f000 80b2 	beq.w	8006e60 <__ieee754_sqrt+0x174>
 8006cfc:	2900      	cmp	r1, #0
 8006cfe:	460b      	mov	r3, r1
 8006d00:	4606      	mov	r6, r0
 8006d02:	4602      	mov	r2, r0
 8006d04:	dd55      	ble.n	8006db2 <__ieee754_sqrt+0xc6>
 8006d06:	1508      	asrs	r0, r1, #20
 8006d08:	f000 809b 	beq.w	8006e42 <__ieee754_sqrt+0x156>
 8006d0c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006d10:	07c1      	lsls	r1, r0, #31
 8006d12:	f2a0 37ff 	subw	r7, r0, #1023	; 0x3ff
 8006d16:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006d1a:	d403      	bmi.n	8006d24 <__ieee754_sqrt+0x38>
 8006d1c:	0fd1      	lsrs	r1, r2, #31
 8006d1e:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 8006d22:	0052      	lsls	r2, r2, #1
 8006d24:	2600      	movs	r6, #0
 8006d26:	2416      	movs	r4, #22
 8006d28:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006d2c:	46b4      	mov	ip, r6
 8006d2e:	005b      	lsls	r3, r3, #1
 8006d30:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8006d34:	107f      	asrs	r7, r7, #1
 8006d36:	0052      	lsls	r2, r2, #1
 8006d38:	eb0c 0001 	add.w	r0, ip, r1
 8006d3c:	4298      	cmp	r0, r3
 8006d3e:	dc03      	bgt.n	8006d48 <__ieee754_sqrt+0x5c>
 8006d40:	1a1b      	subs	r3, r3, r0
 8006d42:	eb01 0c00 	add.w	ip, r1, r0
 8006d46:	440e      	add	r6, r1
 8006d48:	005b      	lsls	r3, r3, #1
 8006d4a:	3c01      	subs	r4, #1
 8006d4c:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8006d50:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8006d54:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8006d58:	d1ee      	bne.n	8006d38 <__ieee754_sqrt+0x4c>
 8006d5a:	2520      	movs	r5, #32
 8006d5c:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8006d60:	46a0      	mov	r8, r4
 8006d62:	e00a      	b.n	8006d7a <__ieee754_sqrt+0x8e>
 8006d64:	d039      	beq.n	8006dda <__ieee754_sqrt+0xee>
 8006d66:	0059      	lsls	r1, r3, #1
 8006d68:	eb01 71d2 	add.w	r1, r1, r2, lsr #31
 8006d6c:	3d01      	subs	r5, #1
 8006d6e:	460b      	mov	r3, r1
 8006d70:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8006d74:	ea4f 0050 	mov.w	r0, r0, lsr #1
 8006d78:	d03b      	beq.n	8006df2 <__ieee754_sqrt+0x106>
 8006d7a:	459c      	cmp	ip, r3
 8006d7c:	eb08 0e00 	add.w	lr, r8, r0
 8006d80:	daf0      	bge.n	8006d64 <__ieee754_sqrt+0x78>
 8006d82:	f1be 0f00 	cmp.w	lr, #0
 8006d86:	eb0e 0800 	add.w	r8, lr, r0
 8006d8a:	db0c      	blt.n	8006da6 <__ieee754_sqrt+0xba>
 8006d8c:	46e1      	mov	r9, ip
 8006d8e:	eba3 010c 	sub.w	r1, r3, ip
 8006d92:	46cc      	mov	ip, r9
 8006d94:	4596      	cmp	lr, r2
 8006d96:	bf88      	it	hi
 8006d98:	f101 31ff 	addhi.w	r1, r1, #4294967295	; 0xffffffff
 8006d9c:	0049      	lsls	r1, r1, #1
 8006d9e:	eba2 020e 	sub.w	r2, r2, lr
 8006da2:	4404      	add	r4, r0
 8006da4:	e7e0      	b.n	8006d68 <__ieee754_sqrt+0x7c>
 8006da6:	f1b8 0f00 	cmp.w	r8, #0
 8006daa:	dbef      	blt.n	8006d8c <__ieee754_sqrt+0xa0>
 8006dac:	f10c 0901 	add.w	r9, ip, #1
 8006db0:	e7ed      	b.n	8006d8e <__ieee754_sqrt+0xa2>
 8006db2:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 8006db6:	4307      	orrs	r7, r0
 8006db8:	d03d      	beq.n	8006e36 <__ieee754_sqrt+0x14a>
 8006dba:	2900      	cmp	r1, #0
 8006dbc:	d173      	bne.n	8006ea6 <__ieee754_sqrt+0x1ba>
 8006dbe:	0ad1      	lsrs	r1, r2, #11
 8006dc0:	3b15      	subs	r3, #21
 8006dc2:	0552      	lsls	r2, r2, #21
 8006dc4:	2900      	cmp	r1, #0
 8006dc6:	d0fa      	beq.n	8006dbe <__ieee754_sqrt+0xd2>
 8006dc8:	02cd      	lsls	r5, r1, #11
 8006dca:	4618      	mov	r0, r3
 8006dcc:	4616      	mov	r6, r2
 8006dce:	460b      	mov	r3, r1
 8006dd0:	d537      	bpl.n	8006e42 <__ieee754_sqrt+0x156>
 8006dd2:	2420      	movs	r4, #32
 8006dd4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8006dd8:	e03e      	b.n	8006e58 <__ieee754_sqrt+0x16c>
 8006dda:	4596      	cmp	lr, r2
 8006ddc:	d902      	bls.n	8006de4 <__ieee754_sqrt+0xf8>
 8006dde:	ea4f 014c 	mov.w	r1, ip, lsl #1
 8006de2:	e7c1      	b.n	8006d68 <__ieee754_sqrt+0x7c>
 8006de4:	f1be 0f00 	cmp.w	lr, #0
 8006de8:	eb0e 0800 	add.w	r8, lr, r0
 8006dec:	db25      	blt.n	8006e3a <__ieee754_sqrt+0x14e>
 8006dee:	2100      	movs	r1, #0
 8006df0:	e7d5      	b.n	8006d9e <__ieee754_sqrt+0xb2>
 8006df2:	4311      	orrs	r1, r2
 8006df4:	d012      	beq.n	8006e1c <__ieee754_sqrt+0x130>
 8006df6:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006ec0 <__ieee754_sqrt+0x1d4>
 8006dfa:	f8df b0c8 	ldr.w	fp, [pc, #200]	; 8006ec4 <__ieee754_sqrt+0x1d8>
 8006dfe:	e9da 0100 	ldrd	r0, r1, [sl]
 8006e02:	e9db 2300 	ldrd	r2, r3, [fp]
 8006e06:	f7f9 f987 	bl	8000118 <__aeabi_dsub>
 8006e0a:	e9da 8900 	ldrd	r8, r9, [sl]
 8006e0e:	4602      	mov	r2, r0
 8006e10:	460b      	mov	r3, r1
 8006e12:	4640      	mov	r0, r8
 8006e14:	4649      	mov	r1, r9
 8006e16:	f7f9 fdb3 	bl	8000980 <__aeabi_dcmple>
 8006e1a:	bb58      	cbnz	r0, 8006e74 <__ieee754_sqrt+0x188>
 8006e1c:	0865      	lsrs	r5, r4, #1
 8006e1e:	07f2      	lsls	r2, r6, #31
 8006e20:	bf48      	it	mi
 8006e22:	f045 4500 	orrmi.w	r5, r5, #2147483648	; 0x80000000
 8006e26:	4628      	mov	r0, r5
 8006e28:	1073      	asrs	r3, r6, #1
 8006e2a:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8006e2e:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8006e32:	eb03 5107 	add.w	r1, r3, r7, lsl #20
 8006e36:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e3a:	f1b8 0f00 	cmp.w	r8, #0
 8006e3e:	dab5      	bge.n	8006dac <__ieee754_sqrt+0xc0>
 8006e40:	e7d5      	b.n	8006dee <__ieee754_sqrt+0x102>
 8006e42:	2200      	movs	r2, #0
 8006e44:	005b      	lsls	r3, r3, #1
 8006e46:	02dc      	lsls	r4, r3, #11
 8006e48:	4611      	mov	r1, r2
 8006e4a:	f102 0201 	add.w	r2, r2, #1
 8006e4e:	d5f9      	bpl.n	8006e44 <__ieee754_sqrt+0x158>
 8006e50:	f1c2 0420 	rsb	r4, r2, #32
 8006e54:	fa06 f202 	lsl.w	r2, r6, r2
 8006e58:	40e6      	lsrs	r6, r4
 8006e5a:	1a40      	subs	r0, r0, r1
 8006e5c:	4333      	orrs	r3, r6
 8006e5e:	e755      	b.n	8006d0c <__ieee754_sqrt+0x20>
 8006e60:	4602      	mov	r2, r0
 8006e62:	460b      	mov	r3, r1
 8006e64:	f7f9 fb10 	bl	8000488 <__aeabi_dmul>
 8006e68:	4622      	mov	r2, r4
 8006e6a:	462b      	mov	r3, r5
 8006e6c:	f7f9 f956 	bl	800011c <__adddf3>
 8006e70:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e74:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 8006e78:	e9da 0100 	ldrd	r0, r1, [sl]
 8006e7c:	e9db 2300 	ldrd	r2, r3, [fp]
 8006e80:	d018      	beq.n	8006eb4 <__ieee754_sqrt+0x1c8>
 8006e82:	e9da 8900 	ldrd	r8, r9, [sl]
 8006e86:	f7f9 f949 	bl	800011c <__adddf3>
 8006e8a:	4602      	mov	r2, r0
 8006e8c:	460b      	mov	r3, r1
 8006e8e:	4640      	mov	r0, r8
 8006e90:	4649      	mov	r1, r9
 8006e92:	f7f9 fd6b 	bl	800096c <__aeabi_dcmplt>
 8006e96:	b178      	cbz	r0, 8006eb8 <__ieee754_sqrt+0x1cc>
 8006e98:	1ca1      	adds	r1, r4, #2
 8006e9a:	f104 0502 	add.w	r5, r4, #2
 8006e9e:	bf08      	it	eq
 8006ea0:	3601      	addeq	r6, #1
 8006ea2:	086d      	lsrs	r5, r5, #1
 8006ea4:	e7bb      	b.n	8006e1e <__ieee754_sqrt+0x132>
 8006ea6:	f7f9 f937 	bl	8000118 <__aeabi_dsub>
 8006eaa:	4602      	mov	r2, r0
 8006eac:	460b      	mov	r3, r1
 8006eae:	f7f9 fc15 	bl	80006dc <__aeabi_ddiv>
 8006eb2:	e7c0      	b.n	8006e36 <__ieee754_sqrt+0x14a>
 8006eb4:	3601      	adds	r6, #1
 8006eb6:	e7b2      	b.n	8006e1e <__ieee754_sqrt+0x132>
 8006eb8:	3401      	adds	r4, #1
 8006eba:	e7af      	b.n	8006e1c <__ieee754_sqrt+0x130>
 8006ebc:	7ff00000 	.word	0x7ff00000
 8006ec0:	20000160 	.word	0x20000160
 8006ec4:	20000158 	.word	0x20000158

08006ec8 <__ieee754_atan2>:
 8006ec8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ecc:	4699      	mov	r9, r3
 8006ece:	4253      	negs	r3, r2
 8006ed0:	4f5f      	ldr	r7, [pc, #380]	; (8007050 <__ieee754_atan2+0x188>)
 8006ed2:	4313      	orrs	r3, r2
 8006ed4:	f029 4e00 	bic.w	lr, r9, #2147483648	; 0x80000000
 8006ed8:	ea4e 73d3 	orr.w	r3, lr, r3, lsr #31
 8006edc:	42bb      	cmp	r3, r7
 8006ede:	4604      	mov	r4, r0
 8006ee0:	460d      	mov	r5, r1
 8006ee2:	4690      	mov	r8, r2
 8006ee4:	d83d      	bhi.n	8006f62 <__ieee754_atan2+0x9a>
 8006ee6:	4246      	negs	r6, r0
 8006ee8:	4306      	orrs	r6, r0
 8006eea:	f021 4a00 	bic.w	sl, r1, #2147483648	; 0x80000000
 8006eee:	ea4a 76d6 	orr.w	r6, sl, r6, lsr #31
 8006ef2:	42be      	cmp	r6, r7
 8006ef4:	4603      	mov	r3, r0
 8006ef6:	468b      	mov	fp, r1
 8006ef8:	d833      	bhi.n	8006f62 <__ieee754_atan2+0x9a>
 8006efa:	f109 4640 	add.w	r6, r9, #3221225472	; 0xc0000000
 8006efe:	f506 1680 	add.w	r6, r6, #1048576	; 0x100000
 8006f02:	4316      	orrs	r6, r2
 8006f04:	d03d      	beq.n	8006f82 <__ieee754_atan2+0xba>
 8006f06:	ea4f 76a9 	mov.w	r6, r9, asr #30
 8006f0a:	f006 0602 	and.w	r6, r6, #2
 8006f0e:	ea5a 0303 	orrs.w	r3, sl, r3
 8006f12:	ea46 76d1 	orr.w	r6, r6, r1, lsr #31
 8006f16:	d02c      	beq.n	8006f72 <__ieee754_atan2+0xaa>
 8006f18:	ea5e 0202 	orrs.w	r2, lr, r2
 8006f1c:	d035      	beq.n	8006f8a <__ieee754_atan2+0xc2>
 8006f1e:	45be      	cmp	lr, r7
 8006f20:	d046      	beq.n	8006fb0 <__ieee754_atan2+0xe8>
 8006f22:	45ba      	cmp	sl, r7
 8006f24:	d031      	beq.n	8006f8a <__ieee754_atan2+0xc2>
 8006f26:	ebaa 0a0e 	sub.w	sl, sl, lr
 8006f2a:	f1ba 7f74 	cmp.w	sl, #63963136	; 0x3d00000
 8006f2e:	ea4f 532a 	mov.w	r3, sl, asr #20
 8006f32:	da39      	bge.n	8006fa8 <__ieee754_atan2+0xe0>
 8006f34:	f1b9 0f00 	cmp.w	r9, #0
 8006f38:	da46      	bge.n	8006fc8 <__ieee754_atan2+0x100>
 8006f3a:	333c      	adds	r3, #60	; 0x3c
 8006f3c:	da44      	bge.n	8006fc8 <__ieee754_atan2+0x100>
 8006f3e:	2000      	movs	r0, #0
 8006f40:	2100      	movs	r1, #0
 8006f42:	2e01      	cmp	r6, #1
 8006f44:	d058      	beq.n	8006ff8 <__ieee754_atan2+0x130>
 8006f46:	2e02      	cmp	r6, #2
 8006f48:	d049      	beq.n	8006fde <__ieee754_atan2+0x116>
 8006f4a:	b186      	cbz	r6, 8006f6e <__ieee754_atan2+0xa6>
 8006f4c:	a334      	add	r3, pc, #208	; (adr r3, 8007020 <__ieee754_atan2+0x158>)
 8006f4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f52:	f7f9 f8e1 	bl	8000118 <__aeabi_dsub>
 8006f56:	a334      	add	r3, pc, #208	; (adr r3, 8007028 <__ieee754_atan2+0x160>)
 8006f58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f5c:	f7f9 f8dc 	bl	8000118 <__aeabi_dsub>
 8006f60:	e005      	b.n	8006f6e <__ieee754_atan2+0xa6>
 8006f62:	4622      	mov	r2, r4
 8006f64:	462b      	mov	r3, r5
 8006f66:	4640      	mov	r0, r8
 8006f68:	4649      	mov	r1, r9
 8006f6a:	f7f9 f8d7 	bl	800011c <__adddf3>
 8006f6e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f72:	2e02      	cmp	r6, #2
 8006f74:	d010      	beq.n	8006f98 <__ieee754_atan2+0xd0>
 8006f76:	2e03      	cmp	r6, #3
 8006f78:	d1f9      	bne.n	8006f6e <__ieee754_atan2+0xa6>
 8006f7a:	a12d      	add	r1, pc, #180	; (adr r1, 8007030 <__ieee754_atan2+0x168>)
 8006f7c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006f80:	e7f5      	b.n	8006f6e <__ieee754_atan2+0xa6>
 8006f82:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f86:	f7ff bd23 	b.w	80069d0 <atan>
 8006f8a:	f1bb 0f00 	cmp.w	fp, #0
 8006f8e:	db07      	blt.n	8006fa0 <__ieee754_atan2+0xd8>
 8006f90:	a129      	add	r1, pc, #164	; (adr r1, 8007038 <__ieee754_atan2+0x170>)
 8006f92:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006f96:	e7ea      	b.n	8006f6e <__ieee754_atan2+0xa6>
 8006f98:	a123      	add	r1, pc, #140	; (adr r1, 8007028 <__ieee754_atan2+0x160>)
 8006f9a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006f9e:	e7e6      	b.n	8006f6e <__ieee754_atan2+0xa6>
 8006fa0:	a127      	add	r1, pc, #156	; (adr r1, 8007040 <__ieee754_atan2+0x178>)
 8006fa2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006fa6:	e7e2      	b.n	8006f6e <__ieee754_atan2+0xa6>
 8006fa8:	a123      	add	r1, pc, #140	; (adr r1, 8007038 <__ieee754_atan2+0x170>)
 8006faa:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006fae:	e7c8      	b.n	8006f42 <__ieee754_atan2+0x7a>
 8006fb0:	45f2      	cmp	sl, lr
 8006fb2:	f106 36ff 	add.w	r6, r6, #4294967295	; 0xffffffff
 8006fb6:	d023      	beq.n	8007000 <__ieee754_atan2+0x138>
 8006fb8:	2e02      	cmp	r6, #2
 8006fba:	d829      	bhi.n	8007010 <__ieee754_atan2+0x148>
 8006fbc:	4b25      	ldr	r3, [pc, #148]	; (8007054 <__ieee754_atan2+0x18c>)
 8006fbe:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8006fc2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006fc6:	e7d2      	b.n	8006f6e <__ieee754_atan2+0xa6>
 8006fc8:	4642      	mov	r2, r8
 8006fca:	464b      	mov	r3, r9
 8006fcc:	4620      	mov	r0, r4
 8006fce:	4629      	mov	r1, r5
 8006fd0:	f7f9 fb84 	bl	80006dc <__aeabi_ddiv>
 8006fd4:	f7ff fe80 	bl	8006cd8 <fabs>
 8006fd8:	f7ff fcfa 	bl	80069d0 <atan>
 8006fdc:	e7b1      	b.n	8006f42 <__ieee754_atan2+0x7a>
 8006fde:	a310      	add	r3, pc, #64	; (adr r3, 8007020 <__ieee754_atan2+0x158>)
 8006fe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fe4:	f7f9 f898 	bl	8000118 <__aeabi_dsub>
 8006fe8:	4602      	mov	r2, r0
 8006fea:	460b      	mov	r3, r1
 8006fec:	a10e      	add	r1, pc, #56	; (adr r1, 8007028 <__ieee754_atan2+0x160>)
 8006fee:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006ff2:	f7f9 f891 	bl	8000118 <__aeabi_dsub>
 8006ff6:	e7ba      	b.n	8006f6e <__ieee754_atan2+0xa6>
 8006ff8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006ffc:	4619      	mov	r1, r3
 8006ffe:	e7b6      	b.n	8006f6e <__ieee754_atan2+0xa6>
 8007000:	2e02      	cmp	r6, #2
 8007002:	d808      	bhi.n	8007016 <__ieee754_atan2+0x14e>
 8007004:	4b14      	ldr	r3, [pc, #80]	; (8007058 <__ieee754_atan2+0x190>)
 8007006:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800700a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800700e:	e7ae      	b.n	8006f6e <__ieee754_atan2+0xa6>
 8007010:	2000      	movs	r0, #0
 8007012:	2100      	movs	r1, #0
 8007014:	e7ab      	b.n	8006f6e <__ieee754_atan2+0xa6>
 8007016:	a10c      	add	r1, pc, #48	; (adr r1, 8007048 <__ieee754_atan2+0x180>)
 8007018:	e9d1 0100 	ldrd	r0, r1, [r1]
 800701c:	e7a7      	b.n	8006f6e <__ieee754_atan2+0xa6>
 800701e:	bf00      	nop
 8007020:	33145c07 	.word	0x33145c07
 8007024:	3ca1a626 	.word	0x3ca1a626
 8007028:	54442d18 	.word	0x54442d18
 800702c:	400921fb 	.word	0x400921fb
 8007030:	54442d18 	.word	0x54442d18
 8007034:	c00921fb 	.word	0xc00921fb
 8007038:	54442d18 	.word	0x54442d18
 800703c:	3ff921fb 	.word	0x3ff921fb
 8007040:	54442d18 	.word	0x54442d18
 8007044:	bff921fb 	.word	0xbff921fb
 8007048:	54442d18 	.word	0x54442d18
 800704c:	3fe921fb 	.word	0x3fe921fb
 8007050:	7ff00000 	.word	0x7ff00000
 8007054:	08007d90 	.word	0x08007d90
 8007058:	08007da8 	.word	0x08007da8
 800705c:	00000000 	.word	0x00000000

08007060 <__ieee754_pow>:
 8007060:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007064:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 8007068:	4606      	mov	r6, r0
 800706a:	ea59 0002 	orrs.w	r0, r9, r2
 800706e:	4614      	mov	r4, r2
 8007070:	461d      	mov	r5, r3
 8007072:	460f      	mov	r7, r1
 8007074:	b093      	sub	sp, #76	; 0x4c
 8007076:	d110      	bne.n	800709a <__ieee754_pow+0x3a>
 8007078:	19b3      	adds	r3, r6, r6
 800707a:	4926      	ldr	r1, [pc, #152]	; (8007114 <__ieee754_pow+0xb4>)
 800707c:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 8007080:	4152      	adcs	r2, r2
 8007082:	4298      	cmp	r0, r3
 8007084:	4191      	sbcs	r1, r2
 8007086:	d220      	bcs.n	80070ca <__ieee754_pow+0x6a>
 8007088:	4622      	mov	r2, r4
 800708a:	462b      	mov	r3, r5
 800708c:	4630      	mov	r0, r6
 800708e:	4639      	mov	r1, r7
 8007090:	f7f9 f844 	bl	800011c <__adddf3>
 8007094:	b013      	add	sp, #76	; 0x4c
 8007096:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800709a:	4611      	mov	r1, r2
 800709c:	4a1e      	ldr	r2, [pc, #120]	; (8007118 <__ieee754_pow+0xb8>)
 800709e:	f027 4b00 	bic.w	fp, r7, #2147483648	; 0x80000000
 80070a2:	4593      	cmp	fp, r2
 80070a4:	469a      	mov	sl, r3
 80070a6:	46b8      	mov	r8, r7
 80070a8:	4633      	mov	r3, r6
 80070aa:	d913      	bls.n	80070d4 <__ieee754_pow+0x74>
 80070ac:	f108 4840 	add.w	r8, r8, #3221225472	; 0xc0000000
 80070b0:	f508 1880 	add.w	r8, r8, #1048576	; 0x100000
 80070b4:	ea58 0803 	orrs.w	r8, r8, r3
 80070b8:	d1e6      	bne.n	8007088 <__ieee754_pow+0x28>
 80070ba:	1923      	adds	r3, r4, r4
 80070bc:	4915      	ldr	r1, [pc, #84]	; (8007114 <__ieee754_pow+0xb4>)
 80070be:	f485 2200 	eor.w	r2, r5, #524288	; 0x80000
 80070c2:	4152      	adcs	r2, r2
 80070c4:	4598      	cmp	r8, r3
 80070c6:	4191      	sbcs	r1, r2
 80070c8:	d3de      	bcc.n	8007088 <__ieee754_pow+0x28>
 80070ca:	2000      	movs	r0, #0
 80070cc:	4913      	ldr	r1, [pc, #76]	; (800711c <__ieee754_pow+0xbc>)
 80070ce:	b013      	add	sp, #76	; 0x4c
 80070d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070d4:	d015      	beq.n	8007102 <__ieee754_pow+0xa2>
 80070d6:	4591      	cmp	r9, r2
 80070d8:	d8e8      	bhi.n	80070ac <__ieee754_pow+0x4c>
 80070da:	465a      	mov	r2, fp
 80070dc:	f000 83d9 	beq.w	8007892 <__ieee754_pow+0x832>
 80070e0:	f1b8 0f00 	cmp.w	r8, #0
 80070e4:	db1c      	blt.n	8007120 <__ieee754_pow+0xc0>
 80070e6:	2900      	cmp	r1, #0
 80070e8:	f040 83e9 	bne.w	80078be <__ieee754_pow+0x85e>
 80070ec:	480b      	ldr	r0, [pc, #44]	; (800711c <__ieee754_pow+0xbc>)
 80070ee:	4581      	cmp	r9, r0
 80070f0:	f040 841c 	bne.w	800792c <__ieee754_pow+0x8cc>
 80070f4:	f1ba 0f00 	cmp.w	sl, #0
 80070f8:	f2c0 84d6 	blt.w	8007aa8 <__ieee754_pow+0xa48>
 80070fc:	4630      	mov	r0, r6
 80070fe:	4639      	mov	r1, r7
 8007100:	e7c8      	b.n	8007094 <__ieee754_pow+0x34>
 8007102:	2e00      	cmp	r6, #0
 8007104:	d1c0      	bne.n	8007088 <__ieee754_pow+0x28>
 8007106:	45d9      	cmp	r9, fp
 8007108:	d8be      	bhi.n	8007088 <__ieee754_pow+0x28>
 800710a:	f000 8442 	beq.w	8007992 <__ieee754_pow+0x932>
 800710e:	465a      	mov	r2, fp
 8007110:	e7e6      	b.n	80070e0 <__ieee754_pow+0x80>
 8007112:	bf00      	nop
 8007114:	fff00000 	.word	0xfff00000
 8007118:	7ff00000 	.word	0x7ff00000
 800711c:	3ff00000 	.word	0x3ff00000
 8007120:	48d3      	ldr	r0, [pc, #844]	; (8007470 <__ieee754_pow+0x410>)
 8007122:	4581      	cmp	r9, r0
 8007124:	f200 83df 	bhi.w	80078e6 <__ieee754_pow+0x886>
 8007128:	48d2      	ldr	r0, [pc, #840]	; (8007474 <__ieee754_pow+0x414>)
 800712a:	4581      	cmp	r9, r0
 800712c:	d90f      	bls.n	800714e <__ieee754_pow+0xee>
 800712e:	ea4f 5029 	mov.w	r0, r9, asr #20
 8007132:	f2a0 30ff 	subw	r0, r0, #1023	; 0x3ff
 8007136:	2814      	cmp	r0, #20
 8007138:	f340 849d 	ble.w	8007a76 <__ieee754_pow+0xa16>
 800713c:	f1c0 0034 	rsb	r0, r0, #52	; 0x34
 8007140:	fa21 fc00 	lsr.w	ip, r1, r0
 8007144:	fa0c f000 	lsl.w	r0, ip, r0
 8007148:	4288      	cmp	r0, r1
 800714a:	f000 8327 	beq.w	800779c <__ieee754_pow+0x73c>
 800714e:	2900      	cmp	r1, #0
 8007150:	f040 836a 	bne.w	8007828 <__ieee754_pow+0x7c8>
 8007154:	f1ba 4f80 	cmp.w	sl, #1073741824	; 0x40000000
 8007158:	f000 832c 	beq.w	80077b4 <__ieee754_pow+0x754>
 800715c:	9100      	str	r1, [sp, #0]
 800715e:	4630      	mov	r0, r6
 8007160:	4639      	mov	r1, r7
 8007162:	9204      	str	r2, [sp, #16]
 8007164:	9302      	str	r3, [sp, #8]
 8007166:	f7ff fdb7 	bl	8006cd8 <fabs>
 800716a:	9b02      	ldr	r3, [sp, #8]
 800716c:	9a04      	ldr	r2, [sp, #16]
 800716e:	2b00      	cmp	r3, #0
 8007170:	f000 8365 	beq.w	800783e <__ieee754_pow+0x7de>
 8007174:	f8dd c000 	ldr.w	ip, [sp]
 8007178:	ea4f 73d8 	mov.w	r3, r8, lsr #31
 800717c:	3b01      	subs	r3, #1
 800717e:	930a      	str	r3, [sp, #40]	; 0x28
 8007180:	ea5c 0303 	orrs.w	r3, ip, r3
 8007184:	f000 83ac 	beq.w	80078e0 <__ieee754_pow+0x880>
 8007188:	4bbb      	ldr	r3, [pc, #748]	; (8007478 <__ieee754_pow+0x418>)
 800718a:	4599      	cmp	r9, r3
 800718c:	f200 83bd 	bhi.w	800790a <__ieee754_pow+0x8aa>
 8007190:	4bba      	ldr	r3, [pc, #744]	; (800747c <__ieee754_pow+0x41c>)
 8007192:	ea08 0303 	and.w	r3, r8, r3
 8007196:	2b00      	cmp	r3, #0
 8007198:	f040 83ff 	bne.w	800799a <__ieee754_pow+0x93a>
 800719c:	2200      	movs	r2, #0
 800719e:	4bb8      	ldr	r3, [pc, #736]	; (8007480 <__ieee754_pow+0x420>)
 80071a0:	f7f9 f972 	bl	8000488 <__aeabi_dmul>
 80071a4:	f06f 0634 	mvn.w	r6, #52	; 0x34
 80071a8:	460a      	mov	r2, r1
 80071aa:	1513      	asrs	r3, r2, #20
 80071ac:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80071b0:	199f      	adds	r7, r3, r6
 80071b2:	4bb4      	ldr	r3, [pc, #720]	; (8007484 <__ieee754_pow+0x424>)
 80071b4:	f3c2 0213 	ubfx	r2, r2, #0, #20
 80071b8:	f042 567f 	orr.w	r6, r2, #1069547520	; 0x3fc00000
 80071bc:	429a      	cmp	r2, r3
 80071be:	970b      	str	r7, [sp, #44]	; 0x2c
 80071c0:	f446 1640 	orr.w	r6, r6, #3145728	; 0x300000
 80071c4:	dd07      	ble.n	80071d6 <__ieee754_pow+0x176>
 80071c6:	4bb0      	ldr	r3, [pc, #704]	; (8007488 <__ieee754_pow+0x428>)
 80071c8:	429a      	cmp	r2, r3
 80071ca:	f340 8480 	ble.w	8007ace <__ieee754_pow+0xa6e>
 80071ce:	3701      	adds	r7, #1
 80071d0:	970b      	str	r7, [sp, #44]	; 0x2c
 80071d2:	f5a6 1680 	sub.w	r6, r6, #1048576	; 0x100000
 80071d6:	2200      	movs	r2, #0
 80071d8:	2300      	movs	r3, #0
 80071da:	f04f 0800 	mov.w	r8, #0
 80071de:	2700      	movs	r7, #0
 80071e0:	f8df 92a8 	ldr.w	r9, [pc, #680]	; 800748c <__ieee754_pow+0x42c>
 80071e4:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80071e8:	e9cd 8906 	strd	r8, r9, [sp, #24]
 80071ec:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 80071f0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80071f4:	4631      	mov	r1, r6
 80071f6:	4682      	mov	sl, r0
 80071f8:	f7f8 ff8e 	bl	8000118 <__aeabi_dsub>
 80071fc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007200:	46b3      	mov	fp, r6
 8007202:	4680      	mov	r8, r0
 8007204:	4689      	mov	r9, r1
 8007206:	4650      	mov	r0, sl
 8007208:	4631      	mov	r1, r6
 800720a:	e9cd ab0c 	strd	sl, fp, [sp, #48]	; 0x30
 800720e:	f7f8 ff85 	bl	800011c <__adddf3>
 8007212:	4602      	mov	r2, r0
 8007214:	460b      	mov	r3, r1
 8007216:	2000      	movs	r0, #0
 8007218:	499c      	ldr	r1, [pc, #624]	; (800748c <__ieee754_pow+0x42c>)
 800721a:	f7f9 fa5f 	bl	80006dc <__aeabi_ddiv>
 800721e:	468c      	mov	ip, r1
 8007220:	4683      	mov	fp, r0
 8007222:	4663      	mov	r3, ip
 8007224:	465a      	mov	r2, fp
 8007226:	4640      	mov	r0, r8
 8007228:	4649      	mov	r1, r9
 800722a:	e9cd bc0e 	strd	fp, ip, [sp, #56]	; 0x38
 800722e:	f7f9 f92b 	bl	8000488 <__aeabi_dmul>
 8007232:	4682      	mov	sl, r0
 8007234:	468b      	mov	fp, r1
 8007236:	1073      	asrs	r3, r6, #1
 8007238:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800723c:	f503 2300 	add.w	r3, r3, #524288	; 0x80000
 8007240:	19d9      	adds	r1, r3, r7
 8007242:	460f      	mov	r7, r1
 8007244:	465a      	mov	r2, fp
 8007246:	4651      	mov	r1, sl
 8007248:	2300      	movs	r3, #0
 800724a:	2000      	movs	r0, #0
 800724c:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8007250:	9302      	str	r3, [sp, #8]
 8007252:	4606      	mov	r6, r0
 8007254:	4602      	mov	r2, r0
 8007256:	463b      	mov	r3, r7
 8007258:	e9cd ab04 	strd	sl, fp, [sp, #16]
 800725c:	e9dd ab02 	ldrd	sl, fp, [sp, #8]
 8007260:	4650      	mov	r0, sl
 8007262:	4659      	mov	r1, fp
 8007264:	f7f9 f910 	bl	8000488 <__aeabi_dmul>
 8007268:	4602      	mov	r2, r0
 800726a:	460b      	mov	r3, r1
 800726c:	4640      	mov	r0, r8
 800726e:	4649      	mov	r1, r9
 8007270:	f7f8 ff52 	bl	8000118 <__aeabi_dsub>
 8007274:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007278:	4680      	mov	r8, r0
 800727a:	4689      	mov	r9, r1
 800727c:	4630      	mov	r0, r6
 800727e:	4639      	mov	r1, r7
 8007280:	f7f8 ff4a 	bl	8000118 <__aeabi_dsub>
 8007284:	4602      	mov	r2, r0
 8007286:	460b      	mov	r3, r1
 8007288:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800728c:	f7f8 ff44 	bl	8000118 <__aeabi_dsub>
 8007290:	4652      	mov	r2, sl
 8007292:	465b      	mov	r3, fp
 8007294:	f7f9 f8f8 	bl	8000488 <__aeabi_dmul>
 8007298:	4602      	mov	r2, r0
 800729a:	460b      	mov	r3, r1
 800729c:	4640      	mov	r0, r8
 800729e:	4649      	mov	r1, r9
 80072a0:	f7f8 ff3a 	bl	8000118 <__aeabi_dsub>
 80072a4:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80072a8:	f7f9 f8ee 	bl	8000488 <__aeabi_dmul>
 80072ac:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
 80072b0:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80072b4:	4632      	mov	r2, r6
 80072b6:	463b      	mov	r3, r7
 80072b8:	4630      	mov	r0, r6
 80072ba:	4639      	mov	r1, r7
 80072bc:	f7f9 f8e4 	bl	8000488 <__aeabi_dmul>
 80072c0:	a35b      	add	r3, pc, #364	; (adr r3, 8007430 <__ieee754_pow+0x3d0>)
 80072c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072c6:	4606      	mov	r6, r0
 80072c8:	460f      	mov	r7, r1
 80072ca:	f7f9 f8dd 	bl	8000488 <__aeabi_dmul>
 80072ce:	a35a      	add	r3, pc, #360	; (adr r3, 8007438 <__ieee754_pow+0x3d8>)
 80072d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072d4:	f7f8 ff22 	bl	800011c <__adddf3>
 80072d8:	4632      	mov	r2, r6
 80072da:	463b      	mov	r3, r7
 80072dc:	f7f9 f8d4 	bl	8000488 <__aeabi_dmul>
 80072e0:	a357      	add	r3, pc, #348	; (adr r3, 8007440 <__ieee754_pow+0x3e0>)
 80072e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072e6:	f7f8 ff19 	bl	800011c <__adddf3>
 80072ea:	4632      	mov	r2, r6
 80072ec:	463b      	mov	r3, r7
 80072ee:	f7f9 f8cb 	bl	8000488 <__aeabi_dmul>
 80072f2:	a355      	add	r3, pc, #340	; (adr r3, 8007448 <__ieee754_pow+0x3e8>)
 80072f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072f8:	f7f8 ff10 	bl	800011c <__adddf3>
 80072fc:	4632      	mov	r2, r6
 80072fe:	463b      	mov	r3, r7
 8007300:	f7f9 f8c2 	bl	8000488 <__aeabi_dmul>
 8007304:	a352      	add	r3, pc, #328	; (adr r3, 8007450 <__ieee754_pow+0x3f0>)
 8007306:	e9d3 2300 	ldrd	r2, r3, [r3]
 800730a:	f7f8 ff07 	bl	800011c <__adddf3>
 800730e:	4632      	mov	r2, r6
 8007310:	463b      	mov	r3, r7
 8007312:	f7f9 f8b9 	bl	8000488 <__aeabi_dmul>
 8007316:	a350      	add	r3, pc, #320	; (adr r3, 8007458 <__ieee754_pow+0x3f8>)
 8007318:	e9d3 2300 	ldrd	r2, r3, [r3]
 800731c:	f7f8 fefe 	bl	800011c <__adddf3>
 8007320:	4632      	mov	r2, r6
 8007322:	4680      	mov	r8, r0
 8007324:	4689      	mov	r9, r1
 8007326:	463b      	mov	r3, r7
 8007328:	4630      	mov	r0, r6
 800732a:	4639      	mov	r1, r7
 800732c:	f7f9 f8ac 	bl	8000488 <__aeabi_dmul>
 8007330:	4602      	mov	r2, r0
 8007332:	460b      	mov	r3, r1
 8007334:	4640      	mov	r0, r8
 8007336:	4649      	mov	r1, r9
 8007338:	f7f9 f8a6 	bl	8000488 <__aeabi_dmul>
 800733c:	4606      	mov	r6, r0
 800733e:	460f      	mov	r7, r1
 8007340:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007344:	4652      	mov	r2, sl
 8007346:	465b      	mov	r3, fp
 8007348:	f7f8 fee8 	bl	800011c <__adddf3>
 800734c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007350:	f7f9 f89a 	bl	8000488 <__aeabi_dmul>
 8007354:	4632      	mov	r2, r6
 8007356:	463b      	mov	r3, r7
 8007358:	f7f8 fee0 	bl	800011c <__adddf3>
 800735c:	4652      	mov	r2, sl
 800735e:	4680      	mov	r8, r0
 8007360:	4689      	mov	r9, r1
 8007362:	465b      	mov	r3, fp
 8007364:	4650      	mov	r0, sl
 8007366:	4659      	mov	r1, fp
 8007368:	f7f9 f88e 	bl	8000488 <__aeabi_dmul>
 800736c:	4602      	mov	r2, r0
 800736e:	460b      	mov	r3, r1
 8007370:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8007374:	2200      	movs	r2, #0
 8007376:	4b46      	ldr	r3, [pc, #280]	; (8007490 <__ieee754_pow+0x430>)
 8007378:	f7f8 fed0 	bl	800011c <__adddf3>
 800737c:	4642      	mov	r2, r8
 800737e:	464b      	mov	r3, r9
 8007380:	f7f8 fecc 	bl	800011c <__adddf3>
 8007384:	2600      	movs	r6, #0
 8007386:	460f      	mov	r7, r1
 8007388:	4632      	mov	r2, r6
 800738a:	463b      	mov	r3, r7
 800738c:	4650      	mov	r0, sl
 800738e:	4659      	mov	r1, fp
 8007390:	f7f9 f87a 	bl	8000488 <__aeabi_dmul>
 8007394:	2200      	movs	r2, #0
 8007396:	4682      	mov	sl, r0
 8007398:	468b      	mov	fp, r1
 800739a:	4630      	mov	r0, r6
 800739c:	4639      	mov	r1, r7
 800739e:	4b3c      	ldr	r3, [pc, #240]	; (8007490 <__ieee754_pow+0x430>)
 80073a0:	f7f8 feba 	bl	8000118 <__aeabi_dsub>
 80073a4:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80073a8:	f7f8 feb6 	bl	8000118 <__aeabi_dsub>
 80073ac:	4602      	mov	r2, r0
 80073ae:	460b      	mov	r3, r1
 80073b0:	4640      	mov	r0, r8
 80073b2:	4649      	mov	r1, r9
 80073b4:	f7f8 feb0 	bl	8000118 <__aeabi_dsub>
 80073b8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80073bc:	f7f9 f864 	bl	8000488 <__aeabi_dmul>
 80073c0:	4632      	mov	r2, r6
 80073c2:	4680      	mov	r8, r0
 80073c4:	4689      	mov	r9, r1
 80073c6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80073ca:	463b      	mov	r3, r7
 80073cc:	f7f9 f85c 	bl	8000488 <__aeabi_dmul>
 80073d0:	4602      	mov	r2, r0
 80073d2:	460b      	mov	r3, r1
 80073d4:	4640      	mov	r0, r8
 80073d6:	4649      	mov	r1, r9
 80073d8:	f7f8 fea0 	bl	800011c <__adddf3>
 80073dc:	4680      	mov	r8, r0
 80073de:	4689      	mov	r9, r1
 80073e0:	2600      	movs	r6, #0
 80073e2:	4642      	mov	r2, r8
 80073e4:	464b      	mov	r3, r9
 80073e6:	4650      	mov	r0, sl
 80073e8:	4659      	mov	r1, fp
 80073ea:	f7f8 fe97 	bl	800011c <__adddf3>
 80073ee:	a31c      	add	r3, pc, #112	; (adr r3, 8007460 <__ieee754_pow+0x400>)
 80073f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073f4:	4630      	mov	r0, r6
 80073f6:	460f      	mov	r7, r1
 80073f8:	f7f9 f846 	bl	8000488 <__aeabi_dmul>
 80073fc:	4652      	mov	r2, sl
 80073fe:	465b      	mov	r3, fp
 8007400:	4682      	mov	sl, r0
 8007402:	468b      	mov	fp, r1
 8007404:	4630      	mov	r0, r6
 8007406:	4639      	mov	r1, r7
 8007408:	f7f8 fe86 	bl	8000118 <__aeabi_dsub>
 800740c:	4602      	mov	r2, r0
 800740e:	460b      	mov	r3, r1
 8007410:	4640      	mov	r0, r8
 8007412:	4649      	mov	r1, r9
 8007414:	f7f8 fe80 	bl	8000118 <__aeabi_dsub>
 8007418:	a313      	add	r3, pc, #76	; (adr r3, 8007468 <__ieee754_pow+0x408>)
 800741a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800741e:	f7f9 f833 	bl	8000488 <__aeabi_dmul>
 8007422:	4602      	mov	r2, r0
 8007424:	460b      	mov	r3, r1
 8007426:	4630      	mov	r0, r6
 8007428:	4639      	mov	r1, r7
 800742a:	4616      	mov	r6, r2
 800742c:	461f      	mov	r7, r3
 800742e:	e031      	b.n	8007494 <__ieee754_pow+0x434>
 8007430:	4a454eef 	.word	0x4a454eef
 8007434:	3fca7e28 	.word	0x3fca7e28
 8007438:	93c9db65 	.word	0x93c9db65
 800743c:	3fcd864a 	.word	0x3fcd864a
 8007440:	a91d4101 	.word	0xa91d4101
 8007444:	3fd17460 	.word	0x3fd17460
 8007448:	518f264d 	.word	0x518f264d
 800744c:	3fd55555 	.word	0x3fd55555
 8007450:	db6fabff 	.word	0xdb6fabff
 8007454:	3fdb6db6 	.word	0x3fdb6db6
 8007458:	33333303 	.word	0x33333303
 800745c:	3fe33333 	.word	0x3fe33333
 8007460:	e0000000 	.word	0xe0000000
 8007464:	3feec709 	.word	0x3feec709
 8007468:	dc3a03fd 	.word	0xdc3a03fd
 800746c:	3feec709 	.word	0x3feec709
 8007470:	433fffff 	.word	0x433fffff
 8007474:	3fefffff 	.word	0x3fefffff
 8007478:	41e00000 	.word	0x41e00000
 800747c:	7ff00000 	.word	0x7ff00000
 8007480:	43400000 	.word	0x43400000
 8007484:	0003988e 	.word	0x0003988e
 8007488:	000bb679 	.word	0x000bb679
 800748c:	3ff00000 	.word	0x3ff00000
 8007490:	40080000 	.word	0x40080000
 8007494:	a3cc      	add	r3, pc, #816	; (adr r3, 80077c8 <__ieee754_pow+0x768>)
 8007496:	e9d3 2300 	ldrd	r2, r3, [r3]
 800749a:	f7f8 fff5 	bl	8000488 <__aeabi_dmul>
 800749e:	4602      	mov	r2, r0
 80074a0:	460b      	mov	r3, r1
 80074a2:	4630      	mov	r0, r6
 80074a4:	4639      	mov	r1, r7
 80074a6:	f7f8 fe39 	bl	800011c <__adddf3>
 80074aa:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80074ae:	f7f8 fe35 	bl	800011c <__adddf3>
 80074b2:	4606      	mov	r6, r0
 80074b4:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80074b6:	460f      	mov	r7, r1
 80074b8:	f7f8 ff7c 	bl	80003b4 <__aeabi_i2d>
 80074bc:	4680      	mov	r8, r0
 80074be:	4689      	mov	r9, r1
 80074c0:	4632      	mov	r2, r6
 80074c2:	463b      	mov	r3, r7
 80074c4:	4650      	mov	r0, sl
 80074c6:	4659      	mov	r1, fp
 80074c8:	e9cd ab04 	strd	sl, fp, [sp, #16]
 80074cc:	f7f8 fe26 	bl	800011c <__adddf3>
 80074d0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80074d4:	f7f8 fe22 	bl	800011c <__adddf3>
 80074d8:	4642      	mov	r2, r8
 80074da:	464b      	mov	r3, r9
 80074dc:	f7f8 fe1e 	bl	800011c <__adddf3>
 80074e0:	2000      	movs	r0, #0
 80074e2:	4642      	mov	r2, r8
 80074e4:	464b      	mov	r3, r9
 80074e6:	4682      	mov	sl, r0
 80074e8:	468b      	mov	fp, r1
 80074ea:	f7f8 fe15 	bl	8000118 <__aeabi_dsub>
 80074ee:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80074f2:	f7f8 fe11 	bl	8000118 <__aeabi_dsub>
 80074f6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80074fa:	f7f8 fe0d 	bl	8000118 <__aeabi_dsub>
 80074fe:	4602      	mov	r2, r0
 8007500:	460b      	mov	r3, r1
 8007502:	4630      	mov	r0, r6
 8007504:	4639      	mov	r1, r7
 8007506:	f7f8 fe07 	bl	8000118 <__aeabi_dsub>
 800750a:	9b00      	ldr	r3, [sp, #0]
 800750c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800750e:	3b01      	subs	r3, #1
 8007510:	4313      	orrs	r3, r2
 8007512:	f04f 0200 	mov.w	r2, #0
 8007516:	bf14      	ite	ne
 8007518:	4bbf      	ldrne	r3, [pc, #764]	; (8007818 <__ieee754_pow+0x7b8>)
 800751a:	4bc0      	ldreq	r3, [pc, #768]	; (800781c <__ieee754_pow+0x7bc>)
 800751c:	e9cd 4500 	strd	r4, r5, [sp]
 8007520:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007524:	2300      	movs	r3, #0
 8007526:	9300      	str	r3, [sp, #0]
 8007528:	e9dd 8900 	ldrd	r8, r9, [sp]
 800752c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007530:	4642      	mov	r2, r8
 8007532:	4620      	mov	r0, r4
 8007534:	4629      	mov	r1, r5
 8007536:	464b      	mov	r3, r9
 8007538:	f7f8 fdee 	bl	8000118 <__aeabi_dsub>
 800753c:	4652      	mov	r2, sl
 800753e:	465b      	mov	r3, fp
 8007540:	f7f8 ffa2 	bl	8000488 <__aeabi_dmul>
 8007544:	4622      	mov	r2, r4
 8007546:	4606      	mov	r6, r0
 8007548:	460f      	mov	r7, r1
 800754a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800754e:	462b      	mov	r3, r5
 8007550:	f7f8 ff9a 	bl	8000488 <__aeabi_dmul>
 8007554:	4602      	mov	r2, r0
 8007556:	460b      	mov	r3, r1
 8007558:	4630      	mov	r0, r6
 800755a:	4639      	mov	r1, r7
 800755c:	f7f8 fdde 	bl	800011c <__adddf3>
 8007560:	4604      	mov	r4, r0
 8007562:	460d      	mov	r5, r1
 8007564:	4642      	mov	r2, r8
 8007566:	464b      	mov	r3, r9
 8007568:	4650      	mov	r0, sl
 800756a:	4659      	mov	r1, fp
 800756c:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8007570:	f7f8 ff8a 	bl	8000488 <__aeabi_dmul>
 8007574:	4606      	mov	r6, r0
 8007576:	460f      	mov	r7, r1
 8007578:	4620      	mov	r0, r4
 800757a:	4629      	mov	r1, r5
 800757c:	463b      	mov	r3, r7
 800757e:	4632      	mov	r2, r6
 8007580:	f7f8 fdcc 	bl	800011c <__adddf3>
 8007584:	4ba6      	ldr	r3, [pc, #664]	; (8007820 <__ieee754_pow+0x7c0>)
 8007586:	4604      	mov	r4, r0
 8007588:	4299      	cmp	r1, r3
 800758a:	460d      	mov	r5, r1
 800758c:	4688      	mov	r8, r1
 800758e:	f340 81dc 	ble.w	800794a <__ieee754_pow+0x8ea>
 8007592:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8007596:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800759a:	4303      	orrs	r3, r0
 800759c:	f040 82a9 	bne.w	8007af2 <__ieee754_pow+0xa92>
 80075a0:	a38b      	add	r3, pc, #556	; (adr r3, 80077d0 <__ieee754_pow+0x770>)
 80075a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80075aa:	f7f8 fdb7 	bl	800011c <__adddf3>
 80075ae:	4602      	mov	r2, r0
 80075b0:	460b      	mov	r3, r1
 80075b2:	4620      	mov	r0, r4
 80075b4:	4629      	mov	r1, r5
 80075b6:	4614      	mov	r4, r2
 80075b8:	461d      	mov	r5, r3
 80075ba:	4632      	mov	r2, r6
 80075bc:	463b      	mov	r3, r7
 80075be:	f7f8 fdab 	bl	8000118 <__aeabi_dsub>
 80075c2:	4602      	mov	r2, r0
 80075c4:	460b      	mov	r3, r1
 80075c6:	4620      	mov	r0, r4
 80075c8:	4629      	mov	r1, r5
 80075ca:	f7f9 f9ed 	bl	80009a8 <__aeabi_dcmpgt>
 80075ce:	2800      	cmp	r0, #0
 80075d0:	f040 828f 	bne.w	8007af2 <__ieee754_pow+0xa92>
 80075d4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80075d8:	2000      	movs	r0, #0
 80075da:	4443      	add	r3, r8
 80075dc:	f3c3 520a 	ubfx	r2, r3, #20, #11
 80075e0:	4c90      	ldr	r4, [pc, #576]	; (8007824 <__ieee754_pow+0x7c4>)
 80075e2:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 80075e6:	4114      	asrs	r4, r2
 80075e8:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 80075ec:	f1c2 0214 	rsb	r2, r2, #20
 80075f0:	ea04 0103 	and.w	r1, r4, r3
 80075f4:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 80075f8:	460b      	mov	r3, r1
 80075fa:	fa4a fa02 	asr.w	sl, sl, r2
 80075fe:	f1b8 0f00 	cmp.w	r8, #0
 8007602:	4602      	mov	r2, r0
 8007604:	4639      	mov	r1, r7
 8007606:	4630      	mov	r0, r6
 8007608:	bfb8      	it	lt
 800760a:	f1ca 0a00 	rsblt	sl, sl, #0
 800760e:	f7f8 fd83 	bl	8000118 <__aeabi_dsub>
 8007612:	4606      	mov	r6, r0
 8007614:	460f      	mov	r7, r1
 8007616:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800761a:	4632      	mov	r2, r6
 800761c:	463b      	mov	r3, r7
 800761e:	f7f8 fd7d 	bl	800011c <__adddf3>
 8007622:	460d      	mov	r5, r1
 8007624:	ea4f 5b0a 	mov.w	fp, sl, lsl #20
 8007628:	2400      	movs	r4, #0
 800762a:	a36b      	add	r3, pc, #428	; (adr r3, 80077d8 <__ieee754_pow+0x778>)
 800762c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007630:	4620      	mov	r0, r4
 8007632:	4629      	mov	r1, r5
 8007634:	f7f8 ff28 	bl	8000488 <__aeabi_dmul>
 8007638:	4632      	mov	r2, r6
 800763a:	4680      	mov	r8, r0
 800763c:	4689      	mov	r9, r1
 800763e:	463b      	mov	r3, r7
 8007640:	4620      	mov	r0, r4
 8007642:	4629      	mov	r1, r5
 8007644:	f7f8 fd68 	bl	8000118 <__aeabi_dsub>
 8007648:	4602      	mov	r2, r0
 800764a:	460b      	mov	r3, r1
 800764c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007650:	f7f8 fd62 	bl	8000118 <__aeabi_dsub>
 8007654:	a362      	add	r3, pc, #392	; (adr r3, 80077e0 <__ieee754_pow+0x780>)
 8007656:	e9d3 2300 	ldrd	r2, r3, [r3]
 800765a:	f7f8 ff15 	bl	8000488 <__aeabi_dmul>
 800765e:	4602      	mov	r2, r0
 8007660:	460b      	mov	r3, r1
 8007662:	4620      	mov	r0, r4
 8007664:	4629      	mov	r1, r5
 8007666:	4614      	mov	r4, r2
 8007668:	461d      	mov	r5, r3
 800766a:	a35f      	add	r3, pc, #380	; (adr r3, 80077e8 <__ieee754_pow+0x788>)
 800766c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007670:	f7f8 ff0a 	bl	8000488 <__aeabi_dmul>
 8007674:	4602      	mov	r2, r0
 8007676:	460b      	mov	r3, r1
 8007678:	4620      	mov	r0, r4
 800767a:	4629      	mov	r1, r5
 800767c:	f7f8 fd4e 	bl	800011c <__adddf3>
 8007680:	4606      	mov	r6, r0
 8007682:	460f      	mov	r7, r1
 8007684:	4632      	mov	r2, r6
 8007686:	463b      	mov	r3, r7
 8007688:	4640      	mov	r0, r8
 800768a:	4649      	mov	r1, r9
 800768c:	f7f8 fd46 	bl	800011c <__adddf3>
 8007690:	4642      	mov	r2, r8
 8007692:	464b      	mov	r3, r9
 8007694:	4604      	mov	r4, r0
 8007696:	460d      	mov	r5, r1
 8007698:	f7f8 fd3e 	bl	8000118 <__aeabi_dsub>
 800769c:	4602      	mov	r2, r0
 800769e:	460b      	mov	r3, r1
 80076a0:	4630      	mov	r0, r6
 80076a2:	4639      	mov	r1, r7
 80076a4:	f7f8 fd38 	bl	8000118 <__aeabi_dsub>
 80076a8:	4622      	mov	r2, r4
 80076aa:	4680      	mov	r8, r0
 80076ac:	4689      	mov	r9, r1
 80076ae:	462b      	mov	r3, r5
 80076b0:	4620      	mov	r0, r4
 80076b2:	4629      	mov	r1, r5
 80076b4:	f7f8 fee8 	bl	8000488 <__aeabi_dmul>
 80076b8:	a34d      	add	r3, pc, #308	; (adr r3, 80077f0 <__ieee754_pow+0x790>)
 80076ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076be:	4606      	mov	r6, r0
 80076c0:	460f      	mov	r7, r1
 80076c2:	f7f8 fee1 	bl	8000488 <__aeabi_dmul>
 80076c6:	a34c      	add	r3, pc, #304	; (adr r3, 80077f8 <__ieee754_pow+0x798>)
 80076c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076cc:	f7f8 fd24 	bl	8000118 <__aeabi_dsub>
 80076d0:	4632      	mov	r2, r6
 80076d2:	463b      	mov	r3, r7
 80076d4:	f7f8 fed8 	bl	8000488 <__aeabi_dmul>
 80076d8:	a349      	add	r3, pc, #292	; (adr r3, 8007800 <__ieee754_pow+0x7a0>)
 80076da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076de:	f7f8 fd1d 	bl	800011c <__adddf3>
 80076e2:	4632      	mov	r2, r6
 80076e4:	463b      	mov	r3, r7
 80076e6:	f7f8 fecf 	bl	8000488 <__aeabi_dmul>
 80076ea:	a347      	add	r3, pc, #284	; (adr r3, 8007808 <__ieee754_pow+0x7a8>)
 80076ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076f0:	f7f8 fd12 	bl	8000118 <__aeabi_dsub>
 80076f4:	4632      	mov	r2, r6
 80076f6:	463b      	mov	r3, r7
 80076f8:	f7f8 fec6 	bl	8000488 <__aeabi_dmul>
 80076fc:	a344      	add	r3, pc, #272	; (adr r3, 8007810 <__ieee754_pow+0x7b0>)
 80076fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007702:	f7f8 fd0b 	bl	800011c <__adddf3>
 8007706:	4632      	mov	r2, r6
 8007708:	463b      	mov	r3, r7
 800770a:	f7f8 febd 	bl	8000488 <__aeabi_dmul>
 800770e:	4602      	mov	r2, r0
 8007710:	460b      	mov	r3, r1
 8007712:	4620      	mov	r0, r4
 8007714:	4629      	mov	r1, r5
 8007716:	f7f8 fcff 	bl	8000118 <__aeabi_dsub>
 800771a:	4606      	mov	r6, r0
 800771c:	460f      	mov	r7, r1
 800771e:	4632      	mov	r2, r6
 8007720:	463b      	mov	r3, r7
 8007722:	4620      	mov	r0, r4
 8007724:	4629      	mov	r1, r5
 8007726:	f7f8 feaf 	bl	8000488 <__aeabi_dmul>
 800772a:	4602      	mov	r2, r0
 800772c:	460b      	mov	r3, r1
 800772e:	4630      	mov	r0, r6
 8007730:	4639      	mov	r1, r7
 8007732:	4616      	mov	r6, r2
 8007734:	461f      	mov	r7, r3
 8007736:	2200      	movs	r2, #0
 8007738:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800773c:	f7f8 fcec 	bl	8000118 <__aeabi_dsub>
 8007740:	4602      	mov	r2, r0
 8007742:	460b      	mov	r3, r1
 8007744:	4630      	mov	r0, r6
 8007746:	4639      	mov	r1, r7
 8007748:	f7f8 ffc8 	bl	80006dc <__aeabi_ddiv>
 800774c:	4642      	mov	r2, r8
 800774e:	4606      	mov	r6, r0
 8007750:	460f      	mov	r7, r1
 8007752:	464b      	mov	r3, r9
 8007754:	4620      	mov	r0, r4
 8007756:	4629      	mov	r1, r5
 8007758:	f7f8 fe96 	bl	8000488 <__aeabi_dmul>
 800775c:	4642      	mov	r2, r8
 800775e:	464b      	mov	r3, r9
 8007760:	f7f8 fcdc 	bl	800011c <__adddf3>
 8007764:	4602      	mov	r2, r0
 8007766:	460b      	mov	r3, r1
 8007768:	4630      	mov	r0, r6
 800776a:	4639      	mov	r1, r7
 800776c:	f7f8 fcd4 	bl	8000118 <__aeabi_dsub>
 8007770:	4622      	mov	r2, r4
 8007772:	462b      	mov	r3, r5
 8007774:	f7f8 fcd0 	bl	8000118 <__aeabi_dsub>
 8007778:	4602      	mov	r2, r0
 800777a:	460b      	mov	r3, r1
 800777c:	2000      	movs	r0, #0
 800777e:	4926      	ldr	r1, [pc, #152]	; (8007818 <__ieee754_pow+0x7b8>)
 8007780:	f7f8 fcca 	bl	8000118 <__aeabi_dsub>
 8007784:	460c      	mov	r4, r1
 8007786:	445c      	add	r4, fp
 8007788:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800778c:	f2c0 81bb 	blt.w	8007b06 <__ieee754_pow+0xaa6>
 8007790:	4621      	mov	r1, r4
 8007792:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007796:	f7f8 fe77 	bl	8000488 <__aeabi_dmul>
 800779a:	e47b      	b.n	8007094 <__ieee754_pow+0x34>
 800779c:	f00c 0c01 	and.w	ip, ip, #1
 80077a0:	f1cc 0002 	rsb	r0, ip, #2
 80077a4:	9000      	str	r0, [sp, #0]
 80077a6:	2900      	cmp	r1, #0
 80077a8:	f040 808b 	bne.w	80078c2 <__ieee754_pow+0x862>
 80077ac:	f1ba 4f80 	cmp.w	sl, #1073741824	; 0x40000000
 80077b0:	f47f acd5 	bne.w	800715e <__ieee754_pow+0xfe>
 80077b4:	4632      	mov	r2, r6
 80077b6:	463b      	mov	r3, r7
 80077b8:	4630      	mov	r0, r6
 80077ba:	4639      	mov	r1, r7
 80077bc:	f7f8 fe64 	bl	8000488 <__aeabi_dmul>
 80077c0:	e468      	b.n	8007094 <__ieee754_pow+0x34>
 80077c2:	bf00      	nop
 80077c4:	f3af 8000 	nop.w
 80077c8:	145b01f5 	.word	0x145b01f5
 80077cc:	be3e2fe0 	.word	0xbe3e2fe0
 80077d0:	652b82fe 	.word	0x652b82fe
 80077d4:	3c971547 	.word	0x3c971547
 80077d8:	00000000 	.word	0x00000000
 80077dc:	3fe62e43 	.word	0x3fe62e43
 80077e0:	fefa39ef 	.word	0xfefa39ef
 80077e4:	3fe62e42 	.word	0x3fe62e42
 80077e8:	0ca86c39 	.word	0x0ca86c39
 80077ec:	be205c61 	.word	0xbe205c61
 80077f0:	72bea4d0 	.word	0x72bea4d0
 80077f4:	3e663769 	.word	0x3e663769
 80077f8:	c5d26bf1 	.word	0xc5d26bf1
 80077fc:	3ebbbd41 	.word	0x3ebbbd41
 8007800:	af25de2c 	.word	0xaf25de2c
 8007804:	3f11566a 	.word	0x3f11566a
 8007808:	16bebd93 	.word	0x16bebd93
 800780c:	3f66c16c 	.word	0x3f66c16c
 8007810:	5555553e 	.word	0x5555553e
 8007814:	3fc55555 	.word	0x3fc55555
 8007818:	3ff00000 	.word	0x3ff00000
 800781c:	bff00000 	.word	0xbff00000
 8007820:	408fffff 	.word	0x408fffff
 8007824:	fff00000 	.word	0xfff00000
 8007828:	4630      	mov	r0, r6
 800782a:	4639      	mov	r1, r7
 800782c:	9202      	str	r2, [sp, #8]
 800782e:	9300      	str	r3, [sp, #0]
 8007830:	f7ff fa52 	bl	8006cd8 <fabs>
 8007834:	9b00      	ldr	r3, [sp, #0]
 8007836:	9a02      	ldr	r2, [sp, #8]
 8007838:	2b00      	cmp	r3, #0
 800783a:	d151      	bne.n	80078e0 <__ieee754_pow+0x880>
 800783c:	9300      	str	r3, [sp, #0]
 800783e:	4bc2      	ldr	r3, [pc, #776]	; (8007b48 <__ieee754_pow+0xae8>)
 8007840:	f028 4c40 	bic.w	ip, r8, #3221225472	; 0xc0000000
 8007844:	459c      	cmp	ip, r3
 8007846:	d003      	beq.n	8007850 <__ieee754_pow+0x7f0>
 8007848:	f1bb 0f00 	cmp.w	fp, #0
 800784c:	f47f ac92 	bne.w	8007174 <__ieee754_pow+0x114>
 8007850:	f1ba 0f00 	cmp.w	sl, #0
 8007854:	da05      	bge.n	8007862 <__ieee754_pow+0x802>
 8007856:	4602      	mov	r2, r0
 8007858:	460b      	mov	r3, r1
 800785a:	2000      	movs	r0, #0
 800785c:	49ba      	ldr	r1, [pc, #744]	; (8007b48 <__ieee754_pow+0xae8>)
 800785e:	f7f8 ff3d 	bl	80006dc <__aeabi_ddiv>
 8007862:	f1b8 0f00 	cmp.w	r8, #0
 8007866:	f6bf ac15 	bge.w	8007094 <__ieee754_pow+0x34>
 800786a:	9b00      	ldr	r3, [sp, #0]
 800786c:	f10b 4b40 	add.w	fp, fp, #3221225472	; 0xc0000000
 8007870:	f50b 1b80 	add.w	fp, fp, #1048576	; 0x100000
 8007874:	ea5b 0b03 	orrs.w	fp, fp, r3
 8007878:	f040 8120 	bne.w	8007abc <__ieee754_pow+0xa5c>
 800787c:	4602      	mov	r2, r0
 800787e:	460b      	mov	r3, r1
 8007880:	4610      	mov	r0, r2
 8007882:	4619      	mov	r1, r3
 8007884:	f7f8 fc48 	bl	8000118 <__aeabi_dsub>
 8007888:	4602      	mov	r2, r0
 800788a:	460b      	mov	r3, r1
 800788c:	f7f8 ff26 	bl	80006dc <__aeabi_ddiv>
 8007890:	e400      	b.n	8007094 <__ieee754_pow+0x34>
 8007892:	2c00      	cmp	r4, #0
 8007894:	f47f ac0a 	bne.w	80070ac <__ieee754_pow+0x4c>
 8007898:	f10b 4240 	add.w	r2, fp, #3221225472	; 0xc0000000
 800789c:	f502 1280 	add.w	r2, r2, #1048576	; 0x100000
 80078a0:	4332      	orrs	r2, r6
 80078a2:	f43f ac12 	beq.w	80070ca <__ieee754_pow+0x6a>
 80078a6:	4ba9      	ldr	r3, [pc, #676]	; (8007b4c <__ieee754_pow+0xaec>)
 80078a8:	459b      	cmp	fp, r3
 80078aa:	f240 80d7 	bls.w	8007a5c <__ieee754_pow+0x9fc>
 80078ae:	f1ba 0f00 	cmp.w	sl, #0
 80078b2:	f2c0 812c 	blt.w	8007b0e <__ieee754_pow+0xaae>
 80078b6:	4620      	mov	r0, r4
 80078b8:	4629      	mov	r1, r5
 80078ba:	f7ff bbeb 	b.w	8007094 <__ieee754_pow+0x34>
 80078be:	2100      	movs	r1, #0
 80078c0:	9100      	str	r1, [sp, #0]
 80078c2:	4630      	mov	r0, r6
 80078c4:	4639      	mov	r1, r7
 80078c6:	9204      	str	r2, [sp, #16]
 80078c8:	9302      	str	r3, [sp, #8]
 80078ca:	f7ff fa05 	bl	8006cd8 <fabs>
 80078ce:	9b02      	ldr	r3, [sp, #8]
 80078d0:	9a04      	ldr	r2, [sp, #16]
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d0b3      	beq.n	800783e <__ieee754_pow+0x7de>
 80078d6:	ea4f 73d8 	mov.w	r3, r8, lsr #31
 80078da:	3b01      	subs	r3, #1
 80078dc:	930a      	str	r3, [sp, #40]	; 0x28
 80078de:	e453      	b.n	8007188 <__ieee754_pow+0x128>
 80078e0:	4632      	mov	r2, r6
 80078e2:	463b      	mov	r3, r7
 80078e4:	e7cc      	b.n	8007880 <__ieee754_pow+0x820>
 80078e6:	2900      	cmp	r1, #0
 80078e8:	f000 813e 	beq.w	8007b68 <__ieee754_pow+0xb08>
 80078ec:	4630      	mov	r0, r6
 80078ee:	4639      	mov	r1, r7
 80078f0:	9202      	str	r2, [sp, #8]
 80078f2:	9300      	str	r3, [sp, #0]
 80078f4:	f7ff f9f0 	bl	8006cd8 <fabs>
 80078f8:	9b00      	ldr	r3, [sp, #0]
 80078fa:	9a02      	ldr	r2, [sp, #8]
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	f000 80db 	beq.w	8007ab8 <__ieee754_pow+0xa58>
 8007902:	2302      	movs	r3, #2
 8007904:	9300      	str	r3, [sp, #0]
 8007906:	2300      	movs	r3, #0
 8007908:	930a      	str	r3, [sp, #40]	; 0x28
 800790a:	4b91      	ldr	r3, [pc, #580]	; (8007b50 <__ieee754_pow+0xaf0>)
 800790c:	4599      	cmp	r9, r3
 800790e:	4b8f      	ldr	r3, [pc, #572]	; (8007b4c <__ieee754_pow+0xaec>)
 8007910:	d945      	bls.n	800799e <__ieee754_pow+0x93e>
 8007912:	459b      	cmp	fp, r3
 8007914:	f240 809c 	bls.w	8007a50 <__ieee754_pow+0x9f0>
 8007918:	f1ba 0f00 	cmp.w	sl, #0
 800791c:	f340 809c 	ble.w	8007a58 <__ieee754_pow+0x9f8>
 8007920:	2000      	movs	r0, #0
 8007922:	b013      	add	sp, #76	; 0x4c
 8007924:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007928:	f000 b9ea 	b.w	8007d00 <__math_oflow>
 800792c:	f1ba 4f80 	cmp.w	sl, #1073741824	; 0x40000000
 8007930:	f43f af40 	beq.w	80077b4 <__ieee754_pow+0x754>
 8007934:	4887      	ldr	r0, [pc, #540]	; (8007b54 <__ieee754_pow+0xaf4>)
 8007936:	4582      	cmp	sl, r0
 8007938:	f47f ac10 	bne.w	800715c <__ieee754_pow+0xfc>
 800793c:	4630      	mov	r0, r6
 800793e:	4639      	mov	r1, r7
 8007940:	b013      	add	sp, #76	; 0x4c
 8007942:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007946:	f7ff b9d1 	b.w	8006cec <__ieee754_sqrt>
 800794a:	f8df c20c 	ldr.w	ip, [pc, #524]	; 8007b58 <__ieee754_pow+0xaf8>
 800794e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007952:	4563      	cmp	r3, ip
 8007954:	f240 80a0 	bls.w	8007a98 <__ieee754_pow+0xa38>
 8007958:	4b80      	ldr	r3, [pc, #512]	; (8007b5c <__ieee754_pow+0xafc>)
 800795a:	440b      	add	r3, r1
 800795c:	4303      	orrs	r3, r0
 800795e:	d10a      	bne.n	8007976 <__ieee754_pow+0x916>
 8007960:	4632      	mov	r2, r6
 8007962:	463b      	mov	r3, r7
 8007964:	f7f8 fbd8 	bl	8000118 <__aeabi_dsub>
 8007968:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800796c:	f7f9 f812 	bl	8000994 <__aeabi_dcmpge>
 8007970:	2800      	cmp	r0, #0
 8007972:	f43f ae2f 	beq.w	80075d4 <__ieee754_pow+0x574>
 8007976:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800797a:	2200      	movs	r2, #0
 800797c:	2300      	movs	r3, #0
 800797e:	f7f8 fff5 	bl	800096c <__aeabi_dcmplt>
 8007982:	3800      	subs	r0, #0
 8007984:	bf18      	it	ne
 8007986:	2001      	movne	r0, #1
 8007988:	b013      	add	sp, #76	; 0x4c
 800798a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800798e:	f000 b9b1 	b.w	8007cf4 <__math_uflow>
 8007992:	2c00      	cmp	r4, #0
 8007994:	f47f ab78 	bne.w	8007088 <__ieee754_pow+0x28>
 8007998:	e785      	b.n	80078a6 <__ieee754_pow+0x846>
 800799a:	2600      	movs	r6, #0
 800799c:	e405      	b.n	80071aa <__ieee754_pow+0x14a>
 800799e:	459b      	cmp	fp, r3
 80079a0:	d356      	bcc.n	8007a50 <__ieee754_pow+0x9f0>
 80079a2:	4b69      	ldr	r3, [pc, #420]	; (8007b48 <__ieee754_pow+0xae8>)
 80079a4:	459b      	cmp	fp, r3
 80079a6:	d8b7      	bhi.n	8007918 <__ieee754_pow+0x8b8>
 80079a8:	2200      	movs	r2, #0
 80079aa:	4b67      	ldr	r3, [pc, #412]	; (8007b48 <__ieee754_pow+0xae8>)
 80079ac:	f7f8 fbb4 	bl	8000118 <__aeabi_dsub>
 80079b0:	a359      	add	r3, pc, #356	; (adr r3, 8007b18 <__ieee754_pow+0xab8>)
 80079b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079b6:	4606      	mov	r6, r0
 80079b8:	460f      	mov	r7, r1
 80079ba:	f7f8 fd65 	bl	8000488 <__aeabi_dmul>
 80079be:	a358      	add	r3, pc, #352	; (adr r3, 8007b20 <__ieee754_pow+0xac0>)
 80079c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079c4:	4682      	mov	sl, r0
 80079c6:	468b      	mov	fp, r1
 80079c8:	4630      	mov	r0, r6
 80079ca:	4639      	mov	r1, r7
 80079cc:	f7f8 fd5c 	bl	8000488 <__aeabi_dmul>
 80079d0:	2200      	movs	r2, #0
 80079d2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80079d6:	4b62      	ldr	r3, [pc, #392]	; (8007b60 <__ieee754_pow+0xb00>)
 80079d8:	4630      	mov	r0, r6
 80079da:	4639      	mov	r1, r7
 80079dc:	f7f8 fd54 	bl	8000488 <__aeabi_dmul>
 80079e0:	4602      	mov	r2, r0
 80079e2:	460b      	mov	r3, r1
 80079e4:	a150      	add	r1, pc, #320	; (adr r1, 8007b28 <__ieee754_pow+0xac8>)
 80079e6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80079ea:	f7f8 fb95 	bl	8000118 <__aeabi_dsub>
 80079ee:	4632      	mov	r2, r6
 80079f0:	463b      	mov	r3, r7
 80079f2:	f7f8 fd49 	bl	8000488 <__aeabi_dmul>
 80079f6:	4602      	mov	r2, r0
 80079f8:	460b      	mov	r3, r1
 80079fa:	2000      	movs	r0, #0
 80079fc:	4955      	ldr	r1, [pc, #340]	; (8007b54 <__ieee754_pow+0xaf4>)
 80079fe:	f7f8 fb8b 	bl	8000118 <__aeabi_dsub>
 8007a02:	4632      	mov	r2, r6
 8007a04:	463b      	mov	r3, r7
 8007a06:	4680      	mov	r8, r0
 8007a08:	4689      	mov	r9, r1
 8007a0a:	4630      	mov	r0, r6
 8007a0c:	4639      	mov	r1, r7
 8007a0e:	f7f8 fd3b 	bl	8000488 <__aeabi_dmul>
 8007a12:	4602      	mov	r2, r0
 8007a14:	460b      	mov	r3, r1
 8007a16:	4640      	mov	r0, r8
 8007a18:	4649      	mov	r1, r9
 8007a1a:	f7f8 fd35 	bl	8000488 <__aeabi_dmul>
 8007a1e:	a344      	add	r3, pc, #272	; (adr r3, 8007b30 <__ieee754_pow+0xad0>)
 8007a20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a24:	f7f8 fd30 	bl	8000488 <__aeabi_dmul>
 8007a28:	4602      	mov	r2, r0
 8007a2a:	460b      	mov	r3, r1
 8007a2c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007a30:	f7f8 fb72 	bl	8000118 <__aeabi_dsub>
 8007a34:	4606      	mov	r6, r0
 8007a36:	460f      	mov	r7, r1
 8007a38:	4650      	mov	r0, sl
 8007a3a:	4659      	mov	r1, fp
 8007a3c:	4632      	mov	r2, r6
 8007a3e:	463b      	mov	r3, r7
 8007a40:	f7f8 fb6c 	bl	800011c <__adddf3>
 8007a44:	2000      	movs	r0, #0
 8007a46:	4652      	mov	r2, sl
 8007a48:	465b      	mov	r3, fp
 8007a4a:	4682      	mov	sl, r0
 8007a4c:	468b      	mov	fp, r1
 8007a4e:	e554      	b.n	80074fa <__ieee754_pow+0x49a>
 8007a50:	f1ba 0f00 	cmp.w	sl, #0
 8007a54:	f6ff af64 	blt.w	8007920 <__ieee754_pow+0x8c0>
 8007a58:	2000      	movs	r0, #0
 8007a5a:	e795      	b.n	8007988 <__ieee754_pow+0x928>
 8007a5c:	f1ba 0f00 	cmp.w	sl, #0
 8007a60:	f04f 0000 	mov.w	r0, #0
 8007a64:	f04f 0100 	mov.w	r1, #0
 8007a68:	f6bf ab14 	bge.w	8007094 <__ieee754_pow+0x34>
 8007a6c:	4620      	mov	r0, r4
 8007a6e:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8007a72:	f7ff bb0f 	b.w	8007094 <__ieee754_pow+0x34>
 8007a76:	2900      	cmp	r1, #0
 8007a78:	f47f aed6 	bne.w	8007828 <__ieee754_pow+0x7c8>
 8007a7c:	f1c0 0014 	rsb	r0, r0, #20
 8007a80:	fa49 fc00 	asr.w	ip, r9, r0
 8007a84:	fa0c f000 	lsl.w	r0, ip, r0
 8007a88:	4548      	cmp	r0, r9
 8007a8a:	d075      	beq.n	8007b78 <__ieee754_pow+0xb18>
 8007a8c:	482e      	ldr	r0, [pc, #184]	; (8007b48 <__ieee754_pow+0xae8>)
 8007a8e:	4581      	cmp	r9, r0
 8007a90:	f43f ab30 	beq.w	80070f4 <__ieee754_pow+0x94>
 8007a94:	f7ff bb5e 	b.w	8007154 <__ieee754_pow+0xf4>
 8007a98:	4a2e      	ldr	r2, [pc, #184]	; (8007b54 <__ieee754_pow+0xaf4>)
 8007a9a:	4293      	cmp	r3, r2
 8007a9c:	d87b      	bhi.n	8007b96 <__ieee754_pow+0xb36>
 8007a9e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007aa2:	4693      	mov	fp, r2
 8007aa4:	4692      	mov	sl, r2
 8007aa6:	e5bf      	b.n	8007628 <__ieee754_pow+0x5c8>
 8007aa8:	4632      	mov	r2, r6
 8007aaa:	463b      	mov	r3, r7
 8007aac:	2000      	movs	r0, #0
 8007aae:	4926      	ldr	r1, [pc, #152]	; (8007b48 <__ieee754_pow+0xae8>)
 8007ab0:	f7f8 fe14 	bl	80006dc <__aeabi_ddiv>
 8007ab4:	f7ff baee 	b.w	8007094 <__ieee754_pow+0x34>
 8007ab8:	2302      	movs	r3, #2
 8007aba:	e6bf      	b.n	800783c <__ieee754_pow+0x7dc>
 8007abc:	9b00      	ldr	r3, [sp, #0]
 8007abe:	2b01      	cmp	r3, #1
 8007ac0:	f47f aae8 	bne.w	8007094 <__ieee754_pow+0x34>
 8007ac4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007ac8:	4619      	mov	r1, r3
 8007aca:	f7ff bae3 	b.w	8007094 <__ieee754_pow+0x34>
 8007ace:	2200      	movs	r2, #0
 8007ad0:	4b24      	ldr	r3, [pc, #144]	; (8007b64 <__ieee754_pow+0xb04>)
 8007ad2:	f44f 2780 	mov.w	r7, #262144	; 0x40000
 8007ad6:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007ada:	a317      	add	r3, pc, #92	; (adr r3, 8007b38 <__ieee754_pow+0xad8>)
 8007adc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ae0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8007ae4:	a316      	add	r3, pc, #88	; (adr r3, 8007b40 <__ieee754_pow+0xae0>)
 8007ae6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007aea:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8007aee:	f7ff bb7f 	b.w	80071f0 <__ieee754_pow+0x190>
 8007af2:	2200      	movs	r2, #0
 8007af4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007af8:	2300      	movs	r3, #0
 8007afa:	f7f8 ff37 	bl	800096c <__aeabi_dcmplt>
 8007afe:	3800      	subs	r0, #0
 8007b00:	bf18      	it	ne
 8007b02:	2001      	movne	r0, #1
 8007b04:	e70d      	b.n	8007922 <__ieee754_pow+0x8c2>
 8007b06:	4652      	mov	r2, sl
 8007b08:	f000 f852 	bl	8007bb0 <scalbn>
 8007b0c:	e641      	b.n	8007792 <__ieee754_pow+0x732>
 8007b0e:	2000      	movs	r0, #0
 8007b10:	2100      	movs	r1, #0
 8007b12:	f7ff babf 	b.w	8007094 <__ieee754_pow+0x34>
 8007b16:	bf00      	nop
 8007b18:	60000000 	.word	0x60000000
 8007b1c:	3ff71547 	.word	0x3ff71547
 8007b20:	f85ddf44 	.word	0xf85ddf44
 8007b24:	3e54ae0b 	.word	0x3e54ae0b
 8007b28:	55555555 	.word	0x55555555
 8007b2c:	3fd55555 	.word	0x3fd55555
 8007b30:	652b82fe 	.word	0x652b82fe
 8007b34:	3ff71547 	.word	0x3ff71547
 8007b38:	40000000 	.word	0x40000000
 8007b3c:	3fe2b803 	.word	0x3fe2b803
 8007b40:	43cfd006 	.word	0x43cfd006
 8007b44:	3e4cfdeb 	.word	0x3e4cfdeb
 8007b48:	3ff00000 	.word	0x3ff00000
 8007b4c:	3fefffff 	.word	0x3fefffff
 8007b50:	43f00000 	.word	0x43f00000
 8007b54:	3fe00000 	.word	0x3fe00000
 8007b58:	4090cbff 	.word	0x4090cbff
 8007b5c:	3f6f3400 	.word	0x3f6f3400
 8007b60:	3fd00000 	.word	0x3fd00000
 8007b64:	3ff80000 	.word	0x3ff80000
 8007b68:	f1ba 4f80 	cmp.w	sl, #1073741824	; 0x40000000
 8007b6c:	f43f ae22 	beq.w	80077b4 <__ieee754_pow+0x754>
 8007b70:	2102      	movs	r1, #2
 8007b72:	9100      	str	r1, [sp, #0]
 8007b74:	f7ff baf3 	b.w	800715e <__ieee754_pow+0xfe>
 8007b78:	490b      	ldr	r1, [pc, #44]	; (8007ba8 <__ieee754_pow+0xb48>)
 8007b7a:	4589      	cmp	r9, r1
 8007b7c:	f43f aaba 	beq.w	80070f4 <__ieee754_pow+0x94>
 8007b80:	f1ba 4f80 	cmp.w	sl, #1073741824	; 0x40000000
 8007b84:	f43f ae16 	beq.w	80077b4 <__ieee754_pow+0x754>
 8007b88:	f00c 0c01 	and.w	ip, ip, #1
 8007b8c:	f1cc 0102 	rsb	r1, ip, #2
 8007b90:	9100      	str	r1, [sp, #0]
 8007b92:	f7ff bae4 	b.w	800715e <__ieee754_pow+0xfe>
 8007b96:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007b9a:	151b      	asrs	r3, r3, #20
 8007b9c:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8007ba0:	fa42 f303 	asr.w	r3, r2, r3
 8007ba4:	e518      	b.n	80075d8 <__ieee754_pow+0x578>
 8007ba6:	bf00      	nop
 8007ba8:	3ff00000 	.word	0x3ff00000
 8007bac:	00000000 	.word	0x00000000

08007bb0 <scalbn>:
 8007bb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007bb4:	4616      	mov	r6, r2
 8007bb6:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8007bba:	4607      	mov	r7, r0
 8007bbc:	4688      	mov	r8, r1
 8007bbe:	460b      	mov	r3, r1
 8007bc0:	bb6a      	cbnz	r2, 8007c1e <scalbn+0x6e>
 8007bc2:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007bc6:	4303      	orrs	r3, r0
 8007bc8:	d027      	beq.n	8007c1a <scalbn+0x6a>
 8007bca:	4b35      	ldr	r3, [pc, #212]	; (8007ca0 <scalbn+0xf0>)
 8007bcc:	2200      	movs	r2, #0
 8007bce:	f7f8 fc5b 	bl	8000488 <__aeabi_dmul>
 8007bd2:	4b34      	ldr	r3, [pc, #208]	; (8007ca4 <scalbn+0xf4>)
 8007bd4:	4607      	mov	r7, r0
 8007bd6:	429e      	cmp	r6, r3
 8007bd8:	4688      	mov	r8, r1
 8007bda:	db40      	blt.n	8007c5e <scalbn+0xae>
 8007bdc:	460b      	mov	r3, r1
 8007bde:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8007be2:	3a36      	subs	r2, #54	; 0x36
 8007be4:	f24c 3150 	movw	r1, #50000	; 0xc350
 8007be8:	428e      	cmp	r6, r1
 8007bea:	dc21      	bgt.n	8007c30 <scalbn+0x80>
 8007bec:	4416      	add	r6, r2
 8007bee:	f240 72fe 	movw	r2, #2046	; 0x7fe
 8007bf2:	4296      	cmp	r6, r2
 8007bf4:	dc1c      	bgt.n	8007c30 <scalbn+0x80>
 8007bf6:	2e00      	cmp	r6, #0
 8007bf8:	dc28      	bgt.n	8007c4c <scalbn+0x9c>
 8007bfa:	f116 0f35 	cmn.w	r6, #53	; 0x35
 8007bfe:	db35      	blt.n	8007c6c <scalbn+0xbc>
 8007c00:	f023 41ff 	bic.w	r1, r3, #2139095040	; 0x7f800000
 8007c04:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
 8007c08:	3636      	adds	r6, #54	; 0x36
 8007c0a:	ea41 5506 	orr.w	r5, r1, r6, lsl #20
 8007c0e:	2200      	movs	r2, #0
 8007c10:	4638      	mov	r0, r7
 8007c12:	4629      	mov	r1, r5
 8007c14:	4b24      	ldr	r3, [pc, #144]	; (8007ca8 <scalbn+0xf8>)
 8007c16:	f7f8 fc37 	bl	8000488 <__aeabi_dmul>
 8007c1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007c1e:	f240 7cff 	movw	ip, #2047	; 0x7ff
 8007c22:	4562      	cmp	r2, ip
 8007c24:	d1de      	bne.n	8007be4 <scalbn+0x34>
 8007c26:	4602      	mov	r2, r0
 8007c28:	f7f8 fa78 	bl	800011c <__adddf3>
 8007c2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007c30:	a317      	add	r3, pc, #92	; (adr r3, 8007c90 <scalbn+0xe0>)
 8007c32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c36:	461c      	mov	r4, r3
 8007c38:	ea4f 75d8 	mov.w	r5, r8, lsr #31
 8007c3c:	f365 74df 	bfi	r4, r5, #31, #1
 8007c40:	4621      	mov	r1, r4
 8007c42:	481a      	ldr	r0, [pc, #104]	; (8007cac <scalbn+0xfc>)
 8007c44:	f7f8 fc20 	bl	8000488 <__aeabi_dmul>
 8007c48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007c4c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007c50:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007c54:	4638      	mov	r0, r7
 8007c56:	ea43 5106 	orr.w	r1, r3, r6, lsl #20
 8007c5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007c5e:	a30e      	add	r3, pc, #56	; (adr r3, 8007c98 <scalbn+0xe8>)
 8007c60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c64:	f7f8 fc10 	bl	8000488 <__aeabi_dmul>
 8007c68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007c6c:	f008 4400 	and.w	r4, r8, #2147483648	; 0x80000000
 8007c70:	f044 71d2 	orr.w	r1, r4, #27525120	; 0x1a40000
 8007c74:	f441 31b7 	orr.w	r1, r1, #93696	; 0x16e00
 8007c78:	a307      	add	r3, pc, #28	; (adr r3, 8007c98 <scalbn+0xe8>)
 8007c7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c7e:	480c      	ldr	r0, [pc, #48]	; (8007cb0 <scalbn+0x100>)
 8007c80:	f041 011f 	orr.w	r1, r1, #31
 8007c84:	f7f8 fc00 	bl	8000488 <__aeabi_dmul>
 8007c88:	e7c7      	b.n	8007c1a <scalbn+0x6a>
 8007c8a:	bf00      	nop
 8007c8c:	f3af 8000 	nop.w
 8007c90:	8800759c 	.word	0x8800759c
 8007c94:	7e37e43c 	.word	0x7e37e43c
 8007c98:	c2f8f359 	.word	0xc2f8f359
 8007c9c:	01a56e1f 	.word	0x01a56e1f
 8007ca0:	43500000 	.word	0x43500000
 8007ca4:	ffff3cb0 	.word	0xffff3cb0
 8007ca8:	3c900000 	.word	0x3c900000
 8007cac:	8800759c 	.word	0x8800759c
 8007cb0:	c2f8f359 	.word	0xc2f8f359

08007cb4 <with_errno>:
 8007cb4:	b5d0      	push	{r4, r6, r7, lr}
 8007cb6:	4606      	mov	r6, r0
 8007cb8:	460f      	mov	r7, r1
 8007cba:	4614      	mov	r4, r2
 8007cbc:	f7fe fdc4 	bl	8006848 <__errno>
 8007cc0:	4603      	mov	r3, r0
 8007cc2:	4639      	mov	r1, r7
 8007cc4:	4630      	mov	r0, r6
 8007cc6:	601c      	str	r4, [r3, #0]
 8007cc8:	bdd0      	pop	{r4, r6, r7, pc}
 8007cca:	bf00      	nop

08007ccc <xflow>:
 8007ccc:	b510      	push	{r4, lr}
 8007cce:	4604      	mov	r4, r0
 8007cd0:	4619      	mov	r1, r3
 8007cd2:	4610      	mov	r0, r2
 8007cd4:	b082      	sub	sp, #8
 8007cd6:	b10c      	cbz	r4, 8007cdc <xflow+0x10>
 8007cd8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8007cdc:	e9cd 2300 	strd	r2, r3, [sp]
 8007ce0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007ce4:	f7f8 fbd0 	bl	8000488 <__aeabi_dmul>
 8007ce8:	2222      	movs	r2, #34	; 0x22
 8007cea:	b002      	add	sp, #8
 8007cec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007cf0:	f7ff bfe0 	b.w	8007cb4 <with_errno>

08007cf4 <__math_uflow>:
 8007cf4:	2200      	movs	r2, #0
 8007cf6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007cfa:	f7ff bfe7 	b.w	8007ccc <xflow>
 8007cfe:	bf00      	nop

08007d00 <__math_oflow>:
 8007d00:	2200      	movs	r2, #0
 8007d02:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8007d06:	f7ff bfe1 	b.w	8007ccc <xflow>
 8007d0a:	bf00      	nop

08007d0c <_init>:
 8007d0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d0e:	bf00      	nop
 8007d10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d12:	bc08      	pop	{r3}
 8007d14:	469e      	mov	lr, r3
 8007d16:	4770      	bx	lr

08007d18 <_fini>:
 8007d18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d1a:	bf00      	nop
 8007d1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d1e:	bc08      	pop	{r3}
 8007d20:	469e      	mov	lr, r3
 8007d22:	4770      	bx	lr

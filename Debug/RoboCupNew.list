
RoboCupNew.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003850  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  0800395c  0800395c  0001395c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003984  08003984  00020018  2**0
                  CONTENTS
  4 .ARM          00000000  08003984  08003984  00020018  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003984  08003984  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003984  08003984  00013984  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003988  08003988  00013988  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  0800398c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000228  20000018  080039a4  00020018  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000240  080039a4  00020240  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d3fc  00000000  00000000  00020041  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000024a0  00000000  00000000  0002d43d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ed8  00000000  00000000  0002f8e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b94  00000000  00000000  000307b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017882  00000000  00000000  0003134c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ec22  00000000  00000000  00048bce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008862a  00000000  00000000  000577f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      0000001e  00000000  00000000  000dfe1a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003cac  00000000  00000000  000dfe38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004b  00000000  00000000  000e3ae4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loclists 0000006f  00000000  00000000  000e3b2f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000018 	.word	0x20000018
 8000128:	00000000 	.word	0x00000000
 800012c:	08003944 	.word	0x08003944

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000001c 	.word	0x2000001c
 8000148:	08003944 	.word	0x08003944

0800014c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b088      	sub	sp, #32
 8000150:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000152:	f107 0310 	add.w	r3, r7, #16
 8000156:	2200      	movs	r2, #0
 8000158:	601a      	str	r2, [r3, #0]
 800015a:	605a      	str	r2, [r3, #4]
 800015c:	609a      	str	r2, [r3, #8]
 800015e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000160:	4b62      	ldr	r3, [pc, #392]	; (80002ec <MX_GPIO_Init+0x1a0>)
 8000162:	699b      	ldr	r3, [r3, #24]
 8000164:	4a61      	ldr	r2, [pc, #388]	; (80002ec <MX_GPIO_Init+0x1a0>)
 8000166:	f043 0310 	orr.w	r3, r3, #16
 800016a:	6193      	str	r3, [r2, #24]
 800016c:	4b5f      	ldr	r3, [pc, #380]	; (80002ec <MX_GPIO_Init+0x1a0>)
 800016e:	699b      	ldr	r3, [r3, #24]
 8000170:	f003 0310 	and.w	r3, r3, #16
 8000174:	60fb      	str	r3, [r7, #12]
 8000176:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000178:	4b5c      	ldr	r3, [pc, #368]	; (80002ec <MX_GPIO_Init+0x1a0>)
 800017a:	699b      	ldr	r3, [r3, #24]
 800017c:	4a5b      	ldr	r2, [pc, #364]	; (80002ec <MX_GPIO_Init+0x1a0>)
 800017e:	f043 0304 	orr.w	r3, r3, #4
 8000182:	6193      	str	r3, [r2, #24]
 8000184:	4b59      	ldr	r3, [pc, #356]	; (80002ec <MX_GPIO_Init+0x1a0>)
 8000186:	699b      	ldr	r3, [r3, #24]
 8000188:	f003 0304 	and.w	r3, r3, #4
 800018c:	60bb      	str	r3, [r7, #8]
 800018e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000190:	4b56      	ldr	r3, [pc, #344]	; (80002ec <MX_GPIO_Init+0x1a0>)
 8000192:	699b      	ldr	r3, [r3, #24]
 8000194:	4a55      	ldr	r2, [pc, #340]	; (80002ec <MX_GPIO_Init+0x1a0>)
 8000196:	f043 0308 	orr.w	r3, r3, #8
 800019a:	6193      	str	r3, [r2, #24]
 800019c:	4b53      	ldr	r3, [pc, #332]	; (80002ec <MX_GPIO_Init+0x1a0>)
 800019e:	699b      	ldr	r3, [r3, #24]
 80001a0:	f003 0308 	and.w	r3, r3, #8
 80001a4:	607b      	str	r3, [r7, #4]
 80001a6:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80001a8:	2200      	movs	r2, #0
 80001aa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001ae:	4850      	ldr	r0, [pc, #320]	; (80002f0 <MX_GPIO_Init+0x1a4>)
 80001b0:	f001 f978 	bl	80014a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SR4TRIG_Pin|SR2TRIG_Pin|GPIO_PIN_4|GPIO_PIN_8
 80001b4:	2200      	movs	r2, #0
 80001b6:	f241 1113 	movw	r1, #4371	; 0x1113
 80001ba:	484e      	ldr	r0, [pc, #312]	; (80002f4 <MX_GPIO_Init+0x1a8>)
 80001bc:	f001 f972 	bl	80014a4 <HAL_GPIO_WritePin>
                          |GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SR3TRIG_Pin|SR1TRIG_Pin, GPIO_PIN_RESET);
 80001c0:	2200      	movs	r2, #0
 80001c2:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 80001c6:	484c      	ldr	r0, [pc, #304]	; (80002f8 <MX_GPIO_Init+0x1ac>)
 80001c8:	f001 f96c 	bl	80014a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80001cc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80001d0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80001d2:	2301      	movs	r3, #1
 80001d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80001d6:	2300      	movs	r3, #0
 80001d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80001da:	2302      	movs	r3, #2
 80001dc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80001de:	f107 0310 	add.w	r3, r7, #16
 80001e2:	4619      	mov	r1, r3
 80001e4:	4842      	ldr	r0, [pc, #264]	; (80002f0 <MX_GPIO_Init+0x1a4>)
 80001e6:	f000 ffd9 	bl	800119c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SR4ECHO_Pin;
 80001ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80001ee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80001f0:	2300      	movs	r3, #0
 80001f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80001f4:	2300      	movs	r3, #0
 80001f6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SR4ECHO_GPIO_Port, &GPIO_InitStruct);
 80001f8:	f107 0310 	add.w	r3, r7, #16
 80001fc:	4619      	mov	r1, r3
 80001fe:	483c      	ldr	r0, [pc, #240]	; (80002f0 <MX_GPIO_Init+0x1a4>)
 8000200:	f000 ffcc 	bl	800119c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000204:	2308      	movs	r3, #8
 8000206:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000208:	4b3c      	ldr	r3, [pc, #240]	; (80002fc <MX_GPIO_Init+0x1b0>)
 800020a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800020c:	2300      	movs	r3, #0
 800020e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000210:	f107 0310 	add.w	r3, r7, #16
 8000214:	4619      	mov	r1, r3
 8000216:	4836      	ldr	r0, [pc, #216]	; (80002f0 <MX_GPIO_Init+0x1a4>)
 8000218:	f000 ffc0 	bl	800119c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PA4 PA8
                           PA12 */
  GPIO_InitStruct.Pin = SR4TRIG_Pin|SR2TRIG_Pin|GPIO_PIN_4|GPIO_PIN_8
 800021c:	f241 1313 	movw	r3, #4371	; 0x1113
 8000220:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000222:	2301      	movs	r3, #1
 8000224:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000226:	2300      	movs	r3, #0
 8000228:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800022a:	2302      	movs	r3, #2
 800022c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800022e:	f107 0310 	add.w	r3, r7, #16
 8000232:	4619      	mov	r1, r3
 8000234:	482f      	ldr	r0, [pc, #188]	; (80002f4 <MX_GPIO_Init+0x1a8>)
 8000236:	f000 ffb1 	bl	800119c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SR2ECHO_Pin;
 800023a:	2304      	movs	r3, #4
 800023c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800023e:	2300      	movs	r3, #0
 8000240:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000242:	2300      	movs	r3, #0
 8000244:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SR2ECHO_GPIO_Port, &GPIO_InitStruct);
 8000246:	f107 0310 	add.w	r3, r7, #16
 800024a:	4619      	mov	r1, r3
 800024c:	4829      	ldr	r0, [pc, #164]	; (80002f4 <MX_GPIO_Init+0x1a8>)
 800024e:	f000 ffa5 	bl	800119c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8000252:	2307      	movs	r3, #7
 8000254:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000256:	4b29      	ldr	r3, [pc, #164]	; (80002fc <MX_GPIO_Init+0x1b0>)
 8000258:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800025a:	2300      	movs	r3, #0
 800025c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800025e:	f107 0310 	add.w	r3, r7, #16
 8000262:	4619      	mov	r1, r3
 8000264:	4824      	ldr	r0, [pc, #144]	; (80002f8 <MX_GPIO_Init+0x1ac>)
 8000266:	f000 ff99 	bl	800119c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = SR3ECHO_Pin|SR1ECHO_Pin;
 800026a:	f44f 4310 	mov.w	r3, #36864	; 0x9000
 800026e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000270:	2300      	movs	r3, #0
 8000272:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000274:	2300      	movs	r3, #0
 8000276:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000278:	f107 0310 	add.w	r3, r7, #16
 800027c:	4619      	mov	r1, r3
 800027e:	481e      	ldr	r0, [pc, #120]	; (80002f8 <MX_GPIO_Init+0x1ac>)
 8000280:	f000 ff8c 	bl	800119c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = SR3TRIG_Pin|SR1TRIG_Pin;
 8000284:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000288:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800028a:	2301      	movs	r3, #1
 800028c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800028e:	2300      	movs	r3, #0
 8000290:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000292:	2302      	movs	r3, #2
 8000294:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000296:	f107 0310 	add.w	r3, r7, #16
 800029a:	4619      	mov	r1, r3
 800029c:	4816      	ldr	r0, [pc, #88]	; (80002f8 <MX_GPIO_Init+0x1ac>)
 800029e:	f000 ff7d 	bl	800119c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 1, 0);
 80002a2:	2200      	movs	r2, #0
 80002a4:	2101      	movs	r1, #1
 80002a6:	2006      	movs	r0, #6
 80002a8:	f000 ff41 	bl	800112e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80002ac:	2006      	movs	r0, #6
 80002ae:	f000 ff5a 	bl	8001166 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 1, 0);
 80002b2:	2200      	movs	r2, #0
 80002b4:	2101      	movs	r1, #1
 80002b6:	2007      	movs	r0, #7
 80002b8:	f000 ff39 	bl	800112e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80002bc:	2007      	movs	r0, #7
 80002be:	f000 ff52 	bl	8001166 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 1, 0);
 80002c2:	2200      	movs	r2, #0
 80002c4:	2101      	movs	r1, #1
 80002c6:	2008      	movs	r0, #8
 80002c8:	f000 ff31 	bl	800112e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80002cc:	2008      	movs	r0, #8
 80002ce:	f000 ff4a 	bl	8001166 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 1, 0);
 80002d2:	2200      	movs	r2, #0
 80002d4:	2101      	movs	r1, #1
 80002d6:	2009      	movs	r0, #9
 80002d8:	f000 ff29 	bl	800112e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80002dc:	2009      	movs	r0, #9
 80002de:	f000 ff42 	bl	8001166 <HAL_NVIC_EnableIRQ>

}
 80002e2:	bf00      	nop
 80002e4:	3720      	adds	r7, #32
 80002e6:	46bd      	mov	sp, r7
 80002e8:	bd80      	pop	{r7, pc}
 80002ea:	bf00      	nop
 80002ec:	40021000 	.word	0x40021000
 80002f0:	40011000 	.word	0x40011000
 80002f4:	40010800 	.word	0x40010800
 80002f8:	40010c00 	.word	0x40010c00
 80002fc:	10110000 	.word	0x10110000

08000300 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000300:	b580      	push	{r7, lr}
 8000302:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000304:	4b12      	ldr	r3, [pc, #72]	; (8000350 <MX_I2C2_Init+0x50>)
 8000306:	4a13      	ldr	r2, [pc, #76]	; (8000354 <MX_I2C2_Init+0x54>)
 8000308:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 800030a:	4b11      	ldr	r3, [pc, #68]	; (8000350 <MX_I2C2_Init+0x50>)
 800030c:	4a12      	ldr	r2, [pc, #72]	; (8000358 <MX_I2C2_Init+0x58>)
 800030e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000310:	4b0f      	ldr	r3, [pc, #60]	; (8000350 <MX_I2C2_Init+0x50>)
 8000312:	2200      	movs	r2, #0
 8000314:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000316:	4b0e      	ldr	r3, [pc, #56]	; (8000350 <MX_I2C2_Init+0x50>)
 8000318:	2200      	movs	r2, #0
 800031a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800031c:	4b0c      	ldr	r3, [pc, #48]	; (8000350 <MX_I2C2_Init+0x50>)
 800031e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000322:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000324:	4b0a      	ldr	r3, [pc, #40]	; (8000350 <MX_I2C2_Init+0x50>)
 8000326:	2200      	movs	r2, #0
 8000328:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800032a:	4b09      	ldr	r3, [pc, #36]	; (8000350 <MX_I2C2_Init+0x50>)
 800032c:	2200      	movs	r2, #0
 800032e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000330:	4b07      	ldr	r3, [pc, #28]	; (8000350 <MX_I2C2_Init+0x50>)
 8000332:	2200      	movs	r2, #0
 8000334:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000336:	4b06      	ldr	r3, [pc, #24]	; (8000350 <MX_I2C2_Init+0x50>)
 8000338:	2200      	movs	r2, #0
 800033a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800033c:	4804      	ldr	r0, [pc, #16]	; (8000350 <MX_I2C2_Init+0x50>)
 800033e:	f001 f8eb 	bl	8001518 <HAL_I2C_Init>
 8000342:	4603      	mov	r3, r0
 8000344:	2b00      	cmp	r3, #0
 8000346:	d001      	beq.n	800034c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000348:	f000 f8e5 	bl	8000516 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800034c:	bf00      	nop
 800034e:	bd80      	pop	{r7, pc}
 8000350:	20000034 	.word	0x20000034
 8000354:	40005800 	.word	0x40005800
 8000358:	00061a80 	.word	0x00061a80

0800035c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800035c:	b580      	push	{r7, lr}
 800035e:	b088      	sub	sp, #32
 8000360:	af00      	add	r7, sp, #0
 8000362:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000364:	f107 0310 	add.w	r3, r7, #16
 8000368:	2200      	movs	r2, #0
 800036a:	601a      	str	r2, [r3, #0]
 800036c:	605a      	str	r2, [r3, #4]
 800036e:	609a      	str	r2, [r3, #8]
 8000370:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C2)
 8000372:	687b      	ldr	r3, [r7, #4]
 8000374:	681b      	ldr	r3, [r3, #0]
 8000376:	4a16      	ldr	r2, [pc, #88]	; (80003d0 <HAL_I2C_MspInit+0x74>)
 8000378:	4293      	cmp	r3, r2
 800037a:	d124      	bne.n	80003c6 <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800037c:	4b15      	ldr	r3, [pc, #84]	; (80003d4 <HAL_I2C_MspInit+0x78>)
 800037e:	699b      	ldr	r3, [r3, #24]
 8000380:	4a14      	ldr	r2, [pc, #80]	; (80003d4 <HAL_I2C_MspInit+0x78>)
 8000382:	f043 0308 	orr.w	r3, r3, #8
 8000386:	6193      	str	r3, [r2, #24]
 8000388:	4b12      	ldr	r3, [pc, #72]	; (80003d4 <HAL_I2C_MspInit+0x78>)
 800038a:	699b      	ldr	r3, [r3, #24]
 800038c:	f003 0308 	and.w	r3, r3, #8
 8000390:	60fb      	str	r3, [r7, #12]
 8000392:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000394:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000398:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800039a:	2312      	movs	r3, #18
 800039c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800039e:	2303      	movs	r3, #3
 80003a0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80003a2:	f107 0310 	add.w	r3, r7, #16
 80003a6:	4619      	mov	r1, r3
 80003a8:	480b      	ldr	r0, [pc, #44]	; (80003d8 <HAL_I2C_MspInit+0x7c>)
 80003aa:	f000 fef7 	bl	800119c <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80003ae:	4b09      	ldr	r3, [pc, #36]	; (80003d4 <HAL_I2C_MspInit+0x78>)
 80003b0:	69db      	ldr	r3, [r3, #28]
 80003b2:	4a08      	ldr	r2, [pc, #32]	; (80003d4 <HAL_I2C_MspInit+0x78>)
 80003b4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80003b8:	61d3      	str	r3, [r2, #28]
 80003ba:	4b06      	ldr	r3, [pc, #24]	; (80003d4 <HAL_I2C_MspInit+0x78>)
 80003bc:	69db      	ldr	r3, [r3, #28]
 80003be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80003c2:	60bb      	str	r3, [r7, #8]
 80003c4:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 80003c6:	bf00      	nop
 80003c8:	3720      	adds	r7, #32
 80003ca:	46bd      	mov	sp, r7
 80003cc:	bd80      	pop	{r7, pc}
 80003ce:	bf00      	nop
 80003d0:	40005800 	.word	0x40005800
 80003d4:	40021000 	.word	0x40021000
 80003d8:	40010c00 	.word	0x40010c00

080003dc <HAL_TIM_PeriodElapsedCallback>:

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80003dc:	b580      	push	{r7, lr}
 80003de:	b082      	sub	sp, #8
 80003e0:	af00      	add	r7, sp, #0
 80003e2:	6078      	str	r0, [r7, #4]
	if(timcounter % 200 == 0 && pixyChecked) {
 80003e4:	4b0e      	ldr	r3, [pc, #56]	; (8000420 <HAL_TIM_PeriodElapsedCallback+0x44>)
 80003e6:	681a      	ldr	r2, [r3, #0]
 80003e8:	4b0e      	ldr	r3, [pc, #56]	; (8000424 <HAL_TIM_PeriodElapsedCallback+0x48>)
 80003ea:	fba3 1302 	umull	r1, r3, r3, r2
 80003ee:	099b      	lsrs	r3, r3, #6
 80003f0:	21c8      	movs	r1, #200	; 0xc8
 80003f2:	fb01 f303 	mul.w	r3, r1, r3
 80003f6:	1ad3      	subs	r3, r2, r3
 80003f8:	2b00      	cmp	r3, #0
 80003fa:	d107      	bne.n	800040c <HAL_TIM_PeriodElapsedCallback+0x30>
 80003fc:	4b0a      	ldr	r3, [pc, #40]	; (8000428 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 80003fe:	681b      	ldr	r3, [r3, #0]
 8000400:	2b00      	cmp	r3, #0
 8000402:	d003      	beq.n	800040c <HAL_TIM_PeriodElapsedCallback+0x30>
		getBallPosition(&ballTransform, &ballInView);
 8000404:	4909      	ldr	r1, [pc, #36]	; (800042c <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000406:	480a      	ldr	r0, [pc, #40]	; (8000430 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8000408:	f000 f8c0 	bl	800058c <getBallPosition>
	}

	timcounter++;
 800040c:	4b04      	ldr	r3, [pc, #16]	; (8000420 <HAL_TIM_PeriodElapsedCallback+0x44>)
 800040e:	681b      	ldr	r3, [r3, #0]
 8000410:	3301      	adds	r3, #1
 8000412:	4a03      	ldr	r2, [pc, #12]	; (8000420 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8000414:	6013      	str	r3, [r2, #0]
}
 8000416:	bf00      	nop
 8000418:	3708      	adds	r7, #8
 800041a:	46bd      	mov	sp, r7
 800041c:	bd80      	pop	{r7, pc}
 800041e:	bf00      	nop
 8000420:	200000a0 	.word	0x200000a0
 8000424:	51eb851f 	.word	0x51eb851f
 8000428:	2000009c 	.word	0x2000009c
 800042c:	20000098 	.word	0x20000098
 8000430:	20000088 	.word	0x20000088

08000434 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000434:	b580      	push	{r7, lr}
 8000436:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000438:	f000 fd1c 	bl	8000e74 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800043c:	f000 f82a 	bl	8000494 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000440:	f7ff fe84 	bl	800014c <MX_GPIO_Init>
  MX_I2C2_Init();
 8000444:	f7ff ff5c 	bl	8000300 <MX_I2C2_Init>
  MX_TIM2_Init();
 8000448:	f000 fb2c 	bl	8000aa4 <MX_TIM2_Init>
  MX_TIM1_Init();
 800044c:	f000 fa72 	bl	8000934 <MX_TIM1_Init>
  MX_TIM3_Init();
 8000450:	f000 fb9c 	bl	8000b8c <MX_TIM3_Init>
  MX_SPI1_Init();
 8000454:	f000 f954 	bl	8000700 <MX_SPI1_Init>
  MX_TIM4_Init();
 8000458:	f000 fbe6 	bl	8000c28 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start(&htim1);
 800045c:	4808      	ldr	r0, [pc, #32]	; (8000480 <main+0x4c>)
 800045e:	f002 fb61 	bl	8002b24 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim2);
 8000462:	4808      	ldr	r0, [pc, #32]	; (8000484 <main+0x50>)
 8000464:	f002 fb5e 	bl	8002b24 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim3);
 8000468:	4807      	ldr	r0, [pc, #28]	; (8000488 <main+0x54>)
 800046a:	f002 fb5b 	bl	8002b24 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start_IT(&htim4);
 800046e:	4807      	ldr	r0, [pc, #28]	; (800048c <main+0x58>)
 8000470:	f002 fba2 	bl	8002bb8 <HAL_TIM_Base_Start_IT>

  SetupPixy(&pixyChecked);
 8000474:	4806      	ldr	r0, [pc, #24]	; (8000490 <main+0x5c>)
 8000476:	f000 f855 	bl	8000524 <SetupPixy>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800047a:	bf00      	nop
 800047c:	e7fd      	b.n	800047a <main+0x46>
 800047e:	bf00      	nop
 8000480:	2000011c 	.word	0x2000011c
 8000484:	20000164 	.word	0x20000164
 8000488:	200001ac 	.word	0x200001ac
 800048c:	200001f4 	.word	0x200001f4
 8000490:	2000009c 	.word	0x2000009c

08000494 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000494:	b580      	push	{r7, lr}
 8000496:	b090      	sub	sp, #64	; 0x40
 8000498:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800049a:	f107 0318 	add.w	r3, r7, #24
 800049e:	2228      	movs	r2, #40	; 0x28
 80004a0:	2100      	movs	r1, #0
 80004a2:	4618      	mov	r0, r3
 80004a4:	f003 fa21 	bl	80038ea <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004a8:	1d3b      	adds	r3, r7, #4
 80004aa:	2200      	movs	r2, #0
 80004ac:	601a      	str	r2, [r3, #0]
 80004ae:	605a      	str	r2, [r3, #4]
 80004b0:	609a      	str	r2, [r3, #8]
 80004b2:	60da      	str	r2, [r3, #12]
 80004b4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80004b6:	2302      	movs	r3, #2
 80004b8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80004ba:	2301      	movs	r3, #1
 80004bc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80004be:	2310      	movs	r3, #16
 80004c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80004c2:	2302      	movs	r3, #2
 80004c4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80004c6:	2300      	movs	r3, #0
 80004c8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 80004ca:	f44f 1320 	mov.w	r3, #2621440	; 0x280000
 80004ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004d0:	f107 0318 	add.w	r3, r7, #24
 80004d4:	4618      	mov	r0, r3
 80004d6:	f001 f963 	bl	80017a0 <HAL_RCC_OscConfig>
 80004da:	4603      	mov	r3, r0
 80004dc:	2b00      	cmp	r3, #0
 80004de:	d001      	beq.n	80004e4 <SystemClock_Config+0x50>
  {
    Error_Handler();
 80004e0:	f000 f819 	bl	8000516 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004e4:	230f      	movs	r3, #15
 80004e6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004e8:	2302      	movs	r3, #2
 80004ea:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004ec:	2300      	movs	r3, #0
 80004ee:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80004f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80004f4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80004f6:	2300      	movs	r3, #0
 80004f8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80004fa:	1d3b      	adds	r3, r7, #4
 80004fc:	2101      	movs	r1, #1
 80004fe:	4618      	mov	r0, r3
 8000500:	f001 fbd0 	bl	8001ca4 <HAL_RCC_ClockConfig>
 8000504:	4603      	mov	r3, r0
 8000506:	2b00      	cmp	r3, #0
 8000508:	d001      	beq.n	800050e <SystemClock_Config+0x7a>
  {
    Error_Handler();
 800050a:	f000 f804 	bl	8000516 <Error_Handler>
  }
}
 800050e:	bf00      	nop
 8000510:	3740      	adds	r7, #64	; 0x40
 8000512:	46bd      	mov	sp, r7
 8000514:	bd80      	pop	{r7, pc}

08000516 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000516:	b480      	push	{r7}
 8000518:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800051a:	b672      	cpsid	i
}
 800051c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800051e:	bf00      	nop
 8000520:	e7fd      	b.n	800051e <Error_Handler+0x8>
	...

08000524 <SetupPixy>:
		1
};

uint8_t buffer_rx[32];

void SetupPixy(int *pixyChecked) {
 8000524:	b580      	push	{r7, lr}
 8000526:	b082      	sub	sp, #8
 8000528:	af00      	add	r7, sp, #0
 800052a:	6078      	str	r0, [r7, #4]
	while(HAL_SPI_Receive(&hspi1, buffer_rx, 1, 1000));
 800052c:	bf00      	nop
 800052e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000532:	2201      	movs	r2, #1
 8000534:	4912      	ldr	r1, [pc, #72]	; (8000580 <SetupPixy+0x5c>)
 8000536:	4813      	ldr	r0, [pc, #76]	; (8000584 <SetupPixy+0x60>)
 8000538:	f001 fef8 	bl	800232c <HAL_SPI_Receive>
 800053c:	4603      	mov	r3, r0
 800053e:	2b00      	cmp	r3, #0
 8000540:	d1f5      	bne.n	800052e <SetupPixy+0xa>

	HAL_SPI_Transmit(&hspi1, versionRequest, 4, 1000);
 8000542:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000546:	2204      	movs	r2, #4
 8000548:	490f      	ldr	r1, [pc, #60]	; (8000588 <SetupPixy+0x64>)
 800054a:	480e      	ldr	r0, [pc, #56]	; (8000584 <SetupPixy+0x60>)
 800054c:	f001 fdb2 	bl	80020b4 <HAL_SPI_Transmit>
	HAL_Delay(1);
 8000550:	2001      	movs	r0, #1
 8000552:	f000 fcf1 	bl	8000f38 <HAL_Delay>
	HAL_SPI_Receive(&hspi1, buffer_rx, 8, 1000);
 8000556:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800055a:	2208      	movs	r2, #8
 800055c:	4908      	ldr	r1, [pc, #32]	; (8000580 <SetupPixy+0x5c>)
 800055e:	4809      	ldr	r0, [pc, #36]	; (8000584 <SetupPixy+0x60>)
 8000560:	f001 fee4 	bl	800232c <HAL_SPI_Receive>
	HAL_SPI_Receive(&hspi1, buffer_rx, 22, 1000);
 8000564:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000568:	2216      	movs	r2, #22
 800056a:	4905      	ldr	r1, [pc, #20]	; (8000580 <SetupPixy+0x5c>)
 800056c:	4805      	ldr	r0, [pc, #20]	; (8000584 <SetupPixy+0x60>)
 800056e:	f001 fedd 	bl	800232c <HAL_SPI_Receive>

	*pixyChecked = 1;
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	2201      	movs	r2, #1
 8000576:	601a      	str	r2, [r3, #0]
}
 8000578:	bf00      	nop
 800057a:	3708      	adds	r7, #8
 800057c:	46bd      	mov	sp, r7
 800057e:	bd80      	pop	{r7, pc}
 8000580:	200000a4 	.word	0x200000a4
 8000584:	200000c4 	.word	0x200000c4
 8000588:	20000000 	.word	0x20000000

0800058c <getBallPosition>:

void getBallPosition(BallTransform *ball_transform, int *ballInView) {
 800058c:	b580      	push	{r7, lr}
 800058e:	b084      	sub	sp, #16
 8000590:	af00      	add	r7, sp, #0
 8000592:	6078      	str	r0, [r7, #4]
 8000594:	6039      	str	r1, [r7, #0]

	// sending the getBlocks request and receiving datas
	// from pixy
	HAL_SPI_Transmit(&hspi1, getBlocks, 6, 1000);
 8000596:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800059a:	2206      	movs	r2, #6
 800059c:	4955      	ldr	r1, [pc, #340]	; (80006f4 <getBallPosition+0x168>)
 800059e:	4856      	ldr	r0, [pc, #344]	; (80006f8 <getBallPosition+0x16c>)
 80005a0:	f001 fd88 	bl	80020b4 <HAL_SPI_Transmit>
	HAL_Delay(1);
 80005a4:	2001      	movs	r0, #1
 80005a6:	f000 fcc7 	bl	8000f38 <HAL_Delay>
	HAL_SPI_Receive(&hspi1, buffer_rx, 8, 1000); //garbage values
 80005aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005ae:	2208      	movs	r2, #8
 80005b0:	4952      	ldr	r1, [pc, #328]	; (80006fc <getBallPosition+0x170>)
 80005b2:	4851      	ldr	r0, [pc, #324]	; (80006f8 <getBallPosition+0x16c>)
 80005b4:	f001 feba 	bl	800232c <HAL_SPI_Receive>
	HAL_SPI_Receive(&hspi1, buffer_rx, 4, 1000);
 80005b8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005bc:	2204      	movs	r2, #4
 80005be:	494f      	ldr	r1, [pc, #316]	; (80006fc <getBallPosition+0x170>)
 80005c0:	484d      	ldr	r0, [pc, #308]	; (80006f8 <getBallPosition+0x16c>)
 80005c2:	f001 feb3 	bl	800232c <HAL_SPI_Receive>

	// checking if the length received data is 14 and the
	// ball is in the view and return from the function if it's not
	if (buffer_rx[3] != 14) {
 80005c6:	4b4d      	ldr	r3, [pc, #308]	; (80006fc <getBallPosition+0x170>)
 80005c8:	78db      	ldrb	r3, [r3, #3]
 80005ca:	2b0e      	cmp	r3, #14
 80005cc:	d002      	beq.n	80005d4 <getBallPosition+0x48>
		ballInView = 0;
 80005ce:	2300      	movs	r3, #0
 80005d0:	603b      	str	r3, [r7, #0]
		return;
 80005d2:	e08b      	b.n	80006ec <getBallPosition+0x160>
	}

	// if the length of the data is 14 will receive the 14 remaining bytes
	HAL_SPI_Receive(&hspi1, buffer_rx, 14, 1000);
 80005d4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005d8:	220e      	movs	r2, #14
 80005da:	4948      	ldr	r1, [pc, #288]	; (80006fc <getBallPosition+0x170>)
 80005dc:	4846      	ldr	r0, [pc, #280]	; (80006f8 <getBallPosition+0x16c>)
 80005de:	f001 fea5 	bl	800232c <HAL_SPI_Receive>

	// saving the received data into the stuct
	ball_transform->ballx = buffer_rx[4] + buffer_rx[5] * 255;
 80005e2:	4b46      	ldr	r3, [pc, #280]	; (80006fc <getBallPosition+0x170>)
 80005e4:	791b      	ldrb	r3, [r3, #4]
 80005e6:	4619      	mov	r1, r3
 80005e8:	4b44      	ldr	r3, [pc, #272]	; (80006fc <getBallPosition+0x170>)
 80005ea:	795b      	ldrb	r3, [r3, #5]
 80005ec:	461a      	mov	r2, r3
 80005ee:	4613      	mov	r3, r2
 80005f0:	021b      	lsls	r3, r3, #8
 80005f2:	1a9b      	subs	r3, r3, r2
 80005f4:	18ca      	adds	r2, r1, r3
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	601a      	str	r2, [r3, #0]
	ball_transform->bally = buffer_rx[6] + buffer_rx[7] * 255;
 80005fa:	4b40      	ldr	r3, [pc, #256]	; (80006fc <getBallPosition+0x170>)
 80005fc:	799b      	ldrb	r3, [r3, #6]
 80005fe:	4619      	mov	r1, r3
 8000600:	4b3e      	ldr	r3, [pc, #248]	; (80006fc <getBallPosition+0x170>)
 8000602:	79db      	ldrb	r3, [r3, #7]
 8000604:	461a      	mov	r2, r3
 8000606:	4613      	mov	r3, r2
 8000608:	021b      	lsls	r3, r3, #8
 800060a:	1a9b      	subs	r3, r3, r2
 800060c:	18ca      	adds	r2, r1, r3
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	605a      	str	r2, [r3, #4]
	ball_transform->ballWidth = buffer_rx[8] + buffer_rx[9] * 255;
 8000612:	4b3a      	ldr	r3, [pc, #232]	; (80006fc <getBallPosition+0x170>)
 8000614:	7a1b      	ldrb	r3, [r3, #8]
 8000616:	4619      	mov	r1, r3
 8000618:	4b38      	ldr	r3, [pc, #224]	; (80006fc <getBallPosition+0x170>)
 800061a:	7a5b      	ldrb	r3, [r3, #9]
 800061c:	461a      	mov	r2, r3
 800061e:	4613      	mov	r3, r2
 8000620:	021b      	lsls	r3, r3, #8
 8000622:	1a9b      	subs	r3, r3, r2
 8000624:	18ca      	adds	r2, r1, r3
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	60da      	str	r2, [r3, #12]
	ball_transform->ballHeight = buffer_rx[10] + buffer_rx[11] * 255;
 800062a:	4b34      	ldr	r3, [pc, #208]	; (80006fc <getBallPosition+0x170>)
 800062c:	7a9b      	ldrb	r3, [r3, #10]
 800062e:	4619      	mov	r1, r3
 8000630:	4b32      	ldr	r3, [pc, #200]	; (80006fc <getBallPosition+0x170>)
 8000632:	7adb      	ldrb	r3, [r3, #11]
 8000634:	461a      	mov	r2, r3
 8000636:	4613      	mov	r3, r2
 8000638:	021b      	lsls	r3, r3, #8
 800063a:	1a9b      	subs	r3, r3, r2
 800063c:	18ca      	adds	r2, r1, r3
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	609a      	str	r2, [r3, #8]

	// cropping the received ball position to be only in the mirror
	if (!(ball_transform->ballx > PIXY_X_MIN && ball_transform->ballx < PIXY_X_MAX)) {
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	2b44      	cmp	r3, #68	; 0x44
 8000648:	dd03      	ble.n	8000652 <getBallPosition+0xc6>
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	681b      	ldr	r3, [r3, #0]
 800064e:	2be4      	cmp	r3, #228	; 0xe4
 8000650:	dd03      	ble.n	800065a <getBallPosition+0xce>
		*ballInView = 0;
 8000652:	683b      	ldr	r3, [r7, #0]
 8000654:	2200      	movs	r2, #0
 8000656:	601a      	str	r2, [r3, #0]
		return;
 8000658:	e048      	b.n	80006ec <getBallPosition+0x160>
	}
	if (!(ball_transform->bally > PIXY_Y_MIN && ball_transform->bally < PIXY_Y_MAX)) {
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	685b      	ldr	r3, [r3, #4]
 800065e:	2b26      	cmp	r3, #38	; 0x26
 8000660:	dd03      	ble.n	800066a <getBallPosition+0xde>
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	685b      	ldr	r3, [r3, #4]
 8000666:	2bc4      	cmp	r3, #196	; 0xc4
 8000668:	dd03      	ble.n	8000672 <getBallPosition+0xe6>
		*ballInView = 0;
 800066a:	683b      	ldr	r3, [r7, #0]
 800066c:	2200      	movs	r2, #0
 800066e:	601a      	str	r2, [r3, #0]
		return;
 8000670:	e03c      	b.n	80006ec <getBallPosition+0x160>
	}

	*ballInView = 1;
 8000672:	683b      	ldr	r3, [r7, #0]
 8000674:	2201      	movs	r2, #1
 8000676:	601a      	str	r2, [r3, #0]

	// changing the center of the image from the top left corner to the center of mirror
	if (ball_transform->ballx >= PIXY_X_ZERO) {
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	2ba1      	cmp	r3, #161	; 0xa1
 800067e:	dd06      	ble.n	800068e <getBallPosition+0x102>
		ball_transform->ballx -= PIXY_X_ZERO;
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	f1a3 02a2 	sub.w	r2, r3, #162	; 0xa2
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	601a      	str	r2, [r3, #0]
 800068c:	e005      	b.n	800069a <getBallPosition+0x10e>
	}else {
		ball_transform->ballx = -1 * (PIXY_X_ZERO - ball_transform->ballx);
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	681b      	ldr	r3, [r3, #0]
 8000692:	f1a3 02a2 	sub.w	r2, r3, #162	; 0xa2
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	601a      	str	r2, [r3, #0]
	}

	if (ball_transform->bally >= PIXY_Y_ZERO) {
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	685b      	ldr	r3, [r3, #4]
 800069e:	2b73      	cmp	r3, #115	; 0x73
 80006a0:	dd06      	ble.n	80006b0 <getBallPosition+0x124>
		ball_transform->bally = -1 * (PIXY_Y_ZERO - ball_transform->bally);
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	685b      	ldr	r3, [r3, #4]
 80006a6:	f1a3 0274 	sub.w	r2, r3, #116	; 0x74
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	605a      	str	r2, [r3, #4]
 80006ae:	e005      	b.n	80006bc <getBallPosition+0x130>
	}else {
		ball_transform->bally -= PIXY_Y_ZERO;
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	685b      	ldr	r3, [r3, #4]
 80006b4:	f1a3 0274 	sub.w	r2, r3, #116	; 0x74
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	605a      	str	r2, [r3, #4]
	}

	ball_transform->ballx *= -1;
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	425a      	negs	r2, r3
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	601a      	str	r2, [r3, #0]
	ball_transform->bally *= -1;
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	685b      	ldr	r3, [r3, #4]
 80006ca:	425a      	negs	r2, r3
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	605a      	str	r2, [r3, #4]

	for (int i = 0; i < 26; i++) {
 80006d0:	2300      	movs	r3, #0
 80006d2:	60fb      	str	r3, [r7, #12]
 80006d4:	e007      	b.n	80006e6 <getBallPosition+0x15a>
		buffer_rx[i] = 0;
 80006d6:	4a09      	ldr	r2, [pc, #36]	; (80006fc <getBallPosition+0x170>)
 80006d8:	68fb      	ldr	r3, [r7, #12]
 80006da:	4413      	add	r3, r2
 80006dc:	2200      	movs	r2, #0
 80006de:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 26; i++) {
 80006e0:	68fb      	ldr	r3, [r7, #12]
 80006e2:	3301      	adds	r3, #1
 80006e4:	60fb      	str	r3, [r7, #12]
 80006e6:	68fb      	ldr	r3, [r7, #12]
 80006e8:	2b19      	cmp	r3, #25
 80006ea:	ddf4      	ble.n	80006d6 <getBallPosition+0x14a>
	}
}
 80006ec:	3710      	adds	r7, #16
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bd80      	pop	{r7, pc}
 80006f2:	bf00      	nop
 80006f4:	20000004 	.word	0x20000004
 80006f8:	200000c4 	.word	0x200000c4
 80006fc:	200000a4 	.word	0x200000a4

08000700 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000704:	4b17      	ldr	r3, [pc, #92]	; (8000764 <MX_SPI1_Init+0x64>)
 8000706:	4a18      	ldr	r2, [pc, #96]	; (8000768 <MX_SPI1_Init+0x68>)
 8000708:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800070a:	4b16      	ldr	r3, [pc, #88]	; (8000764 <MX_SPI1_Init+0x64>)
 800070c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000710:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000712:	4b14      	ldr	r3, [pc, #80]	; (8000764 <MX_SPI1_Init+0x64>)
 8000714:	2200      	movs	r2, #0
 8000716:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000718:	4b12      	ldr	r3, [pc, #72]	; (8000764 <MX_SPI1_Init+0x64>)
 800071a:	2200      	movs	r2, #0
 800071c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800071e:	4b11      	ldr	r3, [pc, #68]	; (8000764 <MX_SPI1_Init+0x64>)
 8000720:	2200      	movs	r2, #0
 8000722:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000724:	4b0f      	ldr	r3, [pc, #60]	; (8000764 <MX_SPI1_Init+0x64>)
 8000726:	2200      	movs	r2, #0
 8000728:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800072a:	4b0e      	ldr	r3, [pc, #56]	; (8000764 <MX_SPI1_Init+0x64>)
 800072c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000730:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000732:	4b0c      	ldr	r3, [pc, #48]	; (8000764 <MX_SPI1_Init+0x64>)
 8000734:	2210      	movs	r2, #16
 8000736:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000738:	4b0a      	ldr	r3, [pc, #40]	; (8000764 <MX_SPI1_Init+0x64>)
 800073a:	2200      	movs	r2, #0
 800073c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800073e:	4b09      	ldr	r3, [pc, #36]	; (8000764 <MX_SPI1_Init+0x64>)
 8000740:	2200      	movs	r2, #0
 8000742:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000744:	4b07      	ldr	r3, [pc, #28]	; (8000764 <MX_SPI1_Init+0x64>)
 8000746:	2200      	movs	r2, #0
 8000748:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800074a:	4b06      	ldr	r3, [pc, #24]	; (8000764 <MX_SPI1_Init+0x64>)
 800074c:	220a      	movs	r2, #10
 800074e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000750:	4804      	ldr	r0, [pc, #16]	; (8000764 <MX_SPI1_Init+0x64>)
 8000752:	f001 fc2b 	bl	8001fac <HAL_SPI_Init>
 8000756:	4603      	mov	r3, r0
 8000758:	2b00      	cmp	r3, #0
 800075a:	d001      	beq.n	8000760 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800075c:	f7ff fedb 	bl	8000516 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000760:	bf00      	nop
 8000762:	bd80      	pop	{r7, pc}
 8000764:	200000c4 	.word	0x200000c4
 8000768:	40013000 	.word	0x40013000

0800076c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b08a      	sub	sp, #40	; 0x28
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000774:	f107 0314 	add.w	r3, r7, #20
 8000778:	2200      	movs	r2, #0
 800077a:	601a      	str	r2, [r3, #0]
 800077c:	605a      	str	r2, [r3, #4]
 800077e:	609a      	str	r2, [r3, #8]
 8000780:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	4a22      	ldr	r2, [pc, #136]	; (8000810 <HAL_SPI_MspInit+0xa4>)
 8000788:	4293      	cmp	r3, r2
 800078a:	d13d      	bne.n	8000808 <HAL_SPI_MspInit+0x9c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800078c:	4b21      	ldr	r3, [pc, #132]	; (8000814 <HAL_SPI_MspInit+0xa8>)
 800078e:	699b      	ldr	r3, [r3, #24]
 8000790:	4a20      	ldr	r2, [pc, #128]	; (8000814 <HAL_SPI_MspInit+0xa8>)
 8000792:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000796:	6193      	str	r3, [r2, #24]
 8000798:	4b1e      	ldr	r3, [pc, #120]	; (8000814 <HAL_SPI_MspInit+0xa8>)
 800079a:	699b      	ldr	r3, [r3, #24]
 800079c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80007a0:	613b      	str	r3, [r7, #16]
 80007a2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007a4:	4b1b      	ldr	r3, [pc, #108]	; (8000814 <HAL_SPI_MspInit+0xa8>)
 80007a6:	699b      	ldr	r3, [r3, #24]
 80007a8:	4a1a      	ldr	r2, [pc, #104]	; (8000814 <HAL_SPI_MspInit+0xa8>)
 80007aa:	f043 0308 	orr.w	r3, r3, #8
 80007ae:	6193      	str	r3, [r2, #24]
 80007b0:	4b18      	ldr	r3, [pc, #96]	; (8000814 <HAL_SPI_MspInit+0xa8>)
 80007b2:	699b      	ldr	r3, [r3, #24]
 80007b4:	f003 0308 	and.w	r3, r3, #8
 80007b8:	60fb      	str	r3, [r7, #12]
 80007ba:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 80007bc:	2328      	movs	r3, #40	; 0x28
 80007be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007c0:	2302      	movs	r3, #2
 80007c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007c4:	2303      	movs	r3, #3
 80007c6:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007c8:	f107 0314 	add.w	r3, r7, #20
 80007cc:	4619      	mov	r1, r3
 80007ce:	4812      	ldr	r0, [pc, #72]	; (8000818 <HAL_SPI_MspInit+0xac>)
 80007d0:	f000 fce4 	bl	800119c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80007d4:	2310      	movs	r3, #16
 80007d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007d8:	2300      	movs	r3, #0
 80007da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007dc:	2300      	movs	r3, #0
 80007de:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007e0:	f107 0314 	add.w	r3, r7, #20
 80007e4:	4619      	mov	r1, r3
 80007e6:	480c      	ldr	r0, [pc, #48]	; (8000818 <HAL_SPI_MspInit+0xac>)
 80007e8:	f000 fcd8 	bl	800119c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_SPI1_ENABLE();
 80007ec:	4b0b      	ldr	r3, [pc, #44]	; (800081c <HAL_SPI_MspInit+0xb0>)
 80007ee:	685b      	ldr	r3, [r3, #4]
 80007f0:	627b      	str	r3, [r7, #36]	; 0x24
 80007f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007f4:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80007f8:	627b      	str	r3, [r7, #36]	; 0x24
 80007fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007fc:	f043 0301 	orr.w	r3, r3, #1
 8000800:	627b      	str	r3, [r7, #36]	; 0x24
 8000802:	4a06      	ldr	r2, [pc, #24]	; (800081c <HAL_SPI_MspInit+0xb0>)
 8000804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000806:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000808:	bf00      	nop
 800080a:	3728      	adds	r7, #40	; 0x28
 800080c:	46bd      	mov	sp, r7
 800080e:	bd80      	pop	{r7, pc}
 8000810:	40013000 	.word	0x40013000
 8000814:	40021000 	.word	0x40021000
 8000818:	40010c00 	.word	0x40010c00
 800081c:	40010000 	.word	0x40010000

08000820 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000820:	b480      	push	{r7}
 8000822:	b085      	sub	sp, #20
 8000824:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000826:	4b15      	ldr	r3, [pc, #84]	; (800087c <HAL_MspInit+0x5c>)
 8000828:	699b      	ldr	r3, [r3, #24]
 800082a:	4a14      	ldr	r2, [pc, #80]	; (800087c <HAL_MspInit+0x5c>)
 800082c:	f043 0301 	orr.w	r3, r3, #1
 8000830:	6193      	str	r3, [r2, #24]
 8000832:	4b12      	ldr	r3, [pc, #72]	; (800087c <HAL_MspInit+0x5c>)
 8000834:	699b      	ldr	r3, [r3, #24]
 8000836:	f003 0301 	and.w	r3, r3, #1
 800083a:	60bb      	str	r3, [r7, #8]
 800083c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800083e:	4b0f      	ldr	r3, [pc, #60]	; (800087c <HAL_MspInit+0x5c>)
 8000840:	69db      	ldr	r3, [r3, #28]
 8000842:	4a0e      	ldr	r2, [pc, #56]	; (800087c <HAL_MspInit+0x5c>)
 8000844:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000848:	61d3      	str	r3, [r2, #28]
 800084a:	4b0c      	ldr	r3, [pc, #48]	; (800087c <HAL_MspInit+0x5c>)
 800084c:	69db      	ldr	r3, [r3, #28]
 800084e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000852:	607b      	str	r3, [r7, #4]
 8000854:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000856:	4b0a      	ldr	r3, [pc, #40]	; (8000880 <HAL_MspInit+0x60>)
 8000858:	685b      	ldr	r3, [r3, #4]
 800085a:	60fb      	str	r3, [r7, #12]
 800085c:	68fb      	ldr	r3, [r7, #12]
 800085e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000862:	60fb      	str	r3, [r7, #12]
 8000864:	68fb      	ldr	r3, [r7, #12]
 8000866:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800086a:	60fb      	str	r3, [r7, #12]
 800086c:	4a04      	ldr	r2, [pc, #16]	; (8000880 <HAL_MspInit+0x60>)
 800086e:	68fb      	ldr	r3, [r7, #12]
 8000870:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000872:	bf00      	nop
 8000874:	3714      	adds	r7, #20
 8000876:	46bd      	mov	sp, r7
 8000878:	bc80      	pop	{r7}
 800087a:	4770      	bx	lr
 800087c:	40021000 	.word	0x40021000
 8000880:	40010000 	.word	0x40010000

08000884 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000884:	b480      	push	{r7}
 8000886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000888:	bf00      	nop
 800088a:	e7fd      	b.n	8000888 <NMI_Handler+0x4>

0800088c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800088c:	b480      	push	{r7}
 800088e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000890:	bf00      	nop
 8000892:	e7fd      	b.n	8000890 <HardFault_Handler+0x4>

08000894 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000894:	b480      	push	{r7}
 8000896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000898:	bf00      	nop
 800089a:	e7fd      	b.n	8000898 <MemManage_Handler+0x4>

0800089c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800089c:	b480      	push	{r7}
 800089e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008a0:	bf00      	nop
 80008a2:	e7fd      	b.n	80008a0 <BusFault_Handler+0x4>

080008a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008a4:	b480      	push	{r7}
 80008a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008a8:	bf00      	nop
 80008aa:	e7fd      	b.n	80008a8 <UsageFault_Handler+0x4>

080008ac <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008ac:	b480      	push	{r7}
 80008ae:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008b0:	bf00      	nop
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bc80      	pop	{r7}
 80008b6:	4770      	bx	lr

080008b8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008b8:	b480      	push	{r7}
 80008ba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008bc:	bf00      	nop
 80008be:	46bd      	mov	sp, r7
 80008c0:	bc80      	pop	{r7}
 80008c2:	4770      	bx	lr

080008c4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008c4:	b480      	push	{r7}
 80008c6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008c8:	bf00      	nop
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bc80      	pop	{r7}
 80008ce:	4770      	bx	lr

080008d0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008d4:	f000 fb14 	bl	8000f00 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008d8:	bf00      	nop
 80008da:	bd80      	pop	{r7, pc}

080008dc <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80008e0:	2001      	movs	r0, #1
 80008e2:	f000 fdf7 	bl	80014d4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80008e6:	bf00      	nop
 80008e8:	bd80      	pop	{r7, pc}

080008ea <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80008ea:	b580      	push	{r7, lr}
 80008ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 80008ee:	2002      	movs	r0, #2
 80008f0:	f000 fdf0 	bl	80014d4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80008f4:	bf00      	nop
 80008f6:	bd80      	pop	{r7, pc}

080008f8 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 80008fc:	2004      	movs	r0, #4
 80008fe:	f000 fde9 	bl	80014d4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8000902:	bf00      	nop
 8000904:	bd80      	pop	{r7, pc}

08000906 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8000906:	b580      	push	{r7, lr}
 8000908:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 800090a:	2008      	movs	r0, #8
 800090c:	f000 fde2 	bl	80014d4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8000910:	bf00      	nop
 8000912:	bd80      	pop	{r7, pc}

08000914 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000918:	4802      	ldr	r0, [pc, #8]	; (8000924 <TIM4_IRQHandler+0x10>)
 800091a:	f002 f9f7 	bl	8002d0c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800091e:	bf00      	nop
 8000920:	bd80      	pop	{r7, pc}
 8000922:	bf00      	nop
 8000924:	200001f4 	.word	0x200001f4

08000928 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000928:	b480      	push	{r7}
 800092a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800092c:	bf00      	nop
 800092e:	46bd      	mov	sp, r7
 8000930:	bc80      	pop	{r7}
 8000932:	4770      	bx	lr

08000934 <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b096      	sub	sp, #88	; 0x58
 8000938:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800093a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800093e:	2200      	movs	r2, #0
 8000940:	601a      	str	r2, [r3, #0]
 8000942:	605a      	str	r2, [r3, #4]
 8000944:	609a      	str	r2, [r3, #8]
 8000946:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000948:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800094c:	2200      	movs	r2, #0
 800094e:	601a      	str	r2, [r3, #0]
 8000950:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000952:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000956:	2200      	movs	r2, #0
 8000958:	601a      	str	r2, [r3, #0]
 800095a:	605a      	str	r2, [r3, #4]
 800095c:	609a      	str	r2, [r3, #8]
 800095e:	60da      	str	r2, [r3, #12]
 8000960:	611a      	str	r2, [r3, #16]
 8000962:	615a      	str	r2, [r3, #20]
 8000964:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000966:	1d3b      	adds	r3, r7, #4
 8000968:	2220      	movs	r2, #32
 800096a:	2100      	movs	r1, #0
 800096c:	4618      	mov	r0, r3
 800096e:	f002 ffbc 	bl	80038ea <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000972:	4b4a      	ldr	r3, [pc, #296]	; (8000a9c <MX_TIM1_Init+0x168>)
 8000974:	4a4a      	ldr	r2, [pc, #296]	; (8000aa0 <MX_TIM1_Init+0x16c>)
 8000976:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 47;
 8000978:	4b48      	ldr	r3, [pc, #288]	; (8000a9c <MX_TIM1_Init+0x168>)
 800097a:	222f      	movs	r2, #47	; 0x2f
 800097c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800097e:	4b47      	ldr	r3, [pc, #284]	; (8000a9c <MX_TIM1_Init+0x168>)
 8000980:	2200      	movs	r2, #0
 8000982:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 99;
 8000984:	4b45      	ldr	r3, [pc, #276]	; (8000a9c <MX_TIM1_Init+0x168>)
 8000986:	2263      	movs	r2, #99	; 0x63
 8000988:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800098a:	4b44      	ldr	r3, [pc, #272]	; (8000a9c <MX_TIM1_Init+0x168>)
 800098c:	2200      	movs	r2, #0
 800098e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000990:	4b42      	ldr	r3, [pc, #264]	; (8000a9c <MX_TIM1_Init+0x168>)
 8000992:	2200      	movs	r2, #0
 8000994:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000996:	4b41      	ldr	r3, [pc, #260]	; (8000a9c <MX_TIM1_Init+0x168>)
 8000998:	2200      	movs	r2, #0
 800099a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800099c:	483f      	ldr	r0, [pc, #252]	; (8000a9c <MX_TIM1_Init+0x168>)
 800099e:	f002 f871 	bl	8002a84 <HAL_TIM_Base_Init>
 80009a2:	4603      	mov	r3, r0
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d001      	beq.n	80009ac <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 80009a8:	f7ff fdb5 	bl	8000516 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009b0:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80009b2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80009b6:	4619      	mov	r1, r3
 80009b8:	4838      	ldr	r0, [pc, #224]	; (8000a9c <MX_TIM1_Init+0x168>)
 80009ba:	f002 fb6d 	bl	8003098 <HAL_TIM_ConfigClockSource>
 80009be:	4603      	mov	r3, r0
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d001      	beq.n	80009c8 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 80009c4:	f7ff fda7 	bl	8000516 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80009c8:	4834      	ldr	r0, [pc, #208]	; (8000a9c <MX_TIM1_Init+0x168>)
 80009ca:	f002 f947 	bl	8002c5c <HAL_TIM_PWM_Init>
 80009ce:	4603      	mov	r3, r0
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d001      	beq.n	80009d8 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 80009d4:	f7ff fd9f 	bl	8000516 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009d8:	2300      	movs	r3, #0
 80009da:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009dc:	2300      	movs	r3, #0
 80009de:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80009e0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80009e4:	4619      	mov	r1, r3
 80009e6:	482d      	ldr	r0, [pc, #180]	; (8000a9c <MX_TIM1_Init+0x168>)
 80009e8:	f002 febe 	bl	8003768 <HAL_TIMEx_MasterConfigSynchronization>
 80009ec:	4603      	mov	r3, r0
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d001      	beq.n	80009f6 <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 80009f2:	f7ff fd90 	bl	8000516 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80009f6:	2360      	movs	r3, #96	; 0x60
 80009f8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80009fa:	2300      	movs	r3, #0
 80009fc:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009fe:	2300      	movs	r3, #0
 8000a00:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000a02:	2300      	movs	r3, #0
 8000a04:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a06:	2300      	movs	r3, #0
 8000a08:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000a12:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a16:	2204      	movs	r2, #4
 8000a18:	4619      	mov	r1, r3
 8000a1a:	4820      	ldr	r0, [pc, #128]	; (8000a9c <MX_TIM1_Init+0x168>)
 8000a1c:	f002 fa7e 	bl	8002f1c <HAL_TIM_PWM_ConfigChannel>
 8000a20:	4603      	mov	r3, r0
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d001      	beq.n	8000a2a <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8000a26:	f7ff fd76 	bl	8000516 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000a2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a2e:	2208      	movs	r2, #8
 8000a30:	4619      	mov	r1, r3
 8000a32:	481a      	ldr	r0, [pc, #104]	; (8000a9c <MX_TIM1_Init+0x168>)
 8000a34:	f002 fa72 	bl	8002f1c <HAL_TIM_PWM_ConfigChannel>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d001      	beq.n	8000a42 <MX_TIM1_Init+0x10e>
  {
    Error_Handler();
 8000a3e:	f7ff fd6a 	bl	8000516 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000a42:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a46:	220c      	movs	r2, #12
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4814      	ldr	r0, [pc, #80]	; (8000a9c <MX_TIM1_Init+0x168>)
 8000a4c:	f002 fa66 	bl	8002f1c <HAL_TIM_PWM_ConfigChannel>
 8000a50:	4603      	mov	r3, r0
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d001      	beq.n	8000a5a <MX_TIM1_Init+0x126>
  {
    Error_Handler();
 8000a56:	f7ff fd5e 	bl	8000516 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000a62:	2300      	movs	r3, #0
 8000a64:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000a66:	2300      	movs	r3, #0
 8000a68:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000a6e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a72:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000a74:	2300      	movs	r3, #0
 8000a76:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000a78:	1d3b      	adds	r3, r7, #4
 8000a7a:	4619      	mov	r1, r3
 8000a7c:	4807      	ldr	r0, [pc, #28]	; (8000a9c <MX_TIM1_Init+0x168>)
 8000a7e:	f002 fed1 	bl	8003824 <HAL_TIMEx_ConfigBreakDeadTime>
 8000a82:	4603      	mov	r3, r0
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d001      	beq.n	8000a8c <MX_TIM1_Init+0x158>
  {
    Error_Handler();
 8000a88:	f7ff fd45 	bl	8000516 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000a8c:	4803      	ldr	r0, [pc, #12]	; (8000a9c <MX_TIM1_Init+0x168>)
 8000a8e:	f000 f979 	bl	8000d84 <HAL_TIM_MspPostInit>

}
 8000a92:	bf00      	nop
 8000a94:	3758      	adds	r7, #88	; 0x58
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	bf00      	nop
 8000a9c:	2000011c 	.word	0x2000011c
 8000aa0:	40012c00 	.word	0x40012c00

08000aa4 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b08e      	sub	sp, #56	; 0x38
 8000aa8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000aaa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000aae:	2200      	movs	r2, #0
 8000ab0:	601a      	str	r2, [r3, #0]
 8000ab2:	605a      	str	r2, [r3, #4]
 8000ab4:	609a      	str	r2, [r3, #8]
 8000ab6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ab8:	f107 0320 	add.w	r3, r7, #32
 8000abc:	2200      	movs	r2, #0
 8000abe:	601a      	str	r2, [r3, #0]
 8000ac0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ac2:	1d3b      	adds	r3, r7, #4
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	601a      	str	r2, [r3, #0]
 8000ac8:	605a      	str	r2, [r3, #4]
 8000aca:	609a      	str	r2, [r3, #8]
 8000acc:	60da      	str	r2, [r3, #12]
 8000ace:	611a      	str	r2, [r3, #16]
 8000ad0:	615a      	str	r2, [r3, #20]
 8000ad2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000ad4:	4b2c      	ldr	r3, [pc, #176]	; (8000b88 <MX_TIM2_Init+0xe4>)
 8000ad6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ada:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 47;
 8000adc:	4b2a      	ldr	r3, [pc, #168]	; (8000b88 <MX_TIM2_Init+0xe4>)
 8000ade:	222f      	movs	r2, #47	; 0x2f
 8000ae0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ae2:	4b29      	ldr	r3, [pc, #164]	; (8000b88 <MX_TIM2_Init+0xe4>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 99;
 8000ae8:	4b27      	ldr	r3, [pc, #156]	; (8000b88 <MX_TIM2_Init+0xe4>)
 8000aea:	2263      	movs	r2, #99	; 0x63
 8000aec:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000aee:	4b26      	ldr	r3, [pc, #152]	; (8000b88 <MX_TIM2_Init+0xe4>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000af4:	4b24      	ldr	r3, [pc, #144]	; (8000b88 <MX_TIM2_Init+0xe4>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000afa:	4823      	ldr	r0, [pc, #140]	; (8000b88 <MX_TIM2_Init+0xe4>)
 8000afc:	f001 ffc2 	bl	8002a84 <HAL_TIM_Base_Init>
 8000b00:	4603      	mov	r3, r0
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d001      	beq.n	8000b0a <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 8000b06:	f7ff fd06 	bl	8000516 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b0a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b0e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000b10:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b14:	4619      	mov	r1, r3
 8000b16:	481c      	ldr	r0, [pc, #112]	; (8000b88 <MX_TIM2_Init+0xe4>)
 8000b18:	f002 fabe 	bl	8003098 <HAL_TIM_ConfigClockSource>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d001      	beq.n	8000b26 <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 8000b22:	f7ff fcf8 	bl	8000516 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000b26:	4818      	ldr	r0, [pc, #96]	; (8000b88 <MX_TIM2_Init+0xe4>)
 8000b28:	f002 f898 	bl	8002c5c <HAL_TIM_PWM_Init>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d001      	beq.n	8000b36 <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 8000b32:	f7ff fcf0 	bl	8000516 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b36:	2300      	movs	r3, #0
 8000b38:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000b3e:	f107 0320 	add.w	r3, r7, #32
 8000b42:	4619      	mov	r1, r3
 8000b44:	4810      	ldr	r0, [pc, #64]	; (8000b88 <MX_TIM2_Init+0xe4>)
 8000b46:	f002 fe0f 	bl	8003768 <HAL_TIMEx_MasterConfigSynchronization>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d001      	beq.n	8000b54 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 8000b50:	f7ff fce1 	bl	8000516 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b54:	2360      	movs	r3, #96	; 0x60
 8000b56:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b60:	2300      	movs	r3, #0
 8000b62:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000b64:	1d3b      	adds	r3, r7, #4
 8000b66:	220c      	movs	r2, #12
 8000b68:	4619      	mov	r1, r3
 8000b6a:	4807      	ldr	r0, [pc, #28]	; (8000b88 <MX_TIM2_Init+0xe4>)
 8000b6c:	f002 f9d6 	bl	8002f1c <HAL_TIM_PWM_ConfigChannel>
 8000b70:	4603      	mov	r3, r0
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d001      	beq.n	8000b7a <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 8000b76:	f7ff fcce 	bl	8000516 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000b7a:	4803      	ldr	r0, [pc, #12]	; (8000b88 <MX_TIM2_Init+0xe4>)
 8000b7c:	f000 f902 	bl	8000d84 <HAL_TIM_MspPostInit>

}
 8000b80:	bf00      	nop
 8000b82:	3738      	adds	r7, #56	; 0x38
 8000b84:	46bd      	mov	sp, r7
 8000b86:	bd80      	pop	{r7, pc}
 8000b88:	20000164 	.word	0x20000164

08000b8c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b086      	sub	sp, #24
 8000b90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b92:	f107 0308 	add.w	r3, r7, #8
 8000b96:	2200      	movs	r2, #0
 8000b98:	601a      	str	r2, [r3, #0]
 8000b9a:	605a      	str	r2, [r3, #4]
 8000b9c:	609a      	str	r2, [r3, #8]
 8000b9e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ba0:	463b      	mov	r3, r7
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	601a      	str	r2, [r3, #0]
 8000ba6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000ba8:	4b1d      	ldr	r3, [pc, #116]	; (8000c20 <MX_TIM3_Init+0x94>)
 8000baa:	4a1e      	ldr	r2, [pc, #120]	; (8000c24 <MX_TIM3_Init+0x98>)
 8000bac:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 47;
 8000bae:	4b1c      	ldr	r3, [pc, #112]	; (8000c20 <MX_TIM3_Init+0x94>)
 8000bb0:	222f      	movs	r2, #47	; 0x2f
 8000bb2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bb4:	4b1a      	ldr	r3, [pc, #104]	; (8000c20 <MX_TIM3_Init+0x94>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0xffff-1;
 8000bba:	4b19      	ldr	r3, [pc, #100]	; (8000c20 <MX_TIM3_Init+0x94>)
 8000bbc:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8000bc0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bc2:	4b17      	ldr	r3, [pc, #92]	; (8000c20 <MX_TIM3_Init+0x94>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bc8:	4b15      	ldr	r3, [pc, #84]	; (8000c20 <MX_TIM3_Init+0x94>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000bce:	4814      	ldr	r0, [pc, #80]	; (8000c20 <MX_TIM3_Init+0x94>)
 8000bd0:	f001 ff58 	bl	8002a84 <HAL_TIM_Base_Init>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d001      	beq.n	8000bde <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8000bda:	f7ff fc9c 	bl	8000516 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000bde:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000be2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000be4:	f107 0308 	add.w	r3, r7, #8
 8000be8:	4619      	mov	r1, r3
 8000bea:	480d      	ldr	r0, [pc, #52]	; (8000c20 <MX_TIM3_Init+0x94>)
 8000bec:	f002 fa54 	bl	8003098 <HAL_TIM_ConfigClockSource>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d001      	beq.n	8000bfa <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8000bf6:	f7ff fc8e 	bl	8000516 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000c02:	463b      	mov	r3, r7
 8000c04:	4619      	mov	r1, r3
 8000c06:	4806      	ldr	r0, [pc, #24]	; (8000c20 <MX_TIM3_Init+0x94>)
 8000c08:	f002 fdae 	bl	8003768 <HAL_TIMEx_MasterConfigSynchronization>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d001      	beq.n	8000c16 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8000c12:	f7ff fc80 	bl	8000516 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000c16:	bf00      	nop
 8000c18:	3718      	adds	r7, #24
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bd80      	pop	{r7, pc}
 8000c1e:	bf00      	nop
 8000c20:	200001ac 	.word	0x200001ac
 8000c24:	40000400 	.word	0x40000400

08000c28 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b086      	sub	sp, #24
 8000c2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c2e:	f107 0308 	add.w	r3, r7, #8
 8000c32:	2200      	movs	r2, #0
 8000c34:	601a      	str	r2, [r3, #0]
 8000c36:	605a      	str	r2, [r3, #4]
 8000c38:	609a      	str	r2, [r3, #8]
 8000c3a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c3c:	463b      	mov	r3, r7
 8000c3e:	2200      	movs	r2, #0
 8000c40:	601a      	str	r2, [r3, #0]
 8000c42:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000c44:	4b1d      	ldr	r3, [pc, #116]	; (8000cbc <MX_TIM4_Init+0x94>)
 8000c46:	4a1e      	ldr	r2, [pc, #120]	; (8000cc0 <MX_TIM4_Init+0x98>)
 8000c48:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 47;
 8000c4a:	4b1c      	ldr	r3, [pc, #112]	; (8000cbc <MX_TIM4_Init+0x94>)
 8000c4c:	222f      	movs	r2, #47	; 0x2f
 8000c4e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c50:	4b1a      	ldr	r3, [pc, #104]	; (8000cbc <MX_TIM4_Init+0x94>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 8000c56:	4b19      	ldr	r3, [pc, #100]	; (8000cbc <MX_TIM4_Init+0x94>)
 8000c58:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000c5c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c5e:	4b17      	ldr	r3, [pc, #92]	; (8000cbc <MX_TIM4_Init+0x94>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c64:	4b15      	ldr	r3, [pc, #84]	; (8000cbc <MX_TIM4_Init+0x94>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000c6a:	4814      	ldr	r0, [pc, #80]	; (8000cbc <MX_TIM4_Init+0x94>)
 8000c6c:	f001 ff0a 	bl	8002a84 <HAL_TIM_Base_Init>
 8000c70:	4603      	mov	r3, r0
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d001      	beq.n	8000c7a <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8000c76:	f7ff fc4e 	bl	8000516 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c7a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c7e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000c80:	f107 0308 	add.w	r3, r7, #8
 8000c84:	4619      	mov	r1, r3
 8000c86:	480d      	ldr	r0, [pc, #52]	; (8000cbc <MX_TIM4_Init+0x94>)
 8000c88:	f002 fa06 	bl	8003098 <HAL_TIM_ConfigClockSource>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d001      	beq.n	8000c96 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8000c92:	f7ff fc40 	bl	8000516 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c96:	2300      	movs	r3, #0
 8000c98:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000c9e:	463b      	mov	r3, r7
 8000ca0:	4619      	mov	r1, r3
 8000ca2:	4806      	ldr	r0, [pc, #24]	; (8000cbc <MX_TIM4_Init+0x94>)
 8000ca4:	f002 fd60 	bl	8003768 <HAL_TIMEx_MasterConfigSynchronization>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d001      	beq.n	8000cb2 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8000cae:	f7ff fc32 	bl	8000516 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000cb2:	bf00      	nop
 8000cb4:	3718      	adds	r7, #24
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	200001f4 	.word	0x200001f4
 8000cc0:	40000800 	.word	0x40000800

08000cc4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b086      	sub	sp, #24
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	4a28      	ldr	r2, [pc, #160]	; (8000d74 <HAL_TIM_Base_MspInit+0xb0>)
 8000cd2:	4293      	cmp	r3, r2
 8000cd4:	d10c      	bne.n	8000cf0 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000cd6:	4b28      	ldr	r3, [pc, #160]	; (8000d78 <HAL_TIM_Base_MspInit+0xb4>)
 8000cd8:	699b      	ldr	r3, [r3, #24]
 8000cda:	4a27      	ldr	r2, [pc, #156]	; (8000d78 <HAL_TIM_Base_MspInit+0xb4>)
 8000cdc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000ce0:	6193      	str	r3, [r2, #24]
 8000ce2:	4b25      	ldr	r3, [pc, #148]	; (8000d78 <HAL_TIM_Base_MspInit+0xb4>)
 8000ce4:	699b      	ldr	r3, [r3, #24]
 8000ce6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000cea:	617b      	str	r3, [r7, #20]
 8000cec:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8000cee:	e03c      	b.n	8000d6a <HAL_TIM_Base_MspInit+0xa6>
  else if(tim_baseHandle->Instance==TIM2)
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000cf8:	d10c      	bne.n	8000d14 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000cfa:	4b1f      	ldr	r3, [pc, #124]	; (8000d78 <HAL_TIM_Base_MspInit+0xb4>)
 8000cfc:	69db      	ldr	r3, [r3, #28]
 8000cfe:	4a1e      	ldr	r2, [pc, #120]	; (8000d78 <HAL_TIM_Base_MspInit+0xb4>)
 8000d00:	f043 0301 	orr.w	r3, r3, #1
 8000d04:	61d3      	str	r3, [r2, #28]
 8000d06:	4b1c      	ldr	r3, [pc, #112]	; (8000d78 <HAL_TIM_Base_MspInit+0xb4>)
 8000d08:	69db      	ldr	r3, [r3, #28]
 8000d0a:	f003 0301 	and.w	r3, r3, #1
 8000d0e:	613b      	str	r3, [r7, #16]
 8000d10:	693b      	ldr	r3, [r7, #16]
}
 8000d12:	e02a      	b.n	8000d6a <HAL_TIM_Base_MspInit+0xa6>
  else if(tim_baseHandle->Instance==TIM3)
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	4a18      	ldr	r2, [pc, #96]	; (8000d7c <HAL_TIM_Base_MspInit+0xb8>)
 8000d1a:	4293      	cmp	r3, r2
 8000d1c:	d10c      	bne.n	8000d38 <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000d1e:	4b16      	ldr	r3, [pc, #88]	; (8000d78 <HAL_TIM_Base_MspInit+0xb4>)
 8000d20:	69db      	ldr	r3, [r3, #28]
 8000d22:	4a15      	ldr	r2, [pc, #84]	; (8000d78 <HAL_TIM_Base_MspInit+0xb4>)
 8000d24:	f043 0302 	orr.w	r3, r3, #2
 8000d28:	61d3      	str	r3, [r2, #28]
 8000d2a:	4b13      	ldr	r3, [pc, #76]	; (8000d78 <HAL_TIM_Base_MspInit+0xb4>)
 8000d2c:	69db      	ldr	r3, [r3, #28]
 8000d2e:	f003 0302 	and.w	r3, r3, #2
 8000d32:	60fb      	str	r3, [r7, #12]
 8000d34:	68fb      	ldr	r3, [r7, #12]
}
 8000d36:	e018      	b.n	8000d6a <HAL_TIM_Base_MspInit+0xa6>
  else if(tim_baseHandle->Instance==TIM4)
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	4a10      	ldr	r2, [pc, #64]	; (8000d80 <HAL_TIM_Base_MspInit+0xbc>)
 8000d3e:	4293      	cmp	r3, r2
 8000d40:	d113      	bne.n	8000d6a <HAL_TIM_Base_MspInit+0xa6>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000d42:	4b0d      	ldr	r3, [pc, #52]	; (8000d78 <HAL_TIM_Base_MspInit+0xb4>)
 8000d44:	69db      	ldr	r3, [r3, #28]
 8000d46:	4a0c      	ldr	r2, [pc, #48]	; (8000d78 <HAL_TIM_Base_MspInit+0xb4>)
 8000d48:	f043 0304 	orr.w	r3, r3, #4
 8000d4c:	61d3      	str	r3, [r2, #28]
 8000d4e:	4b0a      	ldr	r3, [pc, #40]	; (8000d78 <HAL_TIM_Base_MspInit+0xb4>)
 8000d50:	69db      	ldr	r3, [r3, #28]
 8000d52:	f003 0304 	and.w	r3, r3, #4
 8000d56:	60bb      	str	r3, [r7, #8]
 8000d58:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 2, 0);
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	2102      	movs	r1, #2
 8000d5e:	201e      	movs	r0, #30
 8000d60:	f000 f9e5 	bl	800112e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000d64:	201e      	movs	r0, #30
 8000d66:	f000 f9fe 	bl	8001166 <HAL_NVIC_EnableIRQ>
}
 8000d6a:	bf00      	nop
 8000d6c:	3718      	adds	r7, #24
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bd80      	pop	{r7, pc}
 8000d72:	bf00      	nop
 8000d74:	40012c00 	.word	0x40012c00
 8000d78:	40021000 	.word	0x40021000
 8000d7c:	40000400 	.word	0x40000400
 8000d80:	40000800 	.word	0x40000800

08000d84 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b088      	sub	sp, #32
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d8c:	f107 0310 	add.w	r3, r7, #16
 8000d90:	2200      	movs	r2, #0
 8000d92:	601a      	str	r2, [r3, #0]
 8000d94:	605a      	str	r2, [r3, #4]
 8000d96:	609a      	str	r2, [r3, #8]
 8000d98:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM1)
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	4a1f      	ldr	r2, [pc, #124]	; (8000e1c <HAL_TIM_MspPostInit+0x98>)
 8000da0:	4293      	cmp	r3, r2
 8000da2:	d119      	bne.n	8000dd8 <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000da4:	4b1e      	ldr	r3, [pc, #120]	; (8000e20 <HAL_TIM_MspPostInit+0x9c>)
 8000da6:	699b      	ldr	r3, [r3, #24]
 8000da8:	4a1d      	ldr	r2, [pc, #116]	; (8000e20 <HAL_TIM_MspPostInit+0x9c>)
 8000daa:	f043 0304 	orr.w	r3, r3, #4
 8000dae:	6193      	str	r3, [r2, #24]
 8000db0:	4b1b      	ldr	r3, [pc, #108]	; (8000e20 <HAL_TIM_MspPostInit+0x9c>)
 8000db2:	699b      	ldr	r3, [r3, #24]
 8000db4:	f003 0304 	and.w	r3, r3, #4
 8000db8:	60fb      	str	r3, [r7, #12]
 8000dba:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8000dbc:	f44f 6360 	mov.w	r3, #3584	; 0xe00
 8000dc0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dc2:	2302      	movs	r3, #2
 8000dc4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dc6:	2302      	movs	r3, #2
 8000dc8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dca:	f107 0310 	add.w	r3, r7, #16
 8000dce:	4619      	mov	r1, r3
 8000dd0:	4814      	ldr	r0, [pc, #80]	; (8000e24 <HAL_TIM_MspPostInit+0xa0>)
 8000dd2:	f000 f9e3 	bl	800119c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000dd6:	e01c      	b.n	8000e12 <HAL_TIM_MspPostInit+0x8e>
  else if(timHandle->Instance==TIM2)
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000de0:	d117      	bne.n	8000e12 <HAL_TIM_MspPostInit+0x8e>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000de2:	4b0f      	ldr	r3, [pc, #60]	; (8000e20 <HAL_TIM_MspPostInit+0x9c>)
 8000de4:	699b      	ldr	r3, [r3, #24]
 8000de6:	4a0e      	ldr	r2, [pc, #56]	; (8000e20 <HAL_TIM_MspPostInit+0x9c>)
 8000de8:	f043 0304 	orr.w	r3, r3, #4
 8000dec:	6193      	str	r3, [r2, #24]
 8000dee:	4b0c      	ldr	r3, [pc, #48]	; (8000e20 <HAL_TIM_MspPostInit+0x9c>)
 8000df0:	699b      	ldr	r3, [r3, #24]
 8000df2:	f003 0304 	and.w	r3, r3, #4
 8000df6:	60bb      	str	r3, [r7, #8]
 8000df8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000dfa:	2308      	movs	r3, #8
 8000dfc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dfe:	2302      	movs	r3, #2
 8000e00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e02:	2302      	movs	r3, #2
 8000e04:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e06:	f107 0310 	add.w	r3, r7, #16
 8000e0a:	4619      	mov	r1, r3
 8000e0c:	4805      	ldr	r0, [pc, #20]	; (8000e24 <HAL_TIM_MspPostInit+0xa0>)
 8000e0e:	f000 f9c5 	bl	800119c <HAL_GPIO_Init>
}
 8000e12:	bf00      	nop
 8000e14:	3720      	adds	r7, #32
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	40012c00 	.word	0x40012c00
 8000e20:	40021000 	.word	0x40021000
 8000e24:	40010800 	.word	0x40010800

08000e28 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e28:	480c      	ldr	r0, [pc, #48]	; (8000e5c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000e2a:	490d      	ldr	r1, [pc, #52]	; (8000e60 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000e2c:	4a0d      	ldr	r2, [pc, #52]	; (8000e64 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000e2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e30:	e002      	b.n	8000e38 <LoopCopyDataInit>

08000e32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e36:	3304      	adds	r3, #4

08000e38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e3c:	d3f9      	bcc.n	8000e32 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e3e:	4a0a      	ldr	r2, [pc, #40]	; (8000e68 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000e40:	4c0a      	ldr	r4, [pc, #40]	; (8000e6c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000e42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e44:	e001      	b.n	8000e4a <LoopFillZerobss>

08000e46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e48:	3204      	adds	r2, #4

08000e4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e4c:	d3fb      	bcc.n	8000e46 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000e4e:	f7ff fd6b 	bl	8000928 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e52:	f002 fd53 	bl	80038fc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000e56:	f7ff faed 	bl	8000434 <main>
  bx lr
 8000e5a:	4770      	bx	lr
  ldr r0, =_sdata
 8000e5c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e60:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8000e64:	0800398c 	.word	0x0800398c
  ldr r2, =_sbss
 8000e68:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8000e6c:	20000240 	.word	0x20000240

08000e70 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e70:	e7fe      	b.n	8000e70 <ADC1_2_IRQHandler>
	...

08000e74 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e78:	4b08      	ldr	r3, [pc, #32]	; (8000e9c <HAL_Init+0x28>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	4a07      	ldr	r2, [pc, #28]	; (8000e9c <HAL_Init+0x28>)
 8000e7e:	f043 0310 	orr.w	r3, r3, #16
 8000e82:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e84:	2003      	movs	r0, #3
 8000e86:	f000 f947 	bl	8001118 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e8a:	2000      	movs	r0, #0
 8000e8c:	f000 f808 	bl	8000ea0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e90:	f7ff fcc6 	bl	8000820 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e94:	2300      	movs	r3, #0
}
 8000e96:	4618      	mov	r0, r3
 8000e98:	bd80      	pop	{r7, pc}
 8000e9a:	bf00      	nop
 8000e9c:	40022000 	.word	0x40022000

08000ea0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b082      	sub	sp, #8
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ea8:	4b12      	ldr	r3, [pc, #72]	; (8000ef4 <HAL_InitTick+0x54>)
 8000eaa:	681a      	ldr	r2, [r3, #0]
 8000eac:	4b12      	ldr	r3, [pc, #72]	; (8000ef8 <HAL_InitTick+0x58>)
 8000eae:	781b      	ldrb	r3, [r3, #0]
 8000eb0:	4619      	mov	r1, r3
 8000eb2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000eb6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000eba:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	f000 f95f 	bl	8001182 <HAL_SYSTICK_Config>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d001      	beq.n	8000ece <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000eca:	2301      	movs	r3, #1
 8000ecc:	e00e      	b.n	8000eec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	2b0f      	cmp	r3, #15
 8000ed2:	d80a      	bhi.n	8000eea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	6879      	ldr	r1, [r7, #4]
 8000ed8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000edc:	f000 f927 	bl	800112e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ee0:	4a06      	ldr	r2, [pc, #24]	; (8000efc <HAL_InitTick+0x5c>)
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	e000      	b.n	8000eec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000eea:	2301      	movs	r3, #1
}
 8000eec:	4618      	mov	r0, r3
 8000eee:	3708      	adds	r7, #8
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bd80      	pop	{r7, pc}
 8000ef4:	2000000c 	.word	0x2000000c
 8000ef8:	20000014 	.word	0x20000014
 8000efc:	20000010 	.word	0x20000010

08000f00 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f00:	b480      	push	{r7}
 8000f02:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f04:	4b05      	ldr	r3, [pc, #20]	; (8000f1c <HAL_IncTick+0x1c>)
 8000f06:	781b      	ldrb	r3, [r3, #0]
 8000f08:	461a      	mov	r2, r3
 8000f0a:	4b05      	ldr	r3, [pc, #20]	; (8000f20 <HAL_IncTick+0x20>)
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	4413      	add	r3, r2
 8000f10:	4a03      	ldr	r2, [pc, #12]	; (8000f20 <HAL_IncTick+0x20>)
 8000f12:	6013      	str	r3, [r2, #0]
}
 8000f14:	bf00      	nop
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bc80      	pop	{r7}
 8000f1a:	4770      	bx	lr
 8000f1c:	20000014 	.word	0x20000014
 8000f20:	2000023c 	.word	0x2000023c

08000f24 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f24:	b480      	push	{r7}
 8000f26:	af00      	add	r7, sp, #0
  return uwTick;
 8000f28:	4b02      	ldr	r3, [pc, #8]	; (8000f34 <HAL_GetTick+0x10>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
}
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bc80      	pop	{r7}
 8000f32:	4770      	bx	lr
 8000f34:	2000023c 	.word	0x2000023c

08000f38 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b084      	sub	sp, #16
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f40:	f7ff fff0 	bl	8000f24 <HAL_GetTick>
 8000f44:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f4a:	68fb      	ldr	r3, [r7, #12]
 8000f4c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000f50:	d005      	beq.n	8000f5e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f52:	4b0a      	ldr	r3, [pc, #40]	; (8000f7c <HAL_Delay+0x44>)
 8000f54:	781b      	ldrb	r3, [r3, #0]
 8000f56:	461a      	mov	r2, r3
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	4413      	add	r3, r2
 8000f5c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f5e:	bf00      	nop
 8000f60:	f7ff ffe0 	bl	8000f24 <HAL_GetTick>
 8000f64:	4602      	mov	r2, r0
 8000f66:	68bb      	ldr	r3, [r7, #8]
 8000f68:	1ad3      	subs	r3, r2, r3
 8000f6a:	68fa      	ldr	r2, [r7, #12]
 8000f6c:	429a      	cmp	r2, r3
 8000f6e:	d8f7      	bhi.n	8000f60 <HAL_Delay+0x28>
  {
  }
}
 8000f70:	bf00      	nop
 8000f72:	bf00      	nop
 8000f74:	3710      	adds	r7, #16
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	bf00      	nop
 8000f7c:	20000014 	.word	0x20000014

08000f80 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f80:	b480      	push	{r7}
 8000f82:	b085      	sub	sp, #20
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	f003 0307 	and.w	r3, r3, #7
 8000f8e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f90:	4b0c      	ldr	r3, [pc, #48]	; (8000fc4 <__NVIC_SetPriorityGrouping+0x44>)
 8000f92:	68db      	ldr	r3, [r3, #12]
 8000f94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f96:	68ba      	ldr	r2, [r7, #8]
 8000f98:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f9c:	4013      	ands	r3, r2
 8000f9e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fa4:	68bb      	ldr	r3, [r7, #8]
 8000fa6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fa8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000fac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fb0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fb2:	4a04      	ldr	r2, [pc, #16]	; (8000fc4 <__NVIC_SetPriorityGrouping+0x44>)
 8000fb4:	68bb      	ldr	r3, [r7, #8]
 8000fb6:	60d3      	str	r3, [r2, #12]
}
 8000fb8:	bf00      	nop
 8000fba:	3714      	adds	r7, #20
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bc80      	pop	{r7}
 8000fc0:	4770      	bx	lr
 8000fc2:	bf00      	nop
 8000fc4:	e000ed00 	.word	0xe000ed00

08000fc8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fcc:	4b04      	ldr	r3, [pc, #16]	; (8000fe0 <__NVIC_GetPriorityGrouping+0x18>)
 8000fce:	68db      	ldr	r3, [r3, #12]
 8000fd0:	0a1b      	lsrs	r3, r3, #8
 8000fd2:	f003 0307 	and.w	r3, r3, #7
}
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bc80      	pop	{r7}
 8000fdc:	4770      	bx	lr
 8000fde:	bf00      	nop
 8000fe0:	e000ed00 	.word	0xe000ed00

08000fe4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	b083      	sub	sp, #12
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	4603      	mov	r3, r0
 8000fec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	db0b      	blt.n	800100e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ff6:	79fb      	ldrb	r3, [r7, #7]
 8000ff8:	f003 021f 	and.w	r2, r3, #31
 8000ffc:	4906      	ldr	r1, [pc, #24]	; (8001018 <__NVIC_EnableIRQ+0x34>)
 8000ffe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001002:	095b      	lsrs	r3, r3, #5
 8001004:	2001      	movs	r0, #1
 8001006:	fa00 f202 	lsl.w	r2, r0, r2
 800100a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800100e:	bf00      	nop
 8001010:	370c      	adds	r7, #12
 8001012:	46bd      	mov	sp, r7
 8001014:	bc80      	pop	{r7}
 8001016:	4770      	bx	lr
 8001018:	e000e100 	.word	0xe000e100

0800101c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800101c:	b480      	push	{r7}
 800101e:	b083      	sub	sp, #12
 8001020:	af00      	add	r7, sp, #0
 8001022:	4603      	mov	r3, r0
 8001024:	6039      	str	r1, [r7, #0]
 8001026:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001028:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800102c:	2b00      	cmp	r3, #0
 800102e:	db0a      	blt.n	8001046 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	b2da      	uxtb	r2, r3
 8001034:	490c      	ldr	r1, [pc, #48]	; (8001068 <__NVIC_SetPriority+0x4c>)
 8001036:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800103a:	0112      	lsls	r2, r2, #4
 800103c:	b2d2      	uxtb	r2, r2
 800103e:	440b      	add	r3, r1
 8001040:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001044:	e00a      	b.n	800105c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	b2da      	uxtb	r2, r3
 800104a:	4908      	ldr	r1, [pc, #32]	; (800106c <__NVIC_SetPriority+0x50>)
 800104c:	79fb      	ldrb	r3, [r7, #7]
 800104e:	f003 030f 	and.w	r3, r3, #15
 8001052:	3b04      	subs	r3, #4
 8001054:	0112      	lsls	r2, r2, #4
 8001056:	b2d2      	uxtb	r2, r2
 8001058:	440b      	add	r3, r1
 800105a:	761a      	strb	r2, [r3, #24]
}
 800105c:	bf00      	nop
 800105e:	370c      	adds	r7, #12
 8001060:	46bd      	mov	sp, r7
 8001062:	bc80      	pop	{r7}
 8001064:	4770      	bx	lr
 8001066:	bf00      	nop
 8001068:	e000e100 	.word	0xe000e100
 800106c:	e000ed00 	.word	0xe000ed00

08001070 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001070:	b480      	push	{r7}
 8001072:	b089      	sub	sp, #36	; 0x24
 8001074:	af00      	add	r7, sp, #0
 8001076:	60f8      	str	r0, [r7, #12]
 8001078:	60b9      	str	r1, [r7, #8]
 800107a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	f003 0307 	and.w	r3, r3, #7
 8001082:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001084:	69fb      	ldr	r3, [r7, #28]
 8001086:	f1c3 0307 	rsb	r3, r3, #7
 800108a:	2b04      	cmp	r3, #4
 800108c:	bf28      	it	cs
 800108e:	2304      	movcs	r3, #4
 8001090:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001092:	69fb      	ldr	r3, [r7, #28]
 8001094:	3304      	adds	r3, #4
 8001096:	2b06      	cmp	r3, #6
 8001098:	d902      	bls.n	80010a0 <NVIC_EncodePriority+0x30>
 800109a:	69fb      	ldr	r3, [r7, #28]
 800109c:	3b03      	subs	r3, #3
 800109e:	e000      	b.n	80010a2 <NVIC_EncodePriority+0x32>
 80010a0:	2300      	movs	r3, #0
 80010a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010a4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80010a8:	69bb      	ldr	r3, [r7, #24]
 80010aa:	fa02 f303 	lsl.w	r3, r2, r3
 80010ae:	43da      	mvns	r2, r3
 80010b0:	68bb      	ldr	r3, [r7, #8]
 80010b2:	401a      	ands	r2, r3
 80010b4:	697b      	ldr	r3, [r7, #20]
 80010b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010b8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80010bc:	697b      	ldr	r3, [r7, #20]
 80010be:	fa01 f303 	lsl.w	r3, r1, r3
 80010c2:	43d9      	mvns	r1, r3
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010c8:	4313      	orrs	r3, r2
         );
}
 80010ca:	4618      	mov	r0, r3
 80010cc:	3724      	adds	r7, #36	; 0x24
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bc80      	pop	{r7}
 80010d2:	4770      	bx	lr

080010d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b082      	sub	sp, #8
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	3b01      	subs	r3, #1
 80010e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80010e4:	d301      	bcc.n	80010ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010e6:	2301      	movs	r3, #1
 80010e8:	e00f      	b.n	800110a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010ea:	4a0a      	ldr	r2, [pc, #40]	; (8001114 <SysTick_Config+0x40>)
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	3b01      	subs	r3, #1
 80010f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010f2:	210f      	movs	r1, #15
 80010f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80010f8:	f7ff ff90 	bl	800101c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010fc:	4b05      	ldr	r3, [pc, #20]	; (8001114 <SysTick_Config+0x40>)
 80010fe:	2200      	movs	r2, #0
 8001100:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001102:	4b04      	ldr	r3, [pc, #16]	; (8001114 <SysTick_Config+0x40>)
 8001104:	2207      	movs	r2, #7
 8001106:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001108:	2300      	movs	r3, #0
}
 800110a:	4618      	mov	r0, r3
 800110c:	3708      	adds	r7, #8
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	e000e010 	.word	0xe000e010

08001118 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b082      	sub	sp, #8
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001120:	6878      	ldr	r0, [r7, #4]
 8001122:	f7ff ff2d 	bl	8000f80 <__NVIC_SetPriorityGrouping>
}
 8001126:	bf00      	nop
 8001128:	3708      	adds	r7, #8
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}

0800112e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800112e:	b580      	push	{r7, lr}
 8001130:	b086      	sub	sp, #24
 8001132:	af00      	add	r7, sp, #0
 8001134:	4603      	mov	r3, r0
 8001136:	60b9      	str	r1, [r7, #8]
 8001138:	607a      	str	r2, [r7, #4]
 800113a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800113c:	2300      	movs	r3, #0
 800113e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001140:	f7ff ff42 	bl	8000fc8 <__NVIC_GetPriorityGrouping>
 8001144:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001146:	687a      	ldr	r2, [r7, #4]
 8001148:	68b9      	ldr	r1, [r7, #8]
 800114a:	6978      	ldr	r0, [r7, #20]
 800114c:	f7ff ff90 	bl	8001070 <NVIC_EncodePriority>
 8001150:	4602      	mov	r2, r0
 8001152:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001156:	4611      	mov	r1, r2
 8001158:	4618      	mov	r0, r3
 800115a:	f7ff ff5f 	bl	800101c <__NVIC_SetPriority>
}
 800115e:	bf00      	nop
 8001160:	3718      	adds	r7, #24
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}

08001166 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001166:	b580      	push	{r7, lr}
 8001168:	b082      	sub	sp, #8
 800116a:	af00      	add	r7, sp, #0
 800116c:	4603      	mov	r3, r0
 800116e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001170:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001174:	4618      	mov	r0, r3
 8001176:	f7ff ff35 	bl	8000fe4 <__NVIC_EnableIRQ>
}
 800117a:	bf00      	nop
 800117c:	3708      	adds	r7, #8
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}

08001182 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001182:	b580      	push	{r7, lr}
 8001184:	b082      	sub	sp, #8
 8001186:	af00      	add	r7, sp, #0
 8001188:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800118a:	6878      	ldr	r0, [r7, #4]
 800118c:	f7ff ffa2 	bl	80010d4 <SysTick_Config>
 8001190:	4603      	mov	r3, r0
}
 8001192:	4618      	mov	r0, r3
 8001194:	3708      	adds	r7, #8
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}
	...

0800119c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800119c:	b480      	push	{r7}
 800119e:	b08b      	sub	sp, #44	; 0x2c
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
 80011a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80011a6:	2300      	movs	r3, #0
 80011a8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80011aa:	2300      	movs	r3, #0
 80011ac:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011ae:	e169      	b.n	8001484 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80011b0:	2201      	movs	r2, #1
 80011b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011b4:	fa02 f303 	lsl.w	r3, r2, r3
 80011b8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	69fa      	ldr	r2, [r7, #28]
 80011c0:	4013      	ands	r3, r2
 80011c2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80011c4:	69ba      	ldr	r2, [r7, #24]
 80011c6:	69fb      	ldr	r3, [r7, #28]
 80011c8:	429a      	cmp	r2, r3
 80011ca:	f040 8158 	bne.w	800147e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80011ce:	683b      	ldr	r3, [r7, #0]
 80011d0:	685b      	ldr	r3, [r3, #4]
 80011d2:	4a9a      	ldr	r2, [pc, #616]	; (800143c <HAL_GPIO_Init+0x2a0>)
 80011d4:	4293      	cmp	r3, r2
 80011d6:	d05e      	beq.n	8001296 <HAL_GPIO_Init+0xfa>
 80011d8:	4a98      	ldr	r2, [pc, #608]	; (800143c <HAL_GPIO_Init+0x2a0>)
 80011da:	4293      	cmp	r3, r2
 80011dc:	d875      	bhi.n	80012ca <HAL_GPIO_Init+0x12e>
 80011de:	4a98      	ldr	r2, [pc, #608]	; (8001440 <HAL_GPIO_Init+0x2a4>)
 80011e0:	4293      	cmp	r3, r2
 80011e2:	d058      	beq.n	8001296 <HAL_GPIO_Init+0xfa>
 80011e4:	4a96      	ldr	r2, [pc, #600]	; (8001440 <HAL_GPIO_Init+0x2a4>)
 80011e6:	4293      	cmp	r3, r2
 80011e8:	d86f      	bhi.n	80012ca <HAL_GPIO_Init+0x12e>
 80011ea:	4a96      	ldr	r2, [pc, #600]	; (8001444 <HAL_GPIO_Init+0x2a8>)
 80011ec:	4293      	cmp	r3, r2
 80011ee:	d052      	beq.n	8001296 <HAL_GPIO_Init+0xfa>
 80011f0:	4a94      	ldr	r2, [pc, #592]	; (8001444 <HAL_GPIO_Init+0x2a8>)
 80011f2:	4293      	cmp	r3, r2
 80011f4:	d869      	bhi.n	80012ca <HAL_GPIO_Init+0x12e>
 80011f6:	4a94      	ldr	r2, [pc, #592]	; (8001448 <HAL_GPIO_Init+0x2ac>)
 80011f8:	4293      	cmp	r3, r2
 80011fa:	d04c      	beq.n	8001296 <HAL_GPIO_Init+0xfa>
 80011fc:	4a92      	ldr	r2, [pc, #584]	; (8001448 <HAL_GPIO_Init+0x2ac>)
 80011fe:	4293      	cmp	r3, r2
 8001200:	d863      	bhi.n	80012ca <HAL_GPIO_Init+0x12e>
 8001202:	4a92      	ldr	r2, [pc, #584]	; (800144c <HAL_GPIO_Init+0x2b0>)
 8001204:	4293      	cmp	r3, r2
 8001206:	d046      	beq.n	8001296 <HAL_GPIO_Init+0xfa>
 8001208:	4a90      	ldr	r2, [pc, #576]	; (800144c <HAL_GPIO_Init+0x2b0>)
 800120a:	4293      	cmp	r3, r2
 800120c:	d85d      	bhi.n	80012ca <HAL_GPIO_Init+0x12e>
 800120e:	2b12      	cmp	r3, #18
 8001210:	d82a      	bhi.n	8001268 <HAL_GPIO_Init+0xcc>
 8001212:	2b12      	cmp	r3, #18
 8001214:	d859      	bhi.n	80012ca <HAL_GPIO_Init+0x12e>
 8001216:	a201      	add	r2, pc, #4	; (adr r2, 800121c <HAL_GPIO_Init+0x80>)
 8001218:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800121c:	08001297 	.word	0x08001297
 8001220:	08001271 	.word	0x08001271
 8001224:	08001283 	.word	0x08001283
 8001228:	080012c5 	.word	0x080012c5
 800122c:	080012cb 	.word	0x080012cb
 8001230:	080012cb 	.word	0x080012cb
 8001234:	080012cb 	.word	0x080012cb
 8001238:	080012cb 	.word	0x080012cb
 800123c:	080012cb 	.word	0x080012cb
 8001240:	080012cb 	.word	0x080012cb
 8001244:	080012cb 	.word	0x080012cb
 8001248:	080012cb 	.word	0x080012cb
 800124c:	080012cb 	.word	0x080012cb
 8001250:	080012cb 	.word	0x080012cb
 8001254:	080012cb 	.word	0x080012cb
 8001258:	080012cb 	.word	0x080012cb
 800125c:	080012cb 	.word	0x080012cb
 8001260:	08001279 	.word	0x08001279
 8001264:	0800128d 	.word	0x0800128d
 8001268:	4a79      	ldr	r2, [pc, #484]	; (8001450 <HAL_GPIO_Init+0x2b4>)
 800126a:	4293      	cmp	r3, r2
 800126c:	d013      	beq.n	8001296 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800126e:	e02c      	b.n	80012ca <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	68db      	ldr	r3, [r3, #12]
 8001274:	623b      	str	r3, [r7, #32]
          break;
 8001276:	e029      	b.n	80012cc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	68db      	ldr	r3, [r3, #12]
 800127c:	3304      	adds	r3, #4
 800127e:	623b      	str	r3, [r7, #32]
          break;
 8001280:	e024      	b.n	80012cc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001282:	683b      	ldr	r3, [r7, #0]
 8001284:	68db      	ldr	r3, [r3, #12]
 8001286:	3308      	adds	r3, #8
 8001288:	623b      	str	r3, [r7, #32]
          break;
 800128a:	e01f      	b.n	80012cc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	68db      	ldr	r3, [r3, #12]
 8001290:	330c      	adds	r3, #12
 8001292:	623b      	str	r3, [r7, #32]
          break;
 8001294:	e01a      	b.n	80012cc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001296:	683b      	ldr	r3, [r7, #0]
 8001298:	689b      	ldr	r3, [r3, #8]
 800129a:	2b00      	cmp	r3, #0
 800129c:	d102      	bne.n	80012a4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800129e:	2304      	movs	r3, #4
 80012a0:	623b      	str	r3, [r7, #32]
          break;
 80012a2:	e013      	b.n	80012cc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	689b      	ldr	r3, [r3, #8]
 80012a8:	2b01      	cmp	r3, #1
 80012aa:	d105      	bne.n	80012b8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80012ac:	2308      	movs	r3, #8
 80012ae:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	69fa      	ldr	r2, [r7, #28]
 80012b4:	611a      	str	r2, [r3, #16]
          break;
 80012b6:	e009      	b.n	80012cc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80012b8:	2308      	movs	r3, #8
 80012ba:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	69fa      	ldr	r2, [r7, #28]
 80012c0:	615a      	str	r2, [r3, #20]
          break;
 80012c2:	e003      	b.n	80012cc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80012c4:	2300      	movs	r3, #0
 80012c6:	623b      	str	r3, [r7, #32]
          break;
 80012c8:	e000      	b.n	80012cc <HAL_GPIO_Init+0x130>
          break;
 80012ca:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80012cc:	69bb      	ldr	r3, [r7, #24]
 80012ce:	2bff      	cmp	r3, #255	; 0xff
 80012d0:	d801      	bhi.n	80012d6 <HAL_GPIO_Init+0x13a>
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	e001      	b.n	80012da <HAL_GPIO_Init+0x13e>
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	3304      	adds	r3, #4
 80012da:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80012dc:	69bb      	ldr	r3, [r7, #24]
 80012de:	2bff      	cmp	r3, #255	; 0xff
 80012e0:	d802      	bhi.n	80012e8 <HAL_GPIO_Init+0x14c>
 80012e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012e4:	009b      	lsls	r3, r3, #2
 80012e6:	e002      	b.n	80012ee <HAL_GPIO_Init+0x152>
 80012e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012ea:	3b08      	subs	r3, #8
 80012ec:	009b      	lsls	r3, r3, #2
 80012ee:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80012f0:	697b      	ldr	r3, [r7, #20]
 80012f2:	681a      	ldr	r2, [r3, #0]
 80012f4:	210f      	movs	r1, #15
 80012f6:	693b      	ldr	r3, [r7, #16]
 80012f8:	fa01 f303 	lsl.w	r3, r1, r3
 80012fc:	43db      	mvns	r3, r3
 80012fe:	401a      	ands	r2, r3
 8001300:	6a39      	ldr	r1, [r7, #32]
 8001302:	693b      	ldr	r3, [r7, #16]
 8001304:	fa01 f303 	lsl.w	r3, r1, r3
 8001308:	431a      	orrs	r2, r3
 800130a:	697b      	ldr	r3, [r7, #20]
 800130c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800130e:	683b      	ldr	r3, [r7, #0]
 8001310:	685b      	ldr	r3, [r3, #4]
 8001312:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001316:	2b00      	cmp	r3, #0
 8001318:	f000 80b1 	beq.w	800147e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800131c:	4b4d      	ldr	r3, [pc, #308]	; (8001454 <HAL_GPIO_Init+0x2b8>)
 800131e:	699b      	ldr	r3, [r3, #24]
 8001320:	4a4c      	ldr	r2, [pc, #304]	; (8001454 <HAL_GPIO_Init+0x2b8>)
 8001322:	f043 0301 	orr.w	r3, r3, #1
 8001326:	6193      	str	r3, [r2, #24]
 8001328:	4b4a      	ldr	r3, [pc, #296]	; (8001454 <HAL_GPIO_Init+0x2b8>)
 800132a:	699b      	ldr	r3, [r3, #24]
 800132c:	f003 0301 	and.w	r3, r3, #1
 8001330:	60bb      	str	r3, [r7, #8]
 8001332:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001334:	4a48      	ldr	r2, [pc, #288]	; (8001458 <HAL_GPIO_Init+0x2bc>)
 8001336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001338:	089b      	lsrs	r3, r3, #2
 800133a:	3302      	adds	r3, #2
 800133c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001340:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001344:	f003 0303 	and.w	r3, r3, #3
 8001348:	009b      	lsls	r3, r3, #2
 800134a:	220f      	movs	r2, #15
 800134c:	fa02 f303 	lsl.w	r3, r2, r3
 8001350:	43db      	mvns	r3, r3
 8001352:	68fa      	ldr	r2, [r7, #12]
 8001354:	4013      	ands	r3, r2
 8001356:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	4a40      	ldr	r2, [pc, #256]	; (800145c <HAL_GPIO_Init+0x2c0>)
 800135c:	4293      	cmp	r3, r2
 800135e:	d013      	beq.n	8001388 <HAL_GPIO_Init+0x1ec>
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	4a3f      	ldr	r2, [pc, #252]	; (8001460 <HAL_GPIO_Init+0x2c4>)
 8001364:	4293      	cmp	r3, r2
 8001366:	d00d      	beq.n	8001384 <HAL_GPIO_Init+0x1e8>
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	4a3e      	ldr	r2, [pc, #248]	; (8001464 <HAL_GPIO_Init+0x2c8>)
 800136c:	4293      	cmp	r3, r2
 800136e:	d007      	beq.n	8001380 <HAL_GPIO_Init+0x1e4>
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	4a3d      	ldr	r2, [pc, #244]	; (8001468 <HAL_GPIO_Init+0x2cc>)
 8001374:	4293      	cmp	r3, r2
 8001376:	d101      	bne.n	800137c <HAL_GPIO_Init+0x1e0>
 8001378:	2303      	movs	r3, #3
 800137a:	e006      	b.n	800138a <HAL_GPIO_Init+0x1ee>
 800137c:	2304      	movs	r3, #4
 800137e:	e004      	b.n	800138a <HAL_GPIO_Init+0x1ee>
 8001380:	2302      	movs	r3, #2
 8001382:	e002      	b.n	800138a <HAL_GPIO_Init+0x1ee>
 8001384:	2301      	movs	r3, #1
 8001386:	e000      	b.n	800138a <HAL_GPIO_Init+0x1ee>
 8001388:	2300      	movs	r3, #0
 800138a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800138c:	f002 0203 	and.w	r2, r2, #3
 8001390:	0092      	lsls	r2, r2, #2
 8001392:	4093      	lsls	r3, r2
 8001394:	68fa      	ldr	r2, [r7, #12]
 8001396:	4313      	orrs	r3, r2
 8001398:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800139a:	492f      	ldr	r1, [pc, #188]	; (8001458 <HAL_GPIO_Init+0x2bc>)
 800139c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800139e:	089b      	lsrs	r3, r3, #2
 80013a0:	3302      	adds	r3, #2
 80013a2:	68fa      	ldr	r2, [r7, #12]
 80013a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	685b      	ldr	r3, [r3, #4]
 80013ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d006      	beq.n	80013c2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80013b4:	4b2d      	ldr	r3, [pc, #180]	; (800146c <HAL_GPIO_Init+0x2d0>)
 80013b6:	681a      	ldr	r2, [r3, #0]
 80013b8:	492c      	ldr	r1, [pc, #176]	; (800146c <HAL_GPIO_Init+0x2d0>)
 80013ba:	69bb      	ldr	r3, [r7, #24]
 80013bc:	4313      	orrs	r3, r2
 80013be:	600b      	str	r3, [r1, #0]
 80013c0:	e006      	b.n	80013d0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80013c2:	4b2a      	ldr	r3, [pc, #168]	; (800146c <HAL_GPIO_Init+0x2d0>)
 80013c4:	681a      	ldr	r2, [r3, #0]
 80013c6:	69bb      	ldr	r3, [r7, #24]
 80013c8:	43db      	mvns	r3, r3
 80013ca:	4928      	ldr	r1, [pc, #160]	; (800146c <HAL_GPIO_Init+0x2d0>)
 80013cc:	4013      	ands	r3, r2
 80013ce:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	685b      	ldr	r3, [r3, #4]
 80013d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d006      	beq.n	80013ea <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80013dc:	4b23      	ldr	r3, [pc, #140]	; (800146c <HAL_GPIO_Init+0x2d0>)
 80013de:	685a      	ldr	r2, [r3, #4]
 80013e0:	4922      	ldr	r1, [pc, #136]	; (800146c <HAL_GPIO_Init+0x2d0>)
 80013e2:	69bb      	ldr	r3, [r7, #24]
 80013e4:	4313      	orrs	r3, r2
 80013e6:	604b      	str	r3, [r1, #4]
 80013e8:	e006      	b.n	80013f8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80013ea:	4b20      	ldr	r3, [pc, #128]	; (800146c <HAL_GPIO_Init+0x2d0>)
 80013ec:	685a      	ldr	r2, [r3, #4]
 80013ee:	69bb      	ldr	r3, [r7, #24]
 80013f0:	43db      	mvns	r3, r3
 80013f2:	491e      	ldr	r1, [pc, #120]	; (800146c <HAL_GPIO_Init+0x2d0>)
 80013f4:	4013      	ands	r3, r2
 80013f6:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001400:	2b00      	cmp	r3, #0
 8001402:	d006      	beq.n	8001412 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001404:	4b19      	ldr	r3, [pc, #100]	; (800146c <HAL_GPIO_Init+0x2d0>)
 8001406:	689a      	ldr	r2, [r3, #8]
 8001408:	4918      	ldr	r1, [pc, #96]	; (800146c <HAL_GPIO_Init+0x2d0>)
 800140a:	69bb      	ldr	r3, [r7, #24]
 800140c:	4313      	orrs	r3, r2
 800140e:	608b      	str	r3, [r1, #8]
 8001410:	e006      	b.n	8001420 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001412:	4b16      	ldr	r3, [pc, #88]	; (800146c <HAL_GPIO_Init+0x2d0>)
 8001414:	689a      	ldr	r2, [r3, #8]
 8001416:	69bb      	ldr	r3, [r7, #24]
 8001418:	43db      	mvns	r3, r3
 800141a:	4914      	ldr	r1, [pc, #80]	; (800146c <HAL_GPIO_Init+0x2d0>)
 800141c:	4013      	ands	r3, r2
 800141e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	685b      	ldr	r3, [r3, #4]
 8001424:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001428:	2b00      	cmp	r3, #0
 800142a:	d021      	beq.n	8001470 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800142c:	4b0f      	ldr	r3, [pc, #60]	; (800146c <HAL_GPIO_Init+0x2d0>)
 800142e:	68da      	ldr	r2, [r3, #12]
 8001430:	490e      	ldr	r1, [pc, #56]	; (800146c <HAL_GPIO_Init+0x2d0>)
 8001432:	69bb      	ldr	r3, [r7, #24]
 8001434:	4313      	orrs	r3, r2
 8001436:	60cb      	str	r3, [r1, #12]
 8001438:	e021      	b.n	800147e <HAL_GPIO_Init+0x2e2>
 800143a:	bf00      	nop
 800143c:	10320000 	.word	0x10320000
 8001440:	10310000 	.word	0x10310000
 8001444:	10220000 	.word	0x10220000
 8001448:	10210000 	.word	0x10210000
 800144c:	10120000 	.word	0x10120000
 8001450:	10110000 	.word	0x10110000
 8001454:	40021000 	.word	0x40021000
 8001458:	40010000 	.word	0x40010000
 800145c:	40010800 	.word	0x40010800
 8001460:	40010c00 	.word	0x40010c00
 8001464:	40011000 	.word	0x40011000
 8001468:	40011400 	.word	0x40011400
 800146c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001470:	4b0b      	ldr	r3, [pc, #44]	; (80014a0 <HAL_GPIO_Init+0x304>)
 8001472:	68da      	ldr	r2, [r3, #12]
 8001474:	69bb      	ldr	r3, [r7, #24]
 8001476:	43db      	mvns	r3, r3
 8001478:	4909      	ldr	r1, [pc, #36]	; (80014a0 <HAL_GPIO_Init+0x304>)
 800147a:	4013      	ands	r3, r2
 800147c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800147e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001480:	3301      	adds	r3, #1
 8001482:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	681a      	ldr	r2, [r3, #0]
 8001488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800148a:	fa22 f303 	lsr.w	r3, r2, r3
 800148e:	2b00      	cmp	r3, #0
 8001490:	f47f ae8e 	bne.w	80011b0 <HAL_GPIO_Init+0x14>
  }
}
 8001494:	bf00      	nop
 8001496:	bf00      	nop
 8001498:	372c      	adds	r7, #44	; 0x2c
 800149a:	46bd      	mov	sp, r7
 800149c:	bc80      	pop	{r7}
 800149e:	4770      	bx	lr
 80014a0:	40010400 	.word	0x40010400

080014a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014a4:	b480      	push	{r7}
 80014a6:	b083      	sub	sp, #12
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
 80014ac:	460b      	mov	r3, r1
 80014ae:	807b      	strh	r3, [r7, #2]
 80014b0:	4613      	mov	r3, r2
 80014b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80014b4:	787b      	ldrb	r3, [r7, #1]
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d003      	beq.n	80014c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80014ba:	887a      	ldrh	r2, [r7, #2]
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80014c0:	e003      	b.n	80014ca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80014c2:	887b      	ldrh	r3, [r7, #2]
 80014c4:	041a      	lsls	r2, r3, #16
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	611a      	str	r2, [r3, #16]
}
 80014ca:	bf00      	nop
 80014cc:	370c      	adds	r7, #12
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bc80      	pop	{r7}
 80014d2:	4770      	bx	lr

080014d4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b082      	sub	sp, #8
 80014d8:	af00      	add	r7, sp, #0
 80014da:	4603      	mov	r3, r0
 80014dc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80014de:	4b08      	ldr	r3, [pc, #32]	; (8001500 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80014e0:	695a      	ldr	r2, [r3, #20]
 80014e2:	88fb      	ldrh	r3, [r7, #6]
 80014e4:	4013      	ands	r3, r2
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d006      	beq.n	80014f8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80014ea:	4a05      	ldr	r2, [pc, #20]	; (8001500 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80014ec:	88fb      	ldrh	r3, [r7, #6]
 80014ee:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80014f0:	88fb      	ldrh	r3, [r7, #6]
 80014f2:	4618      	mov	r0, r3
 80014f4:	f000 f806 	bl	8001504 <HAL_GPIO_EXTI_Callback>
  }
}
 80014f8:	bf00      	nop
 80014fa:	3708      	adds	r7, #8
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bd80      	pop	{r7, pc}
 8001500:	40010400 	.word	0x40010400

08001504 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001504:	b480      	push	{r7}
 8001506:	b083      	sub	sp, #12
 8001508:	af00      	add	r7, sp, #0
 800150a:	4603      	mov	r3, r0
 800150c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800150e:	bf00      	nop
 8001510:	370c      	adds	r7, #12
 8001512:	46bd      	mov	sp, r7
 8001514:	bc80      	pop	{r7}
 8001516:	4770      	bx	lr

08001518 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b084      	sub	sp, #16
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	2b00      	cmp	r3, #0
 8001524:	d101      	bne.n	800152a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001526:	2301      	movs	r3, #1
 8001528:	e12b      	b.n	8001782 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001530:	b2db      	uxtb	r3, r3
 8001532:	2b00      	cmp	r3, #0
 8001534:	d106      	bne.n	8001544 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	2200      	movs	r2, #0
 800153a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800153e:	6878      	ldr	r0, [r7, #4]
 8001540:	f7fe ff0c 	bl	800035c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	2224      	movs	r2, #36	; 0x24
 8001548:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	681a      	ldr	r2, [r3, #0]
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f022 0201 	bic.w	r2, r2, #1
 800155a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	681a      	ldr	r2, [r3, #0]
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800156a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	681a      	ldr	r2, [r3, #0]
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800157a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800157c:	f000 fce4 	bl	8001f48 <HAL_RCC_GetPCLK1Freq>
 8001580:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	685b      	ldr	r3, [r3, #4]
 8001586:	4a81      	ldr	r2, [pc, #516]	; (800178c <HAL_I2C_Init+0x274>)
 8001588:	4293      	cmp	r3, r2
 800158a:	d807      	bhi.n	800159c <HAL_I2C_Init+0x84>
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	4a80      	ldr	r2, [pc, #512]	; (8001790 <HAL_I2C_Init+0x278>)
 8001590:	4293      	cmp	r3, r2
 8001592:	bf94      	ite	ls
 8001594:	2301      	movls	r3, #1
 8001596:	2300      	movhi	r3, #0
 8001598:	b2db      	uxtb	r3, r3
 800159a:	e006      	b.n	80015aa <HAL_I2C_Init+0x92>
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	4a7d      	ldr	r2, [pc, #500]	; (8001794 <HAL_I2C_Init+0x27c>)
 80015a0:	4293      	cmp	r3, r2
 80015a2:	bf94      	ite	ls
 80015a4:	2301      	movls	r3, #1
 80015a6:	2300      	movhi	r3, #0
 80015a8:	b2db      	uxtb	r3, r3
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d001      	beq.n	80015b2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80015ae:	2301      	movs	r3, #1
 80015b0:	e0e7      	b.n	8001782 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	4a78      	ldr	r2, [pc, #480]	; (8001798 <HAL_I2C_Init+0x280>)
 80015b6:	fba2 2303 	umull	r2, r3, r2, r3
 80015ba:	0c9b      	lsrs	r3, r3, #18
 80015bc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	685b      	ldr	r3, [r3, #4]
 80015c4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	68ba      	ldr	r2, [r7, #8]
 80015ce:	430a      	orrs	r2, r1
 80015d0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	6a1b      	ldr	r3, [r3, #32]
 80015d8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	685b      	ldr	r3, [r3, #4]
 80015e0:	4a6a      	ldr	r2, [pc, #424]	; (800178c <HAL_I2C_Init+0x274>)
 80015e2:	4293      	cmp	r3, r2
 80015e4:	d802      	bhi.n	80015ec <HAL_I2C_Init+0xd4>
 80015e6:	68bb      	ldr	r3, [r7, #8]
 80015e8:	3301      	adds	r3, #1
 80015ea:	e009      	b.n	8001600 <HAL_I2C_Init+0xe8>
 80015ec:	68bb      	ldr	r3, [r7, #8]
 80015ee:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80015f2:	fb02 f303 	mul.w	r3, r2, r3
 80015f6:	4a69      	ldr	r2, [pc, #420]	; (800179c <HAL_I2C_Init+0x284>)
 80015f8:	fba2 2303 	umull	r2, r3, r2, r3
 80015fc:	099b      	lsrs	r3, r3, #6
 80015fe:	3301      	adds	r3, #1
 8001600:	687a      	ldr	r2, [r7, #4]
 8001602:	6812      	ldr	r2, [r2, #0]
 8001604:	430b      	orrs	r3, r1
 8001606:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	69db      	ldr	r3, [r3, #28]
 800160e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001612:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	685b      	ldr	r3, [r3, #4]
 800161a:	495c      	ldr	r1, [pc, #368]	; (800178c <HAL_I2C_Init+0x274>)
 800161c:	428b      	cmp	r3, r1
 800161e:	d819      	bhi.n	8001654 <HAL_I2C_Init+0x13c>
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	1e59      	subs	r1, r3, #1
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	685b      	ldr	r3, [r3, #4]
 8001628:	005b      	lsls	r3, r3, #1
 800162a:	fbb1 f3f3 	udiv	r3, r1, r3
 800162e:	1c59      	adds	r1, r3, #1
 8001630:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001634:	400b      	ands	r3, r1
 8001636:	2b00      	cmp	r3, #0
 8001638:	d00a      	beq.n	8001650 <HAL_I2C_Init+0x138>
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	1e59      	subs	r1, r3, #1
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	685b      	ldr	r3, [r3, #4]
 8001642:	005b      	lsls	r3, r3, #1
 8001644:	fbb1 f3f3 	udiv	r3, r1, r3
 8001648:	3301      	adds	r3, #1
 800164a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800164e:	e051      	b.n	80016f4 <HAL_I2C_Init+0x1dc>
 8001650:	2304      	movs	r3, #4
 8001652:	e04f      	b.n	80016f4 <HAL_I2C_Init+0x1dc>
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	689b      	ldr	r3, [r3, #8]
 8001658:	2b00      	cmp	r3, #0
 800165a:	d111      	bne.n	8001680 <HAL_I2C_Init+0x168>
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	1e58      	subs	r0, r3, #1
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	6859      	ldr	r1, [r3, #4]
 8001664:	460b      	mov	r3, r1
 8001666:	005b      	lsls	r3, r3, #1
 8001668:	440b      	add	r3, r1
 800166a:	fbb0 f3f3 	udiv	r3, r0, r3
 800166e:	3301      	adds	r3, #1
 8001670:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001674:	2b00      	cmp	r3, #0
 8001676:	bf0c      	ite	eq
 8001678:	2301      	moveq	r3, #1
 800167a:	2300      	movne	r3, #0
 800167c:	b2db      	uxtb	r3, r3
 800167e:	e012      	b.n	80016a6 <HAL_I2C_Init+0x18e>
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	1e58      	subs	r0, r3, #1
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	6859      	ldr	r1, [r3, #4]
 8001688:	460b      	mov	r3, r1
 800168a:	009b      	lsls	r3, r3, #2
 800168c:	440b      	add	r3, r1
 800168e:	0099      	lsls	r1, r3, #2
 8001690:	440b      	add	r3, r1
 8001692:	fbb0 f3f3 	udiv	r3, r0, r3
 8001696:	3301      	adds	r3, #1
 8001698:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800169c:	2b00      	cmp	r3, #0
 800169e:	bf0c      	ite	eq
 80016a0:	2301      	moveq	r3, #1
 80016a2:	2300      	movne	r3, #0
 80016a4:	b2db      	uxtb	r3, r3
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d001      	beq.n	80016ae <HAL_I2C_Init+0x196>
 80016aa:	2301      	movs	r3, #1
 80016ac:	e022      	b.n	80016f4 <HAL_I2C_Init+0x1dc>
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	689b      	ldr	r3, [r3, #8]
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d10e      	bne.n	80016d4 <HAL_I2C_Init+0x1bc>
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	1e58      	subs	r0, r3, #1
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	6859      	ldr	r1, [r3, #4]
 80016be:	460b      	mov	r3, r1
 80016c0:	005b      	lsls	r3, r3, #1
 80016c2:	440b      	add	r3, r1
 80016c4:	fbb0 f3f3 	udiv	r3, r0, r3
 80016c8:	3301      	adds	r3, #1
 80016ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80016ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80016d2:	e00f      	b.n	80016f4 <HAL_I2C_Init+0x1dc>
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	1e58      	subs	r0, r3, #1
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	6859      	ldr	r1, [r3, #4]
 80016dc:	460b      	mov	r3, r1
 80016de:	009b      	lsls	r3, r3, #2
 80016e0:	440b      	add	r3, r1
 80016e2:	0099      	lsls	r1, r3, #2
 80016e4:	440b      	add	r3, r1
 80016e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80016ea:	3301      	adds	r3, #1
 80016ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80016f0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80016f4:	6879      	ldr	r1, [r7, #4]
 80016f6:	6809      	ldr	r1, [r1, #0]
 80016f8:	4313      	orrs	r3, r2
 80016fa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	69da      	ldr	r2, [r3, #28]
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	6a1b      	ldr	r3, [r3, #32]
 800170e:	431a      	orrs	r2, r3
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	430a      	orrs	r2, r1
 8001716:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	689b      	ldr	r3, [r3, #8]
 800171e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001722:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001726:	687a      	ldr	r2, [r7, #4]
 8001728:	6911      	ldr	r1, [r2, #16]
 800172a:	687a      	ldr	r2, [r7, #4]
 800172c:	68d2      	ldr	r2, [r2, #12]
 800172e:	4311      	orrs	r1, r2
 8001730:	687a      	ldr	r2, [r7, #4]
 8001732:	6812      	ldr	r2, [r2, #0]
 8001734:	430b      	orrs	r3, r1
 8001736:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	68db      	ldr	r3, [r3, #12]
 800173e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	695a      	ldr	r2, [r3, #20]
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	699b      	ldr	r3, [r3, #24]
 800174a:	431a      	orrs	r2, r3
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	430a      	orrs	r2, r1
 8001752:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	681a      	ldr	r2, [r3, #0]
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f042 0201 	orr.w	r2, r2, #1
 8001762:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	2200      	movs	r2, #0
 8001768:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	2220      	movs	r2, #32
 800176e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	2200      	movs	r2, #0
 8001776:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	2200      	movs	r2, #0
 800177c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001780:	2300      	movs	r3, #0
}
 8001782:	4618      	mov	r0, r3
 8001784:	3710      	adds	r7, #16
 8001786:	46bd      	mov	sp, r7
 8001788:	bd80      	pop	{r7, pc}
 800178a:	bf00      	nop
 800178c:	000186a0 	.word	0x000186a0
 8001790:	001e847f 	.word	0x001e847f
 8001794:	003d08ff 	.word	0x003d08ff
 8001798:	431bde83 	.word	0x431bde83
 800179c:	10624dd3 	.word	0x10624dd3

080017a0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b086      	sub	sp, #24
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d101      	bne.n	80017b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80017ae:	2301      	movs	r3, #1
 80017b0:	e272      	b.n	8001c98 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f003 0301 	and.w	r3, r3, #1
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	f000 8087 	beq.w	80018ce <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80017c0:	4b92      	ldr	r3, [pc, #584]	; (8001a0c <HAL_RCC_OscConfig+0x26c>)
 80017c2:	685b      	ldr	r3, [r3, #4]
 80017c4:	f003 030c 	and.w	r3, r3, #12
 80017c8:	2b04      	cmp	r3, #4
 80017ca:	d00c      	beq.n	80017e6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80017cc:	4b8f      	ldr	r3, [pc, #572]	; (8001a0c <HAL_RCC_OscConfig+0x26c>)
 80017ce:	685b      	ldr	r3, [r3, #4]
 80017d0:	f003 030c 	and.w	r3, r3, #12
 80017d4:	2b08      	cmp	r3, #8
 80017d6:	d112      	bne.n	80017fe <HAL_RCC_OscConfig+0x5e>
 80017d8:	4b8c      	ldr	r3, [pc, #560]	; (8001a0c <HAL_RCC_OscConfig+0x26c>)
 80017da:	685b      	ldr	r3, [r3, #4]
 80017dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017e4:	d10b      	bne.n	80017fe <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017e6:	4b89      	ldr	r3, [pc, #548]	; (8001a0c <HAL_RCC_OscConfig+0x26c>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d06c      	beq.n	80018cc <HAL_RCC_OscConfig+0x12c>
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	685b      	ldr	r3, [r3, #4]
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d168      	bne.n	80018cc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80017fa:	2301      	movs	r3, #1
 80017fc:	e24c      	b.n	8001c98 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	685b      	ldr	r3, [r3, #4]
 8001802:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001806:	d106      	bne.n	8001816 <HAL_RCC_OscConfig+0x76>
 8001808:	4b80      	ldr	r3, [pc, #512]	; (8001a0c <HAL_RCC_OscConfig+0x26c>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	4a7f      	ldr	r2, [pc, #508]	; (8001a0c <HAL_RCC_OscConfig+0x26c>)
 800180e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001812:	6013      	str	r3, [r2, #0]
 8001814:	e02e      	b.n	8001874 <HAL_RCC_OscConfig+0xd4>
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	685b      	ldr	r3, [r3, #4]
 800181a:	2b00      	cmp	r3, #0
 800181c:	d10c      	bne.n	8001838 <HAL_RCC_OscConfig+0x98>
 800181e:	4b7b      	ldr	r3, [pc, #492]	; (8001a0c <HAL_RCC_OscConfig+0x26c>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	4a7a      	ldr	r2, [pc, #488]	; (8001a0c <HAL_RCC_OscConfig+0x26c>)
 8001824:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001828:	6013      	str	r3, [r2, #0]
 800182a:	4b78      	ldr	r3, [pc, #480]	; (8001a0c <HAL_RCC_OscConfig+0x26c>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	4a77      	ldr	r2, [pc, #476]	; (8001a0c <HAL_RCC_OscConfig+0x26c>)
 8001830:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001834:	6013      	str	r3, [r2, #0]
 8001836:	e01d      	b.n	8001874 <HAL_RCC_OscConfig+0xd4>
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	685b      	ldr	r3, [r3, #4]
 800183c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001840:	d10c      	bne.n	800185c <HAL_RCC_OscConfig+0xbc>
 8001842:	4b72      	ldr	r3, [pc, #456]	; (8001a0c <HAL_RCC_OscConfig+0x26c>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	4a71      	ldr	r2, [pc, #452]	; (8001a0c <HAL_RCC_OscConfig+0x26c>)
 8001848:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800184c:	6013      	str	r3, [r2, #0]
 800184e:	4b6f      	ldr	r3, [pc, #444]	; (8001a0c <HAL_RCC_OscConfig+0x26c>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	4a6e      	ldr	r2, [pc, #440]	; (8001a0c <HAL_RCC_OscConfig+0x26c>)
 8001854:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001858:	6013      	str	r3, [r2, #0]
 800185a:	e00b      	b.n	8001874 <HAL_RCC_OscConfig+0xd4>
 800185c:	4b6b      	ldr	r3, [pc, #428]	; (8001a0c <HAL_RCC_OscConfig+0x26c>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	4a6a      	ldr	r2, [pc, #424]	; (8001a0c <HAL_RCC_OscConfig+0x26c>)
 8001862:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001866:	6013      	str	r3, [r2, #0]
 8001868:	4b68      	ldr	r3, [pc, #416]	; (8001a0c <HAL_RCC_OscConfig+0x26c>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	4a67      	ldr	r2, [pc, #412]	; (8001a0c <HAL_RCC_OscConfig+0x26c>)
 800186e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001872:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	685b      	ldr	r3, [r3, #4]
 8001878:	2b00      	cmp	r3, #0
 800187a:	d013      	beq.n	80018a4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800187c:	f7ff fb52 	bl	8000f24 <HAL_GetTick>
 8001880:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001882:	e008      	b.n	8001896 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001884:	f7ff fb4e 	bl	8000f24 <HAL_GetTick>
 8001888:	4602      	mov	r2, r0
 800188a:	693b      	ldr	r3, [r7, #16]
 800188c:	1ad3      	subs	r3, r2, r3
 800188e:	2b64      	cmp	r3, #100	; 0x64
 8001890:	d901      	bls.n	8001896 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001892:	2303      	movs	r3, #3
 8001894:	e200      	b.n	8001c98 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001896:	4b5d      	ldr	r3, [pc, #372]	; (8001a0c <HAL_RCC_OscConfig+0x26c>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d0f0      	beq.n	8001884 <HAL_RCC_OscConfig+0xe4>
 80018a2:	e014      	b.n	80018ce <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018a4:	f7ff fb3e 	bl	8000f24 <HAL_GetTick>
 80018a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018aa:	e008      	b.n	80018be <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018ac:	f7ff fb3a 	bl	8000f24 <HAL_GetTick>
 80018b0:	4602      	mov	r2, r0
 80018b2:	693b      	ldr	r3, [r7, #16]
 80018b4:	1ad3      	subs	r3, r2, r3
 80018b6:	2b64      	cmp	r3, #100	; 0x64
 80018b8:	d901      	bls.n	80018be <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80018ba:	2303      	movs	r3, #3
 80018bc:	e1ec      	b.n	8001c98 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018be:	4b53      	ldr	r3, [pc, #332]	; (8001a0c <HAL_RCC_OscConfig+0x26c>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d1f0      	bne.n	80018ac <HAL_RCC_OscConfig+0x10c>
 80018ca:	e000      	b.n	80018ce <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f003 0302 	and.w	r3, r3, #2
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d063      	beq.n	80019a2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80018da:	4b4c      	ldr	r3, [pc, #304]	; (8001a0c <HAL_RCC_OscConfig+0x26c>)
 80018dc:	685b      	ldr	r3, [r3, #4]
 80018de:	f003 030c 	and.w	r3, r3, #12
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d00b      	beq.n	80018fe <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80018e6:	4b49      	ldr	r3, [pc, #292]	; (8001a0c <HAL_RCC_OscConfig+0x26c>)
 80018e8:	685b      	ldr	r3, [r3, #4]
 80018ea:	f003 030c 	and.w	r3, r3, #12
 80018ee:	2b08      	cmp	r3, #8
 80018f0:	d11c      	bne.n	800192c <HAL_RCC_OscConfig+0x18c>
 80018f2:	4b46      	ldr	r3, [pc, #280]	; (8001a0c <HAL_RCC_OscConfig+0x26c>)
 80018f4:	685b      	ldr	r3, [r3, #4]
 80018f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d116      	bne.n	800192c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018fe:	4b43      	ldr	r3, [pc, #268]	; (8001a0c <HAL_RCC_OscConfig+0x26c>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f003 0302 	and.w	r3, r3, #2
 8001906:	2b00      	cmp	r3, #0
 8001908:	d005      	beq.n	8001916 <HAL_RCC_OscConfig+0x176>
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	691b      	ldr	r3, [r3, #16]
 800190e:	2b01      	cmp	r3, #1
 8001910:	d001      	beq.n	8001916 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001912:	2301      	movs	r3, #1
 8001914:	e1c0      	b.n	8001c98 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001916:	4b3d      	ldr	r3, [pc, #244]	; (8001a0c <HAL_RCC_OscConfig+0x26c>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	695b      	ldr	r3, [r3, #20]
 8001922:	00db      	lsls	r3, r3, #3
 8001924:	4939      	ldr	r1, [pc, #228]	; (8001a0c <HAL_RCC_OscConfig+0x26c>)
 8001926:	4313      	orrs	r3, r2
 8001928:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800192a:	e03a      	b.n	80019a2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	691b      	ldr	r3, [r3, #16]
 8001930:	2b00      	cmp	r3, #0
 8001932:	d020      	beq.n	8001976 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001934:	4b36      	ldr	r3, [pc, #216]	; (8001a10 <HAL_RCC_OscConfig+0x270>)
 8001936:	2201      	movs	r2, #1
 8001938:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800193a:	f7ff faf3 	bl	8000f24 <HAL_GetTick>
 800193e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001940:	e008      	b.n	8001954 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001942:	f7ff faef 	bl	8000f24 <HAL_GetTick>
 8001946:	4602      	mov	r2, r0
 8001948:	693b      	ldr	r3, [r7, #16]
 800194a:	1ad3      	subs	r3, r2, r3
 800194c:	2b02      	cmp	r3, #2
 800194e:	d901      	bls.n	8001954 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001950:	2303      	movs	r3, #3
 8001952:	e1a1      	b.n	8001c98 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001954:	4b2d      	ldr	r3, [pc, #180]	; (8001a0c <HAL_RCC_OscConfig+0x26c>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f003 0302 	and.w	r3, r3, #2
 800195c:	2b00      	cmp	r3, #0
 800195e:	d0f0      	beq.n	8001942 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001960:	4b2a      	ldr	r3, [pc, #168]	; (8001a0c <HAL_RCC_OscConfig+0x26c>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	695b      	ldr	r3, [r3, #20]
 800196c:	00db      	lsls	r3, r3, #3
 800196e:	4927      	ldr	r1, [pc, #156]	; (8001a0c <HAL_RCC_OscConfig+0x26c>)
 8001970:	4313      	orrs	r3, r2
 8001972:	600b      	str	r3, [r1, #0]
 8001974:	e015      	b.n	80019a2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001976:	4b26      	ldr	r3, [pc, #152]	; (8001a10 <HAL_RCC_OscConfig+0x270>)
 8001978:	2200      	movs	r2, #0
 800197a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800197c:	f7ff fad2 	bl	8000f24 <HAL_GetTick>
 8001980:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001982:	e008      	b.n	8001996 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001984:	f7ff face 	bl	8000f24 <HAL_GetTick>
 8001988:	4602      	mov	r2, r0
 800198a:	693b      	ldr	r3, [r7, #16]
 800198c:	1ad3      	subs	r3, r2, r3
 800198e:	2b02      	cmp	r3, #2
 8001990:	d901      	bls.n	8001996 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001992:	2303      	movs	r3, #3
 8001994:	e180      	b.n	8001c98 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001996:	4b1d      	ldr	r3, [pc, #116]	; (8001a0c <HAL_RCC_OscConfig+0x26c>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f003 0302 	and.w	r3, r3, #2
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d1f0      	bne.n	8001984 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f003 0308 	and.w	r3, r3, #8
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d03a      	beq.n	8001a24 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	699b      	ldr	r3, [r3, #24]
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d019      	beq.n	80019ea <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80019b6:	4b17      	ldr	r3, [pc, #92]	; (8001a14 <HAL_RCC_OscConfig+0x274>)
 80019b8:	2201      	movs	r2, #1
 80019ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019bc:	f7ff fab2 	bl	8000f24 <HAL_GetTick>
 80019c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019c2:	e008      	b.n	80019d6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019c4:	f7ff faae 	bl	8000f24 <HAL_GetTick>
 80019c8:	4602      	mov	r2, r0
 80019ca:	693b      	ldr	r3, [r7, #16]
 80019cc:	1ad3      	subs	r3, r2, r3
 80019ce:	2b02      	cmp	r3, #2
 80019d0:	d901      	bls.n	80019d6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80019d2:	2303      	movs	r3, #3
 80019d4:	e160      	b.n	8001c98 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019d6:	4b0d      	ldr	r3, [pc, #52]	; (8001a0c <HAL_RCC_OscConfig+0x26c>)
 80019d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019da:	f003 0302 	and.w	r3, r3, #2
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d0f0      	beq.n	80019c4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80019e2:	2001      	movs	r0, #1
 80019e4:	f000 fac4 	bl	8001f70 <RCC_Delay>
 80019e8:	e01c      	b.n	8001a24 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80019ea:	4b0a      	ldr	r3, [pc, #40]	; (8001a14 <HAL_RCC_OscConfig+0x274>)
 80019ec:	2200      	movs	r2, #0
 80019ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019f0:	f7ff fa98 	bl	8000f24 <HAL_GetTick>
 80019f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019f6:	e00f      	b.n	8001a18 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019f8:	f7ff fa94 	bl	8000f24 <HAL_GetTick>
 80019fc:	4602      	mov	r2, r0
 80019fe:	693b      	ldr	r3, [r7, #16]
 8001a00:	1ad3      	subs	r3, r2, r3
 8001a02:	2b02      	cmp	r3, #2
 8001a04:	d908      	bls.n	8001a18 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001a06:	2303      	movs	r3, #3
 8001a08:	e146      	b.n	8001c98 <HAL_RCC_OscConfig+0x4f8>
 8001a0a:	bf00      	nop
 8001a0c:	40021000 	.word	0x40021000
 8001a10:	42420000 	.word	0x42420000
 8001a14:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a18:	4b92      	ldr	r3, [pc, #584]	; (8001c64 <HAL_RCC_OscConfig+0x4c4>)
 8001a1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a1c:	f003 0302 	and.w	r3, r3, #2
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d1e9      	bne.n	80019f8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f003 0304 	and.w	r3, r3, #4
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	f000 80a6 	beq.w	8001b7e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a32:	2300      	movs	r3, #0
 8001a34:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a36:	4b8b      	ldr	r3, [pc, #556]	; (8001c64 <HAL_RCC_OscConfig+0x4c4>)
 8001a38:	69db      	ldr	r3, [r3, #28]
 8001a3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d10d      	bne.n	8001a5e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a42:	4b88      	ldr	r3, [pc, #544]	; (8001c64 <HAL_RCC_OscConfig+0x4c4>)
 8001a44:	69db      	ldr	r3, [r3, #28]
 8001a46:	4a87      	ldr	r2, [pc, #540]	; (8001c64 <HAL_RCC_OscConfig+0x4c4>)
 8001a48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a4c:	61d3      	str	r3, [r2, #28]
 8001a4e:	4b85      	ldr	r3, [pc, #532]	; (8001c64 <HAL_RCC_OscConfig+0x4c4>)
 8001a50:	69db      	ldr	r3, [r3, #28]
 8001a52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a56:	60bb      	str	r3, [r7, #8]
 8001a58:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a5e:	4b82      	ldr	r3, [pc, #520]	; (8001c68 <HAL_RCC_OscConfig+0x4c8>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d118      	bne.n	8001a9c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a6a:	4b7f      	ldr	r3, [pc, #508]	; (8001c68 <HAL_RCC_OscConfig+0x4c8>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	4a7e      	ldr	r2, [pc, #504]	; (8001c68 <HAL_RCC_OscConfig+0x4c8>)
 8001a70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a74:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a76:	f7ff fa55 	bl	8000f24 <HAL_GetTick>
 8001a7a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a7c:	e008      	b.n	8001a90 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a7e:	f7ff fa51 	bl	8000f24 <HAL_GetTick>
 8001a82:	4602      	mov	r2, r0
 8001a84:	693b      	ldr	r3, [r7, #16]
 8001a86:	1ad3      	subs	r3, r2, r3
 8001a88:	2b64      	cmp	r3, #100	; 0x64
 8001a8a:	d901      	bls.n	8001a90 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001a8c:	2303      	movs	r3, #3
 8001a8e:	e103      	b.n	8001c98 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a90:	4b75      	ldr	r3, [pc, #468]	; (8001c68 <HAL_RCC_OscConfig+0x4c8>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d0f0      	beq.n	8001a7e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	68db      	ldr	r3, [r3, #12]
 8001aa0:	2b01      	cmp	r3, #1
 8001aa2:	d106      	bne.n	8001ab2 <HAL_RCC_OscConfig+0x312>
 8001aa4:	4b6f      	ldr	r3, [pc, #444]	; (8001c64 <HAL_RCC_OscConfig+0x4c4>)
 8001aa6:	6a1b      	ldr	r3, [r3, #32]
 8001aa8:	4a6e      	ldr	r2, [pc, #440]	; (8001c64 <HAL_RCC_OscConfig+0x4c4>)
 8001aaa:	f043 0301 	orr.w	r3, r3, #1
 8001aae:	6213      	str	r3, [r2, #32]
 8001ab0:	e02d      	b.n	8001b0e <HAL_RCC_OscConfig+0x36e>
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	68db      	ldr	r3, [r3, #12]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d10c      	bne.n	8001ad4 <HAL_RCC_OscConfig+0x334>
 8001aba:	4b6a      	ldr	r3, [pc, #424]	; (8001c64 <HAL_RCC_OscConfig+0x4c4>)
 8001abc:	6a1b      	ldr	r3, [r3, #32]
 8001abe:	4a69      	ldr	r2, [pc, #420]	; (8001c64 <HAL_RCC_OscConfig+0x4c4>)
 8001ac0:	f023 0301 	bic.w	r3, r3, #1
 8001ac4:	6213      	str	r3, [r2, #32]
 8001ac6:	4b67      	ldr	r3, [pc, #412]	; (8001c64 <HAL_RCC_OscConfig+0x4c4>)
 8001ac8:	6a1b      	ldr	r3, [r3, #32]
 8001aca:	4a66      	ldr	r2, [pc, #408]	; (8001c64 <HAL_RCC_OscConfig+0x4c4>)
 8001acc:	f023 0304 	bic.w	r3, r3, #4
 8001ad0:	6213      	str	r3, [r2, #32]
 8001ad2:	e01c      	b.n	8001b0e <HAL_RCC_OscConfig+0x36e>
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	68db      	ldr	r3, [r3, #12]
 8001ad8:	2b05      	cmp	r3, #5
 8001ada:	d10c      	bne.n	8001af6 <HAL_RCC_OscConfig+0x356>
 8001adc:	4b61      	ldr	r3, [pc, #388]	; (8001c64 <HAL_RCC_OscConfig+0x4c4>)
 8001ade:	6a1b      	ldr	r3, [r3, #32]
 8001ae0:	4a60      	ldr	r2, [pc, #384]	; (8001c64 <HAL_RCC_OscConfig+0x4c4>)
 8001ae2:	f043 0304 	orr.w	r3, r3, #4
 8001ae6:	6213      	str	r3, [r2, #32]
 8001ae8:	4b5e      	ldr	r3, [pc, #376]	; (8001c64 <HAL_RCC_OscConfig+0x4c4>)
 8001aea:	6a1b      	ldr	r3, [r3, #32]
 8001aec:	4a5d      	ldr	r2, [pc, #372]	; (8001c64 <HAL_RCC_OscConfig+0x4c4>)
 8001aee:	f043 0301 	orr.w	r3, r3, #1
 8001af2:	6213      	str	r3, [r2, #32]
 8001af4:	e00b      	b.n	8001b0e <HAL_RCC_OscConfig+0x36e>
 8001af6:	4b5b      	ldr	r3, [pc, #364]	; (8001c64 <HAL_RCC_OscConfig+0x4c4>)
 8001af8:	6a1b      	ldr	r3, [r3, #32]
 8001afa:	4a5a      	ldr	r2, [pc, #360]	; (8001c64 <HAL_RCC_OscConfig+0x4c4>)
 8001afc:	f023 0301 	bic.w	r3, r3, #1
 8001b00:	6213      	str	r3, [r2, #32]
 8001b02:	4b58      	ldr	r3, [pc, #352]	; (8001c64 <HAL_RCC_OscConfig+0x4c4>)
 8001b04:	6a1b      	ldr	r3, [r3, #32]
 8001b06:	4a57      	ldr	r2, [pc, #348]	; (8001c64 <HAL_RCC_OscConfig+0x4c4>)
 8001b08:	f023 0304 	bic.w	r3, r3, #4
 8001b0c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	68db      	ldr	r3, [r3, #12]
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d015      	beq.n	8001b42 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b16:	f7ff fa05 	bl	8000f24 <HAL_GetTick>
 8001b1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b1c:	e00a      	b.n	8001b34 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b1e:	f7ff fa01 	bl	8000f24 <HAL_GetTick>
 8001b22:	4602      	mov	r2, r0
 8001b24:	693b      	ldr	r3, [r7, #16]
 8001b26:	1ad3      	subs	r3, r2, r3
 8001b28:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b2c:	4293      	cmp	r3, r2
 8001b2e:	d901      	bls.n	8001b34 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001b30:	2303      	movs	r3, #3
 8001b32:	e0b1      	b.n	8001c98 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b34:	4b4b      	ldr	r3, [pc, #300]	; (8001c64 <HAL_RCC_OscConfig+0x4c4>)
 8001b36:	6a1b      	ldr	r3, [r3, #32]
 8001b38:	f003 0302 	and.w	r3, r3, #2
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d0ee      	beq.n	8001b1e <HAL_RCC_OscConfig+0x37e>
 8001b40:	e014      	b.n	8001b6c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b42:	f7ff f9ef 	bl	8000f24 <HAL_GetTick>
 8001b46:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b48:	e00a      	b.n	8001b60 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b4a:	f7ff f9eb 	bl	8000f24 <HAL_GetTick>
 8001b4e:	4602      	mov	r2, r0
 8001b50:	693b      	ldr	r3, [r7, #16]
 8001b52:	1ad3      	subs	r3, r2, r3
 8001b54:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b58:	4293      	cmp	r3, r2
 8001b5a:	d901      	bls.n	8001b60 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001b5c:	2303      	movs	r3, #3
 8001b5e:	e09b      	b.n	8001c98 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b60:	4b40      	ldr	r3, [pc, #256]	; (8001c64 <HAL_RCC_OscConfig+0x4c4>)
 8001b62:	6a1b      	ldr	r3, [r3, #32]
 8001b64:	f003 0302 	and.w	r3, r3, #2
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d1ee      	bne.n	8001b4a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001b6c:	7dfb      	ldrb	r3, [r7, #23]
 8001b6e:	2b01      	cmp	r3, #1
 8001b70:	d105      	bne.n	8001b7e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b72:	4b3c      	ldr	r3, [pc, #240]	; (8001c64 <HAL_RCC_OscConfig+0x4c4>)
 8001b74:	69db      	ldr	r3, [r3, #28]
 8001b76:	4a3b      	ldr	r2, [pc, #236]	; (8001c64 <HAL_RCC_OscConfig+0x4c4>)
 8001b78:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b7c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	69db      	ldr	r3, [r3, #28]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	f000 8087 	beq.w	8001c96 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b88:	4b36      	ldr	r3, [pc, #216]	; (8001c64 <HAL_RCC_OscConfig+0x4c4>)
 8001b8a:	685b      	ldr	r3, [r3, #4]
 8001b8c:	f003 030c 	and.w	r3, r3, #12
 8001b90:	2b08      	cmp	r3, #8
 8001b92:	d061      	beq.n	8001c58 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	69db      	ldr	r3, [r3, #28]
 8001b98:	2b02      	cmp	r3, #2
 8001b9a:	d146      	bne.n	8001c2a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b9c:	4b33      	ldr	r3, [pc, #204]	; (8001c6c <HAL_RCC_OscConfig+0x4cc>)
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ba2:	f7ff f9bf 	bl	8000f24 <HAL_GetTick>
 8001ba6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ba8:	e008      	b.n	8001bbc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001baa:	f7ff f9bb 	bl	8000f24 <HAL_GetTick>
 8001bae:	4602      	mov	r2, r0
 8001bb0:	693b      	ldr	r3, [r7, #16]
 8001bb2:	1ad3      	subs	r3, r2, r3
 8001bb4:	2b02      	cmp	r3, #2
 8001bb6:	d901      	bls.n	8001bbc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001bb8:	2303      	movs	r3, #3
 8001bba:	e06d      	b.n	8001c98 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bbc:	4b29      	ldr	r3, [pc, #164]	; (8001c64 <HAL_RCC_OscConfig+0x4c4>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d1f0      	bne.n	8001baa <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	6a1b      	ldr	r3, [r3, #32]
 8001bcc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001bd0:	d108      	bne.n	8001be4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001bd2:	4b24      	ldr	r3, [pc, #144]	; (8001c64 <HAL_RCC_OscConfig+0x4c4>)
 8001bd4:	685b      	ldr	r3, [r3, #4]
 8001bd6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	689b      	ldr	r3, [r3, #8]
 8001bde:	4921      	ldr	r1, [pc, #132]	; (8001c64 <HAL_RCC_OscConfig+0x4c4>)
 8001be0:	4313      	orrs	r3, r2
 8001be2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001be4:	4b1f      	ldr	r3, [pc, #124]	; (8001c64 <HAL_RCC_OscConfig+0x4c4>)
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	6a19      	ldr	r1, [r3, #32]
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bf4:	430b      	orrs	r3, r1
 8001bf6:	491b      	ldr	r1, [pc, #108]	; (8001c64 <HAL_RCC_OscConfig+0x4c4>)
 8001bf8:	4313      	orrs	r3, r2
 8001bfa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001bfc:	4b1b      	ldr	r3, [pc, #108]	; (8001c6c <HAL_RCC_OscConfig+0x4cc>)
 8001bfe:	2201      	movs	r2, #1
 8001c00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c02:	f7ff f98f 	bl	8000f24 <HAL_GetTick>
 8001c06:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c08:	e008      	b.n	8001c1c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c0a:	f7ff f98b 	bl	8000f24 <HAL_GetTick>
 8001c0e:	4602      	mov	r2, r0
 8001c10:	693b      	ldr	r3, [r7, #16]
 8001c12:	1ad3      	subs	r3, r2, r3
 8001c14:	2b02      	cmp	r3, #2
 8001c16:	d901      	bls.n	8001c1c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001c18:	2303      	movs	r3, #3
 8001c1a:	e03d      	b.n	8001c98 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c1c:	4b11      	ldr	r3, [pc, #68]	; (8001c64 <HAL_RCC_OscConfig+0x4c4>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d0f0      	beq.n	8001c0a <HAL_RCC_OscConfig+0x46a>
 8001c28:	e035      	b.n	8001c96 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c2a:	4b10      	ldr	r3, [pc, #64]	; (8001c6c <HAL_RCC_OscConfig+0x4cc>)
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c30:	f7ff f978 	bl	8000f24 <HAL_GetTick>
 8001c34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c36:	e008      	b.n	8001c4a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c38:	f7ff f974 	bl	8000f24 <HAL_GetTick>
 8001c3c:	4602      	mov	r2, r0
 8001c3e:	693b      	ldr	r3, [r7, #16]
 8001c40:	1ad3      	subs	r3, r2, r3
 8001c42:	2b02      	cmp	r3, #2
 8001c44:	d901      	bls.n	8001c4a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001c46:	2303      	movs	r3, #3
 8001c48:	e026      	b.n	8001c98 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c4a:	4b06      	ldr	r3, [pc, #24]	; (8001c64 <HAL_RCC_OscConfig+0x4c4>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d1f0      	bne.n	8001c38 <HAL_RCC_OscConfig+0x498>
 8001c56:	e01e      	b.n	8001c96 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	69db      	ldr	r3, [r3, #28]
 8001c5c:	2b01      	cmp	r3, #1
 8001c5e:	d107      	bne.n	8001c70 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001c60:	2301      	movs	r3, #1
 8001c62:	e019      	b.n	8001c98 <HAL_RCC_OscConfig+0x4f8>
 8001c64:	40021000 	.word	0x40021000
 8001c68:	40007000 	.word	0x40007000
 8001c6c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001c70:	4b0b      	ldr	r3, [pc, #44]	; (8001ca0 <HAL_RCC_OscConfig+0x500>)
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	6a1b      	ldr	r3, [r3, #32]
 8001c80:	429a      	cmp	r2, r3
 8001c82:	d106      	bne.n	8001c92 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c8e:	429a      	cmp	r2, r3
 8001c90:	d001      	beq.n	8001c96 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001c92:	2301      	movs	r3, #1
 8001c94:	e000      	b.n	8001c98 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001c96:	2300      	movs	r3, #0
}
 8001c98:	4618      	mov	r0, r3
 8001c9a:	3718      	adds	r7, #24
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	bd80      	pop	{r7, pc}
 8001ca0:	40021000 	.word	0x40021000

08001ca4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b084      	sub	sp, #16
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
 8001cac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d101      	bne.n	8001cb8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001cb4:	2301      	movs	r3, #1
 8001cb6:	e0d0      	b.n	8001e5a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001cb8:	4b6a      	ldr	r3, [pc, #424]	; (8001e64 <HAL_RCC_ClockConfig+0x1c0>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f003 0307 	and.w	r3, r3, #7
 8001cc0:	683a      	ldr	r2, [r7, #0]
 8001cc2:	429a      	cmp	r2, r3
 8001cc4:	d910      	bls.n	8001ce8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cc6:	4b67      	ldr	r3, [pc, #412]	; (8001e64 <HAL_RCC_ClockConfig+0x1c0>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f023 0207 	bic.w	r2, r3, #7
 8001cce:	4965      	ldr	r1, [pc, #404]	; (8001e64 <HAL_RCC_ClockConfig+0x1c0>)
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	4313      	orrs	r3, r2
 8001cd4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cd6:	4b63      	ldr	r3, [pc, #396]	; (8001e64 <HAL_RCC_ClockConfig+0x1c0>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f003 0307 	and.w	r3, r3, #7
 8001cde:	683a      	ldr	r2, [r7, #0]
 8001ce0:	429a      	cmp	r2, r3
 8001ce2:	d001      	beq.n	8001ce8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001ce4:	2301      	movs	r3, #1
 8001ce6:	e0b8      	b.n	8001e5a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f003 0302 	and.w	r3, r3, #2
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d020      	beq.n	8001d36 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f003 0304 	and.w	r3, r3, #4
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d005      	beq.n	8001d0c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d00:	4b59      	ldr	r3, [pc, #356]	; (8001e68 <HAL_RCC_ClockConfig+0x1c4>)
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	4a58      	ldr	r2, [pc, #352]	; (8001e68 <HAL_RCC_ClockConfig+0x1c4>)
 8001d06:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001d0a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f003 0308 	and.w	r3, r3, #8
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d005      	beq.n	8001d24 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001d18:	4b53      	ldr	r3, [pc, #332]	; (8001e68 <HAL_RCC_ClockConfig+0x1c4>)
 8001d1a:	685b      	ldr	r3, [r3, #4]
 8001d1c:	4a52      	ldr	r2, [pc, #328]	; (8001e68 <HAL_RCC_ClockConfig+0x1c4>)
 8001d1e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001d22:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d24:	4b50      	ldr	r3, [pc, #320]	; (8001e68 <HAL_RCC_ClockConfig+0x1c4>)
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	689b      	ldr	r3, [r3, #8]
 8001d30:	494d      	ldr	r1, [pc, #308]	; (8001e68 <HAL_RCC_ClockConfig+0x1c4>)
 8001d32:	4313      	orrs	r3, r2
 8001d34:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f003 0301 	and.w	r3, r3, #1
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d040      	beq.n	8001dc4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	685b      	ldr	r3, [r3, #4]
 8001d46:	2b01      	cmp	r3, #1
 8001d48:	d107      	bne.n	8001d5a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d4a:	4b47      	ldr	r3, [pc, #284]	; (8001e68 <HAL_RCC_ClockConfig+0x1c4>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d115      	bne.n	8001d82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d56:	2301      	movs	r3, #1
 8001d58:	e07f      	b.n	8001e5a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	2b02      	cmp	r3, #2
 8001d60:	d107      	bne.n	8001d72 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d62:	4b41      	ldr	r3, [pc, #260]	; (8001e68 <HAL_RCC_ClockConfig+0x1c4>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d109      	bne.n	8001d82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d6e:	2301      	movs	r3, #1
 8001d70:	e073      	b.n	8001e5a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d72:	4b3d      	ldr	r3, [pc, #244]	; (8001e68 <HAL_RCC_ClockConfig+0x1c4>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f003 0302 	and.w	r3, r3, #2
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d101      	bne.n	8001d82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d7e:	2301      	movs	r3, #1
 8001d80:	e06b      	b.n	8001e5a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d82:	4b39      	ldr	r3, [pc, #228]	; (8001e68 <HAL_RCC_ClockConfig+0x1c4>)
 8001d84:	685b      	ldr	r3, [r3, #4]
 8001d86:	f023 0203 	bic.w	r2, r3, #3
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	685b      	ldr	r3, [r3, #4]
 8001d8e:	4936      	ldr	r1, [pc, #216]	; (8001e68 <HAL_RCC_ClockConfig+0x1c4>)
 8001d90:	4313      	orrs	r3, r2
 8001d92:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001d94:	f7ff f8c6 	bl	8000f24 <HAL_GetTick>
 8001d98:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d9a:	e00a      	b.n	8001db2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d9c:	f7ff f8c2 	bl	8000f24 <HAL_GetTick>
 8001da0:	4602      	mov	r2, r0
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	1ad3      	subs	r3, r2, r3
 8001da6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d901      	bls.n	8001db2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001dae:	2303      	movs	r3, #3
 8001db0:	e053      	b.n	8001e5a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001db2:	4b2d      	ldr	r3, [pc, #180]	; (8001e68 <HAL_RCC_ClockConfig+0x1c4>)
 8001db4:	685b      	ldr	r3, [r3, #4]
 8001db6:	f003 020c 	and.w	r2, r3, #12
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	685b      	ldr	r3, [r3, #4]
 8001dbe:	009b      	lsls	r3, r3, #2
 8001dc0:	429a      	cmp	r2, r3
 8001dc2:	d1eb      	bne.n	8001d9c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001dc4:	4b27      	ldr	r3, [pc, #156]	; (8001e64 <HAL_RCC_ClockConfig+0x1c0>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f003 0307 	and.w	r3, r3, #7
 8001dcc:	683a      	ldr	r2, [r7, #0]
 8001dce:	429a      	cmp	r2, r3
 8001dd0:	d210      	bcs.n	8001df4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dd2:	4b24      	ldr	r3, [pc, #144]	; (8001e64 <HAL_RCC_ClockConfig+0x1c0>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f023 0207 	bic.w	r2, r3, #7
 8001dda:	4922      	ldr	r1, [pc, #136]	; (8001e64 <HAL_RCC_ClockConfig+0x1c0>)
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	4313      	orrs	r3, r2
 8001de0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001de2:	4b20      	ldr	r3, [pc, #128]	; (8001e64 <HAL_RCC_ClockConfig+0x1c0>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f003 0307 	and.w	r3, r3, #7
 8001dea:	683a      	ldr	r2, [r7, #0]
 8001dec:	429a      	cmp	r2, r3
 8001dee:	d001      	beq.n	8001df4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001df0:	2301      	movs	r3, #1
 8001df2:	e032      	b.n	8001e5a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f003 0304 	and.w	r3, r3, #4
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d008      	beq.n	8001e12 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e00:	4b19      	ldr	r3, [pc, #100]	; (8001e68 <HAL_RCC_ClockConfig+0x1c4>)
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	68db      	ldr	r3, [r3, #12]
 8001e0c:	4916      	ldr	r1, [pc, #88]	; (8001e68 <HAL_RCC_ClockConfig+0x1c4>)
 8001e0e:	4313      	orrs	r3, r2
 8001e10:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f003 0308 	and.w	r3, r3, #8
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d009      	beq.n	8001e32 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001e1e:	4b12      	ldr	r3, [pc, #72]	; (8001e68 <HAL_RCC_ClockConfig+0x1c4>)
 8001e20:	685b      	ldr	r3, [r3, #4]
 8001e22:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	691b      	ldr	r3, [r3, #16]
 8001e2a:	00db      	lsls	r3, r3, #3
 8001e2c:	490e      	ldr	r1, [pc, #56]	; (8001e68 <HAL_RCC_ClockConfig+0x1c4>)
 8001e2e:	4313      	orrs	r3, r2
 8001e30:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001e32:	f000 f821 	bl	8001e78 <HAL_RCC_GetSysClockFreq>
 8001e36:	4602      	mov	r2, r0
 8001e38:	4b0b      	ldr	r3, [pc, #44]	; (8001e68 <HAL_RCC_ClockConfig+0x1c4>)
 8001e3a:	685b      	ldr	r3, [r3, #4]
 8001e3c:	091b      	lsrs	r3, r3, #4
 8001e3e:	f003 030f 	and.w	r3, r3, #15
 8001e42:	490a      	ldr	r1, [pc, #40]	; (8001e6c <HAL_RCC_ClockConfig+0x1c8>)
 8001e44:	5ccb      	ldrb	r3, [r1, r3]
 8001e46:	fa22 f303 	lsr.w	r3, r2, r3
 8001e4a:	4a09      	ldr	r2, [pc, #36]	; (8001e70 <HAL_RCC_ClockConfig+0x1cc>)
 8001e4c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001e4e:	4b09      	ldr	r3, [pc, #36]	; (8001e74 <HAL_RCC_ClockConfig+0x1d0>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	4618      	mov	r0, r3
 8001e54:	f7ff f824 	bl	8000ea0 <HAL_InitTick>

  return HAL_OK;
 8001e58:	2300      	movs	r3, #0
}
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	3710      	adds	r7, #16
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd80      	pop	{r7, pc}
 8001e62:	bf00      	nop
 8001e64:	40022000 	.word	0x40022000
 8001e68:	40021000 	.word	0x40021000
 8001e6c:	0800396c 	.word	0x0800396c
 8001e70:	2000000c 	.word	0x2000000c
 8001e74:	20000010 	.word	0x20000010

08001e78 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e78:	b490      	push	{r4, r7}
 8001e7a:	b08a      	sub	sp, #40	; 0x28
 8001e7c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001e7e:	4b29      	ldr	r3, [pc, #164]	; (8001f24 <HAL_RCC_GetSysClockFreq+0xac>)
 8001e80:	1d3c      	adds	r4, r7, #4
 8001e82:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001e84:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001e88:	f240 2301 	movw	r3, #513	; 0x201
 8001e8c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	61fb      	str	r3, [r7, #28]
 8001e92:	2300      	movs	r3, #0
 8001e94:	61bb      	str	r3, [r7, #24]
 8001e96:	2300      	movs	r3, #0
 8001e98:	627b      	str	r3, [r7, #36]	; 0x24
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001ea2:	4b21      	ldr	r3, [pc, #132]	; (8001f28 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001ea4:	685b      	ldr	r3, [r3, #4]
 8001ea6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001ea8:	69fb      	ldr	r3, [r7, #28]
 8001eaa:	f003 030c 	and.w	r3, r3, #12
 8001eae:	2b04      	cmp	r3, #4
 8001eb0:	d002      	beq.n	8001eb8 <HAL_RCC_GetSysClockFreq+0x40>
 8001eb2:	2b08      	cmp	r3, #8
 8001eb4:	d003      	beq.n	8001ebe <HAL_RCC_GetSysClockFreq+0x46>
 8001eb6:	e02b      	b.n	8001f10 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001eb8:	4b1c      	ldr	r3, [pc, #112]	; (8001f2c <HAL_RCC_GetSysClockFreq+0xb4>)
 8001eba:	623b      	str	r3, [r7, #32]
      break;
 8001ebc:	e02b      	b.n	8001f16 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001ebe:	69fb      	ldr	r3, [r7, #28]
 8001ec0:	0c9b      	lsrs	r3, r3, #18
 8001ec2:	f003 030f 	and.w	r3, r3, #15
 8001ec6:	3328      	adds	r3, #40	; 0x28
 8001ec8:	443b      	add	r3, r7
 8001eca:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001ece:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001ed0:	69fb      	ldr	r3, [r7, #28]
 8001ed2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d012      	beq.n	8001f00 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001eda:	4b13      	ldr	r3, [pc, #76]	; (8001f28 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001edc:	685b      	ldr	r3, [r3, #4]
 8001ede:	0c5b      	lsrs	r3, r3, #17
 8001ee0:	f003 0301 	and.w	r3, r3, #1
 8001ee4:	3328      	adds	r3, #40	; 0x28
 8001ee6:	443b      	add	r3, r7
 8001ee8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001eec:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001eee:	697b      	ldr	r3, [r7, #20]
 8001ef0:	4a0e      	ldr	r2, [pc, #56]	; (8001f2c <HAL_RCC_GetSysClockFreq+0xb4>)
 8001ef2:	fb03 f202 	mul.w	r2, r3, r2
 8001ef6:	69bb      	ldr	r3, [r7, #24]
 8001ef8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001efc:	627b      	str	r3, [r7, #36]	; 0x24
 8001efe:	e004      	b.n	8001f0a <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001f00:	697b      	ldr	r3, [r7, #20]
 8001f02:	4a0b      	ldr	r2, [pc, #44]	; (8001f30 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001f04:	fb02 f303 	mul.w	r3, r2, r3
 8001f08:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f0c:	623b      	str	r3, [r7, #32]
      break;
 8001f0e:	e002      	b.n	8001f16 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001f10:	4b06      	ldr	r3, [pc, #24]	; (8001f2c <HAL_RCC_GetSysClockFreq+0xb4>)
 8001f12:	623b      	str	r3, [r7, #32]
      break;
 8001f14:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001f16:	6a3b      	ldr	r3, [r7, #32]
}
 8001f18:	4618      	mov	r0, r3
 8001f1a:	3728      	adds	r7, #40	; 0x28
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	bc90      	pop	{r4, r7}
 8001f20:	4770      	bx	lr
 8001f22:	bf00      	nop
 8001f24:	0800395c 	.word	0x0800395c
 8001f28:	40021000 	.word	0x40021000
 8001f2c:	007a1200 	.word	0x007a1200
 8001f30:	003d0900 	.word	0x003d0900

08001f34 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f34:	b480      	push	{r7}
 8001f36:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f38:	4b02      	ldr	r3, [pc, #8]	; (8001f44 <HAL_RCC_GetHCLKFreq+0x10>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
}
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bc80      	pop	{r7}
 8001f42:	4770      	bx	lr
 8001f44:	2000000c 	.word	0x2000000c

08001f48 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001f4c:	f7ff fff2 	bl	8001f34 <HAL_RCC_GetHCLKFreq>
 8001f50:	4602      	mov	r2, r0
 8001f52:	4b05      	ldr	r3, [pc, #20]	; (8001f68 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	0a1b      	lsrs	r3, r3, #8
 8001f58:	f003 0307 	and.w	r3, r3, #7
 8001f5c:	4903      	ldr	r1, [pc, #12]	; (8001f6c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001f5e:	5ccb      	ldrb	r3, [r1, r3]
 8001f60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f64:	4618      	mov	r0, r3
 8001f66:	bd80      	pop	{r7, pc}
 8001f68:	40021000 	.word	0x40021000
 8001f6c:	0800397c 	.word	0x0800397c

08001f70 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001f70:	b480      	push	{r7}
 8001f72:	b085      	sub	sp, #20
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001f78:	4b0a      	ldr	r3, [pc, #40]	; (8001fa4 <RCC_Delay+0x34>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4a0a      	ldr	r2, [pc, #40]	; (8001fa8 <RCC_Delay+0x38>)
 8001f7e:	fba2 2303 	umull	r2, r3, r2, r3
 8001f82:	0a5b      	lsrs	r3, r3, #9
 8001f84:	687a      	ldr	r2, [r7, #4]
 8001f86:	fb02 f303 	mul.w	r3, r2, r3
 8001f8a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001f8c:	bf00      	nop
  }
  while (Delay --);
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	1e5a      	subs	r2, r3, #1
 8001f92:	60fa      	str	r2, [r7, #12]
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d1f9      	bne.n	8001f8c <RCC_Delay+0x1c>
}
 8001f98:	bf00      	nop
 8001f9a:	bf00      	nop
 8001f9c:	3714      	adds	r7, #20
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bc80      	pop	{r7}
 8001fa2:	4770      	bx	lr
 8001fa4:	2000000c 	.word	0x2000000c
 8001fa8:	10624dd3 	.word	0x10624dd3

08001fac <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b082      	sub	sp, #8
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d101      	bne.n	8001fbe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001fba:	2301      	movs	r3, #1
 8001fbc:	e076      	b.n	80020ac <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d108      	bne.n	8001fd8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	685b      	ldr	r3, [r3, #4]
 8001fca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001fce:	d009      	beq.n	8001fe4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	61da      	str	r2, [r3, #28]
 8001fd6:	e005      	b.n	8001fe4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2200      	movs	r2, #0
 8001fdc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001ff0:	b2db      	uxtb	r3, r3
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d106      	bne.n	8002004 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001ffe:	6878      	ldr	r0, [r7, #4]
 8002000:	f7fe fbb4 	bl	800076c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2202      	movs	r2, #2
 8002008:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	681a      	ldr	r2, [r3, #0]
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800201a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	689b      	ldr	r3, [r3, #8]
 8002028:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800202c:	431a      	orrs	r2, r3
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	68db      	ldr	r3, [r3, #12]
 8002032:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002036:	431a      	orrs	r2, r3
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	691b      	ldr	r3, [r3, #16]
 800203c:	f003 0302 	and.w	r3, r3, #2
 8002040:	431a      	orrs	r2, r3
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	695b      	ldr	r3, [r3, #20]
 8002046:	f003 0301 	and.w	r3, r3, #1
 800204a:	431a      	orrs	r2, r3
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	699b      	ldr	r3, [r3, #24]
 8002050:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002054:	431a      	orrs	r2, r3
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	69db      	ldr	r3, [r3, #28]
 800205a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800205e:	431a      	orrs	r2, r3
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6a1b      	ldr	r3, [r3, #32]
 8002064:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002068:	ea42 0103 	orr.w	r1, r2, r3
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002070:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	430a      	orrs	r2, r1
 800207a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	699b      	ldr	r3, [r3, #24]
 8002080:	0c1a      	lsrs	r2, r3, #16
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f002 0204 	and.w	r2, r2, #4
 800208a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	69da      	ldr	r2, [r3, #28]
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800209a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	2200      	movs	r2, #0
 80020a0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	2201      	movs	r2, #1
 80020a6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80020aa:	2300      	movs	r3, #0
}
 80020ac:	4618      	mov	r0, r3
 80020ae:	3708      	adds	r7, #8
 80020b0:	46bd      	mov	sp, r7
 80020b2:	bd80      	pop	{r7, pc}

080020b4 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b088      	sub	sp, #32
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	60f8      	str	r0, [r7, #12]
 80020bc:	60b9      	str	r1, [r7, #8]
 80020be:	603b      	str	r3, [r7, #0]
 80020c0:	4613      	mov	r3, r2
 80020c2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80020c4:	2300      	movs	r3, #0
 80020c6:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80020ce:	2b01      	cmp	r3, #1
 80020d0:	d101      	bne.n	80020d6 <HAL_SPI_Transmit+0x22>
 80020d2:	2302      	movs	r3, #2
 80020d4:	e126      	b.n	8002324 <HAL_SPI_Transmit+0x270>
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	2201      	movs	r2, #1
 80020da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80020de:	f7fe ff21 	bl	8000f24 <HAL_GetTick>
 80020e2:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80020e4:	88fb      	ldrh	r3, [r7, #6]
 80020e6:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80020ee:	b2db      	uxtb	r3, r3
 80020f0:	2b01      	cmp	r3, #1
 80020f2:	d002      	beq.n	80020fa <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80020f4:	2302      	movs	r3, #2
 80020f6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80020f8:	e10b      	b.n	8002312 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80020fa:	68bb      	ldr	r3, [r7, #8]
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d002      	beq.n	8002106 <HAL_SPI_Transmit+0x52>
 8002100:	88fb      	ldrh	r3, [r7, #6]
 8002102:	2b00      	cmp	r3, #0
 8002104:	d102      	bne.n	800210c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002106:	2301      	movs	r3, #1
 8002108:	77fb      	strb	r3, [r7, #31]
    goto error;
 800210a:	e102      	b.n	8002312 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	2203      	movs	r2, #3
 8002110:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	2200      	movs	r2, #0
 8002118:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	68ba      	ldr	r2, [r7, #8]
 800211e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	88fa      	ldrh	r2, [r7, #6]
 8002124:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	88fa      	ldrh	r2, [r7, #6]
 800212a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	2200      	movs	r2, #0
 8002130:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	2200      	movs	r2, #0
 8002136:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	2200      	movs	r2, #0
 800213c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	2200      	movs	r2, #0
 8002142:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	2200      	movs	r2, #0
 8002148:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	689b      	ldr	r3, [r3, #8]
 800214e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002152:	d10f      	bne.n	8002174 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	681a      	ldr	r2, [r3, #0]
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002162:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	681a      	ldr	r2, [r3, #0]
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002172:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800217e:	2b40      	cmp	r3, #64	; 0x40
 8002180:	d007      	beq.n	8002192 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	681a      	ldr	r2, [r3, #0]
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002190:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	68db      	ldr	r3, [r3, #12]
 8002196:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800219a:	d14b      	bne.n	8002234 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d002      	beq.n	80021aa <HAL_SPI_Transmit+0xf6>
 80021a4:	8afb      	ldrh	r3, [r7, #22]
 80021a6:	2b01      	cmp	r3, #1
 80021a8:	d13e      	bne.n	8002228 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ae:	881a      	ldrh	r2, [r3, #0]
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ba:	1c9a      	adds	r2, r3, #2
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80021c4:	b29b      	uxth	r3, r3
 80021c6:	3b01      	subs	r3, #1
 80021c8:	b29a      	uxth	r2, r3
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80021ce:	e02b      	b.n	8002228 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	689b      	ldr	r3, [r3, #8]
 80021d6:	f003 0302 	and.w	r3, r3, #2
 80021da:	2b02      	cmp	r3, #2
 80021dc:	d112      	bne.n	8002204 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021e2:	881a      	ldrh	r2, [r3, #0]
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ee:	1c9a      	adds	r2, r3, #2
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80021f8:	b29b      	uxth	r3, r3
 80021fa:	3b01      	subs	r3, #1
 80021fc:	b29a      	uxth	r2, r3
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	86da      	strh	r2, [r3, #54]	; 0x36
 8002202:	e011      	b.n	8002228 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002204:	f7fe fe8e 	bl	8000f24 <HAL_GetTick>
 8002208:	4602      	mov	r2, r0
 800220a:	69bb      	ldr	r3, [r7, #24]
 800220c:	1ad3      	subs	r3, r2, r3
 800220e:	683a      	ldr	r2, [r7, #0]
 8002210:	429a      	cmp	r2, r3
 8002212:	d803      	bhi.n	800221c <HAL_SPI_Transmit+0x168>
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800221a:	d102      	bne.n	8002222 <HAL_SPI_Transmit+0x16e>
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	2b00      	cmp	r3, #0
 8002220:	d102      	bne.n	8002228 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8002222:	2303      	movs	r3, #3
 8002224:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002226:	e074      	b.n	8002312 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800222c:	b29b      	uxth	r3, r3
 800222e:	2b00      	cmp	r3, #0
 8002230:	d1ce      	bne.n	80021d0 <HAL_SPI_Transmit+0x11c>
 8002232:	e04c      	b.n	80022ce <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	2b00      	cmp	r3, #0
 800223a:	d002      	beq.n	8002242 <HAL_SPI_Transmit+0x18e>
 800223c:	8afb      	ldrh	r3, [r7, #22]
 800223e:	2b01      	cmp	r3, #1
 8002240:	d140      	bne.n	80022c4 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	330c      	adds	r3, #12
 800224c:	7812      	ldrb	r2, [r2, #0]
 800224e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002254:	1c5a      	adds	r2, r3, #1
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800225e:	b29b      	uxth	r3, r3
 8002260:	3b01      	subs	r3, #1
 8002262:	b29a      	uxth	r2, r3
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002268:	e02c      	b.n	80022c4 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	689b      	ldr	r3, [r3, #8]
 8002270:	f003 0302 	and.w	r3, r3, #2
 8002274:	2b02      	cmp	r3, #2
 8002276:	d113      	bne.n	80022a0 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	330c      	adds	r3, #12
 8002282:	7812      	ldrb	r2, [r2, #0]
 8002284:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800228a:	1c5a      	adds	r2, r3, #1
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002294:	b29b      	uxth	r3, r3
 8002296:	3b01      	subs	r3, #1
 8002298:	b29a      	uxth	r2, r3
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	86da      	strh	r2, [r3, #54]	; 0x36
 800229e:	e011      	b.n	80022c4 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80022a0:	f7fe fe40 	bl	8000f24 <HAL_GetTick>
 80022a4:	4602      	mov	r2, r0
 80022a6:	69bb      	ldr	r3, [r7, #24]
 80022a8:	1ad3      	subs	r3, r2, r3
 80022aa:	683a      	ldr	r2, [r7, #0]
 80022ac:	429a      	cmp	r2, r3
 80022ae:	d803      	bhi.n	80022b8 <HAL_SPI_Transmit+0x204>
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80022b6:	d102      	bne.n	80022be <HAL_SPI_Transmit+0x20a>
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d102      	bne.n	80022c4 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80022be:	2303      	movs	r3, #3
 80022c0:	77fb      	strb	r3, [r7, #31]
          goto error;
 80022c2:	e026      	b.n	8002312 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80022c8:	b29b      	uxth	r3, r3
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d1cd      	bne.n	800226a <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80022ce:	69ba      	ldr	r2, [r7, #24]
 80022d0:	6839      	ldr	r1, [r7, #0]
 80022d2:	68f8      	ldr	r0, [r7, #12]
 80022d4:	f000 fbb8 	bl	8002a48 <SPI_EndRxTxTransaction>
 80022d8:	4603      	mov	r3, r0
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d002      	beq.n	80022e4 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	2220      	movs	r2, #32
 80022e2:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	689b      	ldr	r3, [r3, #8]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d10a      	bne.n	8002302 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80022ec:	2300      	movs	r3, #0
 80022ee:	613b      	str	r3, [r7, #16]
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	68db      	ldr	r3, [r3, #12]
 80022f6:	613b      	str	r3, [r7, #16]
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	689b      	ldr	r3, [r3, #8]
 80022fe:	613b      	str	r3, [r7, #16]
 8002300:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002306:	2b00      	cmp	r3, #0
 8002308:	d002      	beq.n	8002310 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800230a:	2301      	movs	r3, #1
 800230c:	77fb      	strb	r3, [r7, #31]
 800230e:	e000      	b.n	8002312 <HAL_SPI_Transmit+0x25e>
  }

error:
 8002310:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	2201      	movs	r2, #1
 8002316:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	2200      	movs	r2, #0
 800231e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002322:	7ffb      	ldrb	r3, [r7, #31]
}
 8002324:	4618      	mov	r0, r3
 8002326:	3720      	adds	r7, #32
 8002328:	46bd      	mov	sp, r7
 800232a:	bd80      	pop	{r7, pc}

0800232c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b088      	sub	sp, #32
 8002330:	af02      	add	r7, sp, #8
 8002332:	60f8      	str	r0, [r7, #12]
 8002334:	60b9      	str	r1, [r7, #8]
 8002336:	603b      	str	r3, [r7, #0]
 8002338:	4613      	mov	r3, r2
 800233a:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800233c:	2300      	movs	r3, #0
 800233e:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002348:	d112      	bne.n	8002370 <HAL_SPI_Receive+0x44>
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	689b      	ldr	r3, [r3, #8]
 800234e:	2b00      	cmp	r3, #0
 8002350:	d10e      	bne.n	8002370 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	2204      	movs	r2, #4
 8002356:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800235a:	88fa      	ldrh	r2, [r7, #6]
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	9300      	str	r3, [sp, #0]
 8002360:	4613      	mov	r3, r2
 8002362:	68ba      	ldr	r2, [r7, #8]
 8002364:	68b9      	ldr	r1, [r7, #8]
 8002366:	68f8      	ldr	r0, [r7, #12]
 8002368:	f000 f8f1 	bl	800254e <HAL_SPI_TransmitReceive>
 800236c:	4603      	mov	r3, r0
 800236e:	e0ea      	b.n	8002546 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002376:	2b01      	cmp	r3, #1
 8002378:	d101      	bne.n	800237e <HAL_SPI_Receive+0x52>
 800237a:	2302      	movs	r3, #2
 800237c:	e0e3      	b.n	8002546 <HAL_SPI_Receive+0x21a>
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	2201      	movs	r2, #1
 8002382:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002386:	f7fe fdcd 	bl	8000f24 <HAL_GetTick>
 800238a:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002392:	b2db      	uxtb	r3, r3
 8002394:	2b01      	cmp	r3, #1
 8002396:	d002      	beq.n	800239e <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8002398:	2302      	movs	r3, #2
 800239a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800239c:	e0ca      	b.n	8002534 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 800239e:	68bb      	ldr	r3, [r7, #8]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d002      	beq.n	80023aa <HAL_SPI_Receive+0x7e>
 80023a4:	88fb      	ldrh	r3, [r7, #6]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d102      	bne.n	80023b0 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80023aa:	2301      	movs	r3, #1
 80023ac:	75fb      	strb	r3, [r7, #23]
    goto error;
 80023ae:	e0c1      	b.n	8002534 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	2204      	movs	r2, #4
 80023b4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	2200      	movs	r2, #0
 80023bc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	68ba      	ldr	r2, [r7, #8]
 80023c2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	88fa      	ldrh	r2, [r7, #6]
 80023c8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	88fa      	ldrh	r2, [r7, #6]
 80023ce:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	2200      	movs	r2, #0
 80023d4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	2200      	movs	r2, #0
 80023da:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	2200      	movs	r2, #0
 80023e0:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	2200      	movs	r2, #0
 80023e6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	2200      	movs	r2, #0
 80023ec:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	689b      	ldr	r3, [r3, #8]
 80023f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80023f6:	d10f      	bne.n	8002418 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	681a      	ldr	r2, [r3, #0]
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002406:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	681a      	ldr	r2, [r3, #0]
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002416:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002422:	2b40      	cmp	r3, #64	; 0x40
 8002424:	d007      	beq.n	8002436 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	681a      	ldr	r2, [r3, #0]
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002434:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	68db      	ldr	r3, [r3, #12]
 800243a:	2b00      	cmp	r3, #0
 800243c:	d162      	bne.n	8002504 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800243e:	e02e      	b.n	800249e <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	689b      	ldr	r3, [r3, #8]
 8002446:	f003 0301 	and.w	r3, r3, #1
 800244a:	2b01      	cmp	r3, #1
 800244c:	d115      	bne.n	800247a <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f103 020c 	add.w	r2, r3, #12
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800245a:	7812      	ldrb	r2, [r2, #0]
 800245c:	b2d2      	uxtb	r2, r2
 800245e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002464:	1c5a      	adds	r2, r3, #1
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800246e:	b29b      	uxth	r3, r3
 8002470:	3b01      	subs	r3, #1
 8002472:	b29a      	uxth	r2, r3
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002478:	e011      	b.n	800249e <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800247a:	f7fe fd53 	bl	8000f24 <HAL_GetTick>
 800247e:	4602      	mov	r2, r0
 8002480:	693b      	ldr	r3, [r7, #16]
 8002482:	1ad3      	subs	r3, r2, r3
 8002484:	683a      	ldr	r2, [r7, #0]
 8002486:	429a      	cmp	r2, r3
 8002488:	d803      	bhi.n	8002492 <HAL_SPI_Receive+0x166>
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002490:	d102      	bne.n	8002498 <HAL_SPI_Receive+0x16c>
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	2b00      	cmp	r3, #0
 8002496:	d102      	bne.n	800249e <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8002498:	2303      	movs	r3, #3
 800249a:	75fb      	strb	r3, [r7, #23]
          goto error;
 800249c:	e04a      	b.n	8002534 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80024a2:	b29b      	uxth	r3, r3
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d1cb      	bne.n	8002440 <HAL_SPI_Receive+0x114>
 80024a8:	e031      	b.n	800250e <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	689b      	ldr	r3, [r3, #8]
 80024b0:	f003 0301 	and.w	r3, r3, #1
 80024b4:	2b01      	cmp	r3, #1
 80024b6:	d113      	bne.n	80024e0 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	68da      	ldr	r2, [r3, #12]
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024c2:	b292      	uxth	r2, r2
 80024c4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024ca:	1c9a      	adds	r2, r3, #2
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80024d4:	b29b      	uxth	r3, r3
 80024d6:	3b01      	subs	r3, #1
 80024d8:	b29a      	uxth	r2, r3
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	87da      	strh	r2, [r3, #62]	; 0x3e
 80024de:	e011      	b.n	8002504 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80024e0:	f7fe fd20 	bl	8000f24 <HAL_GetTick>
 80024e4:	4602      	mov	r2, r0
 80024e6:	693b      	ldr	r3, [r7, #16]
 80024e8:	1ad3      	subs	r3, r2, r3
 80024ea:	683a      	ldr	r2, [r7, #0]
 80024ec:	429a      	cmp	r2, r3
 80024ee:	d803      	bhi.n	80024f8 <HAL_SPI_Receive+0x1cc>
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80024f6:	d102      	bne.n	80024fe <HAL_SPI_Receive+0x1d2>
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d102      	bne.n	8002504 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 80024fe:	2303      	movs	r3, #3
 8002500:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002502:	e017      	b.n	8002534 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002508:	b29b      	uxth	r3, r3
 800250a:	2b00      	cmp	r3, #0
 800250c:	d1cd      	bne.n	80024aa <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800250e:	693a      	ldr	r2, [r7, #16]
 8002510:	6839      	ldr	r1, [r7, #0]
 8002512:	68f8      	ldr	r0, [r7, #12]
 8002514:	f000 fa46 	bl	80029a4 <SPI_EndRxTransaction>
 8002518:	4603      	mov	r3, r0
 800251a:	2b00      	cmp	r3, #0
 800251c:	d002      	beq.n	8002524 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	2220      	movs	r2, #32
 8002522:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002528:	2b00      	cmp	r3, #0
 800252a:	d002      	beq.n	8002532 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 800252c:	2301      	movs	r3, #1
 800252e:	75fb      	strb	r3, [r7, #23]
 8002530:	e000      	b.n	8002534 <HAL_SPI_Receive+0x208>
  }

error :
 8002532:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	2201      	movs	r2, #1
 8002538:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	2200      	movs	r2, #0
 8002540:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002544:	7dfb      	ldrb	r3, [r7, #23]
}
 8002546:	4618      	mov	r0, r3
 8002548:	3718      	adds	r7, #24
 800254a:	46bd      	mov	sp, r7
 800254c:	bd80      	pop	{r7, pc}

0800254e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800254e:	b580      	push	{r7, lr}
 8002550:	b08c      	sub	sp, #48	; 0x30
 8002552:	af00      	add	r7, sp, #0
 8002554:	60f8      	str	r0, [r7, #12]
 8002556:	60b9      	str	r1, [r7, #8]
 8002558:	607a      	str	r2, [r7, #4]
 800255a:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800255c:	2301      	movs	r3, #1
 800255e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002560:	2300      	movs	r3, #0
 8002562:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800256c:	2b01      	cmp	r3, #1
 800256e:	d101      	bne.n	8002574 <HAL_SPI_TransmitReceive+0x26>
 8002570:	2302      	movs	r3, #2
 8002572:	e18a      	b.n	800288a <HAL_SPI_TransmitReceive+0x33c>
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	2201      	movs	r2, #1
 8002578:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800257c:	f7fe fcd2 	bl	8000f24 <HAL_GetTick>
 8002580:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002588:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8002592:	887b      	ldrh	r3, [r7, #2]
 8002594:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002596:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800259a:	2b01      	cmp	r3, #1
 800259c:	d00f      	beq.n	80025be <HAL_SPI_TransmitReceive+0x70>
 800259e:	69fb      	ldr	r3, [r7, #28]
 80025a0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80025a4:	d107      	bne.n	80025b6 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	689b      	ldr	r3, [r3, #8]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d103      	bne.n	80025b6 <HAL_SPI_TransmitReceive+0x68>
 80025ae:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80025b2:	2b04      	cmp	r3, #4
 80025b4:	d003      	beq.n	80025be <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80025b6:	2302      	movs	r3, #2
 80025b8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80025bc:	e15b      	b.n	8002876 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80025be:	68bb      	ldr	r3, [r7, #8]
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d005      	beq.n	80025d0 <HAL_SPI_TransmitReceive+0x82>
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d002      	beq.n	80025d0 <HAL_SPI_TransmitReceive+0x82>
 80025ca:	887b      	ldrh	r3, [r7, #2]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d103      	bne.n	80025d8 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80025d0:	2301      	movs	r3, #1
 80025d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80025d6:	e14e      	b.n	8002876 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80025de:	b2db      	uxtb	r3, r3
 80025e0:	2b04      	cmp	r3, #4
 80025e2:	d003      	beq.n	80025ec <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	2205      	movs	r2, #5
 80025e8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	2200      	movs	r2, #0
 80025f0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	687a      	ldr	r2, [r7, #4]
 80025f6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	887a      	ldrh	r2, [r7, #2]
 80025fc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	887a      	ldrh	r2, [r7, #2]
 8002602:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	68ba      	ldr	r2, [r7, #8]
 8002608:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	887a      	ldrh	r2, [r7, #2]
 800260e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	887a      	ldrh	r2, [r7, #2]
 8002614:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	2200      	movs	r2, #0
 800261a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	2200      	movs	r2, #0
 8002620:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800262c:	2b40      	cmp	r3, #64	; 0x40
 800262e:	d007      	beq.n	8002640 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	681a      	ldr	r2, [r3, #0]
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800263e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	68db      	ldr	r3, [r3, #12]
 8002644:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002648:	d178      	bne.n	800273c <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	685b      	ldr	r3, [r3, #4]
 800264e:	2b00      	cmp	r3, #0
 8002650:	d002      	beq.n	8002658 <HAL_SPI_TransmitReceive+0x10a>
 8002652:	8b7b      	ldrh	r3, [r7, #26]
 8002654:	2b01      	cmp	r3, #1
 8002656:	d166      	bne.n	8002726 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800265c:	881a      	ldrh	r2, [r3, #0]
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002668:	1c9a      	adds	r2, r3, #2
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002672:	b29b      	uxth	r3, r3
 8002674:	3b01      	subs	r3, #1
 8002676:	b29a      	uxth	r2, r3
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800267c:	e053      	b.n	8002726 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	689b      	ldr	r3, [r3, #8]
 8002684:	f003 0302 	and.w	r3, r3, #2
 8002688:	2b02      	cmp	r3, #2
 800268a:	d11b      	bne.n	80026c4 <HAL_SPI_TransmitReceive+0x176>
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002690:	b29b      	uxth	r3, r3
 8002692:	2b00      	cmp	r3, #0
 8002694:	d016      	beq.n	80026c4 <HAL_SPI_TransmitReceive+0x176>
 8002696:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002698:	2b01      	cmp	r3, #1
 800269a:	d113      	bne.n	80026c4 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026a0:	881a      	ldrh	r2, [r3, #0]
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ac:	1c9a      	adds	r2, r3, #2
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80026b6:	b29b      	uxth	r3, r3
 80026b8:	3b01      	subs	r3, #1
 80026ba:	b29a      	uxth	r2, r3
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80026c0:	2300      	movs	r3, #0
 80026c2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	689b      	ldr	r3, [r3, #8]
 80026ca:	f003 0301 	and.w	r3, r3, #1
 80026ce:	2b01      	cmp	r3, #1
 80026d0:	d119      	bne.n	8002706 <HAL_SPI_TransmitReceive+0x1b8>
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80026d6:	b29b      	uxth	r3, r3
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d014      	beq.n	8002706 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	68da      	ldr	r2, [r3, #12]
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026e6:	b292      	uxth	r2, r2
 80026e8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026ee:	1c9a      	adds	r2, r3, #2
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80026f8:	b29b      	uxth	r3, r3
 80026fa:	3b01      	subs	r3, #1
 80026fc:	b29a      	uxth	r2, r3
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002702:	2301      	movs	r3, #1
 8002704:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002706:	f7fe fc0d 	bl	8000f24 <HAL_GetTick>
 800270a:	4602      	mov	r2, r0
 800270c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800270e:	1ad3      	subs	r3, r2, r3
 8002710:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002712:	429a      	cmp	r2, r3
 8002714:	d807      	bhi.n	8002726 <HAL_SPI_TransmitReceive+0x1d8>
 8002716:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002718:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800271c:	d003      	beq.n	8002726 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800271e:	2303      	movs	r3, #3
 8002720:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002724:	e0a7      	b.n	8002876 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800272a:	b29b      	uxth	r3, r3
 800272c:	2b00      	cmp	r3, #0
 800272e:	d1a6      	bne.n	800267e <HAL_SPI_TransmitReceive+0x130>
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002734:	b29b      	uxth	r3, r3
 8002736:	2b00      	cmp	r3, #0
 8002738:	d1a1      	bne.n	800267e <HAL_SPI_TransmitReceive+0x130>
 800273a:	e07c      	b.n	8002836 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	2b00      	cmp	r3, #0
 8002742:	d002      	beq.n	800274a <HAL_SPI_TransmitReceive+0x1fc>
 8002744:	8b7b      	ldrh	r3, [r7, #26]
 8002746:	2b01      	cmp	r3, #1
 8002748:	d16b      	bne.n	8002822 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	330c      	adds	r3, #12
 8002754:	7812      	ldrb	r2, [r2, #0]
 8002756:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800275c:	1c5a      	adds	r2, r3, #1
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002766:	b29b      	uxth	r3, r3
 8002768:	3b01      	subs	r3, #1
 800276a:	b29a      	uxth	r2, r3
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002770:	e057      	b.n	8002822 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	689b      	ldr	r3, [r3, #8]
 8002778:	f003 0302 	and.w	r3, r3, #2
 800277c:	2b02      	cmp	r3, #2
 800277e:	d11c      	bne.n	80027ba <HAL_SPI_TransmitReceive+0x26c>
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002784:	b29b      	uxth	r3, r3
 8002786:	2b00      	cmp	r3, #0
 8002788:	d017      	beq.n	80027ba <HAL_SPI_TransmitReceive+0x26c>
 800278a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800278c:	2b01      	cmp	r3, #1
 800278e:	d114      	bne.n	80027ba <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	330c      	adds	r3, #12
 800279a:	7812      	ldrb	r2, [r2, #0]
 800279c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027a2:	1c5a      	adds	r2, r3, #1
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80027ac:	b29b      	uxth	r3, r3
 80027ae:	3b01      	subs	r3, #1
 80027b0:	b29a      	uxth	r2, r3
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80027b6:	2300      	movs	r3, #0
 80027b8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	689b      	ldr	r3, [r3, #8]
 80027c0:	f003 0301 	and.w	r3, r3, #1
 80027c4:	2b01      	cmp	r3, #1
 80027c6:	d119      	bne.n	80027fc <HAL_SPI_TransmitReceive+0x2ae>
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80027cc:	b29b      	uxth	r3, r3
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d014      	beq.n	80027fc <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	68da      	ldr	r2, [r3, #12]
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027dc:	b2d2      	uxtb	r2, r2
 80027de:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027e4:	1c5a      	adds	r2, r3, #1
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80027ee:	b29b      	uxth	r3, r3
 80027f0:	3b01      	subs	r3, #1
 80027f2:	b29a      	uxth	r2, r3
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80027f8:	2301      	movs	r3, #1
 80027fa:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80027fc:	f7fe fb92 	bl	8000f24 <HAL_GetTick>
 8002800:	4602      	mov	r2, r0
 8002802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002804:	1ad3      	subs	r3, r2, r3
 8002806:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002808:	429a      	cmp	r2, r3
 800280a:	d803      	bhi.n	8002814 <HAL_SPI_TransmitReceive+0x2c6>
 800280c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800280e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002812:	d102      	bne.n	800281a <HAL_SPI_TransmitReceive+0x2cc>
 8002814:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002816:	2b00      	cmp	r3, #0
 8002818:	d103      	bne.n	8002822 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800281a:	2303      	movs	r3, #3
 800281c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002820:	e029      	b.n	8002876 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002826:	b29b      	uxth	r3, r3
 8002828:	2b00      	cmp	r3, #0
 800282a:	d1a2      	bne.n	8002772 <HAL_SPI_TransmitReceive+0x224>
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002830:	b29b      	uxth	r3, r3
 8002832:	2b00      	cmp	r3, #0
 8002834:	d19d      	bne.n	8002772 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002836:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002838:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800283a:	68f8      	ldr	r0, [r7, #12]
 800283c:	f000 f904 	bl	8002a48 <SPI_EndRxTxTransaction>
 8002840:	4603      	mov	r3, r0
 8002842:	2b00      	cmp	r3, #0
 8002844:	d006      	beq.n	8002854 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8002846:	2301      	movs	r3, #1
 8002848:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	2220      	movs	r2, #32
 8002850:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8002852:	e010      	b.n	8002876 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	689b      	ldr	r3, [r3, #8]
 8002858:	2b00      	cmp	r3, #0
 800285a:	d10b      	bne.n	8002874 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800285c:	2300      	movs	r3, #0
 800285e:	617b      	str	r3, [r7, #20]
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	68db      	ldr	r3, [r3, #12]
 8002866:	617b      	str	r3, [r7, #20]
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	689b      	ldr	r3, [r3, #8]
 800286e:	617b      	str	r3, [r7, #20]
 8002870:	697b      	ldr	r3, [r7, #20]
 8002872:	e000      	b.n	8002876 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8002874:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	2201      	movs	r2, #1
 800287a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	2200      	movs	r2, #0
 8002882:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002886:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800288a:	4618      	mov	r0, r3
 800288c:	3730      	adds	r7, #48	; 0x30
 800288e:	46bd      	mov	sp, r7
 8002890:	bd80      	pop	{r7, pc}
	...

08002894 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b088      	sub	sp, #32
 8002898:	af00      	add	r7, sp, #0
 800289a:	60f8      	str	r0, [r7, #12]
 800289c:	60b9      	str	r1, [r7, #8]
 800289e:	603b      	str	r3, [r7, #0]
 80028a0:	4613      	mov	r3, r2
 80028a2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80028a4:	f7fe fb3e 	bl	8000f24 <HAL_GetTick>
 80028a8:	4602      	mov	r2, r0
 80028aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028ac:	1a9b      	subs	r3, r3, r2
 80028ae:	683a      	ldr	r2, [r7, #0]
 80028b0:	4413      	add	r3, r2
 80028b2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80028b4:	f7fe fb36 	bl	8000f24 <HAL_GetTick>
 80028b8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80028ba:	4b39      	ldr	r3, [pc, #228]	; (80029a0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	015b      	lsls	r3, r3, #5
 80028c0:	0d1b      	lsrs	r3, r3, #20
 80028c2:	69fa      	ldr	r2, [r7, #28]
 80028c4:	fb02 f303 	mul.w	r3, r2, r3
 80028c8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80028ca:	e054      	b.n	8002976 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80028d2:	d050      	beq.n	8002976 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80028d4:	f7fe fb26 	bl	8000f24 <HAL_GetTick>
 80028d8:	4602      	mov	r2, r0
 80028da:	69bb      	ldr	r3, [r7, #24]
 80028dc:	1ad3      	subs	r3, r2, r3
 80028de:	69fa      	ldr	r2, [r7, #28]
 80028e0:	429a      	cmp	r2, r3
 80028e2:	d902      	bls.n	80028ea <SPI_WaitFlagStateUntilTimeout+0x56>
 80028e4:	69fb      	ldr	r3, [r7, #28]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d13d      	bne.n	8002966 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	685a      	ldr	r2, [r3, #4]
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80028f8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	685b      	ldr	r3, [r3, #4]
 80028fe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002902:	d111      	bne.n	8002928 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	689b      	ldr	r3, [r3, #8]
 8002908:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800290c:	d004      	beq.n	8002918 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	689b      	ldr	r3, [r3, #8]
 8002912:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002916:	d107      	bne.n	8002928 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	681a      	ldr	r2, [r3, #0]
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002926:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800292c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002930:	d10f      	bne.n	8002952 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	681a      	ldr	r2, [r3, #0]
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002940:	601a      	str	r2, [r3, #0]
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	681a      	ldr	r2, [r3, #0]
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002950:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	2201      	movs	r2, #1
 8002956:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	2200      	movs	r2, #0
 800295e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002962:	2303      	movs	r3, #3
 8002964:	e017      	b.n	8002996 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8002966:	697b      	ldr	r3, [r7, #20]
 8002968:	2b00      	cmp	r3, #0
 800296a:	d101      	bne.n	8002970 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800296c:	2300      	movs	r3, #0
 800296e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002970:	697b      	ldr	r3, [r7, #20]
 8002972:	3b01      	subs	r3, #1
 8002974:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	689a      	ldr	r2, [r3, #8]
 800297c:	68bb      	ldr	r3, [r7, #8]
 800297e:	4013      	ands	r3, r2
 8002980:	68ba      	ldr	r2, [r7, #8]
 8002982:	429a      	cmp	r2, r3
 8002984:	bf0c      	ite	eq
 8002986:	2301      	moveq	r3, #1
 8002988:	2300      	movne	r3, #0
 800298a:	b2db      	uxtb	r3, r3
 800298c:	461a      	mov	r2, r3
 800298e:	79fb      	ldrb	r3, [r7, #7]
 8002990:	429a      	cmp	r2, r3
 8002992:	d19b      	bne.n	80028cc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002994:	2300      	movs	r3, #0
}
 8002996:	4618      	mov	r0, r3
 8002998:	3720      	adds	r7, #32
 800299a:	46bd      	mov	sp, r7
 800299c:	bd80      	pop	{r7, pc}
 800299e:	bf00      	nop
 80029a0:	2000000c 	.word	0x2000000c

080029a4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b086      	sub	sp, #24
 80029a8:	af02      	add	r7, sp, #8
 80029aa:	60f8      	str	r0, [r7, #12]
 80029ac:	60b9      	str	r1, [r7, #8]
 80029ae:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	685b      	ldr	r3, [r3, #4]
 80029b4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80029b8:	d111      	bne.n	80029de <SPI_EndRxTransaction+0x3a>
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	689b      	ldr	r3, [r3, #8]
 80029be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80029c2:	d004      	beq.n	80029ce <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	689b      	ldr	r3, [r3, #8]
 80029c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029cc:	d107      	bne.n	80029de <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	681a      	ldr	r2, [r3, #0]
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80029dc:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	685b      	ldr	r3, [r3, #4]
 80029e2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80029e6:	d117      	bne.n	8002a18 <SPI_EndRxTransaction+0x74>
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	689b      	ldr	r3, [r3, #8]
 80029ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029f0:	d112      	bne.n	8002a18 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	9300      	str	r3, [sp, #0]
 80029f6:	68bb      	ldr	r3, [r7, #8]
 80029f8:	2200      	movs	r2, #0
 80029fa:	2101      	movs	r1, #1
 80029fc:	68f8      	ldr	r0, [r7, #12]
 80029fe:	f7ff ff49 	bl	8002894 <SPI_WaitFlagStateUntilTimeout>
 8002a02:	4603      	mov	r3, r0
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d01a      	beq.n	8002a3e <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a0c:	f043 0220 	orr.w	r2, r3, #32
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002a14:	2303      	movs	r3, #3
 8002a16:	e013      	b.n	8002a40 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	9300      	str	r3, [sp, #0]
 8002a1c:	68bb      	ldr	r3, [r7, #8]
 8002a1e:	2200      	movs	r2, #0
 8002a20:	2180      	movs	r1, #128	; 0x80
 8002a22:	68f8      	ldr	r0, [r7, #12]
 8002a24:	f7ff ff36 	bl	8002894 <SPI_WaitFlagStateUntilTimeout>
 8002a28:	4603      	mov	r3, r0
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d007      	beq.n	8002a3e <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a32:	f043 0220 	orr.w	r2, r3, #32
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002a3a:	2303      	movs	r3, #3
 8002a3c:	e000      	b.n	8002a40 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8002a3e:	2300      	movs	r3, #0
}
 8002a40:	4618      	mov	r0, r3
 8002a42:	3710      	adds	r7, #16
 8002a44:	46bd      	mov	sp, r7
 8002a46:	bd80      	pop	{r7, pc}

08002a48 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b086      	sub	sp, #24
 8002a4c:	af02      	add	r7, sp, #8
 8002a4e:	60f8      	str	r0, [r7, #12]
 8002a50:	60b9      	str	r1, [r7, #8]
 8002a52:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	9300      	str	r3, [sp, #0]
 8002a58:	68bb      	ldr	r3, [r7, #8]
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	2180      	movs	r1, #128	; 0x80
 8002a5e:	68f8      	ldr	r0, [r7, #12]
 8002a60:	f7ff ff18 	bl	8002894 <SPI_WaitFlagStateUntilTimeout>
 8002a64:	4603      	mov	r3, r0
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d007      	beq.n	8002a7a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a6e:	f043 0220 	orr.w	r2, r3, #32
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8002a76:	2303      	movs	r3, #3
 8002a78:	e000      	b.n	8002a7c <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8002a7a:	2300      	movs	r3, #0
}
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	3710      	adds	r7, #16
 8002a80:	46bd      	mov	sp, r7
 8002a82:	bd80      	pop	{r7, pc}

08002a84 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b082      	sub	sp, #8
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d101      	bne.n	8002a96 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002a92:	2301      	movs	r3, #1
 8002a94:	e041      	b.n	8002b1a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a9c:	b2db      	uxtb	r3, r3
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d106      	bne.n	8002ab0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002aaa:	6878      	ldr	r0, [r7, #4]
 8002aac:	f7fe f90a 	bl	8000cc4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2202      	movs	r2, #2
 8002ab4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681a      	ldr	r2, [r3, #0]
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	3304      	adds	r3, #4
 8002ac0:	4619      	mov	r1, r3
 8002ac2:	4610      	mov	r0, r2
 8002ac4:	f000 fbd0 	bl	8003268 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2201      	movs	r2, #1
 8002acc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2201      	movs	r2, #1
 8002ad4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2201      	movs	r2, #1
 8002adc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2201      	movs	r2, #1
 8002ae4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2201      	movs	r2, #1
 8002aec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2201      	movs	r2, #1
 8002af4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2201      	movs	r2, #1
 8002afc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2201      	movs	r2, #1
 8002b04:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2201      	movs	r2, #1
 8002b0c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2201      	movs	r2, #1
 8002b14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002b18:	2300      	movs	r3, #0
}
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	3708      	adds	r7, #8
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	bd80      	pop	{r7, pc}
	...

08002b24 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002b24:	b480      	push	{r7}
 8002b26:	b085      	sub	sp, #20
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b32:	b2db      	uxtb	r3, r3
 8002b34:	2b01      	cmp	r3, #1
 8002b36:	d001      	beq.n	8002b3c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002b38:	2301      	movs	r3, #1
 8002b3a:	e032      	b.n	8002ba2 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2202      	movs	r2, #2
 8002b40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4a18      	ldr	r2, [pc, #96]	; (8002bac <HAL_TIM_Base_Start+0x88>)
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d00e      	beq.n	8002b6c <HAL_TIM_Base_Start+0x48>
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b56:	d009      	beq.n	8002b6c <HAL_TIM_Base_Start+0x48>
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	4a14      	ldr	r2, [pc, #80]	; (8002bb0 <HAL_TIM_Base_Start+0x8c>)
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d004      	beq.n	8002b6c <HAL_TIM_Base_Start+0x48>
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	4a13      	ldr	r2, [pc, #76]	; (8002bb4 <HAL_TIM_Base_Start+0x90>)
 8002b68:	4293      	cmp	r3, r2
 8002b6a:	d111      	bne.n	8002b90 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	689b      	ldr	r3, [r3, #8]
 8002b72:	f003 0307 	and.w	r3, r3, #7
 8002b76:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	2b06      	cmp	r3, #6
 8002b7c:	d010      	beq.n	8002ba0 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	681a      	ldr	r2, [r3, #0]
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f042 0201 	orr.w	r2, r2, #1
 8002b8c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b8e:	e007      	b.n	8002ba0 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	681a      	ldr	r2, [r3, #0]
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f042 0201 	orr.w	r2, r2, #1
 8002b9e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002ba0:	2300      	movs	r3, #0
}
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	3714      	adds	r7, #20
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bc80      	pop	{r7}
 8002baa:	4770      	bx	lr
 8002bac:	40012c00 	.word	0x40012c00
 8002bb0:	40000400 	.word	0x40000400
 8002bb4:	40000800 	.word	0x40000800

08002bb8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002bb8:	b480      	push	{r7}
 8002bba:	b085      	sub	sp, #20
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bc6:	b2db      	uxtb	r3, r3
 8002bc8:	2b01      	cmp	r3, #1
 8002bca:	d001      	beq.n	8002bd0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002bcc:	2301      	movs	r3, #1
 8002bce:	e03a      	b.n	8002c46 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2202      	movs	r2, #2
 8002bd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	68da      	ldr	r2, [r3, #12]
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f042 0201 	orr.w	r2, r2, #1
 8002be6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	4a18      	ldr	r2, [pc, #96]	; (8002c50 <HAL_TIM_Base_Start_IT+0x98>)
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d00e      	beq.n	8002c10 <HAL_TIM_Base_Start_IT+0x58>
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bfa:	d009      	beq.n	8002c10 <HAL_TIM_Base_Start_IT+0x58>
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4a14      	ldr	r2, [pc, #80]	; (8002c54 <HAL_TIM_Base_Start_IT+0x9c>)
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d004      	beq.n	8002c10 <HAL_TIM_Base_Start_IT+0x58>
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	4a13      	ldr	r2, [pc, #76]	; (8002c58 <HAL_TIM_Base_Start_IT+0xa0>)
 8002c0c:	4293      	cmp	r3, r2
 8002c0e:	d111      	bne.n	8002c34 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	689b      	ldr	r3, [r3, #8]
 8002c16:	f003 0307 	and.w	r3, r3, #7
 8002c1a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	2b06      	cmp	r3, #6
 8002c20:	d010      	beq.n	8002c44 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	681a      	ldr	r2, [r3, #0]
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f042 0201 	orr.w	r2, r2, #1
 8002c30:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c32:	e007      	b.n	8002c44 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	681a      	ldr	r2, [r3, #0]
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f042 0201 	orr.w	r2, r2, #1
 8002c42:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002c44:	2300      	movs	r3, #0
}
 8002c46:	4618      	mov	r0, r3
 8002c48:	3714      	adds	r7, #20
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	bc80      	pop	{r7}
 8002c4e:	4770      	bx	lr
 8002c50:	40012c00 	.word	0x40012c00
 8002c54:	40000400 	.word	0x40000400
 8002c58:	40000800 	.word	0x40000800

08002c5c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b082      	sub	sp, #8
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d101      	bne.n	8002c6e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	e041      	b.n	8002cf2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c74:	b2db      	uxtb	r3, r3
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d106      	bne.n	8002c88 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002c82:	6878      	ldr	r0, [r7, #4]
 8002c84:	f000 f839 	bl	8002cfa <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2202      	movs	r2, #2
 8002c8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681a      	ldr	r2, [r3, #0]
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	3304      	adds	r3, #4
 8002c98:	4619      	mov	r1, r3
 8002c9a:	4610      	mov	r0, r2
 8002c9c:	f000 fae4 	bl	8003268 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2201      	movs	r2, #1
 8002ca4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2201      	movs	r2, #1
 8002cac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2201      	movs	r2, #1
 8002cb4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2201      	movs	r2, #1
 8002cbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2201      	movs	r2, #1
 8002cc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2201      	movs	r2, #1
 8002ccc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2201      	movs	r2, #1
 8002cd4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2201      	movs	r2, #1
 8002cdc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2201      	movs	r2, #1
 8002ce4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2201      	movs	r2, #1
 8002cec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002cf0:	2300      	movs	r3, #0
}
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	3708      	adds	r7, #8
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bd80      	pop	{r7, pc}

08002cfa <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002cfa:	b480      	push	{r7}
 8002cfc:	b083      	sub	sp, #12
 8002cfe:	af00      	add	r7, sp, #0
 8002d00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002d02:	bf00      	nop
 8002d04:	370c      	adds	r7, #12
 8002d06:	46bd      	mov	sp, r7
 8002d08:	bc80      	pop	{r7}
 8002d0a:	4770      	bx	lr

08002d0c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b082      	sub	sp, #8
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	691b      	ldr	r3, [r3, #16]
 8002d1a:	f003 0302 	and.w	r3, r3, #2
 8002d1e:	2b02      	cmp	r3, #2
 8002d20:	d122      	bne.n	8002d68 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	68db      	ldr	r3, [r3, #12]
 8002d28:	f003 0302 	and.w	r3, r3, #2
 8002d2c:	2b02      	cmp	r3, #2
 8002d2e:	d11b      	bne.n	8002d68 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f06f 0202 	mvn.w	r2, #2
 8002d38:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	2201      	movs	r2, #1
 8002d3e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	699b      	ldr	r3, [r3, #24]
 8002d46:	f003 0303 	and.w	r3, r3, #3
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d003      	beq.n	8002d56 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002d4e:	6878      	ldr	r0, [r7, #4]
 8002d50:	f000 fa6f 	bl	8003232 <HAL_TIM_IC_CaptureCallback>
 8002d54:	e005      	b.n	8002d62 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d56:	6878      	ldr	r0, [r7, #4]
 8002d58:	f000 fa62 	bl	8003220 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d5c:	6878      	ldr	r0, [r7, #4]
 8002d5e:	f000 fa71 	bl	8003244 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	2200      	movs	r2, #0
 8002d66:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	691b      	ldr	r3, [r3, #16]
 8002d6e:	f003 0304 	and.w	r3, r3, #4
 8002d72:	2b04      	cmp	r3, #4
 8002d74:	d122      	bne.n	8002dbc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	68db      	ldr	r3, [r3, #12]
 8002d7c:	f003 0304 	and.w	r3, r3, #4
 8002d80:	2b04      	cmp	r3, #4
 8002d82:	d11b      	bne.n	8002dbc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f06f 0204 	mvn.w	r2, #4
 8002d8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2202      	movs	r2, #2
 8002d92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	699b      	ldr	r3, [r3, #24]
 8002d9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d003      	beq.n	8002daa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002da2:	6878      	ldr	r0, [r7, #4]
 8002da4:	f000 fa45 	bl	8003232 <HAL_TIM_IC_CaptureCallback>
 8002da8:	e005      	b.n	8002db6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002daa:	6878      	ldr	r0, [r7, #4]
 8002dac:	f000 fa38 	bl	8003220 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002db0:	6878      	ldr	r0, [r7, #4]
 8002db2:	f000 fa47 	bl	8003244 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2200      	movs	r2, #0
 8002dba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	691b      	ldr	r3, [r3, #16]
 8002dc2:	f003 0308 	and.w	r3, r3, #8
 8002dc6:	2b08      	cmp	r3, #8
 8002dc8:	d122      	bne.n	8002e10 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	68db      	ldr	r3, [r3, #12]
 8002dd0:	f003 0308 	and.w	r3, r3, #8
 8002dd4:	2b08      	cmp	r3, #8
 8002dd6:	d11b      	bne.n	8002e10 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f06f 0208 	mvn.w	r2, #8
 8002de0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	2204      	movs	r2, #4
 8002de6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	69db      	ldr	r3, [r3, #28]
 8002dee:	f003 0303 	and.w	r3, r3, #3
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d003      	beq.n	8002dfe <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002df6:	6878      	ldr	r0, [r7, #4]
 8002df8:	f000 fa1b 	bl	8003232 <HAL_TIM_IC_CaptureCallback>
 8002dfc:	e005      	b.n	8002e0a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002dfe:	6878      	ldr	r0, [r7, #4]
 8002e00:	f000 fa0e 	bl	8003220 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e04:	6878      	ldr	r0, [r7, #4]
 8002e06:	f000 fa1d 	bl	8003244 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	691b      	ldr	r3, [r3, #16]
 8002e16:	f003 0310 	and.w	r3, r3, #16
 8002e1a:	2b10      	cmp	r3, #16
 8002e1c:	d122      	bne.n	8002e64 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	68db      	ldr	r3, [r3, #12]
 8002e24:	f003 0310 	and.w	r3, r3, #16
 8002e28:	2b10      	cmp	r3, #16
 8002e2a:	d11b      	bne.n	8002e64 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f06f 0210 	mvn.w	r2, #16
 8002e34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	2208      	movs	r2, #8
 8002e3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	69db      	ldr	r3, [r3, #28]
 8002e42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d003      	beq.n	8002e52 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e4a:	6878      	ldr	r0, [r7, #4]
 8002e4c:	f000 f9f1 	bl	8003232 <HAL_TIM_IC_CaptureCallback>
 8002e50:	e005      	b.n	8002e5e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e52:	6878      	ldr	r0, [r7, #4]
 8002e54:	f000 f9e4 	bl	8003220 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e58:	6878      	ldr	r0, [r7, #4]
 8002e5a:	f000 f9f3 	bl	8003244 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	2200      	movs	r2, #0
 8002e62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	691b      	ldr	r3, [r3, #16]
 8002e6a:	f003 0301 	and.w	r3, r3, #1
 8002e6e:	2b01      	cmp	r3, #1
 8002e70:	d10e      	bne.n	8002e90 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	68db      	ldr	r3, [r3, #12]
 8002e78:	f003 0301 	and.w	r3, r3, #1
 8002e7c:	2b01      	cmp	r3, #1
 8002e7e:	d107      	bne.n	8002e90 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f06f 0201 	mvn.w	r2, #1
 8002e88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002e8a:	6878      	ldr	r0, [r7, #4]
 8002e8c:	f7fd faa6 	bl	80003dc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	691b      	ldr	r3, [r3, #16]
 8002e96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e9a:	2b80      	cmp	r3, #128	; 0x80
 8002e9c:	d10e      	bne.n	8002ebc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	68db      	ldr	r3, [r3, #12]
 8002ea4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ea8:	2b80      	cmp	r3, #128	; 0x80
 8002eaa:	d107      	bne.n	8002ebc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002eb4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002eb6:	6878      	ldr	r0, [r7, #4]
 8002eb8:	f000 fd0e 	bl	80038d8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	691b      	ldr	r3, [r3, #16]
 8002ec2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ec6:	2b40      	cmp	r3, #64	; 0x40
 8002ec8:	d10e      	bne.n	8002ee8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	68db      	ldr	r3, [r3, #12]
 8002ed0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ed4:	2b40      	cmp	r3, #64	; 0x40
 8002ed6:	d107      	bne.n	8002ee8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002ee0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002ee2:	6878      	ldr	r0, [r7, #4]
 8002ee4:	f000 f9b7 	bl	8003256 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	691b      	ldr	r3, [r3, #16]
 8002eee:	f003 0320 	and.w	r3, r3, #32
 8002ef2:	2b20      	cmp	r3, #32
 8002ef4:	d10e      	bne.n	8002f14 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	68db      	ldr	r3, [r3, #12]
 8002efc:	f003 0320 	and.w	r3, r3, #32
 8002f00:	2b20      	cmp	r3, #32
 8002f02:	d107      	bne.n	8002f14 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f06f 0220 	mvn.w	r2, #32
 8002f0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002f0e:	6878      	ldr	r0, [r7, #4]
 8002f10:	f000 fcd9 	bl	80038c6 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002f14:	bf00      	nop
 8002f16:	3708      	adds	r7, #8
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	bd80      	pop	{r7, pc}

08002f1c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b084      	sub	sp, #16
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	60f8      	str	r0, [r7, #12]
 8002f24:	60b9      	str	r1, [r7, #8]
 8002f26:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f2e:	2b01      	cmp	r3, #1
 8002f30:	d101      	bne.n	8002f36 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002f32:	2302      	movs	r3, #2
 8002f34:	e0ac      	b.n	8003090 <HAL_TIM_PWM_ConfigChannel+0x174>
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	2201      	movs	r2, #1
 8002f3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	2b0c      	cmp	r3, #12
 8002f42:	f200 809f 	bhi.w	8003084 <HAL_TIM_PWM_ConfigChannel+0x168>
 8002f46:	a201      	add	r2, pc, #4	; (adr r2, 8002f4c <HAL_TIM_PWM_ConfigChannel+0x30>)
 8002f48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f4c:	08002f81 	.word	0x08002f81
 8002f50:	08003085 	.word	0x08003085
 8002f54:	08003085 	.word	0x08003085
 8002f58:	08003085 	.word	0x08003085
 8002f5c:	08002fc1 	.word	0x08002fc1
 8002f60:	08003085 	.word	0x08003085
 8002f64:	08003085 	.word	0x08003085
 8002f68:	08003085 	.word	0x08003085
 8002f6c:	08003003 	.word	0x08003003
 8002f70:	08003085 	.word	0x08003085
 8002f74:	08003085 	.word	0x08003085
 8002f78:	08003085 	.word	0x08003085
 8002f7c:	08003043 	.word	0x08003043
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	68b9      	ldr	r1, [r7, #8]
 8002f86:	4618      	mov	r0, r3
 8002f88:	f000 f9d0 	bl	800332c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	699a      	ldr	r2, [r3, #24]
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f042 0208 	orr.w	r2, r2, #8
 8002f9a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	699a      	ldr	r2, [r3, #24]
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f022 0204 	bic.w	r2, r2, #4
 8002faa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	6999      	ldr	r1, [r3, #24]
 8002fb2:	68bb      	ldr	r3, [r7, #8]
 8002fb4:	691a      	ldr	r2, [r3, #16]
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	430a      	orrs	r2, r1
 8002fbc:	619a      	str	r2, [r3, #24]
      break;
 8002fbe:	e062      	b.n	8003086 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	68b9      	ldr	r1, [r7, #8]
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	f000 fa16 	bl	80033f8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	699a      	ldr	r2, [r3, #24]
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002fda:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	699a      	ldr	r2, [r3, #24]
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002fea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	6999      	ldr	r1, [r3, #24]
 8002ff2:	68bb      	ldr	r3, [r7, #8]
 8002ff4:	691b      	ldr	r3, [r3, #16]
 8002ff6:	021a      	lsls	r2, r3, #8
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	430a      	orrs	r2, r1
 8002ffe:	619a      	str	r2, [r3, #24]
      break;
 8003000:	e041      	b.n	8003086 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	68b9      	ldr	r1, [r7, #8]
 8003008:	4618      	mov	r0, r3
 800300a:	f000 fa5f 	bl	80034cc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	69da      	ldr	r2, [r3, #28]
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f042 0208 	orr.w	r2, r2, #8
 800301c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	69da      	ldr	r2, [r3, #28]
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f022 0204 	bic.w	r2, r2, #4
 800302c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	69d9      	ldr	r1, [r3, #28]
 8003034:	68bb      	ldr	r3, [r7, #8]
 8003036:	691a      	ldr	r2, [r3, #16]
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	430a      	orrs	r2, r1
 800303e:	61da      	str	r2, [r3, #28]
      break;
 8003040:	e021      	b.n	8003086 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	68b9      	ldr	r1, [r7, #8]
 8003048:	4618      	mov	r0, r3
 800304a:	f000 faa9 	bl	80035a0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	69da      	ldr	r2, [r3, #28]
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800305c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	69da      	ldr	r2, [r3, #28]
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800306c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	69d9      	ldr	r1, [r3, #28]
 8003074:	68bb      	ldr	r3, [r7, #8]
 8003076:	691b      	ldr	r3, [r3, #16]
 8003078:	021a      	lsls	r2, r3, #8
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	430a      	orrs	r2, r1
 8003080:	61da      	str	r2, [r3, #28]
      break;
 8003082:	e000      	b.n	8003086 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8003084:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	2200      	movs	r2, #0
 800308a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800308e:	2300      	movs	r3, #0
}
 8003090:	4618      	mov	r0, r3
 8003092:	3710      	adds	r7, #16
 8003094:	46bd      	mov	sp, r7
 8003096:	bd80      	pop	{r7, pc}

08003098 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b084      	sub	sp, #16
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
 80030a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030a8:	2b01      	cmp	r3, #1
 80030aa:	d101      	bne.n	80030b0 <HAL_TIM_ConfigClockSource+0x18>
 80030ac:	2302      	movs	r3, #2
 80030ae:	e0b3      	b.n	8003218 <HAL_TIM_ConfigClockSource+0x180>
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2201      	movs	r2, #1
 80030b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2202      	movs	r2, #2
 80030bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	689b      	ldr	r3, [r3, #8]
 80030c6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80030ce:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80030d6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	68fa      	ldr	r2, [r7, #12]
 80030de:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80030e8:	d03e      	beq.n	8003168 <HAL_TIM_ConfigClockSource+0xd0>
 80030ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80030ee:	f200 8087 	bhi.w	8003200 <HAL_TIM_ConfigClockSource+0x168>
 80030f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030f6:	f000 8085 	beq.w	8003204 <HAL_TIM_ConfigClockSource+0x16c>
 80030fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030fe:	d87f      	bhi.n	8003200 <HAL_TIM_ConfigClockSource+0x168>
 8003100:	2b70      	cmp	r3, #112	; 0x70
 8003102:	d01a      	beq.n	800313a <HAL_TIM_ConfigClockSource+0xa2>
 8003104:	2b70      	cmp	r3, #112	; 0x70
 8003106:	d87b      	bhi.n	8003200 <HAL_TIM_ConfigClockSource+0x168>
 8003108:	2b60      	cmp	r3, #96	; 0x60
 800310a:	d050      	beq.n	80031ae <HAL_TIM_ConfigClockSource+0x116>
 800310c:	2b60      	cmp	r3, #96	; 0x60
 800310e:	d877      	bhi.n	8003200 <HAL_TIM_ConfigClockSource+0x168>
 8003110:	2b50      	cmp	r3, #80	; 0x50
 8003112:	d03c      	beq.n	800318e <HAL_TIM_ConfigClockSource+0xf6>
 8003114:	2b50      	cmp	r3, #80	; 0x50
 8003116:	d873      	bhi.n	8003200 <HAL_TIM_ConfigClockSource+0x168>
 8003118:	2b40      	cmp	r3, #64	; 0x40
 800311a:	d058      	beq.n	80031ce <HAL_TIM_ConfigClockSource+0x136>
 800311c:	2b40      	cmp	r3, #64	; 0x40
 800311e:	d86f      	bhi.n	8003200 <HAL_TIM_ConfigClockSource+0x168>
 8003120:	2b30      	cmp	r3, #48	; 0x30
 8003122:	d064      	beq.n	80031ee <HAL_TIM_ConfigClockSource+0x156>
 8003124:	2b30      	cmp	r3, #48	; 0x30
 8003126:	d86b      	bhi.n	8003200 <HAL_TIM_ConfigClockSource+0x168>
 8003128:	2b20      	cmp	r3, #32
 800312a:	d060      	beq.n	80031ee <HAL_TIM_ConfigClockSource+0x156>
 800312c:	2b20      	cmp	r3, #32
 800312e:	d867      	bhi.n	8003200 <HAL_TIM_ConfigClockSource+0x168>
 8003130:	2b00      	cmp	r3, #0
 8003132:	d05c      	beq.n	80031ee <HAL_TIM_ConfigClockSource+0x156>
 8003134:	2b10      	cmp	r3, #16
 8003136:	d05a      	beq.n	80031ee <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003138:	e062      	b.n	8003200 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6818      	ldr	r0, [r3, #0]
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	6899      	ldr	r1, [r3, #8]
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	685a      	ldr	r2, [r3, #4]
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	68db      	ldr	r3, [r3, #12]
 800314a:	f000 faee 	bl	800372a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	689b      	ldr	r3, [r3, #8]
 8003154:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800315c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	68fa      	ldr	r2, [r7, #12]
 8003164:	609a      	str	r2, [r3, #8]
      break;
 8003166:	e04e      	b.n	8003206 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6818      	ldr	r0, [r3, #0]
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	6899      	ldr	r1, [r3, #8]
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	685a      	ldr	r2, [r3, #4]
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	68db      	ldr	r3, [r3, #12]
 8003178:	f000 fad7 	bl	800372a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	689a      	ldr	r2, [r3, #8]
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800318a:	609a      	str	r2, [r3, #8]
      break;
 800318c:	e03b      	b.n	8003206 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6818      	ldr	r0, [r3, #0]
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	6859      	ldr	r1, [r3, #4]
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	68db      	ldr	r3, [r3, #12]
 800319a:	461a      	mov	r2, r3
 800319c:	f000 fa4e 	bl	800363c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	2150      	movs	r1, #80	; 0x50
 80031a6:	4618      	mov	r0, r3
 80031a8:	f000 faa5 	bl	80036f6 <TIM_ITRx_SetConfig>
      break;
 80031ac:	e02b      	b.n	8003206 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6818      	ldr	r0, [r3, #0]
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	6859      	ldr	r1, [r3, #4]
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	68db      	ldr	r3, [r3, #12]
 80031ba:	461a      	mov	r2, r3
 80031bc:	f000 fa6c 	bl	8003698 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	2160      	movs	r1, #96	; 0x60
 80031c6:	4618      	mov	r0, r3
 80031c8:	f000 fa95 	bl	80036f6 <TIM_ITRx_SetConfig>
      break;
 80031cc:	e01b      	b.n	8003206 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6818      	ldr	r0, [r3, #0]
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	6859      	ldr	r1, [r3, #4]
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	68db      	ldr	r3, [r3, #12]
 80031da:	461a      	mov	r2, r3
 80031dc:	f000 fa2e 	bl	800363c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	2140      	movs	r1, #64	; 0x40
 80031e6:	4618      	mov	r0, r3
 80031e8:	f000 fa85 	bl	80036f6 <TIM_ITRx_SetConfig>
      break;
 80031ec:	e00b      	b.n	8003206 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681a      	ldr	r2, [r3, #0]
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	4619      	mov	r1, r3
 80031f8:	4610      	mov	r0, r2
 80031fa:	f000 fa7c 	bl	80036f6 <TIM_ITRx_SetConfig>
        break;
 80031fe:	e002      	b.n	8003206 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003200:	bf00      	nop
 8003202:	e000      	b.n	8003206 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003204:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2201      	movs	r2, #1
 800320a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2200      	movs	r2, #0
 8003212:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003216:	2300      	movs	r3, #0
}
 8003218:	4618      	mov	r0, r3
 800321a:	3710      	adds	r7, #16
 800321c:	46bd      	mov	sp, r7
 800321e:	bd80      	pop	{r7, pc}

08003220 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003220:	b480      	push	{r7}
 8003222:	b083      	sub	sp, #12
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003228:	bf00      	nop
 800322a:	370c      	adds	r7, #12
 800322c:	46bd      	mov	sp, r7
 800322e:	bc80      	pop	{r7}
 8003230:	4770      	bx	lr

08003232 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003232:	b480      	push	{r7}
 8003234:	b083      	sub	sp, #12
 8003236:	af00      	add	r7, sp, #0
 8003238:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800323a:	bf00      	nop
 800323c:	370c      	adds	r7, #12
 800323e:	46bd      	mov	sp, r7
 8003240:	bc80      	pop	{r7}
 8003242:	4770      	bx	lr

08003244 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003244:	b480      	push	{r7}
 8003246:	b083      	sub	sp, #12
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800324c:	bf00      	nop
 800324e:	370c      	adds	r7, #12
 8003250:	46bd      	mov	sp, r7
 8003252:	bc80      	pop	{r7}
 8003254:	4770      	bx	lr

08003256 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003256:	b480      	push	{r7}
 8003258:	b083      	sub	sp, #12
 800325a:	af00      	add	r7, sp, #0
 800325c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800325e:	bf00      	nop
 8003260:	370c      	adds	r7, #12
 8003262:	46bd      	mov	sp, r7
 8003264:	bc80      	pop	{r7}
 8003266:	4770      	bx	lr

08003268 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003268:	b480      	push	{r7}
 800326a:	b085      	sub	sp, #20
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
 8003270:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	4a29      	ldr	r2, [pc, #164]	; (8003320 <TIM_Base_SetConfig+0xb8>)
 800327c:	4293      	cmp	r3, r2
 800327e:	d00b      	beq.n	8003298 <TIM_Base_SetConfig+0x30>
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003286:	d007      	beq.n	8003298 <TIM_Base_SetConfig+0x30>
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	4a26      	ldr	r2, [pc, #152]	; (8003324 <TIM_Base_SetConfig+0xbc>)
 800328c:	4293      	cmp	r3, r2
 800328e:	d003      	beq.n	8003298 <TIM_Base_SetConfig+0x30>
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	4a25      	ldr	r2, [pc, #148]	; (8003328 <TIM_Base_SetConfig+0xc0>)
 8003294:	4293      	cmp	r3, r2
 8003296:	d108      	bne.n	80032aa <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800329e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	685b      	ldr	r3, [r3, #4]
 80032a4:	68fa      	ldr	r2, [r7, #12]
 80032a6:	4313      	orrs	r3, r2
 80032a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	4a1c      	ldr	r2, [pc, #112]	; (8003320 <TIM_Base_SetConfig+0xb8>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d00b      	beq.n	80032ca <TIM_Base_SetConfig+0x62>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032b8:	d007      	beq.n	80032ca <TIM_Base_SetConfig+0x62>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	4a19      	ldr	r2, [pc, #100]	; (8003324 <TIM_Base_SetConfig+0xbc>)
 80032be:	4293      	cmp	r3, r2
 80032c0:	d003      	beq.n	80032ca <TIM_Base_SetConfig+0x62>
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	4a18      	ldr	r2, [pc, #96]	; (8003328 <TIM_Base_SetConfig+0xc0>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d108      	bne.n	80032dc <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	68db      	ldr	r3, [r3, #12]
 80032d6:	68fa      	ldr	r2, [r7, #12]
 80032d8:	4313      	orrs	r3, r2
 80032da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	695b      	ldr	r3, [r3, #20]
 80032e6:	4313      	orrs	r3, r2
 80032e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	68fa      	ldr	r2, [r7, #12]
 80032ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	689a      	ldr	r2, [r3, #8]
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	681a      	ldr	r2, [r3, #0]
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	4a07      	ldr	r2, [pc, #28]	; (8003320 <TIM_Base_SetConfig+0xb8>)
 8003304:	4293      	cmp	r3, r2
 8003306:	d103      	bne.n	8003310 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	691a      	ldr	r2, [r3, #16]
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2201      	movs	r2, #1
 8003314:	615a      	str	r2, [r3, #20]
}
 8003316:	bf00      	nop
 8003318:	3714      	adds	r7, #20
 800331a:	46bd      	mov	sp, r7
 800331c:	bc80      	pop	{r7}
 800331e:	4770      	bx	lr
 8003320:	40012c00 	.word	0x40012c00
 8003324:	40000400 	.word	0x40000400
 8003328:	40000800 	.word	0x40000800

0800332c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800332c:	b480      	push	{r7}
 800332e:	b087      	sub	sp, #28
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
 8003334:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6a1b      	ldr	r3, [r3, #32]
 800333a:	f023 0201 	bic.w	r2, r3, #1
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6a1b      	ldr	r3, [r3, #32]
 8003346:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	685b      	ldr	r3, [r3, #4]
 800334c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	699b      	ldr	r3, [r3, #24]
 8003352:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800335a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	f023 0303 	bic.w	r3, r3, #3
 8003362:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	68fa      	ldr	r2, [r7, #12]
 800336a:	4313      	orrs	r3, r2
 800336c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800336e:	697b      	ldr	r3, [r7, #20]
 8003370:	f023 0302 	bic.w	r3, r3, #2
 8003374:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	689b      	ldr	r3, [r3, #8]
 800337a:	697a      	ldr	r2, [r7, #20]
 800337c:	4313      	orrs	r3, r2
 800337e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	4a1c      	ldr	r2, [pc, #112]	; (80033f4 <TIM_OC1_SetConfig+0xc8>)
 8003384:	4293      	cmp	r3, r2
 8003386:	d10c      	bne.n	80033a2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003388:	697b      	ldr	r3, [r7, #20]
 800338a:	f023 0308 	bic.w	r3, r3, #8
 800338e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	68db      	ldr	r3, [r3, #12]
 8003394:	697a      	ldr	r2, [r7, #20]
 8003396:	4313      	orrs	r3, r2
 8003398:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800339a:	697b      	ldr	r3, [r7, #20]
 800339c:	f023 0304 	bic.w	r3, r3, #4
 80033a0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	4a13      	ldr	r2, [pc, #76]	; (80033f4 <TIM_OC1_SetConfig+0xc8>)
 80033a6:	4293      	cmp	r3, r2
 80033a8:	d111      	bne.n	80033ce <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80033aa:	693b      	ldr	r3, [r7, #16]
 80033ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80033b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80033b2:	693b      	ldr	r3, [r7, #16]
 80033b4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80033b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	695b      	ldr	r3, [r3, #20]
 80033be:	693a      	ldr	r2, [r7, #16]
 80033c0:	4313      	orrs	r3, r2
 80033c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	699b      	ldr	r3, [r3, #24]
 80033c8:	693a      	ldr	r2, [r7, #16]
 80033ca:	4313      	orrs	r3, r2
 80033cc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	693a      	ldr	r2, [r7, #16]
 80033d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	68fa      	ldr	r2, [r7, #12]
 80033d8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	685a      	ldr	r2, [r3, #4]
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	697a      	ldr	r2, [r7, #20]
 80033e6:	621a      	str	r2, [r3, #32]
}
 80033e8:	bf00      	nop
 80033ea:	371c      	adds	r7, #28
 80033ec:	46bd      	mov	sp, r7
 80033ee:	bc80      	pop	{r7}
 80033f0:	4770      	bx	lr
 80033f2:	bf00      	nop
 80033f4:	40012c00 	.word	0x40012c00

080033f8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80033f8:	b480      	push	{r7}
 80033fa:	b087      	sub	sp, #28
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
 8003400:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6a1b      	ldr	r3, [r3, #32]
 8003406:	f023 0210 	bic.w	r2, r3, #16
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6a1b      	ldr	r3, [r3, #32]
 8003412:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	685b      	ldr	r3, [r3, #4]
 8003418:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	699b      	ldr	r3, [r3, #24]
 800341e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003426:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800342e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	021b      	lsls	r3, r3, #8
 8003436:	68fa      	ldr	r2, [r7, #12]
 8003438:	4313      	orrs	r3, r2
 800343a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800343c:	697b      	ldr	r3, [r7, #20]
 800343e:	f023 0320 	bic.w	r3, r3, #32
 8003442:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	689b      	ldr	r3, [r3, #8]
 8003448:	011b      	lsls	r3, r3, #4
 800344a:	697a      	ldr	r2, [r7, #20]
 800344c:	4313      	orrs	r3, r2
 800344e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	4a1d      	ldr	r2, [pc, #116]	; (80034c8 <TIM_OC2_SetConfig+0xd0>)
 8003454:	4293      	cmp	r3, r2
 8003456:	d10d      	bne.n	8003474 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003458:	697b      	ldr	r3, [r7, #20]
 800345a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800345e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	68db      	ldr	r3, [r3, #12]
 8003464:	011b      	lsls	r3, r3, #4
 8003466:	697a      	ldr	r2, [r7, #20]
 8003468:	4313      	orrs	r3, r2
 800346a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800346c:	697b      	ldr	r3, [r7, #20]
 800346e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003472:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	4a14      	ldr	r2, [pc, #80]	; (80034c8 <TIM_OC2_SetConfig+0xd0>)
 8003478:	4293      	cmp	r3, r2
 800347a:	d113      	bne.n	80034a4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800347c:	693b      	ldr	r3, [r7, #16]
 800347e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003482:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003484:	693b      	ldr	r3, [r7, #16]
 8003486:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800348a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	695b      	ldr	r3, [r3, #20]
 8003490:	009b      	lsls	r3, r3, #2
 8003492:	693a      	ldr	r2, [r7, #16]
 8003494:	4313      	orrs	r3, r2
 8003496:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	699b      	ldr	r3, [r3, #24]
 800349c:	009b      	lsls	r3, r3, #2
 800349e:	693a      	ldr	r2, [r7, #16]
 80034a0:	4313      	orrs	r3, r2
 80034a2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	693a      	ldr	r2, [r7, #16]
 80034a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	68fa      	ldr	r2, [r7, #12]
 80034ae:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	685a      	ldr	r2, [r3, #4]
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	697a      	ldr	r2, [r7, #20]
 80034bc:	621a      	str	r2, [r3, #32]
}
 80034be:	bf00      	nop
 80034c0:	371c      	adds	r7, #28
 80034c2:	46bd      	mov	sp, r7
 80034c4:	bc80      	pop	{r7}
 80034c6:	4770      	bx	lr
 80034c8:	40012c00 	.word	0x40012c00

080034cc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80034cc:	b480      	push	{r7}
 80034ce:	b087      	sub	sp, #28
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
 80034d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6a1b      	ldr	r3, [r3, #32]
 80034da:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6a1b      	ldr	r3, [r3, #32]
 80034e6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	685b      	ldr	r3, [r3, #4]
 80034ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	69db      	ldr	r3, [r3, #28]
 80034f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	f023 0303 	bic.w	r3, r3, #3
 8003502:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	68fa      	ldr	r2, [r7, #12]
 800350a:	4313      	orrs	r3, r2
 800350c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800350e:	697b      	ldr	r3, [r7, #20]
 8003510:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003514:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003516:	683b      	ldr	r3, [r7, #0]
 8003518:	689b      	ldr	r3, [r3, #8]
 800351a:	021b      	lsls	r3, r3, #8
 800351c:	697a      	ldr	r2, [r7, #20]
 800351e:	4313      	orrs	r3, r2
 8003520:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	4a1d      	ldr	r2, [pc, #116]	; (800359c <TIM_OC3_SetConfig+0xd0>)
 8003526:	4293      	cmp	r3, r2
 8003528:	d10d      	bne.n	8003546 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800352a:	697b      	ldr	r3, [r7, #20]
 800352c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003530:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	68db      	ldr	r3, [r3, #12]
 8003536:	021b      	lsls	r3, r3, #8
 8003538:	697a      	ldr	r2, [r7, #20]
 800353a:	4313      	orrs	r3, r2
 800353c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800353e:	697b      	ldr	r3, [r7, #20]
 8003540:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003544:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	4a14      	ldr	r2, [pc, #80]	; (800359c <TIM_OC3_SetConfig+0xd0>)
 800354a:	4293      	cmp	r3, r2
 800354c:	d113      	bne.n	8003576 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800354e:	693b      	ldr	r3, [r7, #16]
 8003550:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003554:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003556:	693b      	ldr	r3, [r7, #16]
 8003558:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800355c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	695b      	ldr	r3, [r3, #20]
 8003562:	011b      	lsls	r3, r3, #4
 8003564:	693a      	ldr	r2, [r7, #16]
 8003566:	4313      	orrs	r3, r2
 8003568:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	699b      	ldr	r3, [r3, #24]
 800356e:	011b      	lsls	r3, r3, #4
 8003570:	693a      	ldr	r2, [r7, #16]
 8003572:	4313      	orrs	r3, r2
 8003574:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	693a      	ldr	r2, [r7, #16]
 800357a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	68fa      	ldr	r2, [r7, #12]
 8003580:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	685a      	ldr	r2, [r3, #4]
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	697a      	ldr	r2, [r7, #20]
 800358e:	621a      	str	r2, [r3, #32]
}
 8003590:	bf00      	nop
 8003592:	371c      	adds	r7, #28
 8003594:	46bd      	mov	sp, r7
 8003596:	bc80      	pop	{r7}
 8003598:	4770      	bx	lr
 800359a:	bf00      	nop
 800359c:	40012c00 	.word	0x40012c00

080035a0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80035a0:	b480      	push	{r7}
 80035a2:	b087      	sub	sp, #28
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
 80035a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6a1b      	ldr	r3, [r3, #32]
 80035ae:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6a1b      	ldr	r3, [r3, #32]
 80035ba:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	685b      	ldr	r3, [r3, #4]
 80035c0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	69db      	ldr	r3, [r3, #28]
 80035c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80035ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	021b      	lsls	r3, r3, #8
 80035de:	68fa      	ldr	r2, [r7, #12]
 80035e0:	4313      	orrs	r3, r2
 80035e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80035e4:	693b      	ldr	r3, [r7, #16]
 80035e6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80035ea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	689b      	ldr	r3, [r3, #8]
 80035f0:	031b      	lsls	r3, r3, #12
 80035f2:	693a      	ldr	r2, [r7, #16]
 80035f4:	4313      	orrs	r3, r2
 80035f6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	4a0f      	ldr	r2, [pc, #60]	; (8003638 <TIM_OC4_SetConfig+0x98>)
 80035fc:	4293      	cmp	r3, r2
 80035fe:	d109      	bne.n	8003614 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003600:	697b      	ldr	r3, [r7, #20]
 8003602:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003606:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	695b      	ldr	r3, [r3, #20]
 800360c:	019b      	lsls	r3, r3, #6
 800360e:	697a      	ldr	r2, [r7, #20]
 8003610:	4313      	orrs	r3, r2
 8003612:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	697a      	ldr	r2, [r7, #20]
 8003618:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	68fa      	ldr	r2, [r7, #12]
 800361e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	685a      	ldr	r2, [r3, #4]
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	693a      	ldr	r2, [r7, #16]
 800362c:	621a      	str	r2, [r3, #32]
}
 800362e:	bf00      	nop
 8003630:	371c      	adds	r7, #28
 8003632:	46bd      	mov	sp, r7
 8003634:	bc80      	pop	{r7}
 8003636:	4770      	bx	lr
 8003638:	40012c00 	.word	0x40012c00

0800363c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800363c:	b480      	push	{r7}
 800363e:	b087      	sub	sp, #28
 8003640:	af00      	add	r7, sp, #0
 8003642:	60f8      	str	r0, [r7, #12]
 8003644:	60b9      	str	r1, [r7, #8]
 8003646:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	6a1b      	ldr	r3, [r3, #32]
 800364c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	6a1b      	ldr	r3, [r3, #32]
 8003652:	f023 0201 	bic.w	r2, r3, #1
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	699b      	ldr	r3, [r3, #24]
 800365e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003660:	693b      	ldr	r3, [r7, #16]
 8003662:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003666:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	011b      	lsls	r3, r3, #4
 800366c:	693a      	ldr	r2, [r7, #16]
 800366e:	4313      	orrs	r3, r2
 8003670:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003672:	697b      	ldr	r3, [r7, #20]
 8003674:	f023 030a 	bic.w	r3, r3, #10
 8003678:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800367a:	697a      	ldr	r2, [r7, #20]
 800367c:	68bb      	ldr	r3, [r7, #8]
 800367e:	4313      	orrs	r3, r2
 8003680:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	693a      	ldr	r2, [r7, #16]
 8003686:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	697a      	ldr	r2, [r7, #20]
 800368c:	621a      	str	r2, [r3, #32]
}
 800368e:	bf00      	nop
 8003690:	371c      	adds	r7, #28
 8003692:	46bd      	mov	sp, r7
 8003694:	bc80      	pop	{r7}
 8003696:	4770      	bx	lr

08003698 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003698:	b480      	push	{r7}
 800369a:	b087      	sub	sp, #28
 800369c:	af00      	add	r7, sp, #0
 800369e:	60f8      	str	r0, [r7, #12]
 80036a0:	60b9      	str	r1, [r7, #8]
 80036a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	6a1b      	ldr	r3, [r3, #32]
 80036a8:	f023 0210 	bic.w	r2, r3, #16
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	699b      	ldr	r3, [r3, #24]
 80036b4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	6a1b      	ldr	r3, [r3, #32]
 80036ba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80036bc:	697b      	ldr	r3, [r7, #20]
 80036be:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80036c2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	031b      	lsls	r3, r3, #12
 80036c8:	697a      	ldr	r2, [r7, #20]
 80036ca:	4313      	orrs	r3, r2
 80036cc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80036ce:	693b      	ldr	r3, [r7, #16]
 80036d0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80036d4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80036d6:	68bb      	ldr	r3, [r7, #8]
 80036d8:	011b      	lsls	r3, r3, #4
 80036da:	693a      	ldr	r2, [r7, #16]
 80036dc:	4313      	orrs	r3, r2
 80036de:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	697a      	ldr	r2, [r7, #20]
 80036e4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	693a      	ldr	r2, [r7, #16]
 80036ea:	621a      	str	r2, [r3, #32]
}
 80036ec:	bf00      	nop
 80036ee:	371c      	adds	r7, #28
 80036f0:	46bd      	mov	sp, r7
 80036f2:	bc80      	pop	{r7}
 80036f4:	4770      	bx	lr

080036f6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80036f6:	b480      	push	{r7}
 80036f8:	b085      	sub	sp, #20
 80036fa:	af00      	add	r7, sp, #0
 80036fc:	6078      	str	r0, [r7, #4]
 80036fe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	689b      	ldr	r3, [r3, #8]
 8003704:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800370c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800370e:	683a      	ldr	r2, [r7, #0]
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	4313      	orrs	r3, r2
 8003714:	f043 0307 	orr.w	r3, r3, #7
 8003718:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	68fa      	ldr	r2, [r7, #12]
 800371e:	609a      	str	r2, [r3, #8]
}
 8003720:	bf00      	nop
 8003722:	3714      	adds	r7, #20
 8003724:	46bd      	mov	sp, r7
 8003726:	bc80      	pop	{r7}
 8003728:	4770      	bx	lr

0800372a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800372a:	b480      	push	{r7}
 800372c:	b087      	sub	sp, #28
 800372e:	af00      	add	r7, sp, #0
 8003730:	60f8      	str	r0, [r7, #12]
 8003732:	60b9      	str	r1, [r7, #8]
 8003734:	607a      	str	r2, [r7, #4]
 8003736:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	689b      	ldr	r3, [r3, #8]
 800373c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800373e:	697b      	ldr	r3, [r7, #20]
 8003740:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003744:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	021a      	lsls	r2, r3, #8
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	431a      	orrs	r2, r3
 800374e:	68bb      	ldr	r3, [r7, #8]
 8003750:	4313      	orrs	r3, r2
 8003752:	697a      	ldr	r2, [r7, #20]
 8003754:	4313      	orrs	r3, r2
 8003756:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	697a      	ldr	r2, [r7, #20]
 800375c:	609a      	str	r2, [r3, #8]
}
 800375e:	bf00      	nop
 8003760:	371c      	adds	r7, #28
 8003762:	46bd      	mov	sp, r7
 8003764:	bc80      	pop	{r7}
 8003766:	4770      	bx	lr

08003768 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003768:	b480      	push	{r7}
 800376a:	b085      	sub	sp, #20
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
 8003770:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003778:	2b01      	cmp	r3, #1
 800377a:	d101      	bne.n	8003780 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800377c:	2302      	movs	r3, #2
 800377e:	e046      	b.n	800380e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2201      	movs	r2, #1
 8003784:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2202      	movs	r2, #2
 800378c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	685b      	ldr	r3, [r3, #4]
 8003796:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	689b      	ldr	r3, [r3, #8]
 800379e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037a6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	68fa      	ldr	r2, [r7, #12]
 80037ae:	4313      	orrs	r3, r2
 80037b0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	68fa      	ldr	r2, [r7, #12]
 80037b8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	4a16      	ldr	r2, [pc, #88]	; (8003818 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80037c0:	4293      	cmp	r3, r2
 80037c2:	d00e      	beq.n	80037e2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037cc:	d009      	beq.n	80037e2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	4a12      	ldr	r2, [pc, #72]	; (800381c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80037d4:	4293      	cmp	r3, r2
 80037d6:	d004      	beq.n	80037e2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	4a10      	ldr	r2, [pc, #64]	; (8003820 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80037de:	4293      	cmp	r3, r2
 80037e0:	d10c      	bne.n	80037fc <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80037e2:	68bb      	ldr	r3, [r7, #8]
 80037e4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80037e8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	685b      	ldr	r3, [r3, #4]
 80037ee:	68ba      	ldr	r2, [r7, #8]
 80037f0:	4313      	orrs	r3, r2
 80037f2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	68ba      	ldr	r2, [r7, #8]
 80037fa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2201      	movs	r2, #1
 8003800:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2200      	movs	r2, #0
 8003808:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800380c:	2300      	movs	r3, #0
}
 800380e:	4618      	mov	r0, r3
 8003810:	3714      	adds	r7, #20
 8003812:	46bd      	mov	sp, r7
 8003814:	bc80      	pop	{r7}
 8003816:	4770      	bx	lr
 8003818:	40012c00 	.word	0x40012c00
 800381c:	40000400 	.word	0x40000400
 8003820:	40000800 	.word	0x40000800

08003824 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003824:	b480      	push	{r7}
 8003826:	b085      	sub	sp, #20
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
 800382c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800382e:	2300      	movs	r3, #0
 8003830:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003838:	2b01      	cmp	r3, #1
 800383a:	d101      	bne.n	8003840 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800383c:	2302      	movs	r3, #2
 800383e:	e03d      	b.n	80038bc <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2201      	movs	r2, #1
 8003844:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	68db      	ldr	r3, [r3, #12]
 8003852:	4313      	orrs	r3, r2
 8003854:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	689b      	ldr	r3, [r3, #8]
 8003860:	4313      	orrs	r3, r2
 8003862:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	685b      	ldr	r3, [r3, #4]
 800386e:	4313      	orrs	r3, r2
 8003870:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	4313      	orrs	r3, r2
 800387e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	691b      	ldr	r3, [r3, #16]
 800388a:	4313      	orrs	r3, r2
 800388c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	695b      	ldr	r3, [r3, #20]
 8003898:	4313      	orrs	r3, r2
 800389a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	69db      	ldr	r3, [r3, #28]
 80038a6:	4313      	orrs	r3, r2
 80038a8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	68fa      	ldr	r2, [r7, #12]
 80038b0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2200      	movs	r2, #0
 80038b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80038ba:	2300      	movs	r3, #0
}
 80038bc:	4618      	mov	r0, r3
 80038be:	3714      	adds	r7, #20
 80038c0:	46bd      	mov	sp, r7
 80038c2:	bc80      	pop	{r7}
 80038c4:	4770      	bx	lr

080038c6 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80038c6:	b480      	push	{r7}
 80038c8:	b083      	sub	sp, #12
 80038ca:	af00      	add	r7, sp, #0
 80038cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80038ce:	bf00      	nop
 80038d0:	370c      	adds	r7, #12
 80038d2:	46bd      	mov	sp, r7
 80038d4:	bc80      	pop	{r7}
 80038d6:	4770      	bx	lr

080038d8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80038d8:	b480      	push	{r7}
 80038da:	b083      	sub	sp, #12
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80038e0:	bf00      	nop
 80038e2:	370c      	adds	r7, #12
 80038e4:	46bd      	mov	sp, r7
 80038e6:	bc80      	pop	{r7}
 80038e8:	4770      	bx	lr

080038ea <memset>:
 80038ea:	4603      	mov	r3, r0
 80038ec:	4402      	add	r2, r0
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d100      	bne.n	80038f4 <memset+0xa>
 80038f2:	4770      	bx	lr
 80038f4:	f803 1b01 	strb.w	r1, [r3], #1
 80038f8:	e7f9      	b.n	80038ee <memset+0x4>
	...

080038fc <__libc_init_array>:
 80038fc:	b570      	push	{r4, r5, r6, lr}
 80038fe:	2600      	movs	r6, #0
 8003900:	4d0c      	ldr	r5, [pc, #48]	; (8003934 <__libc_init_array+0x38>)
 8003902:	4c0d      	ldr	r4, [pc, #52]	; (8003938 <__libc_init_array+0x3c>)
 8003904:	1b64      	subs	r4, r4, r5
 8003906:	10a4      	asrs	r4, r4, #2
 8003908:	42a6      	cmp	r6, r4
 800390a:	d109      	bne.n	8003920 <__libc_init_array+0x24>
 800390c:	f000 f81a 	bl	8003944 <_init>
 8003910:	2600      	movs	r6, #0
 8003912:	4d0a      	ldr	r5, [pc, #40]	; (800393c <__libc_init_array+0x40>)
 8003914:	4c0a      	ldr	r4, [pc, #40]	; (8003940 <__libc_init_array+0x44>)
 8003916:	1b64      	subs	r4, r4, r5
 8003918:	10a4      	asrs	r4, r4, #2
 800391a:	42a6      	cmp	r6, r4
 800391c:	d105      	bne.n	800392a <__libc_init_array+0x2e>
 800391e:	bd70      	pop	{r4, r5, r6, pc}
 8003920:	f855 3b04 	ldr.w	r3, [r5], #4
 8003924:	4798      	blx	r3
 8003926:	3601      	adds	r6, #1
 8003928:	e7ee      	b.n	8003908 <__libc_init_array+0xc>
 800392a:	f855 3b04 	ldr.w	r3, [r5], #4
 800392e:	4798      	blx	r3
 8003930:	3601      	adds	r6, #1
 8003932:	e7f2      	b.n	800391a <__libc_init_array+0x1e>
 8003934:	08003984 	.word	0x08003984
 8003938:	08003984 	.word	0x08003984
 800393c:	08003984 	.word	0x08003984
 8003940:	08003988 	.word	0x08003988

08003944 <_init>:
 8003944:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003946:	bf00      	nop
 8003948:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800394a:	bc08      	pop	{r3}
 800394c:	469e      	mov	lr, r3
 800394e:	4770      	bx	lr

08003950 <_fini>:
 8003950:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003952:	bf00      	nop
 8003954:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003956:	bc08      	pop	{r3}
 8003958:	469e      	mov	lr, r3
 800395a:	4770      	bx	lr


RoboCupNew1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008ca8  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000270  08008db8  08008db8  00018db8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009028  08009028  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  08009028  08009028  00019028  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009030  08009030  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009030  08009030  00019030  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009034  08009034  00019034  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08009038  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000045c  200001e0  08009218  000201e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000063c  08009218  0002063c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001276b  00000000  00000000  00020209  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000036a5  00000000  00000000  00032974  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001218  00000000  00000000  00036020  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f20  00000000  00000000  00037238  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018f86  00000000  00000000  00038158  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012261  00000000  00000000  000510de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008d79d  00000000  00000000  0006333f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      0000001e  00000000  00000000  000f0adc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000047b0  00000000  00000000  000f0afc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000100  00000000  00000000  000f52ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loclists 00002b3a  00000000  00000000  000f53ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__aeabi_drsub>:
 8000110:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000114:	e002      	b.n	800011c <__adddf3>
 8000116:	bf00      	nop

08000118 <__aeabi_dsub>:
 8000118:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800011c <__adddf3>:
 800011c:	b530      	push	{r4, r5, lr}
 800011e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000122:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000126:	ea94 0f05 	teq	r4, r5
 800012a:	bf08      	it	eq
 800012c:	ea90 0f02 	teqeq	r0, r2
 8000130:	bf1f      	itttt	ne
 8000132:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000136:	ea55 0c02 	orrsne.w	ip, r5, r2
 800013a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800013e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000142:	f000 80e2 	beq.w	800030a <__adddf3+0x1ee>
 8000146:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800014a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800014e:	bfb8      	it	lt
 8000150:	426d      	neglt	r5, r5
 8000152:	dd0c      	ble.n	800016e <__adddf3+0x52>
 8000154:	442c      	add	r4, r5
 8000156:	ea80 0202 	eor.w	r2, r0, r2
 800015a:	ea81 0303 	eor.w	r3, r1, r3
 800015e:	ea82 0000 	eor.w	r0, r2, r0
 8000162:	ea83 0101 	eor.w	r1, r3, r1
 8000166:	ea80 0202 	eor.w	r2, r0, r2
 800016a:	ea81 0303 	eor.w	r3, r1, r3
 800016e:	2d36      	cmp	r5, #54	; 0x36
 8000170:	bf88      	it	hi
 8000172:	bd30      	pophi	{r4, r5, pc}
 8000174:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000178:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800017c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000180:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000184:	d002      	beq.n	800018c <__adddf3+0x70>
 8000186:	4240      	negs	r0, r0
 8000188:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800018c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000190:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000194:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000198:	d002      	beq.n	80001a0 <__adddf3+0x84>
 800019a:	4252      	negs	r2, r2
 800019c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001a0:	ea94 0f05 	teq	r4, r5
 80001a4:	f000 80a7 	beq.w	80002f6 <__adddf3+0x1da>
 80001a8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ac:	f1d5 0e20 	rsbs	lr, r5, #32
 80001b0:	db0d      	blt.n	80001ce <__adddf3+0xb2>
 80001b2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001b6:	fa22 f205 	lsr.w	r2, r2, r5
 80001ba:	1880      	adds	r0, r0, r2
 80001bc:	f141 0100 	adc.w	r1, r1, #0
 80001c0:	fa03 f20e 	lsl.w	r2, r3, lr
 80001c4:	1880      	adds	r0, r0, r2
 80001c6:	fa43 f305 	asr.w	r3, r3, r5
 80001ca:	4159      	adcs	r1, r3
 80001cc:	e00e      	b.n	80001ec <__adddf3+0xd0>
 80001ce:	f1a5 0520 	sub.w	r5, r5, #32
 80001d2:	f10e 0e20 	add.w	lr, lr, #32
 80001d6:	2a01      	cmp	r2, #1
 80001d8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80001dc:	bf28      	it	cs
 80001de:	f04c 0c02 	orrcs.w	ip, ip, #2
 80001e2:	fa43 f305 	asr.w	r3, r3, r5
 80001e6:	18c0      	adds	r0, r0, r3
 80001e8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80001ec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80001f0:	d507      	bpl.n	8000202 <__adddf3+0xe6>
 80001f2:	f04f 0e00 	mov.w	lr, #0
 80001f6:	f1dc 0c00 	rsbs	ip, ip, #0
 80001fa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80001fe:	eb6e 0101 	sbc.w	r1, lr, r1
 8000202:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000206:	d31b      	bcc.n	8000240 <__adddf3+0x124>
 8000208:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800020c:	d30c      	bcc.n	8000228 <__adddf3+0x10c>
 800020e:	0849      	lsrs	r1, r1, #1
 8000210:	ea5f 0030 	movs.w	r0, r0, rrx
 8000214:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000218:	f104 0401 	add.w	r4, r4, #1
 800021c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000220:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000224:	f080 809a 	bcs.w	800035c <__adddf3+0x240>
 8000228:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800022c:	bf08      	it	eq
 800022e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000232:	f150 0000 	adcs.w	r0, r0, #0
 8000236:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800023a:	ea41 0105 	orr.w	r1, r1, r5
 800023e:	bd30      	pop	{r4, r5, pc}
 8000240:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000244:	4140      	adcs	r0, r0
 8000246:	eb41 0101 	adc.w	r1, r1, r1
 800024a:	3c01      	subs	r4, #1
 800024c:	bf28      	it	cs
 800024e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000252:	d2e9      	bcs.n	8000228 <__adddf3+0x10c>
 8000254:	f091 0f00 	teq	r1, #0
 8000258:	bf04      	itt	eq
 800025a:	4601      	moveq	r1, r0
 800025c:	2000      	moveq	r0, #0
 800025e:	fab1 f381 	clz	r3, r1
 8000262:	bf08      	it	eq
 8000264:	3320      	addeq	r3, #32
 8000266:	f1a3 030b 	sub.w	r3, r3, #11
 800026a:	f1b3 0220 	subs.w	r2, r3, #32
 800026e:	da0c      	bge.n	800028a <__adddf3+0x16e>
 8000270:	320c      	adds	r2, #12
 8000272:	dd08      	ble.n	8000286 <__adddf3+0x16a>
 8000274:	f102 0c14 	add.w	ip, r2, #20
 8000278:	f1c2 020c 	rsb	r2, r2, #12
 800027c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000280:	fa21 f102 	lsr.w	r1, r1, r2
 8000284:	e00c      	b.n	80002a0 <__adddf3+0x184>
 8000286:	f102 0214 	add.w	r2, r2, #20
 800028a:	bfd8      	it	le
 800028c:	f1c2 0c20 	rsble	ip, r2, #32
 8000290:	fa01 f102 	lsl.w	r1, r1, r2
 8000294:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000298:	bfdc      	itt	le
 800029a:	ea41 010c 	orrle.w	r1, r1, ip
 800029e:	4090      	lslle	r0, r2
 80002a0:	1ae4      	subs	r4, r4, r3
 80002a2:	bfa2      	ittt	ge
 80002a4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002a8:	4329      	orrge	r1, r5
 80002aa:	bd30      	popge	{r4, r5, pc}
 80002ac:	ea6f 0404 	mvn.w	r4, r4
 80002b0:	3c1f      	subs	r4, #31
 80002b2:	da1c      	bge.n	80002ee <__adddf3+0x1d2>
 80002b4:	340c      	adds	r4, #12
 80002b6:	dc0e      	bgt.n	80002d6 <__adddf3+0x1ba>
 80002b8:	f104 0414 	add.w	r4, r4, #20
 80002bc:	f1c4 0220 	rsb	r2, r4, #32
 80002c0:	fa20 f004 	lsr.w	r0, r0, r4
 80002c4:	fa01 f302 	lsl.w	r3, r1, r2
 80002c8:	ea40 0003 	orr.w	r0, r0, r3
 80002cc:	fa21 f304 	lsr.w	r3, r1, r4
 80002d0:	ea45 0103 	orr.w	r1, r5, r3
 80002d4:	bd30      	pop	{r4, r5, pc}
 80002d6:	f1c4 040c 	rsb	r4, r4, #12
 80002da:	f1c4 0220 	rsb	r2, r4, #32
 80002de:	fa20 f002 	lsr.w	r0, r0, r2
 80002e2:	fa01 f304 	lsl.w	r3, r1, r4
 80002e6:	ea40 0003 	orr.w	r0, r0, r3
 80002ea:	4629      	mov	r1, r5
 80002ec:	bd30      	pop	{r4, r5, pc}
 80002ee:	fa21 f004 	lsr.w	r0, r1, r4
 80002f2:	4629      	mov	r1, r5
 80002f4:	bd30      	pop	{r4, r5, pc}
 80002f6:	f094 0f00 	teq	r4, #0
 80002fa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80002fe:	bf06      	itte	eq
 8000300:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000304:	3401      	addeq	r4, #1
 8000306:	3d01      	subne	r5, #1
 8000308:	e74e      	b.n	80001a8 <__adddf3+0x8c>
 800030a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800030e:	bf18      	it	ne
 8000310:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000314:	d029      	beq.n	800036a <__adddf3+0x24e>
 8000316:	ea94 0f05 	teq	r4, r5
 800031a:	bf08      	it	eq
 800031c:	ea90 0f02 	teqeq	r0, r2
 8000320:	d005      	beq.n	800032e <__adddf3+0x212>
 8000322:	ea54 0c00 	orrs.w	ip, r4, r0
 8000326:	bf04      	itt	eq
 8000328:	4619      	moveq	r1, r3
 800032a:	4610      	moveq	r0, r2
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	ea91 0f03 	teq	r1, r3
 8000332:	bf1e      	ittt	ne
 8000334:	2100      	movne	r1, #0
 8000336:	2000      	movne	r0, #0
 8000338:	bd30      	popne	{r4, r5, pc}
 800033a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800033e:	d105      	bne.n	800034c <__adddf3+0x230>
 8000340:	0040      	lsls	r0, r0, #1
 8000342:	4149      	adcs	r1, r1
 8000344:	bf28      	it	cs
 8000346:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800034a:	bd30      	pop	{r4, r5, pc}
 800034c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000350:	bf3c      	itt	cc
 8000352:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000356:	bd30      	popcc	{r4, r5, pc}
 8000358:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800035c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000360:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000364:	f04f 0000 	mov.w	r0, #0
 8000368:	bd30      	pop	{r4, r5, pc}
 800036a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800036e:	bf1a      	itte	ne
 8000370:	4619      	movne	r1, r3
 8000372:	4610      	movne	r0, r2
 8000374:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000378:	bf1c      	itt	ne
 800037a:	460b      	movne	r3, r1
 800037c:	4602      	movne	r2, r0
 800037e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000382:	bf06      	itte	eq
 8000384:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000388:	ea91 0f03 	teqeq	r1, r3
 800038c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000390:	bd30      	pop	{r4, r5, pc}
 8000392:	bf00      	nop

08000394 <__aeabi_ui2d>:
 8000394:	f090 0f00 	teq	r0, #0
 8000398:	bf04      	itt	eq
 800039a:	2100      	moveq	r1, #0
 800039c:	4770      	bxeq	lr
 800039e:	b530      	push	{r4, r5, lr}
 80003a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003a8:	f04f 0500 	mov.w	r5, #0
 80003ac:	f04f 0100 	mov.w	r1, #0
 80003b0:	e750      	b.n	8000254 <__adddf3+0x138>
 80003b2:	bf00      	nop

080003b4 <__aeabi_i2d>:
 80003b4:	f090 0f00 	teq	r0, #0
 80003b8:	bf04      	itt	eq
 80003ba:	2100      	moveq	r1, #0
 80003bc:	4770      	bxeq	lr
 80003be:	b530      	push	{r4, r5, lr}
 80003c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003c8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80003cc:	bf48      	it	mi
 80003ce:	4240      	negmi	r0, r0
 80003d0:	f04f 0100 	mov.w	r1, #0
 80003d4:	e73e      	b.n	8000254 <__adddf3+0x138>
 80003d6:	bf00      	nop

080003d8 <__aeabi_f2d>:
 80003d8:	0042      	lsls	r2, r0, #1
 80003da:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80003de:	ea4f 0131 	mov.w	r1, r1, rrx
 80003e2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80003e6:	bf1f      	itttt	ne
 80003e8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80003ec:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80003f0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80003f4:	4770      	bxne	lr
 80003f6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80003fa:	bf08      	it	eq
 80003fc:	4770      	bxeq	lr
 80003fe:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000402:	bf04      	itt	eq
 8000404:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000408:	4770      	bxeq	lr
 800040a:	b530      	push	{r4, r5, lr}
 800040c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000418:	e71c      	b.n	8000254 <__adddf3+0x138>
 800041a:	bf00      	nop

0800041c <__aeabi_ul2d>:
 800041c:	ea50 0201 	orrs.w	r2, r0, r1
 8000420:	bf08      	it	eq
 8000422:	4770      	bxeq	lr
 8000424:	b530      	push	{r4, r5, lr}
 8000426:	f04f 0500 	mov.w	r5, #0
 800042a:	e00a      	b.n	8000442 <__aeabi_l2d+0x16>

0800042c <__aeabi_l2d>:
 800042c:	ea50 0201 	orrs.w	r2, r0, r1
 8000430:	bf08      	it	eq
 8000432:	4770      	bxeq	lr
 8000434:	b530      	push	{r4, r5, lr}
 8000436:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800043a:	d502      	bpl.n	8000442 <__aeabi_l2d+0x16>
 800043c:	4240      	negs	r0, r0
 800043e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000442:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000446:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800044a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800044e:	f43f aed8 	beq.w	8000202 <__adddf3+0xe6>
 8000452:	f04f 0203 	mov.w	r2, #3
 8000456:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800045a:	bf18      	it	ne
 800045c:	3203      	addne	r2, #3
 800045e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000462:	bf18      	it	ne
 8000464:	3203      	addne	r2, #3
 8000466:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800046a:	f1c2 0320 	rsb	r3, r2, #32
 800046e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000472:	fa20 f002 	lsr.w	r0, r0, r2
 8000476:	fa01 fe03 	lsl.w	lr, r1, r3
 800047a:	ea40 000e 	orr.w	r0, r0, lr
 800047e:	fa21 f102 	lsr.w	r1, r1, r2
 8000482:	4414      	add	r4, r2
 8000484:	e6bd      	b.n	8000202 <__adddf3+0xe6>
 8000486:	bf00      	nop

08000488 <__aeabi_dmul>:
 8000488:	b570      	push	{r4, r5, r6, lr}
 800048a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800048e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000492:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000496:	bf1d      	ittte	ne
 8000498:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800049c:	ea94 0f0c 	teqne	r4, ip
 80004a0:	ea95 0f0c 	teqne	r5, ip
 80004a4:	f000 f8de 	bleq	8000664 <__aeabi_dmul+0x1dc>
 80004a8:	442c      	add	r4, r5
 80004aa:	ea81 0603 	eor.w	r6, r1, r3
 80004ae:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004b2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004b6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004ba:	bf18      	it	ne
 80004bc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80004c0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80004c4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80004c8:	d038      	beq.n	800053c <__aeabi_dmul+0xb4>
 80004ca:	fba0 ce02 	umull	ip, lr, r0, r2
 80004ce:	f04f 0500 	mov.w	r5, #0
 80004d2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80004d6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80004da:	fbe0 e503 	umlal	lr, r5, r0, r3
 80004de:	f04f 0600 	mov.w	r6, #0
 80004e2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80004e6:	f09c 0f00 	teq	ip, #0
 80004ea:	bf18      	it	ne
 80004ec:	f04e 0e01 	orrne.w	lr, lr, #1
 80004f0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80004f4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80004f8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80004fc:	d204      	bcs.n	8000508 <__aeabi_dmul+0x80>
 80004fe:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000502:	416d      	adcs	r5, r5
 8000504:	eb46 0606 	adc.w	r6, r6, r6
 8000508:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800050c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000510:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000514:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000518:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800051c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000520:	bf88      	it	hi
 8000522:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000526:	d81e      	bhi.n	8000566 <__aeabi_dmul+0xde>
 8000528:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800052c:	bf08      	it	eq
 800052e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000532:	f150 0000 	adcs.w	r0, r0, #0
 8000536:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800053a:	bd70      	pop	{r4, r5, r6, pc}
 800053c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000540:	ea46 0101 	orr.w	r1, r6, r1
 8000544:	ea40 0002 	orr.w	r0, r0, r2
 8000548:	ea81 0103 	eor.w	r1, r1, r3
 800054c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000550:	bfc2      	ittt	gt
 8000552:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000556:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800055a:	bd70      	popgt	{r4, r5, r6, pc}
 800055c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000560:	f04f 0e00 	mov.w	lr, #0
 8000564:	3c01      	subs	r4, #1
 8000566:	f300 80ab 	bgt.w	80006c0 <__aeabi_dmul+0x238>
 800056a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800056e:	bfde      	ittt	le
 8000570:	2000      	movle	r0, #0
 8000572:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000576:	bd70      	pople	{r4, r5, r6, pc}
 8000578:	f1c4 0400 	rsb	r4, r4, #0
 800057c:	3c20      	subs	r4, #32
 800057e:	da35      	bge.n	80005ec <__aeabi_dmul+0x164>
 8000580:	340c      	adds	r4, #12
 8000582:	dc1b      	bgt.n	80005bc <__aeabi_dmul+0x134>
 8000584:	f104 0414 	add.w	r4, r4, #20
 8000588:	f1c4 0520 	rsb	r5, r4, #32
 800058c:	fa00 f305 	lsl.w	r3, r0, r5
 8000590:	fa20 f004 	lsr.w	r0, r0, r4
 8000594:	fa01 f205 	lsl.w	r2, r1, r5
 8000598:	ea40 0002 	orr.w	r0, r0, r2
 800059c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005a0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005a8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ac:	eb42 0106 	adc.w	r1, r2, r6
 80005b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005b4:	bf08      	it	eq
 80005b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005ba:	bd70      	pop	{r4, r5, r6, pc}
 80005bc:	f1c4 040c 	rsb	r4, r4, #12
 80005c0:	f1c4 0520 	rsb	r5, r4, #32
 80005c4:	fa00 f304 	lsl.w	r3, r0, r4
 80005c8:	fa20 f005 	lsr.w	r0, r0, r5
 80005cc:	fa01 f204 	lsl.w	r2, r1, r4
 80005d0:	ea40 0002 	orr.w	r0, r0, r2
 80005d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005dc:	f141 0100 	adc.w	r1, r1, #0
 80005e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005e4:	bf08      	it	eq
 80005e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005ea:	bd70      	pop	{r4, r5, r6, pc}
 80005ec:	f1c4 0520 	rsb	r5, r4, #32
 80005f0:	fa00 f205 	lsl.w	r2, r0, r5
 80005f4:	ea4e 0e02 	orr.w	lr, lr, r2
 80005f8:	fa20 f304 	lsr.w	r3, r0, r4
 80005fc:	fa01 f205 	lsl.w	r2, r1, r5
 8000600:	ea43 0302 	orr.w	r3, r3, r2
 8000604:	fa21 f004 	lsr.w	r0, r1, r4
 8000608:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800060c:	fa21 f204 	lsr.w	r2, r1, r4
 8000610:	ea20 0002 	bic.w	r0, r0, r2
 8000614:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000618:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800061c:	bf08      	it	eq
 800061e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000622:	bd70      	pop	{r4, r5, r6, pc}
 8000624:	f094 0f00 	teq	r4, #0
 8000628:	d10f      	bne.n	800064a <__aeabi_dmul+0x1c2>
 800062a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800062e:	0040      	lsls	r0, r0, #1
 8000630:	eb41 0101 	adc.w	r1, r1, r1
 8000634:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000638:	bf08      	it	eq
 800063a:	3c01      	subeq	r4, #1
 800063c:	d0f7      	beq.n	800062e <__aeabi_dmul+0x1a6>
 800063e:	ea41 0106 	orr.w	r1, r1, r6
 8000642:	f095 0f00 	teq	r5, #0
 8000646:	bf18      	it	ne
 8000648:	4770      	bxne	lr
 800064a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800064e:	0052      	lsls	r2, r2, #1
 8000650:	eb43 0303 	adc.w	r3, r3, r3
 8000654:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000658:	bf08      	it	eq
 800065a:	3d01      	subeq	r5, #1
 800065c:	d0f7      	beq.n	800064e <__aeabi_dmul+0x1c6>
 800065e:	ea43 0306 	orr.w	r3, r3, r6
 8000662:	4770      	bx	lr
 8000664:	ea94 0f0c 	teq	r4, ip
 8000668:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800066c:	bf18      	it	ne
 800066e:	ea95 0f0c 	teqne	r5, ip
 8000672:	d00c      	beq.n	800068e <__aeabi_dmul+0x206>
 8000674:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000678:	bf18      	it	ne
 800067a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800067e:	d1d1      	bne.n	8000624 <__aeabi_dmul+0x19c>
 8000680:	ea81 0103 	eor.w	r1, r1, r3
 8000684:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000688:	f04f 0000 	mov.w	r0, #0
 800068c:	bd70      	pop	{r4, r5, r6, pc}
 800068e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000692:	bf06      	itte	eq
 8000694:	4610      	moveq	r0, r2
 8000696:	4619      	moveq	r1, r3
 8000698:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800069c:	d019      	beq.n	80006d2 <__aeabi_dmul+0x24a>
 800069e:	ea94 0f0c 	teq	r4, ip
 80006a2:	d102      	bne.n	80006aa <__aeabi_dmul+0x222>
 80006a4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006a8:	d113      	bne.n	80006d2 <__aeabi_dmul+0x24a>
 80006aa:	ea95 0f0c 	teq	r5, ip
 80006ae:	d105      	bne.n	80006bc <__aeabi_dmul+0x234>
 80006b0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006b4:	bf1c      	itt	ne
 80006b6:	4610      	movne	r0, r2
 80006b8:	4619      	movne	r1, r3
 80006ba:	d10a      	bne.n	80006d2 <__aeabi_dmul+0x24a>
 80006bc:	ea81 0103 	eor.w	r1, r1, r3
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80006c8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80006cc:	f04f 0000 	mov.w	r0, #0
 80006d0:	bd70      	pop	{r4, r5, r6, pc}
 80006d2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80006d6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80006da:	bd70      	pop	{r4, r5, r6, pc}

080006dc <__aeabi_ddiv>:
 80006dc:	b570      	push	{r4, r5, r6, lr}
 80006de:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80006e2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80006e6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80006ea:	bf1d      	ittte	ne
 80006ec:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80006f0:	ea94 0f0c 	teqne	r4, ip
 80006f4:	ea95 0f0c 	teqne	r5, ip
 80006f8:	f000 f8a7 	bleq	800084a <__aeabi_ddiv+0x16e>
 80006fc:	eba4 0405 	sub.w	r4, r4, r5
 8000700:	ea81 0e03 	eor.w	lr, r1, r3
 8000704:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000708:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800070c:	f000 8088 	beq.w	8000820 <__aeabi_ddiv+0x144>
 8000710:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000714:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000718:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800071c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000720:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000724:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000728:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800072c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000730:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000734:	429d      	cmp	r5, r3
 8000736:	bf08      	it	eq
 8000738:	4296      	cmpeq	r6, r2
 800073a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800073e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000742:	d202      	bcs.n	800074a <__aeabi_ddiv+0x6e>
 8000744:	085b      	lsrs	r3, r3, #1
 8000746:	ea4f 0232 	mov.w	r2, r2, rrx
 800074a:	1ab6      	subs	r6, r6, r2
 800074c:	eb65 0503 	sbc.w	r5, r5, r3
 8000750:	085b      	lsrs	r3, r3, #1
 8000752:	ea4f 0232 	mov.w	r2, r2, rrx
 8000756:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800075a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800075e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000762:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000766:	bf22      	ittt	cs
 8000768:	1ab6      	subcs	r6, r6, r2
 800076a:	4675      	movcs	r5, lr
 800076c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000770:	085b      	lsrs	r3, r3, #1
 8000772:	ea4f 0232 	mov.w	r2, r2, rrx
 8000776:	ebb6 0e02 	subs.w	lr, r6, r2
 800077a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800077e:	bf22      	ittt	cs
 8000780:	1ab6      	subcs	r6, r6, r2
 8000782:	4675      	movcs	r5, lr
 8000784:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000788:	085b      	lsrs	r3, r3, #1
 800078a:	ea4f 0232 	mov.w	r2, r2, rrx
 800078e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000792:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000796:	bf22      	ittt	cs
 8000798:	1ab6      	subcs	r6, r6, r2
 800079a:	4675      	movcs	r5, lr
 800079c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ae:	bf22      	ittt	cs
 80007b0:	1ab6      	subcs	r6, r6, r2
 80007b2:	4675      	movcs	r5, lr
 80007b4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007b8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007bc:	d018      	beq.n	80007f0 <__aeabi_ddiv+0x114>
 80007be:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80007c2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80007c6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80007ca:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80007ce:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80007d2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80007d6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80007da:	d1c0      	bne.n	800075e <__aeabi_ddiv+0x82>
 80007dc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e0:	d10b      	bne.n	80007fa <__aeabi_ddiv+0x11e>
 80007e2:	ea41 0100 	orr.w	r1, r1, r0
 80007e6:	f04f 0000 	mov.w	r0, #0
 80007ea:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80007ee:	e7b6      	b.n	800075e <__aeabi_ddiv+0x82>
 80007f0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f4:	bf04      	itt	eq
 80007f6:	4301      	orreq	r1, r0
 80007f8:	2000      	moveq	r0, #0
 80007fa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80007fe:	bf88      	it	hi
 8000800:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000804:	f63f aeaf 	bhi.w	8000566 <__aeabi_dmul+0xde>
 8000808:	ebb5 0c03 	subs.w	ip, r5, r3
 800080c:	bf04      	itt	eq
 800080e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000812:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000816:	f150 0000 	adcs.w	r0, r0, #0
 800081a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800081e:	bd70      	pop	{r4, r5, r6, pc}
 8000820:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000824:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000828:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800082c:	bfc2      	ittt	gt
 800082e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000832:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000836:	bd70      	popgt	{r4, r5, r6, pc}
 8000838:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800083c:	f04f 0e00 	mov.w	lr, #0
 8000840:	3c01      	subs	r4, #1
 8000842:	e690      	b.n	8000566 <__aeabi_dmul+0xde>
 8000844:	ea45 0e06 	orr.w	lr, r5, r6
 8000848:	e68d      	b.n	8000566 <__aeabi_dmul+0xde>
 800084a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	bf08      	it	eq
 8000854:	ea95 0f0c 	teqeq	r5, ip
 8000858:	f43f af3b 	beq.w	80006d2 <__aeabi_dmul+0x24a>
 800085c:	ea94 0f0c 	teq	r4, ip
 8000860:	d10a      	bne.n	8000878 <__aeabi_ddiv+0x19c>
 8000862:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000866:	f47f af34 	bne.w	80006d2 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	f47f af25 	bne.w	80006bc <__aeabi_dmul+0x234>
 8000872:	4610      	mov	r0, r2
 8000874:	4619      	mov	r1, r3
 8000876:	e72c      	b.n	80006d2 <__aeabi_dmul+0x24a>
 8000878:	ea95 0f0c 	teq	r5, ip
 800087c:	d106      	bne.n	800088c <__aeabi_ddiv+0x1b0>
 800087e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000882:	f43f aefd 	beq.w	8000680 <__aeabi_dmul+0x1f8>
 8000886:	4610      	mov	r0, r2
 8000888:	4619      	mov	r1, r3
 800088a:	e722      	b.n	80006d2 <__aeabi_dmul+0x24a>
 800088c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000890:	bf18      	it	ne
 8000892:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000896:	f47f aec5 	bne.w	8000624 <__aeabi_dmul+0x19c>
 800089a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800089e:	f47f af0d 	bne.w	80006bc <__aeabi_dmul+0x234>
 80008a2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008a6:	f47f aeeb 	bne.w	8000680 <__aeabi_dmul+0x1f8>
 80008aa:	e712      	b.n	80006d2 <__aeabi_dmul+0x24a>

080008ac <__gedf2>:
 80008ac:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80008b0:	e006      	b.n	80008c0 <__cmpdf2+0x4>
 80008b2:	bf00      	nop

080008b4 <__ledf2>:
 80008b4:	f04f 0c01 	mov.w	ip, #1
 80008b8:	e002      	b.n	80008c0 <__cmpdf2+0x4>
 80008ba:	bf00      	nop

080008bc <__cmpdf2>:
 80008bc:	f04f 0c01 	mov.w	ip, #1
 80008c0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80008c4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80008c8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80008cc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80008d6:	d01b      	beq.n	8000910 <__cmpdf2+0x54>
 80008d8:	b001      	add	sp, #4
 80008da:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80008de:	bf0c      	ite	eq
 80008e0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80008e4:	ea91 0f03 	teqne	r1, r3
 80008e8:	bf02      	ittt	eq
 80008ea:	ea90 0f02 	teqeq	r0, r2
 80008ee:	2000      	moveq	r0, #0
 80008f0:	4770      	bxeq	lr
 80008f2:	f110 0f00 	cmn.w	r0, #0
 80008f6:	ea91 0f03 	teq	r1, r3
 80008fa:	bf58      	it	pl
 80008fc:	4299      	cmppl	r1, r3
 80008fe:	bf08      	it	eq
 8000900:	4290      	cmpeq	r0, r2
 8000902:	bf2c      	ite	cs
 8000904:	17d8      	asrcs	r0, r3, #31
 8000906:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800090a:	f040 0001 	orr.w	r0, r0, #1
 800090e:	4770      	bx	lr
 8000910:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000914:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000918:	d102      	bne.n	8000920 <__cmpdf2+0x64>
 800091a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800091e:	d107      	bne.n	8000930 <__cmpdf2+0x74>
 8000920:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000924:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000928:	d1d6      	bne.n	80008d8 <__cmpdf2+0x1c>
 800092a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800092e:	d0d3      	beq.n	80008d8 <__cmpdf2+0x1c>
 8000930:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000934:	4770      	bx	lr
 8000936:	bf00      	nop

08000938 <__aeabi_cdrcmple>:
 8000938:	4684      	mov	ip, r0
 800093a:	4610      	mov	r0, r2
 800093c:	4662      	mov	r2, ip
 800093e:	468c      	mov	ip, r1
 8000940:	4619      	mov	r1, r3
 8000942:	4663      	mov	r3, ip
 8000944:	e000      	b.n	8000948 <__aeabi_cdcmpeq>
 8000946:	bf00      	nop

08000948 <__aeabi_cdcmpeq>:
 8000948:	b501      	push	{r0, lr}
 800094a:	f7ff ffb7 	bl	80008bc <__cmpdf2>
 800094e:	2800      	cmp	r0, #0
 8000950:	bf48      	it	mi
 8000952:	f110 0f00 	cmnmi.w	r0, #0
 8000956:	bd01      	pop	{r0, pc}

08000958 <__aeabi_dcmpeq>:
 8000958:	f84d ed08 	str.w	lr, [sp, #-8]!
 800095c:	f7ff fff4 	bl	8000948 <__aeabi_cdcmpeq>
 8000960:	bf0c      	ite	eq
 8000962:	2001      	moveq	r0, #1
 8000964:	2000      	movne	r0, #0
 8000966:	f85d fb08 	ldr.w	pc, [sp], #8
 800096a:	bf00      	nop

0800096c <__aeabi_dcmplt>:
 800096c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000970:	f7ff ffea 	bl	8000948 <__aeabi_cdcmpeq>
 8000974:	bf34      	ite	cc
 8000976:	2001      	movcc	r0, #1
 8000978:	2000      	movcs	r0, #0
 800097a:	f85d fb08 	ldr.w	pc, [sp], #8
 800097e:	bf00      	nop

08000980 <__aeabi_dcmple>:
 8000980:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000984:	f7ff ffe0 	bl	8000948 <__aeabi_cdcmpeq>
 8000988:	bf94      	ite	ls
 800098a:	2001      	movls	r0, #1
 800098c:	2000      	movhi	r0, #0
 800098e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000992:	bf00      	nop

08000994 <__aeabi_dcmpge>:
 8000994:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000998:	f7ff ffce 	bl	8000938 <__aeabi_cdrcmple>
 800099c:	bf94      	ite	ls
 800099e:	2001      	movls	r0, #1
 80009a0:	2000      	movhi	r0, #0
 80009a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009a6:	bf00      	nop

080009a8 <__aeabi_dcmpgt>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff ffc4 	bl	8000938 <__aeabi_cdrcmple>
 80009b0:	bf34      	ite	cc
 80009b2:	2001      	movcc	r0, #1
 80009b4:	2000      	movcs	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmpun>:
 80009bc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009c0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009c4:	d102      	bne.n	80009cc <__aeabi_dcmpun+0x10>
 80009c6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009ca:	d10a      	bne.n	80009e2 <__aeabi_dcmpun+0x26>
 80009cc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d4:	d102      	bne.n	80009dc <__aeabi_dcmpun+0x20>
 80009d6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009da:	d102      	bne.n	80009e2 <__aeabi_dcmpun+0x26>
 80009dc:	f04f 0000 	mov.w	r0, #0
 80009e0:	4770      	bx	lr
 80009e2:	f04f 0001 	mov.w	r0, #1
 80009e6:	4770      	bx	lr

080009e8 <__aeabi_d2iz>:
 80009e8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009ec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80009f0:	d215      	bcs.n	8000a1e <__aeabi_d2iz+0x36>
 80009f2:	d511      	bpl.n	8000a18 <__aeabi_d2iz+0x30>
 80009f4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80009f8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009fc:	d912      	bls.n	8000a24 <__aeabi_d2iz+0x3c>
 80009fe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a0a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a0e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a12:	bf18      	it	ne
 8000a14:	4240      	negne	r0, r0
 8000a16:	4770      	bx	lr
 8000a18:	f04f 0000 	mov.w	r0, #0
 8000a1c:	4770      	bx	lr
 8000a1e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a22:	d105      	bne.n	8000a30 <__aeabi_d2iz+0x48>
 8000a24:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a28:	bf08      	it	eq
 8000a2a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a2e:	4770      	bx	lr
 8000a30:	f04f 0000 	mov.w	r0, #0
 8000a34:	4770      	bx	lr
 8000a36:	bf00      	nop

08000a38 <__aeabi_d2uiz>:
 8000a38:	004a      	lsls	r2, r1, #1
 8000a3a:	d211      	bcs.n	8000a60 <__aeabi_d2uiz+0x28>
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d211      	bcs.n	8000a66 <__aeabi_d2uiz+0x2e>
 8000a42:	d50d      	bpl.n	8000a60 <__aeabi_d2uiz+0x28>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d40e      	bmi.n	8000a6c <__aeabi_d2uiz+0x34>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a5e:	4770      	bx	lr
 8000a60:	f04f 0000 	mov.w	r0, #0
 8000a64:	4770      	bx	lr
 8000a66:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a6a:	d102      	bne.n	8000a72 <__aeabi_d2uiz+0x3a>
 8000a6c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000a70:	4770      	bx	lr
 8000a72:	f04f 0000 	mov.w	r0, #0
 8000a76:	4770      	bx	lr

08000a78 <__aeabi_d2f>:
 8000a78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a7c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a80:	bf24      	itt	cs
 8000a82:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a86:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a8a:	d90d      	bls.n	8000aa8 <__aeabi_d2f+0x30>
 8000a8c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a90:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a94:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a98:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a9c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000aa0:	bf08      	it	eq
 8000aa2:	f020 0001 	biceq.w	r0, r0, #1
 8000aa6:	4770      	bx	lr
 8000aa8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000aac:	d121      	bne.n	8000af2 <__aeabi_d2f+0x7a>
 8000aae:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ab2:	bfbc      	itt	lt
 8000ab4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ab8:	4770      	bxlt	lr
 8000aba:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000abe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ac2:	f1c2 0218 	rsb	r2, r2, #24
 8000ac6:	f1c2 0c20 	rsb	ip, r2, #32
 8000aca:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ace:	fa20 f002 	lsr.w	r0, r0, r2
 8000ad2:	bf18      	it	ne
 8000ad4:	f040 0001 	orrne.w	r0, r0, #1
 8000ad8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000adc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ae0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ae4:	ea40 000c 	orr.w	r0, r0, ip
 8000ae8:	fa23 f302 	lsr.w	r3, r3, r2
 8000aec:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000af0:	e7cc      	b.n	8000a8c <__aeabi_d2f+0x14>
 8000af2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000af6:	d107      	bne.n	8000b08 <__aeabi_d2f+0x90>
 8000af8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000afc:	bf1e      	ittt	ne
 8000afe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b02:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b06:	4770      	bxne	lr
 8000b08:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b0c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b10:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop

08000b18 <__aeabi_frsub>:
 8000b18:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b1c:	e002      	b.n	8000b24 <__addsf3>
 8000b1e:	bf00      	nop

08000b20 <__aeabi_fsub>:
 8000b20:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b24 <__addsf3>:
 8000b24:	0042      	lsls	r2, r0, #1
 8000b26:	bf1f      	itttt	ne
 8000b28:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b2c:	ea92 0f03 	teqne	r2, r3
 8000b30:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b34:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b38:	d06a      	beq.n	8000c10 <__addsf3+0xec>
 8000b3a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b3e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b42:	bfc1      	itttt	gt
 8000b44:	18d2      	addgt	r2, r2, r3
 8000b46:	4041      	eorgt	r1, r0
 8000b48:	4048      	eorgt	r0, r1
 8000b4a:	4041      	eorgt	r1, r0
 8000b4c:	bfb8      	it	lt
 8000b4e:	425b      	neglt	r3, r3
 8000b50:	2b19      	cmp	r3, #25
 8000b52:	bf88      	it	hi
 8000b54:	4770      	bxhi	lr
 8000b56:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b5a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b5e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b62:	bf18      	it	ne
 8000b64:	4240      	negne	r0, r0
 8000b66:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b6a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b6e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4249      	negne	r1, r1
 8000b76:	ea92 0f03 	teq	r2, r3
 8000b7a:	d03f      	beq.n	8000bfc <__addsf3+0xd8>
 8000b7c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b80:	fa41 fc03 	asr.w	ip, r1, r3
 8000b84:	eb10 000c 	adds.w	r0, r0, ip
 8000b88:	f1c3 0320 	rsb	r3, r3, #32
 8000b8c:	fa01 f103 	lsl.w	r1, r1, r3
 8000b90:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b94:	d502      	bpl.n	8000b9c <__addsf3+0x78>
 8000b96:	4249      	negs	r1, r1
 8000b98:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b9c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000ba0:	d313      	bcc.n	8000bca <__addsf3+0xa6>
 8000ba2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000ba6:	d306      	bcc.n	8000bb6 <__addsf3+0x92>
 8000ba8:	0840      	lsrs	r0, r0, #1
 8000baa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bae:	f102 0201 	add.w	r2, r2, #1
 8000bb2:	2afe      	cmp	r2, #254	; 0xfe
 8000bb4:	d251      	bcs.n	8000c5a <__addsf3+0x136>
 8000bb6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bba:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bbe:	bf08      	it	eq
 8000bc0:	f020 0001 	biceq.w	r0, r0, #1
 8000bc4:	ea40 0003 	orr.w	r0, r0, r3
 8000bc8:	4770      	bx	lr
 8000bca:	0049      	lsls	r1, r1, #1
 8000bcc:	eb40 0000 	adc.w	r0, r0, r0
 8000bd0:	3a01      	subs	r2, #1
 8000bd2:	bf28      	it	cs
 8000bd4:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000bd8:	d2ed      	bcs.n	8000bb6 <__addsf3+0x92>
 8000bda:	fab0 fc80 	clz	ip, r0
 8000bde:	f1ac 0c08 	sub.w	ip, ip, #8
 8000be2:	ebb2 020c 	subs.w	r2, r2, ip
 8000be6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bea:	bfaa      	itet	ge
 8000bec:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000bf0:	4252      	neglt	r2, r2
 8000bf2:	4318      	orrge	r0, r3
 8000bf4:	bfbc      	itt	lt
 8000bf6:	40d0      	lsrlt	r0, r2
 8000bf8:	4318      	orrlt	r0, r3
 8000bfa:	4770      	bx	lr
 8000bfc:	f092 0f00 	teq	r2, #0
 8000c00:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c04:	bf06      	itte	eq
 8000c06:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c0a:	3201      	addeq	r2, #1
 8000c0c:	3b01      	subne	r3, #1
 8000c0e:	e7b5      	b.n	8000b7c <__addsf3+0x58>
 8000c10:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c14:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c18:	bf18      	it	ne
 8000c1a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c1e:	d021      	beq.n	8000c64 <__addsf3+0x140>
 8000c20:	ea92 0f03 	teq	r2, r3
 8000c24:	d004      	beq.n	8000c30 <__addsf3+0x10c>
 8000c26:	f092 0f00 	teq	r2, #0
 8000c2a:	bf08      	it	eq
 8000c2c:	4608      	moveq	r0, r1
 8000c2e:	4770      	bx	lr
 8000c30:	ea90 0f01 	teq	r0, r1
 8000c34:	bf1c      	itt	ne
 8000c36:	2000      	movne	r0, #0
 8000c38:	4770      	bxne	lr
 8000c3a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c3e:	d104      	bne.n	8000c4a <__addsf3+0x126>
 8000c40:	0040      	lsls	r0, r0, #1
 8000c42:	bf28      	it	cs
 8000c44:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c48:	4770      	bx	lr
 8000c4a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c4e:	bf3c      	itt	cc
 8000c50:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bxcc	lr
 8000c56:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c5a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c5e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c62:	4770      	bx	lr
 8000c64:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c68:	bf16      	itet	ne
 8000c6a:	4608      	movne	r0, r1
 8000c6c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c70:	4601      	movne	r1, r0
 8000c72:	0242      	lsls	r2, r0, #9
 8000c74:	bf06      	itte	eq
 8000c76:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c7a:	ea90 0f01 	teqeq	r0, r1
 8000c7e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c82:	4770      	bx	lr

08000c84 <__aeabi_ui2f>:
 8000c84:	f04f 0300 	mov.w	r3, #0
 8000c88:	e004      	b.n	8000c94 <__aeabi_i2f+0x8>
 8000c8a:	bf00      	nop

08000c8c <__aeabi_i2f>:
 8000c8c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c90:	bf48      	it	mi
 8000c92:	4240      	negmi	r0, r0
 8000c94:	ea5f 0c00 	movs.w	ip, r0
 8000c98:	bf08      	it	eq
 8000c9a:	4770      	bxeq	lr
 8000c9c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000ca0:	4601      	mov	r1, r0
 8000ca2:	f04f 0000 	mov.w	r0, #0
 8000ca6:	e01c      	b.n	8000ce2 <__aeabi_l2f+0x2a>

08000ca8 <__aeabi_ul2f>:
 8000ca8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cac:	bf08      	it	eq
 8000cae:	4770      	bxeq	lr
 8000cb0:	f04f 0300 	mov.w	r3, #0
 8000cb4:	e00a      	b.n	8000ccc <__aeabi_l2f+0x14>
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_l2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cc4:	d502      	bpl.n	8000ccc <__aeabi_l2f+0x14>
 8000cc6:	4240      	negs	r0, r0
 8000cc8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ccc:	ea5f 0c01 	movs.w	ip, r1
 8000cd0:	bf02      	ittt	eq
 8000cd2:	4684      	moveq	ip, r0
 8000cd4:	4601      	moveq	r1, r0
 8000cd6:	2000      	moveq	r0, #0
 8000cd8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cdc:	bf08      	it	eq
 8000cde:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000ce2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000ce6:	fabc f28c 	clz	r2, ip
 8000cea:	3a08      	subs	r2, #8
 8000cec:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000cf0:	db10      	blt.n	8000d14 <__aeabi_l2f+0x5c>
 8000cf2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cf6:	4463      	add	r3, ip
 8000cf8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cfc:	f1c2 0220 	rsb	r2, r2, #32
 8000d00:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d04:	fa20 f202 	lsr.w	r2, r0, r2
 8000d08:	eb43 0002 	adc.w	r0, r3, r2
 8000d0c:	bf08      	it	eq
 8000d0e:	f020 0001 	biceq.w	r0, r0, #1
 8000d12:	4770      	bx	lr
 8000d14:	f102 0220 	add.w	r2, r2, #32
 8000d18:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d1c:	f1c2 0220 	rsb	r2, r2, #32
 8000d20:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d24:	fa21 f202 	lsr.w	r2, r1, r2
 8000d28:	eb43 0002 	adc.w	r0, r3, r2
 8000d2c:	bf08      	it	eq
 8000d2e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d32:	4770      	bx	lr

08000d34 <__aeabi_fmul>:
 8000d34:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d38:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d3c:	bf1e      	ittt	ne
 8000d3e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d42:	ea92 0f0c 	teqne	r2, ip
 8000d46:	ea93 0f0c 	teqne	r3, ip
 8000d4a:	d06f      	beq.n	8000e2c <__aeabi_fmul+0xf8>
 8000d4c:	441a      	add	r2, r3
 8000d4e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d52:	0240      	lsls	r0, r0, #9
 8000d54:	bf18      	it	ne
 8000d56:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d5a:	d01e      	beq.n	8000d9a <__aeabi_fmul+0x66>
 8000d5c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d60:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d64:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d68:	fba0 3101 	umull	r3, r1, r0, r1
 8000d6c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d70:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d74:	bf3e      	ittt	cc
 8000d76:	0049      	lslcc	r1, r1, #1
 8000d78:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d7c:	005b      	lslcc	r3, r3, #1
 8000d7e:	ea40 0001 	orr.w	r0, r0, r1
 8000d82:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d86:	2afd      	cmp	r2, #253	; 0xfd
 8000d88:	d81d      	bhi.n	8000dc6 <__aeabi_fmul+0x92>
 8000d8a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d8e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d92:	bf08      	it	eq
 8000d94:	f020 0001 	biceq.w	r0, r0, #1
 8000d98:	4770      	bx	lr
 8000d9a:	f090 0f00 	teq	r0, #0
 8000d9e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000da2:	bf08      	it	eq
 8000da4:	0249      	lsleq	r1, r1, #9
 8000da6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000daa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dae:	3a7f      	subs	r2, #127	; 0x7f
 8000db0:	bfc2      	ittt	gt
 8000db2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000db6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dba:	4770      	bxgt	lr
 8000dbc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dc0:	f04f 0300 	mov.w	r3, #0
 8000dc4:	3a01      	subs	r2, #1
 8000dc6:	dc5d      	bgt.n	8000e84 <__aeabi_fmul+0x150>
 8000dc8:	f112 0f19 	cmn.w	r2, #25
 8000dcc:	bfdc      	itt	le
 8000dce:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000dd2:	4770      	bxle	lr
 8000dd4:	f1c2 0200 	rsb	r2, r2, #0
 8000dd8:	0041      	lsls	r1, r0, #1
 8000dda:	fa21 f102 	lsr.w	r1, r1, r2
 8000dde:	f1c2 0220 	rsb	r2, r2, #32
 8000de2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000de6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dea:	f140 0000 	adc.w	r0, r0, #0
 8000dee:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000df2:	bf08      	it	eq
 8000df4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000df8:	4770      	bx	lr
 8000dfa:	f092 0f00 	teq	r2, #0
 8000dfe:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e02:	bf02      	ittt	eq
 8000e04:	0040      	lsleq	r0, r0, #1
 8000e06:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e0a:	3a01      	subeq	r2, #1
 8000e0c:	d0f9      	beq.n	8000e02 <__aeabi_fmul+0xce>
 8000e0e:	ea40 000c 	orr.w	r0, r0, ip
 8000e12:	f093 0f00 	teq	r3, #0
 8000e16:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e1a:	bf02      	ittt	eq
 8000e1c:	0049      	lsleq	r1, r1, #1
 8000e1e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e22:	3b01      	subeq	r3, #1
 8000e24:	d0f9      	beq.n	8000e1a <__aeabi_fmul+0xe6>
 8000e26:	ea41 010c 	orr.w	r1, r1, ip
 8000e2a:	e78f      	b.n	8000d4c <__aeabi_fmul+0x18>
 8000e2c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e30:	ea92 0f0c 	teq	r2, ip
 8000e34:	bf18      	it	ne
 8000e36:	ea93 0f0c 	teqne	r3, ip
 8000e3a:	d00a      	beq.n	8000e52 <__aeabi_fmul+0x11e>
 8000e3c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e40:	bf18      	it	ne
 8000e42:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e46:	d1d8      	bne.n	8000dfa <__aeabi_fmul+0xc6>
 8000e48:	ea80 0001 	eor.w	r0, r0, r1
 8000e4c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e50:	4770      	bx	lr
 8000e52:	f090 0f00 	teq	r0, #0
 8000e56:	bf17      	itett	ne
 8000e58:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e5c:	4608      	moveq	r0, r1
 8000e5e:	f091 0f00 	teqne	r1, #0
 8000e62:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e66:	d014      	beq.n	8000e92 <__aeabi_fmul+0x15e>
 8000e68:	ea92 0f0c 	teq	r2, ip
 8000e6c:	d101      	bne.n	8000e72 <__aeabi_fmul+0x13e>
 8000e6e:	0242      	lsls	r2, r0, #9
 8000e70:	d10f      	bne.n	8000e92 <__aeabi_fmul+0x15e>
 8000e72:	ea93 0f0c 	teq	r3, ip
 8000e76:	d103      	bne.n	8000e80 <__aeabi_fmul+0x14c>
 8000e78:	024b      	lsls	r3, r1, #9
 8000e7a:	bf18      	it	ne
 8000e7c:	4608      	movne	r0, r1
 8000e7e:	d108      	bne.n	8000e92 <__aeabi_fmul+0x15e>
 8000e80:	ea80 0001 	eor.w	r0, r0, r1
 8000e84:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e88:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e8c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e90:	4770      	bx	lr
 8000e92:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e96:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e9a:	4770      	bx	lr

08000e9c <__aeabi_fdiv>:
 8000e9c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ea0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ea4:	bf1e      	ittt	ne
 8000ea6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eaa:	ea92 0f0c 	teqne	r2, ip
 8000eae:	ea93 0f0c 	teqne	r3, ip
 8000eb2:	d069      	beq.n	8000f88 <__aeabi_fdiv+0xec>
 8000eb4:	eba2 0203 	sub.w	r2, r2, r3
 8000eb8:	ea80 0c01 	eor.w	ip, r0, r1
 8000ebc:	0249      	lsls	r1, r1, #9
 8000ebe:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ec2:	d037      	beq.n	8000f34 <__aeabi_fdiv+0x98>
 8000ec4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ec8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000ecc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ed0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ed4:	428b      	cmp	r3, r1
 8000ed6:	bf38      	it	cc
 8000ed8:	005b      	lslcc	r3, r3, #1
 8000eda:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000ede:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000ee2:	428b      	cmp	r3, r1
 8000ee4:	bf24      	itt	cs
 8000ee6:	1a5b      	subcs	r3, r3, r1
 8000ee8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000eec:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000ef0:	bf24      	itt	cs
 8000ef2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000ef6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000efa:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000efe:	bf24      	itt	cs
 8000f00:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f04:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f08:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f0c:	bf24      	itt	cs
 8000f0e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f12:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f16:	011b      	lsls	r3, r3, #4
 8000f18:	bf18      	it	ne
 8000f1a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f1e:	d1e0      	bne.n	8000ee2 <__aeabi_fdiv+0x46>
 8000f20:	2afd      	cmp	r2, #253	; 0xfd
 8000f22:	f63f af50 	bhi.w	8000dc6 <__aeabi_fmul+0x92>
 8000f26:	428b      	cmp	r3, r1
 8000f28:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f2c:	bf08      	it	eq
 8000f2e:	f020 0001 	biceq.w	r0, r0, #1
 8000f32:	4770      	bx	lr
 8000f34:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f38:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f3c:	327f      	adds	r2, #127	; 0x7f
 8000f3e:	bfc2      	ittt	gt
 8000f40:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f44:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f48:	4770      	bxgt	lr
 8000f4a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f4e:	f04f 0300 	mov.w	r3, #0
 8000f52:	3a01      	subs	r2, #1
 8000f54:	e737      	b.n	8000dc6 <__aeabi_fmul+0x92>
 8000f56:	f092 0f00 	teq	r2, #0
 8000f5a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f5e:	bf02      	ittt	eq
 8000f60:	0040      	lsleq	r0, r0, #1
 8000f62:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f66:	3a01      	subeq	r2, #1
 8000f68:	d0f9      	beq.n	8000f5e <__aeabi_fdiv+0xc2>
 8000f6a:	ea40 000c 	orr.w	r0, r0, ip
 8000f6e:	f093 0f00 	teq	r3, #0
 8000f72:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f76:	bf02      	ittt	eq
 8000f78:	0049      	lsleq	r1, r1, #1
 8000f7a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f7e:	3b01      	subeq	r3, #1
 8000f80:	d0f9      	beq.n	8000f76 <__aeabi_fdiv+0xda>
 8000f82:	ea41 010c 	orr.w	r1, r1, ip
 8000f86:	e795      	b.n	8000eb4 <__aeabi_fdiv+0x18>
 8000f88:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f8c:	ea92 0f0c 	teq	r2, ip
 8000f90:	d108      	bne.n	8000fa4 <__aeabi_fdiv+0x108>
 8000f92:	0242      	lsls	r2, r0, #9
 8000f94:	f47f af7d 	bne.w	8000e92 <__aeabi_fmul+0x15e>
 8000f98:	ea93 0f0c 	teq	r3, ip
 8000f9c:	f47f af70 	bne.w	8000e80 <__aeabi_fmul+0x14c>
 8000fa0:	4608      	mov	r0, r1
 8000fa2:	e776      	b.n	8000e92 <__aeabi_fmul+0x15e>
 8000fa4:	ea93 0f0c 	teq	r3, ip
 8000fa8:	d104      	bne.n	8000fb4 <__aeabi_fdiv+0x118>
 8000faa:	024b      	lsls	r3, r1, #9
 8000fac:	f43f af4c 	beq.w	8000e48 <__aeabi_fmul+0x114>
 8000fb0:	4608      	mov	r0, r1
 8000fb2:	e76e      	b.n	8000e92 <__aeabi_fmul+0x15e>
 8000fb4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fb8:	bf18      	it	ne
 8000fba:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fbe:	d1ca      	bne.n	8000f56 <__aeabi_fdiv+0xba>
 8000fc0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fc4:	f47f af5c 	bne.w	8000e80 <__aeabi_fmul+0x14c>
 8000fc8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fcc:	f47f af3c 	bne.w	8000e48 <__aeabi_fmul+0x114>
 8000fd0:	e75f      	b.n	8000e92 <__aeabi_fmul+0x15e>
 8000fd2:	bf00      	nop

08000fd4 <__aeabi_f2iz>:
 8000fd4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000fd8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000fdc:	d30f      	bcc.n	8000ffe <__aeabi_f2iz+0x2a>
 8000fde:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000fe2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000fe6:	d90d      	bls.n	8001004 <__aeabi_f2iz+0x30>
 8000fe8:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000fec:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ff0:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000ff4:	fa23 f002 	lsr.w	r0, r3, r2
 8000ff8:	bf18      	it	ne
 8000ffa:	4240      	negne	r0, r0
 8000ffc:	4770      	bx	lr
 8000ffe:	f04f 0000 	mov.w	r0, #0
 8001002:	4770      	bx	lr
 8001004:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001008:	d101      	bne.n	800100e <__aeabi_f2iz+0x3a>
 800100a:	0242      	lsls	r2, r0, #9
 800100c:	d105      	bne.n	800101a <__aeabi_f2iz+0x46>
 800100e:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8001012:	bf08      	it	eq
 8001014:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001018:	4770      	bx	lr
 800101a:	f04f 0000 	mov.w	r0, #0
 800101e:	4770      	bx	lr

08001020 <__aeabi_uldivmod>:
 8001020:	b953      	cbnz	r3, 8001038 <__aeabi_uldivmod+0x18>
 8001022:	b94a      	cbnz	r2, 8001038 <__aeabi_uldivmod+0x18>
 8001024:	2900      	cmp	r1, #0
 8001026:	bf08      	it	eq
 8001028:	2800      	cmpeq	r0, #0
 800102a:	bf1c      	itt	ne
 800102c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8001030:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8001034:	f000 b80c 	b.w	8001050 <__aeabi_idiv0>
 8001038:	f1ad 0c08 	sub.w	ip, sp, #8
 800103c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8001040:	f007 fd5e 	bl	8008b00 <__udivmoddi4>
 8001044:	f8dd e004 	ldr.w	lr, [sp, #4]
 8001048:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800104c:	b004      	add	sp, #16
 800104e:	4770      	bx	lr

08001050 <__aeabi_idiv0>:
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop

08001054 <__do_global_dtors_aux>:
 8001054:	b510      	push	{r4, lr}
 8001056:	4c05      	ldr	r4, [pc, #20]	; (800106c <__do_global_dtors_aux+0x18>)
 8001058:	7823      	ldrb	r3, [r4, #0]
 800105a:	b933      	cbnz	r3, 800106a <__do_global_dtors_aux+0x16>
 800105c:	4b04      	ldr	r3, [pc, #16]	; (8001070 <__do_global_dtors_aux+0x1c>)
 800105e:	b113      	cbz	r3, 8001066 <__do_global_dtors_aux+0x12>
 8001060:	4804      	ldr	r0, [pc, #16]	; (8001074 <__do_global_dtors_aux+0x20>)
 8001062:	f3af 8000 	nop.w
 8001066:	2301      	movs	r3, #1
 8001068:	7023      	strb	r3, [r4, #0]
 800106a:	bd10      	pop	{r4, pc}
 800106c:	200001e0 	.word	0x200001e0
 8001070:	00000000 	.word	0x00000000
 8001074:	08008da0 	.word	0x08008da0

08001078 <frame_dummy>:
 8001078:	b508      	push	{r3, lr}
 800107a:	4b03      	ldr	r3, [pc, #12]	; (8001088 <frame_dummy+0x10>)
 800107c:	b11b      	cbz	r3, 8001086 <frame_dummy+0xe>
 800107e:	4903      	ldr	r1, [pc, #12]	; (800108c <frame_dummy+0x14>)
 8001080:	4803      	ldr	r0, [pc, #12]	; (8001090 <frame_dummy+0x18>)
 8001082:	f3af 8000 	nop.w
 8001086:	bd08      	pop	{r3, pc}
 8001088:	00000000 	.word	0x00000000
 800108c:	200001e4 	.word	0x200001e4
 8001090:	08008da0 	.word	0x08008da0
 8001094:	00000000 	.word	0x00000000

08001098 <setPWM>:
 *      Author: dalvi
 */

#include "Motors.h"

void setPWM(MotorDef_t *Motor, uint32_t pwm, int en, Motors_t *Motors) {
 8001098:	b5b0      	push	{r4, r5, r7, lr}
 800109a:	b084      	sub	sp, #16
 800109c:	af00      	add	r7, sp, #0
 800109e:	60f8      	str	r0, [r7, #12]
 80010a0:	60b9      	str	r1, [r7, #8]
 80010a2:	607a      	str	r2, [r7, #4]
 80010a4:	603b      	str	r3, [r7, #0]
	switch(Motor->timer) {
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	881b      	ldrh	r3, [r3, #0]
 80010aa:	2b01      	cmp	r3, #1
 80010ac:	d003      	beq.n	80010b6 <setPWM+0x1e>
 80010ae:	2b02      	cmp	r3, #2
 80010b0:	f000 80ab 	beq.w	800120a <setPWM+0x172>
 80010b4:	e0cc      	b.n	8001250 <setPWM+0x1b8>
		case(1):
			switch(Motor->channel){
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	885b      	ldrh	r3, [r3, #2]
 80010ba:	2b04      	cmp	r3, #4
 80010bc:	f000 808a 	beq.w	80011d4 <setPWM+0x13c>
 80010c0:	2b04      	cmp	r3, #4
 80010c2:	f300 80c2 	bgt.w	800124a <setPWM+0x1b2>
 80010c6:	2b02      	cmp	r3, #2
 80010c8:	d002      	beq.n	80010d0 <setPWM+0x38>
 80010ca:	2b03      	cmp	r3, #3
 80010cc:	d041      	beq.n	8001152 <setPWM+0xba>
						TIM1->CCR4 = en * (100 - pwm) + !en * pwm;
						Motors->pwm4 = pwm;
						Motors->e4 = en;
						break;
			}
			break;
 80010ce:	e0bc      	b.n	800124a <setPWM+0x1b2>
						TIM1->CCR2 = en * (100 - (pwm *1.1)) + !en * pwm;
 80010d0:	6878      	ldr	r0, [r7, #4]
 80010d2:	f7ff f96f 	bl	80003b4 <__aeabi_i2d>
 80010d6:	4604      	mov	r4, r0
 80010d8:	460d      	mov	r5, r1
 80010da:	68b8      	ldr	r0, [r7, #8]
 80010dc:	f7ff f95a 	bl	8000394 <__aeabi_ui2d>
 80010e0:	a361      	add	r3, pc, #388	; (adr r3, 8001268 <setPWM+0x1d0>)
 80010e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010e6:	f7ff f9cf 	bl	8000488 <__aeabi_dmul>
 80010ea:	4602      	mov	r2, r0
 80010ec:	460b      	mov	r3, r1
 80010ee:	f04f 0000 	mov.w	r0, #0
 80010f2:	495f      	ldr	r1, [pc, #380]	; (8001270 <setPWM+0x1d8>)
 80010f4:	f7ff f810 	bl	8000118 <__aeabi_dsub>
 80010f8:	4602      	mov	r2, r0
 80010fa:	460b      	mov	r3, r1
 80010fc:	4620      	mov	r0, r4
 80010fe:	4629      	mov	r1, r5
 8001100:	f7ff f9c2 	bl	8000488 <__aeabi_dmul>
 8001104:	4602      	mov	r2, r0
 8001106:	460b      	mov	r3, r1
 8001108:	4614      	mov	r4, r2
 800110a:	461d      	mov	r5, r3
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	2b00      	cmp	r3, #0
 8001110:	bf0c      	ite	eq
 8001112:	2301      	moveq	r3, #1
 8001114:	2300      	movne	r3, #0
 8001116:	b2db      	uxtb	r3, r3
 8001118:	461a      	mov	r2, r3
 800111a:	68bb      	ldr	r3, [r7, #8]
 800111c:	fb02 f303 	mul.w	r3, r2, r3
 8001120:	4618      	mov	r0, r3
 8001122:	f7ff f937 	bl	8000394 <__aeabi_ui2d>
 8001126:	4602      	mov	r2, r0
 8001128:	460b      	mov	r3, r1
 800112a:	4620      	mov	r0, r4
 800112c:	4629      	mov	r1, r5
 800112e:	f7fe fff5 	bl	800011c <__adddf3>
 8001132:	4602      	mov	r2, r0
 8001134:	460b      	mov	r3, r1
 8001136:	4c4f      	ldr	r4, [pc, #316]	; (8001274 <setPWM+0x1dc>)
 8001138:	4610      	mov	r0, r2
 800113a:	4619      	mov	r1, r3
 800113c:	f7ff fc7c 	bl	8000a38 <__aeabi_d2uiz>
 8001140:	4603      	mov	r3, r0
 8001142:	63a3      	str	r3, [r4, #56]	; 0x38
						Motors->pwm1 = pwm;
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	68ba      	ldr	r2, [r7, #8]
 8001148:	601a      	str	r2, [r3, #0]
						Motors->e1 = en;
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	687a      	ldr	r2, [r7, #4]
 800114e:	605a      	str	r2, [r3, #4]
						break;
 8001150:	e05a      	b.n	8001208 <setPWM+0x170>
						TIM1->CCR3 = en * (100 - (pwm * 1.1)) + !en * pwm;
 8001152:	6878      	ldr	r0, [r7, #4]
 8001154:	f7ff f92e 	bl	80003b4 <__aeabi_i2d>
 8001158:	4604      	mov	r4, r0
 800115a:	460d      	mov	r5, r1
 800115c:	68b8      	ldr	r0, [r7, #8]
 800115e:	f7ff f919 	bl	8000394 <__aeabi_ui2d>
 8001162:	a341      	add	r3, pc, #260	; (adr r3, 8001268 <setPWM+0x1d0>)
 8001164:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001168:	f7ff f98e 	bl	8000488 <__aeabi_dmul>
 800116c:	4602      	mov	r2, r0
 800116e:	460b      	mov	r3, r1
 8001170:	f04f 0000 	mov.w	r0, #0
 8001174:	493e      	ldr	r1, [pc, #248]	; (8001270 <setPWM+0x1d8>)
 8001176:	f7fe ffcf 	bl	8000118 <__aeabi_dsub>
 800117a:	4602      	mov	r2, r0
 800117c:	460b      	mov	r3, r1
 800117e:	4620      	mov	r0, r4
 8001180:	4629      	mov	r1, r5
 8001182:	f7ff f981 	bl	8000488 <__aeabi_dmul>
 8001186:	4602      	mov	r2, r0
 8001188:	460b      	mov	r3, r1
 800118a:	4614      	mov	r4, r2
 800118c:	461d      	mov	r5, r3
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	2b00      	cmp	r3, #0
 8001192:	bf0c      	ite	eq
 8001194:	2301      	moveq	r3, #1
 8001196:	2300      	movne	r3, #0
 8001198:	b2db      	uxtb	r3, r3
 800119a:	461a      	mov	r2, r3
 800119c:	68bb      	ldr	r3, [r7, #8]
 800119e:	fb02 f303 	mul.w	r3, r2, r3
 80011a2:	4618      	mov	r0, r3
 80011a4:	f7ff f8f6 	bl	8000394 <__aeabi_ui2d>
 80011a8:	4602      	mov	r2, r0
 80011aa:	460b      	mov	r3, r1
 80011ac:	4620      	mov	r0, r4
 80011ae:	4629      	mov	r1, r5
 80011b0:	f7fe ffb4 	bl	800011c <__adddf3>
 80011b4:	4602      	mov	r2, r0
 80011b6:	460b      	mov	r3, r1
 80011b8:	4c2e      	ldr	r4, [pc, #184]	; (8001274 <setPWM+0x1dc>)
 80011ba:	4610      	mov	r0, r2
 80011bc:	4619      	mov	r1, r3
 80011be:	f7ff fc3b 	bl	8000a38 <__aeabi_d2uiz>
 80011c2:	4603      	mov	r3, r0
 80011c4:	63e3      	str	r3, [r4, #60]	; 0x3c
						Motors->pwm2 = pwm;
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	68ba      	ldr	r2, [r7, #8]
 80011ca:	609a      	str	r2, [r3, #8]
						Motors->e2 = en;
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	687a      	ldr	r2, [r7, #4]
 80011d0:	60da      	str	r2, [r3, #12]
						break;
 80011d2:	e019      	b.n	8001208 <setPWM+0x170>
						TIM1->CCR4 = en * (100 - pwm) + !en * pwm;
 80011d4:	68bb      	ldr	r3, [r7, #8]
 80011d6:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 80011da:	687a      	ldr	r2, [r7, #4]
 80011dc:	fb03 f202 	mul.w	r2, r3, r2
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	bf0c      	ite	eq
 80011e6:	2301      	moveq	r3, #1
 80011e8:	2300      	movne	r3, #0
 80011ea:	b2db      	uxtb	r3, r3
 80011ec:	4619      	mov	r1, r3
 80011ee:	68bb      	ldr	r3, [r7, #8]
 80011f0:	fb01 f303 	mul.w	r3, r1, r3
 80011f4:	491f      	ldr	r1, [pc, #124]	; (8001274 <setPWM+0x1dc>)
 80011f6:	4413      	add	r3, r2
 80011f8:	640b      	str	r3, [r1, #64]	; 0x40
						Motors->pwm4 = pwm;
 80011fa:	683b      	ldr	r3, [r7, #0]
 80011fc:	68ba      	ldr	r2, [r7, #8]
 80011fe:	619a      	str	r2, [r3, #24]
						Motors->e4 = en;
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	687a      	ldr	r2, [r7, #4]
 8001204:	61da      	str	r2, [r3, #28]
						break;
 8001206:	bf00      	nop
			break;
 8001208:	e01f      	b.n	800124a <setPWM+0x1b2>
		case(2):
			switch(Motor->channel) {
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	885b      	ldrh	r3, [r3, #2]
 800120e:	2b04      	cmp	r3, #4
 8001210:	d11d      	bne.n	800124e <setPWM+0x1b6>
				case(4):
					TIM2->CCR4 = en * (100 - pwm) + !en * pwm;
 8001212:	68bb      	ldr	r3, [r7, #8]
 8001214:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 8001218:	687a      	ldr	r2, [r7, #4]
 800121a:	fb03 f202 	mul.w	r2, r3, r2
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	2b00      	cmp	r3, #0
 8001222:	bf0c      	ite	eq
 8001224:	2301      	moveq	r3, #1
 8001226:	2300      	movne	r3, #0
 8001228:	b2db      	uxtb	r3, r3
 800122a:	4619      	mov	r1, r3
 800122c:	68bb      	ldr	r3, [r7, #8]
 800122e:	fb01 f303 	mul.w	r3, r1, r3
 8001232:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001236:	4413      	add	r3, r2
 8001238:	640b      	str	r3, [r1, #64]	; 0x40
					Motors->pwm3 = pwm;
 800123a:	683b      	ldr	r3, [r7, #0]
 800123c:	68ba      	ldr	r2, [r7, #8]
 800123e:	611a      	str	r2, [r3, #16]
					Motors->e3 = en;
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	687a      	ldr	r2, [r7, #4]
 8001244:	615a      	str	r2, [r3, #20]
					break;
 8001246:	bf00      	nop
			}
			break;
 8001248:	e001      	b.n	800124e <setPWM+0x1b6>
			break;
 800124a:	bf00      	nop
 800124c:	e000      	b.n	8001250 <setPWM+0x1b8>
			break;
 800124e:	bf00      	nop
	}
	HAL_GPIO_WritePin(GPIOA, Motor->in1, en);
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	889b      	ldrh	r3, [r3, #4]
 8001254:	687a      	ldr	r2, [r7, #4]
 8001256:	b2d2      	uxtb	r2, r2
 8001258:	4619      	mov	r1, r3
 800125a:	4807      	ldr	r0, [pc, #28]	; (8001278 <setPWM+0x1e0>)
 800125c:	f002 fdc7 	bl	8003dee <HAL_GPIO_WritePin>
}
 8001260:	bf00      	nop
 8001262:	3710      	adds	r7, #16
 8001264:	46bd      	mov	sp, r7
 8001266:	bdb0      	pop	{r4, r5, r7, pc}
 8001268:	9999999a 	.word	0x9999999a
 800126c:	3ff19999 	.word	0x3ff19999
 8001270:	40590000 	.word	0x40590000
 8001274:	40012c00 	.word	0x40012c00
 8001278:	40010800 	.word	0x40010800
 800127c:	00000000 	.word	0x00000000

08001280 <GotoPoint>:

// offset angle of each motor
int offsets[] = {-45, -135, 135, 45};

void GotoPoint(double teta, uint32_t speed, Motors_t *Motors, Motor_Defs *MotorDefs) {
 8001280:	b5b0      	push	{r4, r5, r7, lr}
 8001282:	b08c      	sub	sp, #48	; 0x30
 8001284:	af00      	add	r7, sp, #0
 8001286:	e9c7 0102 	strd	r0, r1, [r7, #8]
 800128a:	607a      	str	r2, [r7, #4]
 800128c:	603b      	str	r3, [r7, #0]
	for (int i = 0; i < 4; ++i) {
 800128e:	2300      	movs	r3, #0
 8001290:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001292:	e10c      	b.n	80014ae <GotoPoint+0x22e>
		double t = teta + offsets[i];
 8001294:	4a8c      	ldr	r2, [pc, #560]	; (80014c8 <GotoPoint+0x248>)
 8001296:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001298:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800129c:	4618      	mov	r0, r3
 800129e:	f7ff f889 	bl	80003b4 <__aeabi_i2d>
 80012a2:	4602      	mov	r2, r0
 80012a4:	460b      	mov	r3, r1
 80012a6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80012aa:	f7fe ff37 	bl	800011c <__adddf3>
 80012ae:	4602      	mov	r2, r0
 80012b0:	460b      	mov	r3, r1
 80012b2:	e9c7 2306 	strd	r2, r3, [r7, #24]
		double s = sin(t * DEG_TO_RAD) * speed;
 80012b6:	a382      	add	r3, pc, #520	; (adr r3, 80014c0 <GotoPoint+0x240>)
 80012b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012bc:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80012c0:	f7ff f8e2 	bl	8000488 <__aeabi_dmul>
 80012c4:	4602      	mov	r2, r0
 80012c6:	460b      	mov	r3, r1
 80012c8:	4610      	mov	r0, r2
 80012ca:	4619      	mov	r1, r3
 80012cc:	f04f 0200 	mov.w	r2, #0
 80012d0:	4b7e      	ldr	r3, [pc, #504]	; (80014cc <GotoPoint+0x24c>)
 80012d2:	f7ff fa03 	bl	80006dc <__aeabi_ddiv>
 80012d6:	4602      	mov	r2, r0
 80012d8:	460b      	mov	r3, r1
 80012da:	4610      	mov	r0, r2
 80012dc:	4619      	mov	r1, r3
 80012de:	f006 f907 	bl	80074f0 <sin>
 80012e2:	4604      	mov	r4, r0
 80012e4:	460d      	mov	r5, r1
 80012e6:	6878      	ldr	r0, [r7, #4]
 80012e8:	f7ff f854 	bl	8000394 <__aeabi_ui2d>
 80012ec:	4602      	mov	r2, r0
 80012ee:	460b      	mov	r3, r1
 80012f0:	4620      	mov	r0, r4
 80012f2:	4629      	mov	r1, r5
 80012f4:	f7ff f8c8 	bl	8000488 <__aeabi_dmul>
 80012f8:	4602      	mov	r2, r0
 80012fa:	460b      	mov	r3, r1
 80012fc:	e9c7 2308 	strd	r2, r3, [r7, #32]
		if (s > MAXSPEED) s = MAXSPEED;
 8001300:	f04f 0200 	mov.w	r2, #0
 8001304:	4b72      	ldr	r3, [pc, #456]	; (80014d0 <GotoPoint+0x250>)
 8001306:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800130a:	f7ff fb4d 	bl	80009a8 <__aeabi_dcmpgt>
 800130e:	4603      	mov	r3, r0
 8001310:	2b00      	cmp	r3, #0
 8001312:	d004      	beq.n	800131e <GotoPoint+0x9e>
 8001314:	f04f 0200 	mov.w	r2, #0
 8001318:	4b6d      	ldr	r3, [pc, #436]	; (80014d0 <GotoPoint+0x250>)
 800131a:	e9c7 2308 	strd	r2, r3, [r7, #32]
		int en = s >= 0 ? 1 : 0;
 800131e:	2301      	movs	r3, #1
 8001320:	461c      	mov	r4, r3
 8001322:	f04f 0200 	mov.w	r2, #0
 8001326:	f04f 0300 	mov.w	r3, #0
 800132a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800132e:	f7ff fb31 	bl	8000994 <__aeabi_dcmpge>
 8001332:	4603      	mov	r3, r0
 8001334:	2b00      	cmp	r3, #0
 8001336:	d101      	bne.n	800133c <GotoPoint+0xbc>
 8001338:	2300      	movs	r3, #0
 800133a:	461c      	mov	r4, r3
 800133c:	b2e3      	uxtb	r3, r4
 800133e:	617b      	str	r3, [r7, #20]
		s = abs(s);
 8001340:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001344:	f7ff fb50 	bl	80009e8 <__aeabi_d2iz>
 8001348:	4603      	mov	r3, r0
 800134a:	2b00      	cmp	r3, #0
 800134c:	bfb8      	it	lt
 800134e:	425b      	neglt	r3, r3
 8001350:	4618      	mov	r0, r3
 8001352:	f7ff f82f 	bl	80003b4 <__aeabi_i2d>
 8001356:	4602      	mov	r2, r0
 8001358:	460b      	mov	r3, r1
 800135a:	e9c7 2308 	strd	r2, r3, [r7, #32]
		if (en == 0) {
 800135e:	697b      	ldr	r3, [r7, #20]
 8001360:	2b00      	cmp	r3, #0
 8001362:	d14f      	bne.n	8001404 <GotoPoint+0x184>
			// for robot 0
			switch(i) {
 8001364:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001366:	2b03      	cmp	r3, #3
 8001368:	f200 809e 	bhi.w	80014a8 <GotoPoint+0x228>
 800136c:	a201      	add	r2, pc, #4	; (adr r2, 8001374 <GotoPoint+0xf4>)
 800136e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001372:	bf00      	nop
 8001374:	08001385 	.word	0x08001385
 8001378:	0800139f 	.word	0x0800139f
 800137c:	080013c5 	.word	0x080013c5
 8001380:	080013df 	.word	0x080013df
			case 0:
				setPWM(MotorDefs->Motor_1, s, en, Motors);
 8001384:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001386:	681c      	ldr	r4, [r3, #0]
 8001388:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800138c:	f7ff fb54 	bl	8000a38 <__aeabi_d2uiz>
 8001390:	4601      	mov	r1, r0
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	697a      	ldr	r2, [r7, #20]
 8001396:	4620      	mov	r0, r4
 8001398:	f7ff fe7e 	bl	8001098 <setPWM>
				break;
 800139c:	e084      	b.n	80014a8 <GotoPoint+0x228>
			case 1:
				setPWM(MotorDefs->Motor_2, s, !en, Motors);
 800139e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80013a0:	685c      	ldr	r4, [r3, #4]
 80013a2:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80013a6:	f7ff fb47 	bl	8000a38 <__aeabi_d2uiz>
 80013aa:	4601      	mov	r1, r0
 80013ac:	697b      	ldr	r3, [r7, #20]
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	bf0c      	ite	eq
 80013b2:	2301      	moveq	r3, #1
 80013b4:	2300      	movne	r3, #0
 80013b6:	b2db      	uxtb	r3, r3
 80013b8:	461a      	mov	r2, r3
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	4620      	mov	r0, r4
 80013be:	f7ff fe6b 	bl	8001098 <setPWM>
				break;
 80013c2:	e071      	b.n	80014a8 <GotoPoint+0x228>
			case 2:
				setPWM(MotorDefs->Motor_3, s, en, Motors);
 80013c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80013c6:	689c      	ldr	r4, [r3, #8]
 80013c8:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80013cc:	f7ff fb34 	bl	8000a38 <__aeabi_d2uiz>
 80013d0:	4601      	mov	r1, r0
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	697a      	ldr	r2, [r7, #20]
 80013d6:	4620      	mov	r0, r4
 80013d8:	f7ff fe5e 	bl	8001098 <setPWM>
				break;
 80013dc:	e064      	b.n	80014a8 <GotoPoint+0x228>
			case 3:
				setPWM(MotorDefs->Motor_4, s, !en, Motors);
 80013de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80013e0:	68dc      	ldr	r4, [r3, #12]
 80013e2:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80013e6:	f7ff fb27 	bl	8000a38 <__aeabi_d2uiz>
 80013ea:	4601      	mov	r1, r0
 80013ec:	697b      	ldr	r3, [r7, #20]
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	bf0c      	ite	eq
 80013f2:	2301      	moveq	r3, #1
 80013f4:	2300      	movne	r3, #0
 80013f6:	b2db      	uxtb	r3, r3
 80013f8:	461a      	mov	r2, r3
 80013fa:	683b      	ldr	r3, [r7, #0]
 80013fc:	4620      	mov	r0, r4
 80013fe:	f7ff fe4b 	bl	8001098 <setPWM>
				break;
 8001402:	e051      	b.n	80014a8 <GotoPoint+0x228>
//			case 3:
//				setPWM(MotorDefs->Motor_4, s, !en, Motors);
//				break;
//			}
		}
		else if (en == 1) {
 8001404:	697b      	ldr	r3, [r7, #20]
 8001406:	2b01      	cmp	r3, #1
 8001408:	d14e      	bne.n	80014a8 <GotoPoint+0x228>
			// for robot 0
			switch(i) {
 800140a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800140c:	2b03      	cmp	r3, #3
 800140e:	d84b      	bhi.n	80014a8 <GotoPoint+0x228>
 8001410:	a201      	add	r2, pc, #4	; (adr r2, 8001418 <GotoPoint+0x198>)
 8001412:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001416:	bf00      	nop
 8001418:	08001429 	.word	0x08001429
 800141c:	08001443 	.word	0x08001443
 8001420:	08001469 	.word	0x08001469
 8001424:	08001483 	.word	0x08001483
				case 0:
					setPWM(MotorDefs->Motor_1, s, en, Motors);
 8001428:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800142a:	681c      	ldr	r4, [r3, #0]
 800142c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001430:	f7ff fb02 	bl	8000a38 <__aeabi_d2uiz>
 8001434:	4601      	mov	r1, r0
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	697a      	ldr	r2, [r7, #20]
 800143a:	4620      	mov	r0, r4
 800143c:	f7ff fe2c 	bl	8001098 <setPWM>
					break;
 8001440:	e032      	b.n	80014a8 <GotoPoint+0x228>
				case 1:
					setPWM(MotorDefs->Motor_2, s, !en, Motors);
 8001442:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001444:	685c      	ldr	r4, [r3, #4]
 8001446:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800144a:	f7ff faf5 	bl	8000a38 <__aeabi_d2uiz>
 800144e:	4601      	mov	r1, r0
 8001450:	697b      	ldr	r3, [r7, #20]
 8001452:	2b00      	cmp	r3, #0
 8001454:	bf0c      	ite	eq
 8001456:	2301      	moveq	r3, #1
 8001458:	2300      	movne	r3, #0
 800145a:	b2db      	uxtb	r3, r3
 800145c:	461a      	mov	r2, r3
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	4620      	mov	r0, r4
 8001462:	f7ff fe19 	bl	8001098 <setPWM>
					break;
 8001466:	e01f      	b.n	80014a8 <GotoPoint+0x228>
				case 2:
					setPWM(MotorDefs->Motor_3, s, en, Motors);
 8001468:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800146a:	689c      	ldr	r4, [r3, #8]
 800146c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001470:	f7ff fae2 	bl	8000a38 <__aeabi_d2uiz>
 8001474:	4601      	mov	r1, r0
 8001476:	683b      	ldr	r3, [r7, #0]
 8001478:	697a      	ldr	r2, [r7, #20]
 800147a:	4620      	mov	r0, r4
 800147c:	f7ff fe0c 	bl	8001098 <setPWM>
					break;
 8001480:	e012      	b.n	80014a8 <GotoPoint+0x228>
				case 3:
					setPWM(MotorDefs->Motor_4, s, !en, Motors);
 8001482:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001484:	68dc      	ldr	r4, [r3, #12]
 8001486:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800148a:	f7ff fad5 	bl	8000a38 <__aeabi_d2uiz>
 800148e:	4601      	mov	r1, r0
 8001490:	697b      	ldr	r3, [r7, #20]
 8001492:	2b00      	cmp	r3, #0
 8001494:	bf0c      	ite	eq
 8001496:	2301      	moveq	r3, #1
 8001498:	2300      	movne	r3, #0
 800149a:	b2db      	uxtb	r3, r3
 800149c:	461a      	mov	r2, r3
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	4620      	mov	r0, r4
 80014a2:	f7ff fdf9 	bl	8001098 <setPWM>
					break;
 80014a6:	bf00      	nop
	for (int i = 0; i < 4; ++i) {
 80014a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014aa:	3301      	adds	r3, #1
 80014ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80014ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014b0:	2b03      	cmp	r3, #3
 80014b2:	f77f aeef 	ble.w	8001294 <GotoPoint+0x14>
//	en = s > 0 ? 1 : 0;
//	s = abs(s);
//	s = s > MAXSPEED ? MAXSPEED : s;
//	setPWM(&Motor_1, s, en, Motors);
//	setPWM(&Motor_3, s, en, Motors);
}
 80014b6:	bf00      	nop
 80014b8:	bf00      	nop
 80014ba:	3730      	adds	r7, #48	; 0x30
 80014bc:	46bd      	mov	sp, r7
 80014be:	bdb0      	pop	{r4, r5, r7, pc}
 80014c0:	53c8d4f1 	.word	0x53c8d4f1
 80014c4:	400921fb 	.word	0x400921fb
 80014c8:	20000000 	.word	0x20000000
 80014cc:	40668000 	.word	0x40668000
 80014d0:	403e0000 	.word	0x403e0000

080014d4 <AllMotorsZero>:

void AllMotorsZero(Motor_Defs *MotorDefs, Motors_t *Motors) {
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b082      	sub	sp, #8
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
 80014dc:	6039      	str	r1, [r7, #0]
	// For robot 0
	setPWM(MotorDefs->Motor_1, 0, 0, Motors);
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	6818      	ldr	r0, [r3, #0]
 80014e2:	683b      	ldr	r3, [r7, #0]
 80014e4:	2200      	movs	r2, #0
 80014e6:	2100      	movs	r1, #0
 80014e8:	f7ff fdd6 	bl	8001098 <setPWM>
	setPWM(MotorDefs->Motor_2, 0, 1, Motors);
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	6858      	ldr	r0, [r3, #4]
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	2201      	movs	r2, #1
 80014f4:	2100      	movs	r1, #0
 80014f6:	f7ff fdcf 	bl	8001098 <setPWM>
	setPWM(MotorDefs->Motor_3, 0, 1, Motors);
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	6898      	ldr	r0, [r3, #8]
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	2201      	movs	r2, #1
 8001502:	2100      	movs	r1, #0
 8001504:	f7ff fdc8 	bl	8001098 <setPWM>
	setPWM(MotorDefs->Motor_4, 0, 0, Motors);
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	68d8      	ldr	r0, [r3, #12]
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	2200      	movs	r2, #0
 8001510:	2100      	movs	r1, #0
 8001512:	f7ff fdc1 	bl	8001098 <setPWM>
	// For robot 1
//	setPWM(MotorDefs->Motor_1, 0, 1, Motors);
//	setPWM(MotorDefs->Motor_2, 0, 1, Motors);
//	setPWM(MotorDefs->Motor_3, 0, 0, Motors);
//	setPWM(MotorDefs->Motor_4, 0, 0, Motors);
}
 8001516:	bf00      	nop
 8001518:	3708      	adds	r7, #8
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}
	...

08001520 <GetBall>:
}

// this function gets the X and Y coordinate of the ball and
// converts them into polar coordinates then checks and sets the current zone
// and sets the motors with "GotoPoint" function from the "Motors.h" header
void GetBall(int x, int y, uint32_t speed, enum Zones *zone, Motors_t *Motors, Motor_Defs *MotorDefs, int *GoalCheck, SRDatas_t *SRDatas) {
 8001520:	b5b0      	push	{r4, r5, r7, lr}
 8001522:	b08a      	sub	sp, #40	; 0x28
 8001524:	af02      	add	r7, sp, #8
 8001526:	60f8      	str	r0, [r7, #12]
 8001528:	60b9      	str	r1, [r7, #8]
 800152a:	607a      	str	r2, [r7, #4]
 800152c:	603b      	str	r3, [r7, #0]
	double teta;
	double r;

	if (x >= 0) teta = -(atan((double)y / x) * RAD_TO_DEG - 90);
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	2b00      	cmp	r3, #0
 8001532:	db32      	blt.n	800159a <GetBall+0x7a>
 8001534:	68b8      	ldr	r0, [r7, #8]
 8001536:	f7fe ff3d 	bl	80003b4 <__aeabi_i2d>
 800153a:	4604      	mov	r4, r0
 800153c:	460d      	mov	r5, r1
 800153e:	68f8      	ldr	r0, [r7, #12]
 8001540:	f7fe ff38 	bl	80003b4 <__aeabi_i2d>
 8001544:	4602      	mov	r2, r0
 8001546:	460b      	mov	r3, r1
 8001548:	4620      	mov	r0, r4
 800154a:	4629      	mov	r1, r5
 800154c:	f7ff f8c6 	bl	80006dc <__aeabi_ddiv>
 8001550:	4602      	mov	r2, r0
 8001552:	460b      	mov	r3, r1
 8001554:	4610      	mov	r0, r2
 8001556:	4619      	mov	r1, r3
 8001558:	f005 fe42 	bl	80071e0 <atan>
 800155c:	f04f 0200 	mov.w	r2, #0
 8001560:	4b81      	ldr	r3, [pc, #516]	; (8001768 <GetBall+0x248>)
 8001562:	f7fe ff91 	bl	8000488 <__aeabi_dmul>
 8001566:	4602      	mov	r2, r0
 8001568:	460b      	mov	r3, r1
 800156a:	4610      	mov	r0, r2
 800156c:	4619      	mov	r1, r3
 800156e:	a37c      	add	r3, pc, #496	; (adr r3, 8001760 <GetBall+0x240>)
 8001570:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001574:	f7ff f8b2 	bl	80006dc <__aeabi_ddiv>
 8001578:	4602      	mov	r2, r0
 800157a:	460b      	mov	r3, r1
 800157c:	4610      	mov	r0, r2
 800157e:	4619      	mov	r1, r3
 8001580:	f04f 0200 	mov.w	r2, #0
 8001584:	4b79      	ldr	r3, [pc, #484]	; (800176c <GetBall+0x24c>)
 8001586:	f7fe fdc7 	bl	8000118 <__aeabi_dsub>
 800158a:	4602      	mov	r2, r0
 800158c:	460b      	mov	r3, r1
 800158e:	4611      	mov	r1, r2
 8001590:	61b9      	str	r1, [r7, #24]
 8001592:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001596:	61fb      	str	r3, [r7, #28]
 8001598:	e03d      	b.n	8001616 <GetBall+0xf6>
	else if (x < 0) teta = -((atan((double)y/ x) + PI)* RAD_TO_DEG - 90);
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	2b00      	cmp	r3, #0
 800159e:	da3a      	bge.n	8001616 <GetBall+0xf6>
 80015a0:	68b8      	ldr	r0, [r7, #8]
 80015a2:	f7fe ff07 	bl	80003b4 <__aeabi_i2d>
 80015a6:	4604      	mov	r4, r0
 80015a8:	460d      	mov	r5, r1
 80015aa:	68f8      	ldr	r0, [r7, #12]
 80015ac:	f7fe ff02 	bl	80003b4 <__aeabi_i2d>
 80015b0:	4602      	mov	r2, r0
 80015b2:	460b      	mov	r3, r1
 80015b4:	4620      	mov	r0, r4
 80015b6:	4629      	mov	r1, r5
 80015b8:	f7ff f890 	bl	80006dc <__aeabi_ddiv>
 80015bc:	4602      	mov	r2, r0
 80015be:	460b      	mov	r3, r1
 80015c0:	4610      	mov	r0, r2
 80015c2:	4619      	mov	r1, r3
 80015c4:	f005 fe0c 	bl	80071e0 <atan>
 80015c8:	a365      	add	r3, pc, #404	; (adr r3, 8001760 <GetBall+0x240>)
 80015ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015ce:	f7fe fda5 	bl	800011c <__adddf3>
 80015d2:	4602      	mov	r2, r0
 80015d4:	460b      	mov	r3, r1
 80015d6:	4610      	mov	r0, r2
 80015d8:	4619      	mov	r1, r3
 80015da:	f04f 0200 	mov.w	r2, #0
 80015de:	4b62      	ldr	r3, [pc, #392]	; (8001768 <GetBall+0x248>)
 80015e0:	f7fe ff52 	bl	8000488 <__aeabi_dmul>
 80015e4:	4602      	mov	r2, r0
 80015e6:	460b      	mov	r3, r1
 80015e8:	4610      	mov	r0, r2
 80015ea:	4619      	mov	r1, r3
 80015ec:	a35c      	add	r3, pc, #368	; (adr r3, 8001760 <GetBall+0x240>)
 80015ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015f2:	f7ff f873 	bl	80006dc <__aeabi_ddiv>
 80015f6:	4602      	mov	r2, r0
 80015f8:	460b      	mov	r3, r1
 80015fa:	4610      	mov	r0, r2
 80015fc:	4619      	mov	r1, r3
 80015fe:	f04f 0200 	mov.w	r2, #0
 8001602:	4b5a      	ldr	r3, [pc, #360]	; (800176c <GetBall+0x24c>)
 8001604:	f7fe fd88 	bl	8000118 <__aeabi_dsub>
 8001608:	4602      	mov	r2, r0
 800160a:	460b      	mov	r3, r1
 800160c:	4611      	mov	r1, r2
 800160e:	61b9      	str	r1, [r7, #24]
 8001610:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001614:	61fb      	str	r3, [r7, #28]
	r = sqrt(x * x + y * y);
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	fb03 f203 	mul.w	r2, r3, r3
 800161c:	68bb      	ldr	r3, [r7, #8]
 800161e:	fb03 f303 	mul.w	r3, r3, r3
 8001622:	4413      	add	r3, r2
 8001624:	4618      	mov	r0, r3
 8001626:	f7fe fec5 	bl	80003b4 <__aeabi_i2d>
 800162a:	4602      	mov	r2, r0
 800162c:	460b      	mov	r3, r1
 800162e:	4610      	mov	r0, r2
 8001630:	4619      	mov	r1, r3
 8001632:	f005 fdad 	bl	8007190 <sqrt>
 8001636:	e9c7 0104 	strd	r0, r1, [r7, #16]

	if (r >= ZONEDIS_TH) {
 800163a:	f04f 0200 	mov.w	r2, #0
 800163e:	4b4c      	ldr	r3, [pc, #304]	; (8001770 <GetBall+0x250>)
 8001640:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001644:	f7ff f9a6 	bl	8000994 <__aeabi_dcmpge>
 8001648:	4603      	mov	r3, r0
 800164a:	2b00      	cmp	r3, #0
 800164c:	d006      	beq.n	800165c <GetBall+0x13c>
		*zone = FAR;
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	2201      	movs	r2, #1
 8001652:	701a      	strb	r2, [r3, #0]
		*GoalCheck = 0;
 8001654:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001656:	2200      	movs	r2, #0
 8001658:	601a      	str	r2, [r3, #0]
 800165a:	e021      	b.n	80016a0 <GetBall+0x180>
	}
	else if (r < ZONEDIS_TH) {
 800165c:	f04f 0200 	mov.w	r2, #0
 8001660:	4b43      	ldr	r3, [pc, #268]	; (8001770 <GetBall+0x250>)
 8001662:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001666:	f7ff f981 	bl	800096c <__aeabi_dcmplt>
 800166a:	4603      	mov	r3, r0
 800166c:	2b00      	cmp	r3, #0
 800166e:	d014      	beq.n	800169a <GetBall+0x17a>
		*GoalCheck = 0;
 8001670:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001672:	2200      	movs	r2, #0
 8001674:	601a      	str	r2, [r3, #0]
		if (abs(teta) > GETBALLANGLE_TH) {
 8001676:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800167a:	f7ff f9b5 	bl	80009e8 <__aeabi_d2iz>
 800167e:	4603      	mov	r3, r0
 8001680:	2b00      	cmp	r3, #0
 8001682:	bfb8      	it	lt
 8001684:	425b      	neglt	r3, r3
 8001686:	2b0c      	cmp	r3, #12
 8001688:	dd03      	ble.n	8001692 <GetBall+0x172>
			*zone = CLOSE;
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	2202      	movs	r2, #2
 800168e:	701a      	strb	r2, [r3, #0]
 8001690:	e006      	b.n	80016a0 <GetBall+0x180>
		}
		else {
			*zone = BALLIN;
 8001692:	683b      	ldr	r3, [r7, #0]
 8001694:	2203      	movs	r2, #3
 8001696:	701a      	strb	r2, [r3, #0]
 8001698:	e002      	b.n	80016a0 <GetBall+0x180>
		}
	}
	else {
		*zone = NA;
 800169a:	683b      	ldr	r3, [r7, #0]
 800169c:	2200      	movs	r2, #0
 800169e:	701a      	strb	r2, [r3, #0]
	}

	switch (*zone) {
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	781b      	ldrb	r3, [r3, #0]
 80016a4:	2b03      	cmp	r3, #3
 80016a6:	d854      	bhi.n	8001752 <GetBall+0x232>
 80016a8:	a201      	add	r2, pc, #4	; (adr r2, 80016b0 <GetBall+0x190>)
 80016aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016ae:	bf00      	nop
 80016b0:	08001749 	.word	0x08001749
 80016b4:	080016c1 	.word	0x080016c1
 80016b8:	080016d3 	.word	0x080016d3
 80016bc:	08001731 	.word	0x08001731
	case FAR:
		GotoPoint(teta, speed, Motors, MotorDefs);
 80016c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80016c2:	9300      	str	r3, [sp, #0]
 80016c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80016c6:	687a      	ldr	r2, [r7, #4]
 80016c8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80016cc:	f7ff fdd8 	bl	8001280 <GotoPoint>
		break;
 80016d0:	e03f      	b.n	8001752 <GetBall+0x232>
	case CLOSE:
		if (teta >= 0) {
 80016d2:	f04f 0200 	mov.w	r2, #0
 80016d6:	f04f 0300 	mov.w	r3, #0
 80016da:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80016de:	f7ff f959 	bl	8000994 <__aeabi_dcmpge>
 80016e2:	4603      	mov	r3, r0
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d011      	beq.n	800170c <GetBall+0x1ec>
			GotoPoint(teta + GETBALLANGLE, speed, Motors, MotorDefs);
 80016e8:	f04f 0200 	mov.w	r2, #0
 80016ec:	4b21      	ldr	r3, [pc, #132]	; (8001774 <GetBall+0x254>)
 80016ee:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80016f2:	f7fe fd13 	bl	800011c <__adddf3>
 80016f6:	4602      	mov	r2, r0
 80016f8:	460b      	mov	r3, r1
 80016fa:	4610      	mov	r0, r2
 80016fc:	4619      	mov	r1, r3
 80016fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001700:	9300      	str	r3, [sp, #0]
 8001702:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001704:	687a      	ldr	r2, [r7, #4]
 8001706:	f7ff fdbb 	bl	8001280 <GotoPoint>
		}
		else {
			GotoPoint(teta - GETBALLANGLE, speed, Motors, MotorDefs);
		}
		break;
 800170a:	e022      	b.n	8001752 <GetBall+0x232>
			GotoPoint(teta - GETBALLANGLE, speed, Motors, MotorDefs);
 800170c:	f04f 0200 	mov.w	r2, #0
 8001710:	4b18      	ldr	r3, [pc, #96]	; (8001774 <GetBall+0x254>)
 8001712:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001716:	f7fe fcff 	bl	8000118 <__aeabi_dsub>
 800171a:	4602      	mov	r2, r0
 800171c:	460b      	mov	r3, r1
 800171e:	4610      	mov	r0, r2
 8001720:	4619      	mov	r1, r3
 8001722:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001724:	9300      	str	r3, [sp, #0]
 8001726:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001728:	687a      	ldr	r2, [r7, #4]
 800172a:	f7ff fda9 	bl	8001280 <GotoPoint>
		break;
 800172e:	e010      	b.n	8001752 <GetBall+0x232>
	case BALLIN:
		GotoPoint(0, speed + 5, Motors, MotorDefs);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	1d5a      	adds	r2, r3, #5
 8001734:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001736:	9300      	str	r3, [sp, #0]
 8001738:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800173a:	f04f 0000 	mov.w	r0, #0
 800173e:	f04f 0100 	mov.w	r1, #0
 8001742:	f7ff fd9d 	bl	8001280 <GotoPoint>
		break;
 8001746:	e004      	b.n	8001752 <GetBall+0x232>
	case NA:
		AllMotorsZero(MotorDefs, Motors);
 8001748:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800174a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800174c:	f7ff fec2 	bl	80014d4 <AllMotorsZero>
		break;
 8001750:	bf00      	nop
	}
}
 8001752:	bf00      	nop
 8001754:	3720      	adds	r7, #32
 8001756:	46bd      	mov	sp, r7
 8001758:	bdb0      	pop	{r4, r5, r7, pc}
 800175a:	bf00      	nop
 800175c:	f3af 8000 	nop.w
 8001760:	53c8d4f1 	.word	0x53c8d4f1
 8001764:	400921fb 	.word	0x400921fb
 8001768:	40668000 	.word	0x40668000
 800176c:	40568000 	.word	0x40568000
 8001770:	40504000 	.word	0x40504000
 8001774:	40418000 	.word	0x40418000

08001778 <Attack>:
		*GoalCheck = 1;
		AllMotorsZero(MotorDefs, Motors);
	}
}

void Attack(int x, int y, Motors_t *Motors, Motor_Defs *MotorDefs, SRDatas_t *SRDatas, enum Zones *zone, enum AttackZones *attackZone, int speed) {
 8001778:	b5b0      	push	{r4, r5, r7, lr}
 800177a:	b08a      	sub	sp, #40	; 0x28
 800177c:	af02      	add	r7, sp, #8
 800177e:	60f8      	str	r0, [r7, #12]
 8001780:	60b9      	str	r1, [r7, #8]
 8001782:	607a      	str	r2, [r7, #4]
 8001784:	603b      	str	r3, [r7, #0]
	double teta;
	double r;

	if (x >= 0) teta = -(atan((double)y / x) * RAD_TO_DEG - 90);
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	2b00      	cmp	r3, #0
 800178a:	db32      	blt.n	80017f2 <Attack+0x7a>
 800178c:	68b8      	ldr	r0, [r7, #8]
 800178e:	f7fe fe11 	bl	80003b4 <__aeabi_i2d>
 8001792:	4604      	mov	r4, r0
 8001794:	460d      	mov	r5, r1
 8001796:	68f8      	ldr	r0, [r7, #12]
 8001798:	f7fe fe0c 	bl	80003b4 <__aeabi_i2d>
 800179c:	4602      	mov	r2, r0
 800179e:	460b      	mov	r3, r1
 80017a0:	4620      	mov	r0, r4
 80017a2:	4629      	mov	r1, r5
 80017a4:	f7fe ff9a 	bl	80006dc <__aeabi_ddiv>
 80017a8:	4602      	mov	r2, r0
 80017aa:	460b      	mov	r3, r1
 80017ac:	4610      	mov	r0, r2
 80017ae:	4619      	mov	r1, r3
 80017b0:	f005 fd16 	bl	80071e0 <atan>
 80017b4:	f04f 0200 	mov.w	r2, #0
 80017b8:	4b77      	ldr	r3, [pc, #476]	; (8001998 <Attack+0x220>)
 80017ba:	f7fe fe65 	bl	8000488 <__aeabi_dmul>
 80017be:	4602      	mov	r2, r0
 80017c0:	460b      	mov	r3, r1
 80017c2:	4610      	mov	r0, r2
 80017c4:	4619      	mov	r1, r3
 80017c6:	a372      	add	r3, pc, #456	; (adr r3, 8001990 <Attack+0x218>)
 80017c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017cc:	f7fe ff86 	bl	80006dc <__aeabi_ddiv>
 80017d0:	4602      	mov	r2, r0
 80017d2:	460b      	mov	r3, r1
 80017d4:	4610      	mov	r0, r2
 80017d6:	4619      	mov	r1, r3
 80017d8:	f04f 0200 	mov.w	r2, #0
 80017dc:	4b6f      	ldr	r3, [pc, #444]	; (800199c <Attack+0x224>)
 80017de:	f7fe fc9b 	bl	8000118 <__aeabi_dsub>
 80017e2:	4602      	mov	r2, r0
 80017e4:	460b      	mov	r3, r1
 80017e6:	4611      	mov	r1, r2
 80017e8:	61b9      	str	r1, [r7, #24]
 80017ea:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80017ee:	61fb      	str	r3, [r7, #28]
 80017f0:	e03d      	b.n	800186e <Attack+0xf6>
	else if (x < 0) teta = -((atan((double)y/ x) + PI)* RAD_TO_DEG - 90);
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	da3a      	bge.n	800186e <Attack+0xf6>
 80017f8:	68b8      	ldr	r0, [r7, #8]
 80017fa:	f7fe fddb 	bl	80003b4 <__aeabi_i2d>
 80017fe:	4604      	mov	r4, r0
 8001800:	460d      	mov	r5, r1
 8001802:	68f8      	ldr	r0, [r7, #12]
 8001804:	f7fe fdd6 	bl	80003b4 <__aeabi_i2d>
 8001808:	4602      	mov	r2, r0
 800180a:	460b      	mov	r3, r1
 800180c:	4620      	mov	r0, r4
 800180e:	4629      	mov	r1, r5
 8001810:	f7fe ff64 	bl	80006dc <__aeabi_ddiv>
 8001814:	4602      	mov	r2, r0
 8001816:	460b      	mov	r3, r1
 8001818:	4610      	mov	r0, r2
 800181a:	4619      	mov	r1, r3
 800181c:	f005 fce0 	bl	80071e0 <atan>
 8001820:	a35b      	add	r3, pc, #364	; (adr r3, 8001990 <Attack+0x218>)
 8001822:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001826:	f7fe fc79 	bl	800011c <__adddf3>
 800182a:	4602      	mov	r2, r0
 800182c:	460b      	mov	r3, r1
 800182e:	4610      	mov	r0, r2
 8001830:	4619      	mov	r1, r3
 8001832:	f04f 0200 	mov.w	r2, #0
 8001836:	4b58      	ldr	r3, [pc, #352]	; (8001998 <Attack+0x220>)
 8001838:	f7fe fe26 	bl	8000488 <__aeabi_dmul>
 800183c:	4602      	mov	r2, r0
 800183e:	460b      	mov	r3, r1
 8001840:	4610      	mov	r0, r2
 8001842:	4619      	mov	r1, r3
 8001844:	a352      	add	r3, pc, #328	; (adr r3, 8001990 <Attack+0x218>)
 8001846:	e9d3 2300 	ldrd	r2, r3, [r3]
 800184a:	f7fe ff47 	bl	80006dc <__aeabi_ddiv>
 800184e:	4602      	mov	r2, r0
 8001850:	460b      	mov	r3, r1
 8001852:	4610      	mov	r0, r2
 8001854:	4619      	mov	r1, r3
 8001856:	f04f 0200 	mov.w	r2, #0
 800185a:	4b50      	ldr	r3, [pc, #320]	; (800199c <Attack+0x224>)
 800185c:	f7fe fc5c 	bl	8000118 <__aeabi_dsub>
 8001860:	4602      	mov	r2, r0
 8001862:	460b      	mov	r3, r1
 8001864:	4611      	mov	r1, r2
 8001866:	61b9      	str	r1, [r7, #24]
 8001868:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800186c:	61fb      	str	r3, [r7, #28]
	r = sqrt(x * x + y * y);
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	fb03 f203 	mul.w	r2, r3, r3
 8001874:	68bb      	ldr	r3, [r7, #8]
 8001876:	fb03 f303 	mul.w	r3, r3, r3
 800187a:	4413      	add	r3, r2
 800187c:	4618      	mov	r0, r3
 800187e:	f7fe fd99 	bl	80003b4 <__aeabi_i2d>
 8001882:	4602      	mov	r2, r0
 8001884:	460b      	mov	r3, r1
 8001886:	4610      	mov	r0, r2
 8001888:	4619      	mov	r1, r3
 800188a:	f005 fc81 	bl	8007190 <sqrt>
 800188e:	e9c7 0104 	strd	r0, r1, [r7, #16]

	if (r >= ZONEDIS_TH) {
 8001892:	f04f 0200 	mov.w	r2, #0
 8001896:	4b42      	ldr	r3, [pc, #264]	; (80019a0 <Attack+0x228>)
 8001898:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800189c:	f7ff f87a 	bl	8000994 <__aeabi_dcmpge>
 80018a0:	4603      	mov	r3, r0
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d003      	beq.n	80018ae <Attack+0x136>
		*zone = FAR;
 80018a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018a8:	2201      	movs	r2, #1
 80018aa:	701a      	strb	r2, [r3, #0]
		return;
 80018ac:	e06a      	b.n	8001984 <Attack+0x20c>
	}
	else if (r < ZONEDIS_TH) {
 80018ae:	f04f 0200 	mov.w	r2, #0
 80018b2:	4b3b      	ldr	r3, [pc, #236]	; (80019a0 <Attack+0x228>)
 80018b4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80018b8:	f7ff f858 	bl	800096c <__aeabi_dcmplt>
 80018bc:	4603      	mov	r3, r0
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d037      	beq.n	8001932 <Attack+0x1ba>
		if (abs(teta) > AGETBALLANGLE_TH) {
 80018c2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80018c6:	f7ff f88f 	bl	80009e8 <__aeabi_d2iz>
 80018ca:	4603      	mov	r3, r0
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	bfb8      	it	lt
 80018d0:	425b      	neglt	r3, r3
 80018d2:	2b0e      	cmp	r3, #14
 80018d4:	dd03      	ble.n	80018de <Attack+0x166>
			*zone = CLOSE;
 80018d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018d8:	2202      	movs	r2, #2
 80018da:	701a      	strb	r2, [r3, #0]
			return;
 80018dc:	e052      	b.n	8001984 <Attack+0x20c>
		}
		else {
			if (abs(SRDatas->SR_l - SRDatas->SR_r) > ATTACKZONE_TH) {
 80018de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80018e0:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80018e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80018e6:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80018ea:	f7fe fc15 	bl	8000118 <__aeabi_dsub>
 80018ee:	4602      	mov	r2, r0
 80018f0:	460b      	mov	r3, r1
 80018f2:	4610      	mov	r0, r2
 80018f4:	4619      	mov	r1, r3
 80018f6:	f7ff f877 	bl	80009e8 <__aeabi_d2iz>
 80018fa:	4603      	mov	r3, r0
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	bfb8      	it	lt
 8001900:	425b      	neglt	r3, r3
 8001902:	2b4b      	cmp	r3, #75	; 0x4b
 8001904:	dd12      	ble.n	800192c <Attack+0x1b4>
				if (SRDatas->SR_l > SRDatas->SR_r) {
 8001906:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001908:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800190c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800190e:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001912:	f7ff f849 	bl	80009a8 <__aeabi_dcmpgt>
 8001916:	4603      	mov	r3, r0
 8001918:	2b00      	cmp	r3, #0
 800191a:	d003      	beq.n	8001924 <Attack+0x1ac>
					*attackZone = RIGHT;
 800191c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800191e:	2202      	movs	r2, #2
 8001920:	701a      	strb	r2, [r3, #0]
 8001922:	e006      	b.n	8001932 <Attack+0x1ba>
				}
				else {
					*attackZone = LEFT;
 8001924:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001926:	2200      	movs	r2, #0
 8001928:	701a      	strb	r2, [r3, #0]
 800192a:	e002      	b.n	8001932 <Attack+0x1ba>
				}
			} else {
				*attackZone = MIDDLE;
 800192c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800192e:	2201      	movs	r2, #1
 8001930:	701a      	strb	r2, [r3, #0]
			}
		}
	}

	switch (*attackZone) {
 8001932:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001934:	781b      	ldrb	r3, [r3, #0]
 8001936:	2b02      	cmp	r3, #2
 8001938:	d010      	beq.n	800195c <Attack+0x1e4>
 800193a:	2b02      	cmp	r3, #2
 800193c:	dc22      	bgt.n	8001984 <Attack+0x20c>
 800193e:	2b00      	cmp	r3, #0
 8001940:	d016      	beq.n	8001970 <Attack+0x1f8>
 8001942:	2b01      	cmp	r3, #1
 8001944:	d11e      	bne.n	8001984 <Attack+0x20c>
	case MIDDLE:
		GotoPoint(0, speed, Motors, MotorDefs);
 8001946:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	9300      	str	r3, [sp, #0]
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	f04f 0000 	mov.w	r0, #0
 8001952:	f04f 0100 	mov.w	r1, #0
 8001956:	f7ff fc93 	bl	8001280 <GotoPoint>
		break;
 800195a:	e013      	b.n	8001984 <Attack+0x20c>
	case RIGHT:
		GotoPoint(-ATTACKANGLE, speed, Motors, MotorDefs);
 800195c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	9300      	str	r3, [sp, #0]
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	f04f 0000 	mov.w	r0, #0
 8001968:	490e      	ldr	r1, [pc, #56]	; (80019a4 <Attack+0x22c>)
 800196a:	f7ff fc89 	bl	8001280 <GotoPoint>
		break;
 800196e:	e009      	b.n	8001984 <Attack+0x20c>
	case LEFT:
		GotoPoint(ATTACKANGLE, speed, Motors, MotorDefs);
 8001970:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	9300      	str	r3, [sp, #0]
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	f04f 0000 	mov.w	r0, #0
 800197c:	490a      	ldr	r1, [pc, #40]	; (80019a8 <Attack+0x230>)
 800197e:	f7ff fc7f 	bl	8001280 <GotoPoint>
		break;
 8001982:	bf00      	nop
	}
}
 8001984:	3720      	adds	r7, #32
 8001986:	46bd      	mov	sp, r7
 8001988:	bdb0      	pop	{r4, r5, r7, pc}
 800198a:	bf00      	nop
 800198c:	f3af 8000 	nop.w
 8001990:	53c8d4f1 	.word	0x53c8d4f1
 8001994:	400921fb 	.word	0x400921fb
 8001998:	40668000 	.word	0x40668000
 800199c:	40568000 	.word	0x40568000
 80019a0:	40504000 	.word	0x40504000
 80019a4:	c0240000 	.word	0xc0240000
 80019a8:	40240000 	.word	0x40240000

080019ac <delay_us>:
 *      Author: dalvi
 */

#include <SR04.h>

void delay_us(int us) {
 80019ac:	b480      	push	{r7}
 80019ae:	b083      	sub	sp, #12
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COUNTER(&htim3, 0);
 80019b4:	4b08      	ldr	r3, [pc, #32]	; (80019d8 <delay_us+0x2c>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	2200      	movs	r2, #0
 80019ba:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim3) < us);
 80019bc:	bf00      	nop
 80019be:	4b06      	ldr	r3, [pc, #24]	; (80019d8 <delay_us+0x2c>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	429a      	cmp	r2, r3
 80019c8:	d3f9      	bcc.n	80019be <delay_us+0x12>
}
 80019ca:	bf00      	nop
 80019cc:	bf00      	nop
 80019ce:	370c      	adds	r7, #12
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bc80      	pop	{r7}
 80019d4:	4770      	bx	lr
 80019d6:	bf00      	nop
 80019d8:	20000470 	.word	0x20000470

080019dc <ReadSR>:

void ReadSR(SRDef_t *sr, SRDatas_t *Datas) {
 80019dc:	b580      	push	{r7, lr}
 80019de:	b084      	sub	sp, #16
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
 80019e4:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(sr->trig_port, sr->trig_pin, GPIO_PIN_RESET);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	6858      	ldr	r0, [r3, #4]
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	881b      	ldrh	r3, [r3, #0]
 80019ee:	2200      	movs	r2, #0
 80019f0:	4619      	mov	r1, r3
 80019f2:	f002 f9fc 	bl	8003dee <HAL_GPIO_WritePin>
	delay_us(2);
 80019f6:	2002      	movs	r0, #2
 80019f8:	f7ff ffd8 	bl	80019ac <delay_us>
	HAL_GPIO_WritePin(sr->trig_port, sr->trig_pin, GPIO_PIN_SET);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	6858      	ldr	r0, [r3, #4]
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	881b      	ldrh	r3, [r3, #0]
 8001a04:	2201      	movs	r2, #1
 8001a06:	4619      	mov	r1, r3
 8001a08:	f002 f9f1 	bl	8003dee <HAL_GPIO_WritePin>
	delay_us(10);
 8001a0c:	200a      	movs	r0, #10
 8001a0e:	f7ff ffcd 	bl	80019ac <delay_us>
    HAL_GPIO_WritePin(sr->trig_port, sr->trig_pin, GPIO_PIN_RESET);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	6858      	ldr	r0, [r3, #4]
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	881b      	ldrh	r3, [r3, #0]
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	4619      	mov	r1, r3
 8001a1e:	f002 f9e6 	bl	8003dee <HAL_GPIO_WritePin>

    while(HAL_GPIO_ReadPin(sr->echo_port, sr->echo_pin) != GPIO_PIN_SET);
 8001a22:	bf00      	nop
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	68da      	ldr	r2, [r3, #12]
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	891b      	ldrh	r3, [r3, #8]
 8001a2c:	4619      	mov	r1, r3
 8001a2e:	4610      	mov	r0, r2
 8001a30:	f002 f9c6 	bl	8003dc0 <HAL_GPIO_ReadPin>
 8001a34:	4603      	mov	r3, r0
 8001a36:	2b01      	cmp	r3, #1
 8001a38:	d1f4      	bne.n	8001a24 <ReadSR+0x48>

    uint32_t t = 0;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	60fb      	str	r3, [r7, #12]
    while(HAL_GPIO_ReadPin(sr->echo_port, sr->echo_pin) == GPIO_PIN_SET) {
 8001a3e:	e00a      	b.n	8001a56 <ReadSR+0x7a>
    	t++;
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	3301      	adds	r3, #1
 8001a44:	60fb      	str	r3, [r7, #12]
    	delay_us(1);
 8001a46:	2001      	movs	r0, #1
 8001a48:	f7ff ffb0 	bl	80019ac <delay_us>

    	if (t > 3000) break;
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001a52:	4293      	cmp	r3, r2
 8001a54:	d80b      	bhi.n	8001a6e <ReadSR+0x92>
    while(HAL_GPIO_ReadPin(sr->echo_port, sr->echo_pin) == GPIO_PIN_SET) {
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	68da      	ldr	r2, [r3, #12]
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	891b      	ldrh	r3, [r3, #8]
 8001a5e:	4619      	mov	r1, r3
 8001a60:	4610      	mov	r0, r2
 8001a62:	f002 f9ad 	bl	8003dc0 <HAL_GPIO_ReadPin>
 8001a66:	4603      	mov	r3, r0
 8001a68:	2b01      	cmp	r3, #1
 8001a6a:	d0e9      	beq.n	8001a40 <ReadSR+0x64>
 8001a6c:	e000      	b.n	8001a70 <ReadSR+0x94>
    	if (t > 3000) break;
 8001a6e:	bf00      	nop
    }

    switch(sr->num) {
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	691b      	ldr	r3, [r3, #16]
 8001a74:	2b03      	cmp	r3, #3
 8001a76:	d857      	bhi.n	8001b28 <ReadSR+0x14c>
 8001a78:	a201      	add	r2, pc, #4	; (adr r2, 8001a80 <ReadSR+0xa4>)
 8001a7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a7e:	bf00      	nop
 8001a80:	08001a91 	.word	0x08001a91
 8001a84:	08001ab7 	.word	0x08001ab7
 8001a88:	08001add 	.word	0x08001add
 8001a8c:	08001b03 	.word	0x08001b03
    case 0:
    	Datas->SR_f = (double)(t*340)/2000;
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	f44f 72aa 	mov.w	r2, #340	; 0x154
 8001a96:	fb02 f303 	mul.w	r3, r2, r3
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	f7fe fc7a 	bl	8000394 <__aeabi_ui2d>
 8001aa0:	f04f 0200 	mov.w	r2, #0
 8001aa4:	4b22      	ldr	r3, [pc, #136]	; (8001b30 <ReadSR+0x154>)
 8001aa6:	f7fe fe19 	bl	80006dc <__aeabi_ddiv>
 8001aaa:	4602      	mov	r2, r0
 8001aac:	460b      	mov	r3, r1
 8001aae:	6839      	ldr	r1, [r7, #0]
 8001ab0:	e9c1 2300 	strd	r2, r3, [r1]
    	break;
 8001ab4:	e038      	b.n	8001b28 <ReadSR+0x14c>
    case 1:
    	Datas->SR_b = (double)(t*340)/2000;
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	f44f 72aa 	mov.w	r2, #340	; 0x154
 8001abc:	fb02 f303 	mul.w	r3, r2, r3
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	f7fe fc67 	bl	8000394 <__aeabi_ui2d>
 8001ac6:	f04f 0200 	mov.w	r2, #0
 8001aca:	4b19      	ldr	r3, [pc, #100]	; (8001b30 <ReadSR+0x154>)
 8001acc:	f7fe fe06 	bl	80006dc <__aeabi_ddiv>
 8001ad0:	4602      	mov	r2, r0
 8001ad2:	460b      	mov	r3, r1
 8001ad4:	6839      	ldr	r1, [r7, #0]
 8001ad6:	e9c1 2302 	strd	r2, r3, [r1, #8]
    	break;
 8001ada:	e025      	b.n	8001b28 <ReadSR+0x14c>
    case 2:
    	Datas->SR_l = (double)(t*340)/2000;
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	f44f 72aa 	mov.w	r2, #340	; 0x154
 8001ae2:	fb02 f303 	mul.w	r3, r2, r3
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	f7fe fc54 	bl	8000394 <__aeabi_ui2d>
 8001aec:	f04f 0200 	mov.w	r2, #0
 8001af0:	4b0f      	ldr	r3, [pc, #60]	; (8001b30 <ReadSR+0x154>)
 8001af2:	f7fe fdf3 	bl	80006dc <__aeabi_ddiv>
 8001af6:	4602      	mov	r2, r0
 8001af8:	460b      	mov	r3, r1
 8001afa:	6839      	ldr	r1, [r7, #0]
 8001afc:	e9c1 2304 	strd	r2, r3, [r1, #16]
    	break;
 8001b00:	e012      	b.n	8001b28 <ReadSR+0x14c>
    case 3:
    	Datas->SR_r = (double)(t*340)/2000;
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	f44f 72aa 	mov.w	r2, #340	; 0x154
 8001b08:	fb02 f303 	mul.w	r3, r2, r3
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	f7fe fc41 	bl	8000394 <__aeabi_ui2d>
 8001b12:	f04f 0200 	mov.w	r2, #0
 8001b16:	4b06      	ldr	r3, [pc, #24]	; (8001b30 <ReadSR+0x154>)
 8001b18:	f7fe fde0 	bl	80006dc <__aeabi_ddiv>
 8001b1c:	4602      	mov	r2, r0
 8001b1e:	460b      	mov	r3, r1
 8001b20:	6839      	ldr	r1, [r7, #0]
 8001b22:	e9c1 2306 	strd	r2, r3, [r1, #24]
    	break;
 8001b26:	bf00      	nop
    }
}
 8001b28:	bf00      	nop
 8001b2a:	3710      	adds	r7, #16
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bd80      	pop	{r7, pc}
 8001b30:	409f4000 	.word	0x409f4000

08001b34 <ReadAllSRs>:


void ReadAllSRs(SRDef_t *Srs[4], int c, SRDatas_t *Datas) {
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b086      	sub	sp, #24
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	60f8      	str	r0, [r7, #12]
 8001b3c:	60b9      	str	r1, [r7, #8]
 8001b3e:	607a      	str	r2, [r7, #4]
	for(int i = 0; i < c; i++) {
 8001b40:	2300      	movs	r3, #0
 8001b42:	617b      	str	r3, [r7, #20]
 8001b44:	e00b      	b.n	8001b5e <ReadAllSRs+0x2a>
		ReadSR(Srs[i], Datas);
 8001b46:	697b      	ldr	r3, [r7, #20]
 8001b48:	009b      	lsls	r3, r3, #2
 8001b4a:	68fa      	ldr	r2, [r7, #12]
 8001b4c:	4413      	add	r3, r2
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	6879      	ldr	r1, [r7, #4]
 8001b52:	4618      	mov	r0, r3
 8001b54:	f7ff ff42 	bl	80019dc <ReadSR>
	for(int i = 0; i < c; i++) {
 8001b58:	697b      	ldr	r3, [r7, #20]
 8001b5a:	3301      	adds	r3, #1
 8001b5c:	617b      	str	r3, [r7, #20]
 8001b5e:	697a      	ldr	r2, [r7, #20]
 8001b60:	68bb      	ldr	r3, [r7, #8]
 8001b62:	429a      	cmp	r2, r3
 8001b64:	dbef      	blt.n	8001b46 <ReadAllSRs+0x12>
	}
}
 8001b66:	bf00      	nop
 8001b68:	bf00      	nop
 8001b6a:	3718      	adds	r7, #24
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	bd80      	pop	{r7, pc}

08001b70 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b088      	sub	sp, #32
 8001b74:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b76:	f107 0310 	add.w	r3, r7, #16
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	601a      	str	r2, [r3, #0]
 8001b7e:	605a      	str	r2, [r3, #4]
 8001b80:	609a      	str	r2, [r3, #8]
 8001b82:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b84:	4b50      	ldr	r3, [pc, #320]	; (8001cc8 <MX_GPIO_Init+0x158>)
 8001b86:	699b      	ldr	r3, [r3, #24]
 8001b88:	4a4f      	ldr	r2, [pc, #316]	; (8001cc8 <MX_GPIO_Init+0x158>)
 8001b8a:	f043 0310 	orr.w	r3, r3, #16
 8001b8e:	6193      	str	r3, [r2, #24]
 8001b90:	4b4d      	ldr	r3, [pc, #308]	; (8001cc8 <MX_GPIO_Init+0x158>)
 8001b92:	699b      	ldr	r3, [r3, #24]
 8001b94:	f003 0310 	and.w	r3, r3, #16
 8001b98:	60fb      	str	r3, [r7, #12]
 8001b9a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b9c:	4b4a      	ldr	r3, [pc, #296]	; (8001cc8 <MX_GPIO_Init+0x158>)
 8001b9e:	699b      	ldr	r3, [r3, #24]
 8001ba0:	4a49      	ldr	r2, [pc, #292]	; (8001cc8 <MX_GPIO_Init+0x158>)
 8001ba2:	f043 0304 	orr.w	r3, r3, #4
 8001ba6:	6193      	str	r3, [r2, #24]
 8001ba8:	4b47      	ldr	r3, [pc, #284]	; (8001cc8 <MX_GPIO_Init+0x158>)
 8001baa:	699b      	ldr	r3, [r3, #24]
 8001bac:	f003 0304 	and.w	r3, r3, #4
 8001bb0:	60bb      	str	r3, [r7, #8]
 8001bb2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bb4:	4b44      	ldr	r3, [pc, #272]	; (8001cc8 <MX_GPIO_Init+0x158>)
 8001bb6:	699b      	ldr	r3, [r3, #24]
 8001bb8:	4a43      	ldr	r2, [pc, #268]	; (8001cc8 <MX_GPIO_Init+0x158>)
 8001bba:	f043 0308 	orr.w	r3, r3, #8
 8001bbe:	6193      	str	r3, [r2, #24]
 8001bc0:	4b41      	ldr	r3, [pc, #260]	; (8001cc8 <MX_GPIO_Init+0x158>)
 8001bc2:	699b      	ldr	r3, [r3, #24]
 8001bc4:	f003 0308 	and.w	r3, r3, #8
 8001bc8:	607b      	str	r3, [r7, #4]
 8001bca:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001bcc:	2200      	movs	r2, #0
 8001bce:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001bd2:	483e      	ldr	r0, [pc, #248]	; (8001ccc <MX_GPIO_Init+0x15c>)
 8001bd4:	f002 f90b 	bl	8003dee <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SR4TRIG_Pin|SR2TRIG_Pin|GPIO_PIN_4|GPIO_PIN_6
 8001bd8:	2200      	movs	r2, #0
 8001bda:	f241 1153 	movw	r1, #4435	; 0x1153
 8001bde:	483c      	ldr	r0, [pc, #240]	; (8001cd0 <MX_GPIO_Init+0x160>)
 8001be0:	f002 f905 	bl	8003dee <HAL_GPIO_WritePin>
                          |GPIO_PIN_8|GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SR3TRIG_Pin|SR1TRIG_Pin, GPIO_PIN_RESET);
 8001be4:	2200      	movs	r2, #0
 8001be6:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8001bea:	483a      	ldr	r0, [pc, #232]	; (8001cd4 <MX_GPIO_Init+0x164>)
 8001bec:	f002 f8ff 	bl	8003dee <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001bf0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001bf4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bfe:	2302      	movs	r3, #2
 8001c00:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c02:	f107 0310 	add.w	r3, r7, #16
 8001c06:	4619      	mov	r1, r3
 8001c08:	4830      	ldr	r0, [pc, #192]	; (8001ccc <MX_GPIO_Init+0x15c>)
 8001c0a:	f001 ff55 	bl	8003ab8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SR4ECHO_Pin;
 8001c0e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001c12:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c14:	2300      	movs	r3, #0
 8001c16:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SR4ECHO_GPIO_Port, &GPIO_InitStruct);
 8001c1c:	f107 0310 	add.w	r3, r7, #16
 8001c20:	4619      	mov	r1, r3
 8001c22:	482a      	ldr	r0, [pc, #168]	; (8001ccc <MX_GPIO_Init+0x15c>)
 8001c24:	f001 ff48 	bl	8003ab8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PA4 PA6
                           PA8 PA12 */
  GPIO_InitStruct.Pin = SR4TRIG_Pin|SR2TRIG_Pin|GPIO_PIN_4|GPIO_PIN_6
 8001c28:	f241 1353 	movw	r3, #4435	; 0x1153
 8001c2c:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_8|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c2e:	2301      	movs	r3, #1
 8001c30:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c32:	2300      	movs	r3, #0
 8001c34:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c36:	2302      	movs	r3, #2
 8001c38:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c3a:	f107 0310 	add.w	r3, r7, #16
 8001c3e:	4619      	mov	r1, r3
 8001c40:	4823      	ldr	r0, [pc, #140]	; (8001cd0 <MX_GPIO_Init+0x160>)
 8001c42:	f001 ff39 	bl	8003ab8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PA7 */
  GPIO_InitStruct.Pin = SR2ECHO_Pin|GPIO_PIN_7;
 8001c46:	2384      	movs	r3, #132	; 0x84
 8001c48:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c52:	f107 0310 	add.w	r3, r7, #16
 8001c56:	4619      	mov	r1, r3
 8001c58:	481d      	ldr	r0, [pc, #116]	; (8001cd0 <MX_GPIO_Init+0x160>)
 8001c5a:	f001 ff2d 	bl	8003ab8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PBPin PBPin */
  GPIO_InitStruct.Pin = GPIO_PIN_1|SR3ECHO_Pin|SR1ECHO_Pin;
 8001c5e:	f249 0302 	movw	r3, #36866	; 0x9002
 8001c62:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c64:	2300      	movs	r3, #0
 8001c66:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c6c:	f107 0310 	add.w	r3, r7, #16
 8001c70:	4619      	mov	r1, r3
 8001c72:	4818      	ldr	r0, [pc, #96]	; (8001cd4 <MX_GPIO_Init+0x164>)
 8001c74:	f001 ff20 	bl	8003ab8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001c78:	2304      	movs	r3, #4
 8001c7a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001c7c:	4b16      	ldr	r3, [pc, #88]	; (8001cd8 <MX_GPIO_Init+0x168>)
 8001c7e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c80:	2300      	movs	r3, #0
 8001c82:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c84:	f107 0310 	add.w	r3, r7, #16
 8001c88:	4619      	mov	r1, r3
 8001c8a:	4812      	ldr	r0, [pc, #72]	; (8001cd4 <MX_GPIO_Init+0x164>)
 8001c8c:	f001 ff14 	bl	8003ab8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = SR3TRIG_Pin|SR1TRIG_Pin;
 8001c90:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8001c94:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c96:	2301      	movs	r3, #1
 8001c98:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c9e:	2302      	movs	r3, #2
 8001ca0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ca2:	f107 0310 	add.w	r3, r7, #16
 8001ca6:	4619      	mov	r1, r3
 8001ca8:	480a      	ldr	r0, [pc, #40]	; (8001cd4 <MX_GPIO_Init+0x164>)
 8001caa:	f001 ff05 	bl	8003ab8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 1, 0);
 8001cae:	2200      	movs	r2, #0
 8001cb0:	2101      	movs	r1, #1
 8001cb2:	2008      	movs	r0, #8
 8001cb4:	f001 fec9 	bl	8003a4a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8001cb8:	2008      	movs	r0, #8
 8001cba:	f001 fee2 	bl	8003a82 <HAL_NVIC_EnableIRQ>

}
 8001cbe:	bf00      	nop
 8001cc0:	3720      	adds	r7, #32
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}
 8001cc6:	bf00      	nop
 8001cc8:	40021000 	.word	0x40021000
 8001ccc:	40011000 	.word	0x40011000
 8001cd0:	40010800 	.word	0x40010800
 8001cd4:	40010c00 	.word	0x40010c00
 8001cd8:	10110000 	.word	0x10110000

08001cdc <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001ce0:	4b12      	ldr	r3, [pc, #72]	; (8001d2c <MX_I2C2_Init+0x50>)
 8001ce2:	4a13      	ldr	r2, [pc, #76]	; (8001d30 <MX_I2C2_Init+0x54>)
 8001ce4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 8001ce6:	4b11      	ldr	r3, [pc, #68]	; (8001d2c <MX_I2C2_Init+0x50>)
 8001ce8:	4a12      	ldr	r2, [pc, #72]	; (8001d34 <MX_I2C2_Init+0x58>)
 8001cea:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001cec:	4b0f      	ldr	r3, [pc, #60]	; (8001d2c <MX_I2C2_Init+0x50>)
 8001cee:	2200      	movs	r2, #0
 8001cf0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001cf2:	4b0e      	ldr	r3, [pc, #56]	; (8001d2c <MX_I2C2_Init+0x50>)
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001cf8:	4b0c      	ldr	r3, [pc, #48]	; (8001d2c <MX_I2C2_Init+0x50>)
 8001cfa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001cfe:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001d00:	4b0a      	ldr	r3, [pc, #40]	; (8001d2c <MX_I2C2_Init+0x50>)
 8001d02:	2200      	movs	r2, #0
 8001d04:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001d06:	4b09      	ldr	r3, [pc, #36]	; (8001d2c <MX_I2C2_Init+0x50>)
 8001d08:	2200      	movs	r2, #0
 8001d0a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001d0c:	4b07      	ldr	r3, [pc, #28]	; (8001d2c <MX_I2C2_Init+0x50>)
 8001d0e:	2200      	movs	r2, #0
 8001d10:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001d12:	4b06      	ldr	r3, [pc, #24]	; (8001d2c <MX_I2C2_Init+0x50>)
 8001d14:	2200      	movs	r2, #0
 8001d16:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001d18:	4804      	ldr	r0, [pc, #16]	; (8001d2c <MX_I2C2_Init+0x50>)
 8001d1a:	f002 f899 	bl	8003e50 <HAL_I2C_Init>
 8001d1e:	4603      	mov	r3, r0
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d001      	beq.n	8001d28 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001d24:	f000 fced 	bl	8002702 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001d28:	bf00      	nop
 8001d2a:	bd80      	pop	{r7, pc}
 8001d2c:	200001fc 	.word	0x200001fc
 8001d30:	40005800 	.word	0x40005800
 8001d34:	00061a80 	.word	0x00061a80

08001d38 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b088      	sub	sp, #32
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d40:	f107 0310 	add.w	r3, r7, #16
 8001d44:	2200      	movs	r2, #0
 8001d46:	601a      	str	r2, [r3, #0]
 8001d48:	605a      	str	r2, [r3, #4]
 8001d4a:	609a      	str	r2, [r3, #8]
 8001d4c:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C2)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	4a16      	ldr	r2, [pc, #88]	; (8001dac <HAL_I2C_MspInit+0x74>)
 8001d54:	4293      	cmp	r3, r2
 8001d56:	d124      	bne.n	8001da2 <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d58:	4b15      	ldr	r3, [pc, #84]	; (8001db0 <HAL_I2C_MspInit+0x78>)
 8001d5a:	699b      	ldr	r3, [r3, #24]
 8001d5c:	4a14      	ldr	r2, [pc, #80]	; (8001db0 <HAL_I2C_MspInit+0x78>)
 8001d5e:	f043 0308 	orr.w	r3, r3, #8
 8001d62:	6193      	str	r3, [r2, #24]
 8001d64:	4b12      	ldr	r3, [pc, #72]	; (8001db0 <HAL_I2C_MspInit+0x78>)
 8001d66:	699b      	ldr	r3, [r3, #24]
 8001d68:	f003 0308 	and.w	r3, r3, #8
 8001d6c:	60fb      	str	r3, [r7, #12]
 8001d6e:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001d70:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001d74:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d76:	2312      	movs	r3, #18
 8001d78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d7a:	2303      	movs	r3, #3
 8001d7c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d7e:	f107 0310 	add.w	r3, r7, #16
 8001d82:	4619      	mov	r1, r3
 8001d84:	480b      	ldr	r0, [pc, #44]	; (8001db4 <HAL_I2C_MspInit+0x7c>)
 8001d86:	f001 fe97 	bl	8003ab8 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001d8a:	4b09      	ldr	r3, [pc, #36]	; (8001db0 <HAL_I2C_MspInit+0x78>)
 8001d8c:	69db      	ldr	r3, [r3, #28]
 8001d8e:	4a08      	ldr	r2, [pc, #32]	; (8001db0 <HAL_I2C_MspInit+0x78>)
 8001d90:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001d94:	61d3      	str	r3, [r2, #28]
 8001d96:	4b06      	ldr	r3, [pc, #24]	; (8001db0 <HAL_I2C_MspInit+0x78>)
 8001d98:	69db      	ldr	r3, [r3, #28]
 8001d9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d9e:	60bb      	str	r3, [r7, #8]
 8001da0:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8001da2:	bf00      	nop
 8001da4:	3720      	adds	r7, #32
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bd80      	pop	{r7, pc}
 8001daa:	bf00      	nop
 8001dac:	40005800 	.word	0x40005800
 8001db0:	40021000 	.word	0x40021000
 8001db4:	40010c00 	.word	0x40010c00

08001db8 <CollibrateMPU6050>:

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */

void CollibrateMPU6050(int samples) {
 8001db8:	b590      	push	{r4, r7, lr}
 8001dba:	b089      	sub	sp, #36	; 0x24
 8001dbc:	af04      	add	r7, sp, #16
 8001dbe:	6078      	str	r0, [r7, #4]
	for (int RateCalibrationNumber=0; RateCalibrationNumber < samples; RateCalibrationNumber++) {
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	60fb      	str	r3, [r7, #12]
 8001dc4:	e052      	b.n	8001e6c <CollibrateMPU6050+0xb4>
	    MPU6050_Read_All(&hi2c2, &mpu6050, 0, 0, 0);
 8001dc6:	f04f 0200 	mov.w	r2, #0
 8001dca:	f04f 0300 	mov.w	r3, #0
 8001dce:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001dd2:	f04f 0200 	mov.w	r2, #0
 8001dd6:	f04f 0300 	mov.w	r3, #0
 8001dda:	e9cd 2300 	strd	r2, r3, [sp]
 8001dde:	f04f 0200 	mov.w	r2, #0
 8001de2:	f04f 0300 	mov.w	r3, #0
 8001de6:	493c      	ldr	r1, [pc, #240]	; (8001ed8 <CollibrateMPU6050+0x120>)
 8001de8:	483c      	ldr	r0, [pc, #240]	; (8001edc <CollibrateMPU6050+0x124>)
 8001dea:	f000 fcf9 	bl	80027e0 <MPU6050_Read_All>
	    RateCalibrationRoll+=mpu6050.Gx;
 8001dee:	4b3c      	ldr	r3, [pc, #240]	; (8001ee0 <CollibrateMPU6050+0x128>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	4618      	mov	r0, r3
 8001df4:	f7fe faf0 	bl	80003d8 <__aeabi_f2d>
 8001df8:	4b37      	ldr	r3, [pc, #220]	; (8001ed8 <CollibrateMPU6050+0x120>)
 8001dfa:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8001dfe:	f7fe f98d 	bl	800011c <__adddf3>
 8001e02:	4602      	mov	r2, r0
 8001e04:	460b      	mov	r3, r1
 8001e06:	4610      	mov	r0, r2
 8001e08:	4619      	mov	r1, r3
 8001e0a:	f7fe fe35 	bl	8000a78 <__aeabi_d2f>
 8001e0e:	4603      	mov	r3, r0
 8001e10:	4a33      	ldr	r2, [pc, #204]	; (8001ee0 <CollibrateMPU6050+0x128>)
 8001e12:	6013      	str	r3, [r2, #0]
	    RateCalibrationPitch+=mpu6050.Gy;
 8001e14:	4b33      	ldr	r3, [pc, #204]	; (8001ee4 <CollibrateMPU6050+0x12c>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	4618      	mov	r0, r3
 8001e1a:	f7fe fadd 	bl	80003d8 <__aeabi_f2d>
 8001e1e:	4b2e      	ldr	r3, [pc, #184]	; (8001ed8 <CollibrateMPU6050+0x120>)
 8001e20:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8001e24:	f7fe f97a 	bl	800011c <__adddf3>
 8001e28:	4602      	mov	r2, r0
 8001e2a:	460b      	mov	r3, r1
 8001e2c:	4610      	mov	r0, r2
 8001e2e:	4619      	mov	r1, r3
 8001e30:	f7fe fe22 	bl	8000a78 <__aeabi_d2f>
 8001e34:	4603      	mov	r3, r0
 8001e36:	4a2b      	ldr	r2, [pc, #172]	; (8001ee4 <CollibrateMPU6050+0x12c>)
 8001e38:	6013      	str	r3, [r2, #0]
	    RateCalibrationYaw+=mpu6050.Gz;
 8001e3a:	4b2b      	ldr	r3, [pc, #172]	; (8001ee8 <CollibrateMPU6050+0x130>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	4618      	mov	r0, r3
 8001e40:	f7fe faca 	bl	80003d8 <__aeabi_f2d>
 8001e44:	4b24      	ldr	r3, [pc, #144]	; (8001ed8 <CollibrateMPU6050+0x120>)
 8001e46:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8001e4a:	f7fe f967 	bl	800011c <__adddf3>
 8001e4e:	4602      	mov	r2, r0
 8001e50:	460b      	mov	r3, r1
 8001e52:	4610      	mov	r0, r2
 8001e54:	4619      	mov	r1, r3
 8001e56:	f7fe fe0f 	bl	8000a78 <__aeabi_d2f>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	4a22      	ldr	r2, [pc, #136]	; (8001ee8 <CollibrateMPU6050+0x130>)
 8001e5e:	6013      	str	r3, [r2, #0]
	    HAL_Delay(1);
 8001e60:	2001      	movs	r0, #1
 8001e62:	f001 fcf7 	bl	8003854 <HAL_Delay>
	for (int RateCalibrationNumber=0; RateCalibrationNumber < samples; RateCalibrationNumber++) {
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	3301      	adds	r3, #1
 8001e6a:	60fb      	str	r3, [r7, #12]
 8001e6c:	68fa      	ldr	r2, [r7, #12]
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	429a      	cmp	r2, r3
 8001e72:	dba8      	blt.n	8001dc6 <CollibrateMPU6050+0xe>
	}
	RateCalibrationRoll/=samples;
 8001e74:	4b1a      	ldr	r3, [pc, #104]	; (8001ee0 <CollibrateMPU6050+0x128>)
 8001e76:	681c      	ldr	r4, [r3, #0]
 8001e78:	6878      	ldr	r0, [r7, #4]
 8001e7a:	f7fe ff07 	bl	8000c8c <__aeabi_i2f>
 8001e7e:	4603      	mov	r3, r0
 8001e80:	4619      	mov	r1, r3
 8001e82:	4620      	mov	r0, r4
 8001e84:	f7ff f80a 	bl	8000e9c <__aeabi_fdiv>
 8001e88:	4603      	mov	r3, r0
 8001e8a:	461a      	mov	r2, r3
 8001e8c:	4b14      	ldr	r3, [pc, #80]	; (8001ee0 <CollibrateMPU6050+0x128>)
 8001e8e:	601a      	str	r2, [r3, #0]
	RateCalibrationPitch/=samples;
 8001e90:	4b14      	ldr	r3, [pc, #80]	; (8001ee4 <CollibrateMPU6050+0x12c>)
 8001e92:	681c      	ldr	r4, [r3, #0]
 8001e94:	6878      	ldr	r0, [r7, #4]
 8001e96:	f7fe fef9 	bl	8000c8c <__aeabi_i2f>
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	4619      	mov	r1, r3
 8001e9e:	4620      	mov	r0, r4
 8001ea0:	f7fe fffc 	bl	8000e9c <__aeabi_fdiv>
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	461a      	mov	r2, r3
 8001ea8:	4b0e      	ldr	r3, [pc, #56]	; (8001ee4 <CollibrateMPU6050+0x12c>)
 8001eaa:	601a      	str	r2, [r3, #0]
	RateCalibrationYaw/=samples;
 8001eac:	4b0e      	ldr	r3, [pc, #56]	; (8001ee8 <CollibrateMPU6050+0x130>)
 8001eae:	681c      	ldr	r4, [r3, #0]
 8001eb0:	6878      	ldr	r0, [r7, #4]
 8001eb2:	f7fe feeb 	bl	8000c8c <__aeabi_i2f>
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	4619      	mov	r1, r3
 8001eba:	4620      	mov	r0, r4
 8001ebc:	f7fe ffee 	bl	8000e9c <__aeabi_fdiv>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	461a      	mov	r2, r3
 8001ec4:	4b08      	ldr	r3, [pc, #32]	; (8001ee8 <CollibrateMPU6050+0x130>)
 8001ec6:	601a      	str	r2, [r3, #0]

	MPUCollibrated = 1;
 8001ec8:	4b08      	ldr	r3, [pc, #32]	; (8001eec <CollibrateMPU6050+0x134>)
 8001eca:	2201      	movs	r2, #1
 8001ecc:	601a      	str	r2, [r3, #0]
}
 8001ece:	bf00      	nop
 8001ed0:	3714      	adds	r7, #20
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bd90      	pop	{r4, r7, pc}
 8001ed6:	bf00      	nop
 8001ed8:	20000268 	.word	0x20000268
 8001edc:	200001fc 	.word	0x200001fc
 8001ee0:	200002e0 	.word	0x200002e0
 8001ee4:	200002e4 	.word	0x200002e4
 8001ee8:	200002e8 	.word	0x200002e8
 8001eec:	20000328 	.word	0x20000328

08001ef0 <SetupMPU6050>:

void SetupMPU6050(int cSamples) {
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b082      	sub	sp, #8
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
	  while (MPU6050_Init(&hi2c2) == 1);
 8001ef8:	bf00      	nop
 8001efa:	4808      	ldr	r0, [pc, #32]	; (8001f1c <SetupMPU6050+0x2c>)
 8001efc:	f000 fc07 	bl	800270e <MPU6050_Init>
 8001f00:	4603      	mov	r3, r0
 8001f02:	2b01      	cmp	r3, #1
 8001f04:	d0f9      	beq.n	8001efa <SetupMPU6050+0xa>

	  CollibrateMPU6050(cSamples);
 8001f06:	6878      	ldr	r0, [r7, #4]
 8001f08:	f7ff ff56 	bl	8001db8 <CollibrateMPU6050>

	  HAL_Delay(500);
 8001f0c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001f10:	f001 fca0 	bl	8003854 <HAL_Delay>
}
 8001f14:	bf00      	nop
 8001f16:	3708      	adds	r7, #8
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	bd80      	pop	{r7, pc}
 8001f1c:	200001fc 	.word	0x200001fc

08001f20 <ReadMPU6050>:

void ReadMPU6050() {
 8001f20:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001f24:	b084      	sub	sp, #16
 8001f26:	af04      	add	r7, sp, #16
	MPU6050_Read_All(&hi2c2, &mpu6050, RateCalibrationRoll, RateCalibrationPitch, RateCalibrationYaw);
 8001f28:	4b3c      	ldr	r3, [pc, #240]	; (800201c <ReadMPU6050+0xfc>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	f7fe fa53 	bl	80003d8 <__aeabi_f2d>
 8001f32:	4680      	mov	r8, r0
 8001f34:	4689      	mov	r9, r1
 8001f36:	4b3a      	ldr	r3, [pc, #232]	; (8002020 <ReadMPU6050+0x100>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	f7fe fa4c 	bl	80003d8 <__aeabi_f2d>
 8001f40:	4604      	mov	r4, r0
 8001f42:	460d      	mov	r5, r1
 8001f44:	4b37      	ldr	r3, [pc, #220]	; (8002024 <ReadMPU6050+0x104>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	4618      	mov	r0, r3
 8001f4a:	f7fe fa45 	bl	80003d8 <__aeabi_f2d>
 8001f4e:	4602      	mov	r2, r0
 8001f50:	460b      	mov	r3, r1
 8001f52:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001f56:	e9cd 4500 	strd	r4, r5, [sp]
 8001f5a:	4642      	mov	r2, r8
 8001f5c:	464b      	mov	r3, r9
 8001f5e:	4932      	ldr	r1, [pc, #200]	; (8002028 <ReadMPU6050+0x108>)
 8001f60:	4832      	ldr	r0, [pc, #200]	; (800202c <ReadMPU6050+0x10c>)
 8001f62:	f000 fc3d 	bl	80027e0 <MPU6050_Read_All>

	sx += mpu6050.Gx;
 8001f66:	4b32      	ldr	r3, [pc, #200]	; (8002030 <ReadMPU6050+0x110>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	f7fe fa34 	bl	80003d8 <__aeabi_f2d>
 8001f70:	4b2d      	ldr	r3, [pc, #180]	; (8002028 <ReadMPU6050+0x108>)
 8001f72:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8001f76:	f7fe f8d1 	bl	800011c <__adddf3>
 8001f7a:	4602      	mov	r2, r0
 8001f7c:	460b      	mov	r3, r1
 8001f7e:	4610      	mov	r0, r2
 8001f80:	4619      	mov	r1, r3
 8001f82:	f7fe fd79 	bl	8000a78 <__aeabi_d2f>
 8001f86:	4603      	mov	r3, r0
 8001f88:	4a29      	ldr	r2, [pc, #164]	; (8002030 <ReadMPU6050+0x110>)
 8001f8a:	6013      	str	r3, [r2, #0]
	sy += mpu6050.Gy;
 8001f8c:	4b29      	ldr	r3, [pc, #164]	; (8002034 <ReadMPU6050+0x114>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4618      	mov	r0, r3
 8001f92:	f7fe fa21 	bl	80003d8 <__aeabi_f2d>
 8001f96:	4b24      	ldr	r3, [pc, #144]	; (8002028 <ReadMPU6050+0x108>)
 8001f98:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8001f9c:	f7fe f8be 	bl	800011c <__adddf3>
 8001fa0:	4602      	mov	r2, r0
 8001fa2:	460b      	mov	r3, r1
 8001fa4:	4610      	mov	r0, r2
 8001fa6:	4619      	mov	r1, r3
 8001fa8:	f7fe fd66 	bl	8000a78 <__aeabi_d2f>
 8001fac:	4603      	mov	r3, r0
 8001fae:	4a21      	ldr	r2, [pc, #132]	; (8002034 <ReadMPU6050+0x114>)
 8001fb0:	6013      	str	r3, [r2, #0]
	sz += mpu6050.Gz;
 8001fb2:	4b21      	ldr	r3, [pc, #132]	; (8002038 <ReadMPU6050+0x118>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	f7fe fa0e 	bl	80003d8 <__aeabi_f2d>
 8001fbc:	4b1a      	ldr	r3, [pc, #104]	; (8002028 <ReadMPU6050+0x108>)
 8001fbe:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8001fc2:	f7fe f8ab 	bl	800011c <__adddf3>
 8001fc6:	4602      	mov	r2, r0
 8001fc8:	460b      	mov	r3, r1
 8001fca:	4610      	mov	r0, r2
 8001fcc:	4619      	mov	r1, r3
 8001fce:	f7fe fd53 	bl	8000a78 <__aeabi_d2f>
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	4a18      	ldr	r2, [pc, #96]	; (8002038 <ReadMPU6050+0x118>)
 8001fd6:	6013      	str	r3, [r2, #0]

	Gy.x = sx / 2000;
 8001fd8:	4b15      	ldr	r3, [pc, #84]	; (8002030 <ReadMPU6050+0x110>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4917      	ldr	r1, [pc, #92]	; (800203c <ReadMPU6050+0x11c>)
 8001fde:	4618      	mov	r0, r3
 8001fe0:	f7fe ff5c 	bl	8000e9c <__aeabi_fdiv>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	461a      	mov	r2, r3
 8001fe8:	4b15      	ldr	r3, [pc, #84]	; (8002040 <ReadMPU6050+0x120>)
 8001fea:	601a      	str	r2, [r3, #0]
	Gy.y = sy / 2000;
 8001fec:	4b11      	ldr	r3, [pc, #68]	; (8002034 <ReadMPU6050+0x114>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	4912      	ldr	r1, [pc, #72]	; (800203c <ReadMPU6050+0x11c>)
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	f7fe ff52 	bl	8000e9c <__aeabi_fdiv>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	461a      	mov	r2, r3
 8001ffc:	4b10      	ldr	r3, [pc, #64]	; (8002040 <ReadMPU6050+0x120>)
 8001ffe:	605a      	str	r2, [r3, #4]
	Gy.z = sz / 2000;
 8002000:	4b0d      	ldr	r3, [pc, #52]	; (8002038 <ReadMPU6050+0x118>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	490d      	ldr	r1, [pc, #52]	; (800203c <ReadMPU6050+0x11c>)
 8002006:	4618      	mov	r0, r3
 8002008:	f7fe ff48 	bl	8000e9c <__aeabi_fdiv>
 800200c:	4603      	mov	r3, r0
 800200e:	461a      	mov	r2, r3
 8002010:	4b0b      	ldr	r3, [pc, #44]	; (8002040 <ReadMPU6050+0x120>)
 8002012:	609a      	str	r2, [r3, #8]
}
 8002014:	bf00      	nop
 8002016:	46bd      	mov	sp, r7
 8002018:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800201c:	200002e0 	.word	0x200002e0
 8002020:	200002e4 	.word	0x200002e4
 8002024:	200002e8 	.word	0x200002e8
 8002028:	20000268 	.word	0x20000268
 800202c:	200001fc 	.word	0x200001fc
 8002030:	200002ec 	.word	0x200002ec
 8002034:	200002f0 	.word	0x200002f0
 8002038:	200002f4 	.word	0x200002f4
 800203c:	44fa0000 	.word	0x44fa0000
 8002040:	200002f8 	.word	0x200002f8

08002044 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8002044:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002048:	b084      	sub	sp, #16
 800204a:	af00      	add	r7, sp, #0
 800204c:	60f8      	str	r0, [r7, #12]
	if(timcounter % 10 == 0 && pixyChecked) {
 800204e:	4b25      	ldr	r3, [pc, #148]	; (80020e4 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8002050:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002054:	f04f 020a 	mov.w	r2, #10
 8002058:	f04f 0300 	mov.w	r3, #0
 800205c:	f7fe ffe0 	bl	8001020 <__aeabi_uldivmod>
 8002060:	4313      	orrs	r3, r2
 8002062:	d107      	bne.n	8002074 <HAL_TIM_PeriodElapsedCallback+0x30>
 8002064:	4b20      	ldr	r3, [pc, #128]	; (80020e8 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	2b00      	cmp	r3, #0
 800206a:	d003      	beq.n	8002074 <HAL_TIM_PeriodElapsedCallback+0x30>
		getBallPosition(&ballTransform, &ballInView);
 800206c:	491f      	ldr	r1, [pc, #124]	; (80020ec <HAL_TIM_PeriodElapsedCallback+0xa8>)
 800206e:	4820      	ldr	r0, [pc, #128]	; (80020f0 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8002070:	f000 ff34 	bl	8002edc <getBallPosition>
	}

	if(timcounter % 2 == 0 && MPUCollibrated) {
 8002074:	4b1b      	ldr	r3, [pc, #108]	; (80020e4 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8002076:	e9d3 2300 	ldrd	r2, r3, [r3]
 800207a:	f002 0401 	and.w	r4, r2, #1
 800207e:	2500      	movs	r5, #0
 8002080:	ea54 0305 	orrs.w	r3, r4, r5
 8002084:	d105      	bne.n	8002092 <HAL_TIM_PeriodElapsedCallback+0x4e>
 8002086:	4b1b      	ldr	r3, [pc, #108]	; (80020f4 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	2b00      	cmp	r3, #0
 800208c:	d001      	beq.n	8002092 <HAL_TIM_PeriodElapsedCallback+0x4e>
		ReadMPU6050();
 800208e:	f7ff ff47 	bl	8001f20 <ReadMPU6050>
	}

	if((timcounter + 1) % SR_Read_TIM == 0) {
 8002092:	4b14      	ldr	r3, [pc, #80]	; (80020e4 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8002094:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002098:	f112 0a01 	adds.w	sl, r2, #1
 800209c:	f143 0b00 	adc.w	fp, r3, #0
 80020a0:	4b15      	ldr	r3, [pc, #84]	; (80020f8 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	17da      	asrs	r2, r3, #31
 80020a6:	603b      	str	r3, [r7, #0]
 80020a8:	607a      	str	r2, [r7, #4]
 80020aa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80020ae:	4650      	mov	r0, sl
 80020b0:	4659      	mov	r1, fp
 80020b2:	f7fe ffb5 	bl	8001020 <__aeabi_uldivmod>
 80020b6:	4313      	orrs	r3, r2
 80020b8:	d104      	bne.n	80020c4 <HAL_TIM_PeriodElapsedCallback+0x80>
		ReadAllSRs(Srs, 4, &SRDatas);
 80020ba:	4a10      	ldr	r2, [pc, #64]	; (80020fc <HAL_TIM_PeriodElapsedCallback+0xb8>)
 80020bc:	2104      	movs	r1, #4
 80020be:	4810      	ldr	r0, [pc, #64]	; (8002100 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 80020c0:	f7ff fd38 	bl	8001b34 <ReadAllSRs>
	}

	timcounter++;
 80020c4:	4b07      	ldr	r3, [pc, #28]	; (80020e4 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 80020c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020ca:	f112 0801 	adds.w	r8, r2, #1
 80020ce:	f143 0900 	adc.w	r9, r3, #0
 80020d2:	4b04      	ldr	r3, [pc, #16]	; (80020e4 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 80020d4:	e9c3 8900 	strd	r8, r9, [r3]
}
 80020d8:	bf00      	nop
 80020da:	3710      	adds	r7, #16
 80020dc:	46bd      	mov	sp, r7
 80020de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80020e2:	bf00      	nop
 80020e4:	20000358 	.word	0x20000358
 80020e8:	20000264 	.word	0x20000264
 80020ec:	20000260 	.word	0x20000260
 80020f0:	20000250 	.word	0x20000250
 80020f4:	20000328 	.word	0x20000328
 80020f8:	20000010 	.word	0x20000010
 80020fc:	20000308 	.word	0x20000308
 8002100:	200000c8 	.word	0x200000c8

08002104 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8002104:	b480      	push	{r7}
 8002106:	b083      	sub	sp, #12
 8002108:	af00      	add	r7, sp, #0
 800210a:	4603      	mov	r3, r0
 800210c:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_2 && outState == IN) {
 800210e:	88fb      	ldrh	r3, [r7, #6]
 8002110:	2b04      	cmp	r3, #4
 8002112:	d10b      	bne.n	800212c <HAL_GPIO_EXTI_Callback+0x28>
 8002114:	4b08      	ldr	r3, [pc, #32]	; (8002138 <HAL_GPIO_EXTI_Callback+0x34>)
 8002116:	781b      	ldrb	r3, [r3, #0]
 8002118:	2b00      	cmp	r3, #0
 800211a:	d107      	bne.n	800212c <HAL_GPIO_EXTI_Callback+0x28>
		out_interrupt = 1;
 800211c:	4b07      	ldr	r3, [pc, #28]	; (800213c <HAL_GPIO_EXTI_Callback+0x38>)
 800211e:	2201      	movs	r2, #1
 8002120:	601a      	str	r2, [r3, #0]
		out_interrupt_counter++;
 8002122:	4b07      	ldr	r3, [pc, #28]	; (8002140 <HAL_GPIO_EXTI_Callback+0x3c>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	3301      	adds	r3, #1
 8002128:	4a05      	ldr	r2, [pc, #20]	; (8002140 <HAL_GPIO_EXTI_Callback+0x3c>)
 800212a:	6013      	str	r3, [r2, #0]
	}
}
 800212c:	bf00      	nop
 800212e:	370c      	adds	r7, #12
 8002130:	46bd      	mov	sp, r7
 8002132:	bc80      	pop	{r7}
 8002134:	4770      	bx	lr
 8002136:	bf00      	nop
 8002138:	20000340 	.word	0x20000340
 800213c:	20000344 	.word	0x20000344
 8002140:	20000348 	.word	0x20000348

08002144 <ReadOutDirection>:

void ReadOutDirection() {
 8002144:	b580      	push	{r7, lr}
 8002146:	af00      	add	r7, sp, #0
	outDir = 0;
 8002148:	4b11      	ldr	r3, [pc, #68]	; (8002190 <ReadOutDirection+0x4c>)
 800214a:	2200      	movs	r2, #0
 800214c:	601a      	str	r2, [r3, #0]
	outDir += 10 * !HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7);
 800214e:	2180      	movs	r1, #128	; 0x80
 8002150:	4810      	ldr	r0, [pc, #64]	; (8002194 <ReadOutDirection+0x50>)
 8002152:	f001 fe35 	bl	8003dc0 <HAL_GPIO_ReadPin>
 8002156:	4603      	mov	r3, r0
 8002158:	2b00      	cmp	r3, #0
 800215a:	d101      	bne.n	8002160 <ReadOutDirection+0x1c>
 800215c:	220a      	movs	r2, #10
 800215e:	e000      	b.n	8002162 <ReadOutDirection+0x1e>
 8002160:	2200      	movs	r2, #0
 8002162:	4b0b      	ldr	r3, [pc, #44]	; (8002190 <ReadOutDirection+0x4c>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4413      	add	r3, r2
 8002168:	4a09      	ldr	r2, [pc, #36]	; (8002190 <ReadOutDirection+0x4c>)
 800216a:	6013      	str	r3, [r2, #0]
	outDir += !HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1);
 800216c:	2102      	movs	r1, #2
 800216e:	480a      	ldr	r0, [pc, #40]	; (8002198 <ReadOutDirection+0x54>)
 8002170:	f001 fe26 	bl	8003dc0 <HAL_GPIO_ReadPin>
 8002174:	4603      	mov	r3, r0
 8002176:	2b00      	cmp	r3, #0
 8002178:	bf0c      	ite	eq
 800217a:	2301      	moveq	r3, #1
 800217c:	2300      	movne	r3, #0
 800217e:	b2db      	uxtb	r3, r3
 8002180:	461a      	mov	r2, r3
 8002182:	4b03      	ldr	r3, [pc, #12]	; (8002190 <ReadOutDirection+0x4c>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4413      	add	r3, r2
 8002188:	4a01      	ldr	r2, [pc, #4]	; (8002190 <ReadOutDirection+0x4c>)
 800218a:	6013      	str	r3, [r2, #0]
}
 800218c:	bf00      	nop
 800218e:	bd80      	pop	{r7, pc}
 8002190:	2000034c 	.word	0x2000034c
 8002194:	40010800 	.word	0x40010800
 8002198:	40010c00 	.word	0x40010c00
 800219c:	00000000 	.word	0x00000000

080021a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80021a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80021a4:	b088      	sub	sp, #32
 80021a6:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN 1 */
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/
	HAL_Init();
 80021a8:	f001 faf2 	bl	8003790 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80021ac:	f000 fa68 	bl	8002680 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80021b0:	f7ff fcde 	bl	8001b70 <MX_GPIO_Init>
  MX_I2C2_Init();
 80021b4:	f7ff fd92 	bl	8001cdc <MX_I2C2_Init>
  MX_TIM2_Init();
 80021b8:	f001 f902 	bl	80033c0 <MX_TIM2_Init>
  MX_TIM1_Init();
 80021bc:	f001 f848 	bl	8003250 <MX_TIM1_Init>
  MX_TIM3_Init();
 80021c0:	f001 f972 	bl	80034a8 <MX_TIM3_Init>
  MX_SPI1_Init();
 80021c4:	f000 ff3e 	bl	8003044 <MX_SPI1_Init>
  MX_TIM4_Init();
 80021c8:	f001 f9bc 	bl	8003544 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  HAL_Delay(1000);
 80021cc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80021d0:	f001 fb40 	bl	8003854 <HAL_Delay>

  HAL_TIM_Base_Start(&htim1);
 80021d4:	4888      	ldr	r0, [pc, #544]	; (80023f8 <main+0x258>)
 80021d6:	f003 fffd 	bl	80061d4 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim2);
 80021da:	4888      	ldr	r0, [pc, #544]	; (80023fc <main+0x25c>)
 80021dc:	f003 fffa 	bl	80061d4 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim3);
 80021e0:	4887      	ldr	r0, [pc, #540]	; (8002400 <main+0x260>)
 80021e2:	f003 fff7 	bl	80061d4 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start_IT(&htim4);
 80021e6:	4887      	ldr	r0, [pc, #540]	; (8002404 <main+0x264>)
 80021e8:	f004 f83e 	bl	8006268 <HAL_TIM_Base_Start_IT>

  // setting up PWM
  TIM1->CCR2 = 0;
 80021ec:	4b86      	ldr	r3, [pc, #536]	; (8002408 <main+0x268>)
 80021ee:	2200      	movs	r2, #0
 80021f0:	639a      	str	r2, [r3, #56]	; 0x38
  TIM1->CCR3 = 0;
 80021f2:	4b85      	ldr	r3, [pc, #532]	; (8002408 <main+0x268>)
 80021f4:	2200      	movs	r2, #0
 80021f6:	63da      	str	r2, [r3, #60]	; 0x3c
  TIM1->CCR4 = 0;
 80021f8:	4b83      	ldr	r3, [pc, #524]	; (8002408 <main+0x268>)
 80021fa:	2200      	movs	r2, #0
 80021fc:	641a      	str	r2, [r3, #64]	; 0x40
  TIM2->CCR4 = 0;
 80021fe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002202:	2200      	movs	r2, #0
 8002204:	641a      	str	r2, [r3, #64]	; 0x40

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8002206:	2104      	movs	r1, #4
 8002208:	487b      	ldr	r0, [pc, #492]	; (80023f8 <main+0x258>)
 800220a:	f004 f8d7 	bl	80063bc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 800220e:	2108      	movs	r1, #8
 8002210:	4879      	ldr	r0, [pc, #484]	; (80023f8 <main+0x258>)
 8002212:	f004 f8d3 	bl	80063bc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8002216:	210c      	movs	r1, #12
 8002218:	4877      	ldr	r0, [pc, #476]	; (80023f8 <main+0x258>)
 800221a:	f004 f8cf 	bl	80063bc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 800221e:	210c      	movs	r1, #12
 8002220:	4876      	ldr	r0, [pc, #472]	; (80023fc <main+0x25c>)
 8002222:	f004 f8cb 	bl	80063bc <HAL_TIM_PWM_Start>

  HAL_Delay(200);
 8002226:	20c8      	movs	r0, #200	; 0xc8
 8002228:	f001 fb14 	bl	8003854 <HAL_Delay>

  SetupMPU6050(750);
 800222c:	f240 20ee 	movw	r0, #750	; 0x2ee
 8002230:	f7ff fe5e 	bl	8001ef0 <SetupMPU6050>

  SetupPixy(&pixyChecked);
 8002234:	4875      	ldr	r0, [pc, #468]	; (800240c <main+0x26c>)
 8002236:	f000 fe1d 	bl	8002e74 <SetupPixy>

  HAL_Delay(200);
 800223a:	20c8      	movs	r0, #200	; 0xc8
 800223c:	f001 fb0a 	bl	8003854 <HAL_Delay>

  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8002240:	2201      	movs	r2, #1
 8002242:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002246:	4872      	ldr	r0, [pc, #456]	; (8002410 <main+0x270>)
 8002248:	f001 fdd1 	bl	8003dee <HAL_GPIO_WritePin>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (out_interrupt) {
 800224c:	4b71      	ldr	r3, [pc, #452]	; (8002414 <main+0x274>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	2b00      	cmp	r3, #0
 8002252:	d005      	beq.n	8002260 <main+0xc0>
		  outState = OUT;
 8002254:	4b70      	ldr	r3, [pc, #448]	; (8002418 <main+0x278>)
 8002256:	2201      	movs	r2, #1
 8002258:	701a      	strb	r2, [r3, #0]
		  out_interrupt = 0;
 800225a:	4b6e      	ldr	r3, [pc, #440]	; (8002414 <main+0x274>)
 800225c:	2200      	movs	r2, #0
 800225e:	601a      	str	r2, [r3, #0]
	  }
	  switch(outState) {
 8002260:	4b6d      	ldr	r3, [pc, #436]	; (8002418 <main+0x278>)
 8002262:	781b      	ldrb	r3, [r3, #0]
 8002264:	2b02      	cmp	r3, #2
 8002266:	f000 80fb 	beq.w	8002460 <main+0x2c0>
 800226a:	2b02      	cmp	r3, #2
 800226c:	dcee      	bgt.n	800224c <main+0xac>
 800226e:	2b00      	cmp	r3, #0
 8002270:	d003      	beq.n	800227a <main+0xda>
 8002272:	2b01      	cmp	r3, #1
 8002274:	f000 8093 	beq.w	800239e <main+0x1fe>
 8002278:	e1ed      	b.n	8002656 <main+0x4b6>
	  case IN:
		  if (abs(Gy.z) > 2) {
 800227a:	4b68      	ldr	r3, [pc, #416]	; (800241c <main+0x27c>)
 800227c:	689b      	ldr	r3, [r3, #8]
 800227e:	4618      	mov	r0, r3
 8002280:	f7fe fea8 	bl	8000fd4 <__aeabi_f2iz>
 8002284:	4603      	mov	r3, r0
 8002286:	2b00      	cmp	r3, #0
 8002288:	bfb8      	it	lt
 800228a:	425b      	neglt	r3, r3
 800228c:	2b02      	cmp	r3, #2
 800228e:	dc1f      	bgt.n	80022d0 <main+0x130>
			  //RotateToZero(Gy.z, &pve, &Motors, &MotorDefs);
		  }
		  else {
			  setPWM(&Motor_1, Motors.pwm1, Motors.e1, &Motors);
 8002290:	4b63      	ldr	r3, [pc, #396]	; (8002420 <main+0x280>)
 8002292:	6819      	ldr	r1, [r3, #0]
 8002294:	4b62      	ldr	r3, [pc, #392]	; (8002420 <main+0x280>)
 8002296:	685a      	ldr	r2, [r3, #4]
 8002298:	4b61      	ldr	r3, [pc, #388]	; (8002420 <main+0x280>)
 800229a:	4862      	ldr	r0, [pc, #392]	; (8002424 <main+0x284>)
 800229c:	f7fe fefc 	bl	8001098 <setPWM>
			  setPWM(&Motor_2, Motors.pwm2, Motors.e2, &Motors);
 80022a0:	4b5f      	ldr	r3, [pc, #380]	; (8002420 <main+0x280>)
 80022a2:	6899      	ldr	r1, [r3, #8]
 80022a4:	4b5e      	ldr	r3, [pc, #376]	; (8002420 <main+0x280>)
 80022a6:	68da      	ldr	r2, [r3, #12]
 80022a8:	4b5d      	ldr	r3, [pc, #372]	; (8002420 <main+0x280>)
 80022aa:	485f      	ldr	r0, [pc, #380]	; (8002428 <main+0x288>)
 80022ac:	f7fe fef4 	bl	8001098 <setPWM>
			  setPWM(&Motor_3, Motors.pwm3, Motors.e3, &Motors);
 80022b0:	4b5b      	ldr	r3, [pc, #364]	; (8002420 <main+0x280>)
 80022b2:	6919      	ldr	r1, [r3, #16]
 80022b4:	4b5a      	ldr	r3, [pc, #360]	; (8002420 <main+0x280>)
 80022b6:	695a      	ldr	r2, [r3, #20]
 80022b8:	4b59      	ldr	r3, [pc, #356]	; (8002420 <main+0x280>)
 80022ba:	485c      	ldr	r0, [pc, #368]	; (800242c <main+0x28c>)
 80022bc:	f7fe feec 	bl	8001098 <setPWM>
			  setPWM(&Motor_4, Motors.pwm4, Motors.e4, &Motors);
 80022c0:	4b57      	ldr	r3, [pc, #348]	; (8002420 <main+0x280>)
 80022c2:	6999      	ldr	r1, [r3, #24]
 80022c4:	4b56      	ldr	r3, [pc, #344]	; (8002420 <main+0x280>)
 80022c6:	69da      	ldr	r2, [r3, #28]
 80022c8:	4b55      	ldr	r3, [pc, #340]	; (8002420 <main+0x280>)
 80022ca:	4859      	ldr	r0, [pc, #356]	; (8002430 <main+0x290>)
 80022cc:	f7fe fee4 	bl	8001098 <setPWM>
		  }

		  if (zone == BALLIN) {
 80022d0:	4b58      	ldr	r3, [pc, #352]	; (8002434 <main+0x294>)
 80022d2:	781b      	ldrb	r3, [r3, #0]
 80022d4:	2b03      	cmp	r3, #3
 80022d6:	d10f      	bne.n	80022f8 <main+0x158>
			  Attack(ballTransform.ballx, ballTransform.bally, &Motors, &MotorDefs, &SRDatas, &zone, &attackZone, 25);
 80022d8:	4b57      	ldr	r3, [pc, #348]	; (8002438 <main+0x298>)
 80022da:	6818      	ldr	r0, [r3, #0]
 80022dc:	4b56      	ldr	r3, [pc, #344]	; (8002438 <main+0x298>)
 80022de:	6859      	ldr	r1, [r3, #4]
 80022e0:	2319      	movs	r3, #25
 80022e2:	9303      	str	r3, [sp, #12]
 80022e4:	4b55      	ldr	r3, [pc, #340]	; (800243c <main+0x29c>)
 80022e6:	9302      	str	r3, [sp, #8]
 80022e8:	4b52      	ldr	r3, [pc, #328]	; (8002434 <main+0x294>)
 80022ea:	9301      	str	r3, [sp, #4]
 80022ec:	4b54      	ldr	r3, [pc, #336]	; (8002440 <main+0x2a0>)
 80022ee:	9300      	str	r3, [sp, #0]
 80022f0:	4b54      	ldr	r3, [pc, #336]	; (8002444 <main+0x2a4>)
 80022f2:	4a4b      	ldr	r2, [pc, #300]	; (8002420 <main+0x280>)
 80022f4:	f7ff fa40 	bl	8001778 <Attack>
		  }
		  if (ballInView) {
 80022f8:	4b53      	ldr	r3, [pc, #332]	; (8002448 <main+0x2a8>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d020      	beq.n	8002342 <main+0x1a2>
			  GetBall(ballTransform.ballx, ballTransform.bally, 25, &zone, &Motors, &MotorDefs, &InGoal, &SRDatas);
 8002300:	4b4d      	ldr	r3, [pc, #308]	; (8002438 <main+0x298>)
 8002302:	6818      	ldr	r0, [r3, #0]
 8002304:	4b4c      	ldr	r3, [pc, #304]	; (8002438 <main+0x298>)
 8002306:	6859      	ldr	r1, [r3, #4]
 8002308:	4b4d      	ldr	r3, [pc, #308]	; (8002440 <main+0x2a0>)
 800230a:	9303      	str	r3, [sp, #12]
 800230c:	4b4f      	ldr	r3, [pc, #316]	; (800244c <main+0x2ac>)
 800230e:	9302      	str	r3, [sp, #8]
 8002310:	4b4c      	ldr	r3, [pc, #304]	; (8002444 <main+0x2a4>)
 8002312:	9301      	str	r3, [sp, #4]
 8002314:	4b42      	ldr	r3, [pc, #264]	; (8002420 <main+0x280>)
 8002316:	9300      	str	r3, [sp, #0]
 8002318:	4b46      	ldr	r3, [pc, #280]	; (8002434 <main+0x294>)
 800231a:	2219      	movs	r2, #25
 800231c:	f7ff f900 	bl	8001520 <GetBall>
			  noBallCounter = 0;
 8002320:	494b      	ldr	r1, [pc, #300]	; (8002450 <main+0x2b0>)
 8002322:	f04f 0200 	mov.w	r2, #0
 8002326:	f04f 0300 	mov.w	r3, #0
 800232a:	e9c1 2300 	strd	r2, r3, [r1]
			  backToGoalCounter = 0;
 800232e:	4949      	ldr	r1, [pc, #292]	; (8002454 <main+0x2b4>)
 8002330:	f04f 0200 	mov.w	r2, #0
 8002334:	f04f 0300 	mov.w	r3, #0
 8002338:	e9c1 2300 	strd	r2, r3, [r1]
			  backingToGoal = 0;
 800233c:	4b46      	ldr	r3, [pc, #280]	; (8002458 <main+0x2b8>)
 800233e:	2200      	movs	r2, #0
 8002340:	601a      	str	r2, [r3, #0]
		  }

		  if (!ballInView) {
 8002342:	4b41      	ldr	r3, [pc, #260]	; (8002448 <main+0x2a8>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	2b00      	cmp	r3, #0
 8002348:	d109      	bne.n	800235e <main+0x1be>
			  noBallCounter++;
 800234a:	4b41      	ldr	r3, [pc, #260]	; (8002450 <main+0x2b0>)
 800234c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002350:	f112 0801 	adds.w	r8, r2, #1
 8002354:	f143 0900 	adc.w	r9, r3, #0
 8002358:	4b3d      	ldr	r3, [pc, #244]	; (8002450 <main+0x2b0>)
 800235a:	e9c3 8900 	strd	r8, r9, [r3]
		  }

		  if (noBallCounter >= noBallCounterL) {
 800235e:	4b3c      	ldr	r3, [pc, #240]	; (8002450 <main+0x2b0>)
 8002360:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002364:	f643 2198 	movw	r1, #15000	; 0x3a98
 8002368:	428a      	cmp	r2, r1
 800236a:	f173 0300 	sbcs.w	r3, r3, #0
 800236e:	f0c0 8168 	bcc.w	8002642 <main+0x4a2>
			  noBallCounter = 0;
 8002372:	4937      	ldr	r1, [pc, #220]	; (8002450 <main+0x2b0>)
 8002374:	f04f 0200 	mov.w	r2, #0
 8002378:	f04f 0300 	mov.w	r3, #0
 800237c:	e9c1 2300 	strd	r2, r3, [r1]
			  AllMotorsZero(&MotorDefs, &Motors);
 8002380:	4927      	ldr	r1, [pc, #156]	; (8002420 <main+0x280>)
 8002382:	4830      	ldr	r0, [pc, #192]	; (8002444 <main+0x2a4>)
 8002384:	f7ff f8a6 	bl	80014d4 <AllMotorsZero>
			  backToGoalCounter++;
 8002388:	4b32      	ldr	r3, [pc, #200]	; (8002454 <main+0x2b4>)
 800238a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800238e:	f112 0a01 	adds.w	sl, r2, #1
 8002392:	f143 0b00 	adc.w	fp, r3, #0
 8002396:	4b2f      	ldr	r3, [pc, #188]	; (8002454 <main+0x2b4>)
 8002398:	e9c3 ab00 	strd	sl, fp, [r3]
//
//
//		  if (InGoal && SRDatas.SR_b > GOALDIS_TH) {
//			  InGoal = 0;
//		  }
		  break;
 800239c:	e151      	b.n	8002642 <main+0x4a2>
	  case OUT:
		  AllMotorsZero(&MotorDefs, &Motors);
 800239e:	4920      	ldr	r1, [pc, #128]	; (8002420 <main+0x280>)
 80023a0:	4828      	ldr	r0, [pc, #160]	; (8002444 <main+0x2a4>)
 80023a2:	f7ff f897 	bl	80014d4 <AllMotorsZero>
		  ReadOutDirection();
 80023a6:	f7ff fecd 	bl	8002144 <ReadOutDirection>
		  if(SRDatas.SR_f <= 155 && SRDatas.SR_b >= 450) {
 80023aa:	4b25      	ldr	r3, [pc, #148]	; (8002440 <main+0x2a0>)
 80023ac:	e9d3 0100 	ldrd	r0, r1, [r3]
 80023b0:	a30d      	add	r3, pc, #52	; (adr r3, 80023e8 <main+0x248>)
 80023b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023b6:	f7fe fae3 	bl	8000980 <__aeabi_dcmple>
 80023ba:	4603      	mov	r3, r0
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d00d      	beq.n	80023dc <main+0x23c>
 80023c0:	4b1f      	ldr	r3, [pc, #124]	; (8002440 <main+0x2a0>)
 80023c2:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80023c6:	a30a      	add	r3, pc, #40	; (adr r3, 80023f0 <main+0x250>)
 80023c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023cc:	f7fe fae2 	bl	8000994 <__aeabi_dcmpge>
 80023d0:	4603      	mov	r3, r0
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d002      	beq.n	80023dc <main+0x23c>
			  outDir = 0;
 80023d6:	4b21      	ldr	r3, [pc, #132]	; (800245c <main+0x2bc>)
 80023d8:	2200      	movs	r2, #0
 80023da:	601a      	str	r2, [r3, #0]
		  }
		  outState = HALTED;
 80023dc:	4b0e      	ldr	r3, [pc, #56]	; (8002418 <main+0x278>)
 80023de:	2202      	movs	r2, #2
 80023e0:	701a      	strb	r2, [r3, #0]
		  break;
 80023e2:	e138      	b.n	8002656 <main+0x4b6>
 80023e4:	f3af 8000 	nop.w
 80023e8:	00000000 	.word	0x00000000
 80023ec:	40636000 	.word	0x40636000
 80023f0:	00000000 	.word	0x00000000
 80023f4:	407c2000 	.word	0x407c2000
 80023f8:	200003e0 	.word	0x200003e0
 80023fc:	20000428 	.word	0x20000428
 8002400:	20000470 	.word	0x20000470
 8002404:	200004b8 	.word	0x200004b8
 8002408:	40012c00 	.word	0x40012c00
 800240c:	20000264 	.word	0x20000264
 8002410:	40011000 	.word	0x40011000
 8002414:	20000344 	.word	0x20000344
 8002418:	20000340 	.word	0x20000340
 800241c:	200002f8 	.word	0x200002f8
 8002420:	20000014 	.word	0x20000014
 8002424:	20000034 	.word	0x20000034
 8002428:	20000040 	.word	0x20000040
 800242c:	2000004c 	.word	0x2000004c
 8002430:	20000058 	.word	0x20000058
 8002434:	20000074 	.word	0x20000074
 8002438:	20000250 	.word	0x20000250
 800243c:	20000075 	.word	0x20000075
 8002440:	20000308 	.word	0x20000308
 8002444:	20000064 	.word	0x20000064
 8002448:	20000260 	.word	0x20000260
 800244c:	2000032c 	.word	0x2000032c
 8002450:	20000330 	.word	0x20000330
 8002454:	20000338 	.word	0x20000338
 8002458:	20000350 	.word	0x20000350
 800245c:	2000034c 	.word	0x2000034c
	  case HALTED:
		  if (ballInView) {
 8002460:	4b7f      	ldr	r3, [pc, #508]	; (8002660 <main+0x4c0>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	2b00      	cmp	r3, #0
 8002466:	f43f aef1 	beq.w	800224c <main+0xac>
			  if (ballTransform.ballx >= 0) teta = -(atan((double)ballTransform.bally / ballTransform.ballx) * RAD_TO_DEG - 90);
 800246a:	4b7e      	ldr	r3, [pc, #504]	; (8002664 <main+0x4c4>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	2b00      	cmp	r3, #0
 8002470:	db3c      	blt.n	80024ec <main+0x34c>
 8002472:	4b7c      	ldr	r3, [pc, #496]	; (8002664 <main+0x4c4>)
 8002474:	685b      	ldr	r3, [r3, #4]
 8002476:	4618      	mov	r0, r3
 8002478:	f7fd ff9c 	bl	80003b4 <__aeabi_i2d>
 800247c:	4604      	mov	r4, r0
 800247e:	460d      	mov	r5, r1
 8002480:	4b78      	ldr	r3, [pc, #480]	; (8002664 <main+0x4c4>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	4618      	mov	r0, r3
 8002486:	f7fd ff95 	bl	80003b4 <__aeabi_i2d>
 800248a:	4602      	mov	r2, r0
 800248c:	460b      	mov	r3, r1
 800248e:	4620      	mov	r0, r4
 8002490:	4629      	mov	r1, r5
 8002492:	f7fe f923 	bl	80006dc <__aeabi_ddiv>
 8002496:	4602      	mov	r2, r0
 8002498:	460b      	mov	r3, r1
 800249a:	4610      	mov	r0, r2
 800249c:	4619      	mov	r1, r3
 800249e:	f004 fe9f 	bl	80071e0 <atan>
 80024a2:	f04f 0200 	mov.w	r2, #0
 80024a6:	4b70      	ldr	r3, [pc, #448]	; (8002668 <main+0x4c8>)
 80024a8:	f7fd ffee 	bl	8000488 <__aeabi_dmul>
 80024ac:	4602      	mov	r2, r0
 80024ae:	460b      	mov	r3, r1
 80024b0:	4610      	mov	r0, r2
 80024b2:	4619      	mov	r1, r3
 80024b4:	a368      	add	r3, pc, #416	; (adr r3, 8002658 <main+0x4b8>)
 80024b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024ba:	f7fe f90f 	bl	80006dc <__aeabi_ddiv>
 80024be:	4602      	mov	r2, r0
 80024c0:	460b      	mov	r3, r1
 80024c2:	4610      	mov	r0, r2
 80024c4:	4619      	mov	r1, r3
 80024c6:	f04f 0200 	mov.w	r2, #0
 80024ca:	4b68      	ldr	r3, [pc, #416]	; (800266c <main+0x4cc>)
 80024cc:	f7fd fe24 	bl	8000118 <__aeabi_dsub>
 80024d0:	4602      	mov	r2, r0
 80024d2:	460b      	mov	r3, r1
 80024d4:	60ba      	str	r2, [r7, #8]
 80024d6:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80024da:	60fb      	str	r3, [r7, #12]
 80024dc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80024e0:	f7fe fa82 	bl	80009e8 <__aeabi_d2iz>
 80024e4:	4603      	mov	r3, r0
 80024e6:	4a62      	ldr	r2, [pc, #392]	; (8002670 <main+0x4d0>)
 80024e8:	6013      	str	r3, [r2, #0]
 80024ea:	e048      	b.n	800257e <main+0x3de>
			  else if (ballTransform.ballx < 0) teta = -((atan((double)ballTransform.bally / ballTransform.ballx) + PI)* RAD_TO_DEG - 90);
 80024ec:	4b5d      	ldr	r3, [pc, #372]	; (8002664 <main+0x4c4>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	da44      	bge.n	800257e <main+0x3de>
 80024f4:	4b5b      	ldr	r3, [pc, #364]	; (8002664 <main+0x4c4>)
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	4618      	mov	r0, r3
 80024fa:	f7fd ff5b 	bl	80003b4 <__aeabi_i2d>
 80024fe:	4604      	mov	r4, r0
 8002500:	460d      	mov	r5, r1
 8002502:	4b58      	ldr	r3, [pc, #352]	; (8002664 <main+0x4c4>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4618      	mov	r0, r3
 8002508:	f7fd ff54 	bl	80003b4 <__aeabi_i2d>
 800250c:	4602      	mov	r2, r0
 800250e:	460b      	mov	r3, r1
 8002510:	4620      	mov	r0, r4
 8002512:	4629      	mov	r1, r5
 8002514:	f7fe f8e2 	bl	80006dc <__aeabi_ddiv>
 8002518:	4602      	mov	r2, r0
 800251a:	460b      	mov	r3, r1
 800251c:	4610      	mov	r0, r2
 800251e:	4619      	mov	r1, r3
 8002520:	f004 fe5e 	bl	80071e0 <atan>
 8002524:	a34c      	add	r3, pc, #304	; (adr r3, 8002658 <main+0x4b8>)
 8002526:	e9d3 2300 	ldrd	r2, r3, [r3]
 800252a:	f7fd fdf7 	bl	800011c <__adddf3>
 800252e:	4602      	mov	r2, r0
 8002530:	460b      	mov	r3, r1
 8002532:	4610      	mov	r0, r2
 8002534:	4619      	mov	r1, r3
 8002536:	f04f 0200 	mov.w	r2, #0
 800253a:	4b4b      	ldr	r3, [pc, #300]	; (8002668 <main+0x4c8>)
 800253c:	f7fd ffa4 	bl	8000488 <__aeabi_dmul>
 8002540:	4602      	mov	r2, r0
 8002542:	460b      	mov	r3, r1
 8002544:	4610      	mov	r0, r2
 8002546:	4619      	mov	r1, r3
 8002548:	a343      	add	r3, pc, #268	; (adr r3, 8002658 <main+0x4b8>)
 800254a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800254e:	f7fe f8c5 	bl	80006dc <__aeabi_ddiv>
 8002552:	4602      	mov	r2, r0
 8002554:	460b      	mov	r3, r1
 8002556:	4610      	mov	r0, r2
 8002558:	4619      	mov	r1, r3
 800255a:	f04f 0200 	mov.w	r2, #0
 800255e:	4b43      	ldr	r3, [pc, #268]	; (800266c <main+0x4cc>)
 8002560:	f7fd fdda 	bl	8000118 <__aeabi_dsub>
 8002564:	4602      	mov	r2, r0
 8002566:	460b      	mov	r3, r1
 8002568:	603a      	str	r2, [r7, #0]
 800256a:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800256e:	607b      	str	r3, [r7, #4]
 8002570:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002574:	f7fe fa38 	bl	80009e8 <__aeabi_d2iz>
 8002578:	4603      	mov	r3, r0
 800257a:	4a3d      	ldr	r2, [pc, #244]	; (8002670 <main+0x4d0>)
 800257c:	6013      	str	r3, [r2, #0]

			  switch (outDir) {
 800257e:	4b3d      	ldr	r3, [pc, #244]	; (8002674 <main+0x4d4>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	2b0b      	cmp	r3, #11
 8002584:	f63f ae62 	bhi.w	800224c <main+0xac>
 8002588:	a201      	add	r2, pc, #4	; (adr r2, 8002590 <main+0x3f0>)
 800258a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800258e:	bf00      	nop
 8002590:	080025c1 	.word	0x080025c1
 8002594:	080025e3 	.word	0x080025e3
 8002598:	0800224d 	.word	0x0800224d
 800259c:	0800224d 	.word	0x0800224d
 80025a0:	0800224d 	.word	0x0800224d
 80025a4:	0800224d 	.word	0x0800224d
 80025a8:	0800224d 	.word	0x0800224d
 80025ac:	0800224d 	.word	0x0800224d
 80025b0:	0800224d 	.word	0x0800224d
 80025b4:	0800224d 	.word	0x0800224d
 80025b8:	08002603 	.word	0x08002603
 80025bc:	08002625 	.word	0x08002625
			  case 0:
				  // front
				  outState = IN;
 80025c0:	4b2d      	ldr	r3, [pc, #180]	; (8002678 <main+0x4d8>)
 80025c2:	2200      	movs	r2, #0
 80025c4:	701a      	strb	r2, [r3, #0]
				  if(abs(teta) > FRONTOUTOFHALT) {
 80025c6:	4b2a      	ldr	r3, [pc, #168]	; (8002670 <main+0x4d0>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	bfb8      	it	lt
 80025ce:	425b      	neglt	r3, r3
 80025d0:	2b64      	cmp	r3, #100	; 0x64
 80025d2:	dd38      	ble.n	8002646 <main+0x4a6>
					  outState = IN;
 80025d4:	4b28      	ldr	r3, [pc, #160]	; (8002678 <main+0x4d8>)
 80025d6:	2200      	movs	r2, #0
 80025d8:	701a      	strb	r2, [r3, #0]
					  out_interrupt_counter = 0;
 80025da:	4b28      	ldr	r3, [pc, #160]	; (800267c <main+0x4dc>)
 80025dc:	2200      	movs	r2, #0
 80025de:	601a      	str	r2, [r3, #0]
				  }
				  break;
 80025e0:	e031      	b.n	8002646 <main+0x4a6>
			  case 1:
				  //back
				  if(abs(teta) < BACKOUTOFHALT) {
 80025e2:	4b23      	ldr	r3, [pc, #140]	; (8002670 <main+0x4d0>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f113 0f4f 	cmn.w	r3, #79	; 0x4f
 80025ea:	db2e      	blt.n	800264a <main+0x4aa>
 80025ec:	4b20      	ldr	r3, [pc, #128]	; (8002670 <main+0x4d0>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	2b4f      	cmp	r3, #79	; 0x4f
 80025f2:	dc2a      	bgt.n	800264a <main+0x4aa>
					  outState = IN;
 80025f4:	4b20      	ldr	r3, [pc, #128]	; (8002678 <main+0x4d8>)
 80025f6:	2200      	movs	r2, #0
 80025f8:	701a      	strb	r2, [r3, #0]
					  out_interrupt_counter = 0;
 80025fa:	4b20      	ldr	r3, [pc, #128]	; (800267c <main+0x4dc>)
 80025fc:	2200      	movs	r2, #0
 80025fe:	601a      	str	r2, [r3, #0]
				  }
				  break;
 8002600:	e023      	b.n	800264a <main+0x4aa>
			  case 10:
				  // RIGHT
				  if(teta < RIGHTOUTOFHALTMIN && teta > RIGHTOUTOFHALTMAX) {
 8002602:	4b1b      	ldr	r3, [pc, #108]	; (8002670 <main+0x4d0>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f113 0f2d 	cmn.w	r3, #45	; 0x2d
 800260a:	da20      	bge.n	800264e <main+0x4ae>
 800260c:	4b18      	ldr	r3, [pc, #96]	; (8002670 <main+0x4d0>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f113 0fa9 	cmn.w	r3, #169	; 0xa9
 8002614:	db1b      	blt.n	800264e <main+0x4ae>
					  outState = IN;
 8002616:	4b18      	ldr	r3, [pc, #96]	; (8002678 <main+0x4d8>)
 8002618:	2200      	movs	r2, #0
 800261a:	701a      	strb	r2, [r3, #0]
					  out_interrupt_counter = 0;
 800261c:	4b17      	ldr	r3, [pc, #92]	; (800267c <main+0x4dc>)
 800261e:	2200      	movs	r2, #0
 8002620:	601a      	str	r2, [r3, #0]
				  }
				  break;
 8002622:	e014      	b.n	800264e <main+0x4ae>
			  case 11:
				  // LEFT
				  if(teta > LEFTOUTOFHALTMIN && teta < LEFTOUTOFHALTMAX) {
 8002624:	4b12      	ldr	r3, [pc, #72]	; (8002670 <main+0x4d0>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	2b2d      	cmp	r3, #45	; 0x2d
 800262a:	dd12      	ble.n	8002652 <main+0x4b2>
 800262c:	4b10      	ldr	r3, [pc, #64]	; (8002670 <main+0x4d0>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	2ba9      	cmp	r3, #169	; 0xa9
 8002632:	dc0e      	bgt.n	8002652 <main+0x4b2>
					  outState = IN;
 8002634:	4b10      	ldr	r3, [pc, #64]	; (8002678 <main+0x4d8>)
 8002636:	2200      	movs	r2, #0
 8002638:	701a      	strb	r2, [r3, #0]
					  out_interrupt_counter = 0;
 800263a:	4b10      	ldr	r3, [pc, #64]	; (800267c <main+0x4dc>)
 800263c:	2200      	movs	r2, #0
 800263e:	601a      	str	r2, [r3, #0]
				  }
				  break;
 8002640:	e007      	b.n	8002652 <main+0x4b2>
		  break;
 8002642:	bf00      	nop
 8002644:	e602      	b.n	800224c <main+0xac>
				  break;
 8002646:	bf00      	nop
 8002648:	e600      	b.n	800224c <main+0xac>
				  break;
 800264a:	bf00      	nop
 800264c:	e5fe      	b.n	800224c <main+0xac>
				  break;
 800264e:	bf00      	nop
 8002650:	e5fc      	b.n	800224c <main+0xac>
				  break;
 8002652:	bf00      	nop
 8002654:	e5fa      	b.n	800224c <main+0xac>
	  if (out_interrupt) {
 8002656:	e5f9      	b.n	800224c <main+0xac>
 8002658:	53c8d4f1 	.word	0x53c8d4f1
 800265c:	400921fb 	.word	0x400921fb
 8002660:	20000260 	.word	0x20000260
 8002664:	20000250 	.word	0x20000250
 8002668:	40668000 	.word	0x40668000
 800266c:	40568000 	.word	0x40568000
 8002670:	20000360 	.word	0x20000360
 8002674:	2000034c 	.word	0x2000034c
 8002678:	20000340 	.word	0x20000340
 800267c:	20000348 	.word	0x20000348

08002680 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b090      	sub	sp, #64	; 0x40
 8002684:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002686:	f107 0318 	add.w	r3, r7, #24
 800268a:	2228      	movs	r2, #40	; 0x28
 800268c:	2100      	movs	r1, #0
 800268e:	4618      	mov	r0, r3
 8002690:	f004 fd49 	bl	8007126 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002694:	1d3b      	adds	r3, r7, #4
 8002696:	2200      	movs	r2, #0
 8002698:	601a      	str	r2, [r3, #0]
 800269a:	605a      	str	r2, [r3, #4]
 800269c:	609a      	str	r2, [r3, #8]
 800269e:	60da      	str	r2, [r3, #12]
 80026a0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80026a2:	2302      	movs	r3, #2
 80026a4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80026a6:	2301      	movs	r3, #1
 80026a8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80026aa:	2310      	movs	r3, #16
 80026ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80026ae:	2302      	movs	r3, #2
 80026b0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80026b2:	2300      	movs	r3, #0
 80026b4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 80026b6:	f44f 1320 	mov.w	r3, #2621440	; 0x280000
 80026ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80026bc:	f107 0318 	add.w	r3, r7, #24
 80026c0:	4618      	mov	r0, r3
 80026c2:	f002 fbc5 	bl	8004e50 <HAL_RCC_OscConfig>
 80026c6:	4603      	mov	r3, r0
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d001      	beq.n	80026d0 <SystemClock_Config+0x50>
  {
    Error_Handler();
 80026cc:	f000 f819 	bl	8002702 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80026d0:	230f      	movs	r3, #15
 80026d2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80026d4:	2302      	movs	r3, #2
 80026d6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80026d8:	2300      	movs	r3, #0
 80026da:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80026dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80026e0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80026e2:	2300      	movs	r3, #0
 80026e4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80026e6:	1d3b      	adds	r3, r7, #4
 80026e8:	2101      	movs	r1, #1
 80026ea:	4618      	mov	r0, r3
 80026ec:	f002 fe32 	bl	8005354 <HAL_RCC_ClockConfig>
 80026f0:	4603      	mov	r3, r0
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d001      	beq.n	80026fa <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80026f6:	f000 f804 	bl	8002702 <Error_Handler>
  }
}
 80026fa:	bf00      	nop
 80026fc:	3740      	adds	r7, #64	; 0x40
 80026fe:	46bd      	mov	sp, r7
 8002700:	bd80      	pop	{r7, pc}

08002702 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002702:	b480      	push	{r7}
 8002704:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002706:	b672      	cpsid	i
}
 8002708:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800270a:	bf00      	nop
 800270c:	e7fd      	b.n	800270a <Error_Handler+0x8>

0800270e <MPU6050_Init>:
    .Q_bias = 0.003f,
    .R_measure = 0.03f,
};

uint8_t MPU6050_Init(I2C_HandleTypeDef *I2Cx)
{
 800270e:	b580      	push	{r7, lr}
 8002710:	b088      	sub	sp, #32
 8002712:	af04      	add	r7, sp, #16
 8002714:	6078      	str	r0, [r7, #4]
    uint8_t check;
    uint8_t Data;

    // check device ID WHO_AM_I

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, i2c_timeout);
 8002716:	2364      	movs	r3, #100	; 0x64
 8002718:	9302      	str	r3, [sp, #8]
 800271a:	2301      	movs	r3, #1
 800271c:	9301      	str	r3, [sp, #4]
 800271e:	f107 030f 	add.w	r3, r7, #15
 8002722:	9300      	str	r3, [sp, #0]
 8002724:	2301      	movs	r3, #1
 8002726:	2275      	movs	r2, #117	; 0x75
 8002728:	21d0      	movs	r1, #208	; 0xd0
 800272a:	6878      	ldr	r0, [r7, #4]
 800272c:	f001 fdce 	bl	80042cc <HAL_I2C_Mem_Read>

    if (check == 104) // 0x68 will be returned by the sensor if everything goes well
 8002730:	7bfb      	ldrb	r3, [r7, #15]
 8002732:	2b68      	cmp	r3, #104	; 0x68
 8002734:	d14c      	bne.n	80027d0 <MPU6050_Init+0xc2>
    {
        // power management register 0X6B we should write all 0's to wake the sensor up
        Data = 0;
 8002736:	2300      	movs	r3, #0
 8002738:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1, i2c_timeout);
 800273a:	2364      	movs	r3, #100	; 0x64
 800273c:	9302      	str	r3, [sp, #8]
 800273e:	2301      	movs	r3, #1
 8002740:	9301      	str	r3, [sp, #4]
 8002742:	f107 030e 	add.w	r3, r7, #14
 8002746:	9300      	str	r3, [sp, #0]
 8002748:	2301      	movs	r3, #1
 800274a:	226b      	movs	r2, #107	; 0x6b
 800274c:	21d0      	movs	r1, #208	; 0xd0
 800274e:	6878      	ldr	r0, [r7, #4]
 8002750:	f001 fcc2 	bl	80040d8 <HAL_I2C_Mem_Write>

        // Set DATA RATE of 1KHz by writing SMPLRT_DIV register
        Data = 0x07;
 8002754:	2307      	movs	r3, #7
 8002756:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, i2c_timeout);
 8002758:	2364      	movs	r3, #100	; 0x64
 800275a:	9302      	str	r3, [sp, #8]
 800275c:	2301      	movs	r3, #1
 800275e:	9301      	str	r3, [sp, #4]
 8002760:	f107 030e 	add.w	r3, r7, #14
 8002764:	9300      	str	r3, [sp, #0]
 8002766:	2301      	movs	r3, #1
 8002768:	2219      	movs	r2, #25
 800276a:	21d0      	movs	r1, #208	; 0xd0
 800276c:	6878      	ldr	r0, [r7, #4]
 800276e:	f001 fcb3 	bl	80040d8 <HAL_I2C_Mem_Write>

        Data = 0x01;
 8002772:	2301      	movs	r3, #1
 8002774:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, 0x1A, 1, &Data, 1, i2c_timeout);
 8002776:	2364      	movs	r3, #100	; 0x64
 8002778:	9302      	str	r3, [sp, #8]
 800277a:	2301      	movs	r3, #1
 800277c:	9301      	str	r3, [sp, #4]
 800277e:	f107 030e 	add.w	r3, r7, #14
 8002782:	9300      	str	r3, [sp, #0]
 8002784:	2301      	movs	r3, #1
 8002786:	221a      	movs	r2, #26
 8002788:	21d0      	movs	r1, #208	; 0xd0
 800278a:	6878      	ldr	r0, [r7, #4]
 800278c:	f001 fca4 	bl	80040d8 <HAL_I2C_Mem_Write>

        // Set accelerometer configuration in ACCEL_CONFIG Register
        // XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> � 2g
        Data = 0x0;
 8002790:	2300      	movs	r3, #0
 8002792:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 8002794:	2364      	movs	r3, #100	; 0x64
 8002796:	9302      	str	r3, [sp, #8]
 8002798:	2301      	movs	r3, #1
 800279a:	9301      	str	r3, [sp, #4]
 800279c:	f107 030e 	add.w	r3, r7, #14
 80027a0:	9300      	str	r3, [sp, #0]
 80027a2:	2301      	movs	r3, #1
 80027a4:	221c      	movs	r2, #28
 80027a6:	21d0      	movs	r1, #208	; 0xd0
 80027a8:	6878      	ldr	r0, [r7, #4]
 80027aa:	f001 fc95 	bl	80040d8 <HAL_I2C_Mem_Write>

        // Set Gyroscopic configuration in GYRO_CONFIG Register
        // XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> � 250 �/s
        Data = 0x0;
 80027ae:	2300      	movs	r3, #0
 80027b0:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 80027b2:	2364      	movs	r3, #100	; 0x64
 80027b4:	9302      	str	r3, [sp, #8]
 80027b6:	2301      	movs	r3, #1
 80027b8:	9301      	str	r3, [sp, #4]
 80027ba:	f107 030e 	add.w	r3, r7, #14
 80027be:	9300      	str	r3, [sp, #0]
 80027c0:	2301      	movs	r3, #1
 80027c2:	221b      	movs	r2, #27
 80027c4:	21d0      	movs	r1, #208	; 0xd0
 80027c6:	6878      	ldr	r0, [r7, #4]
 80027c8:	f001 fc86 	bl	80040d8 <HAL_I2C_Mem_Write>
        return 0;
 80027cc:	2300      	movs	r3, #0
 80027ce:	e000      	b.n	80027d2 <MPU6050_Init+0xc4>
    }
    return 1;
 80027d0:	2301      	movs	r3, #1
}
 80027d2:	4618      	mov	r0, r3
 80027d4:	3710      	adds	r7, #16
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bd80      	pop	{r7, pc}
 80027da:	0000      	movs	r0, r0
 80027dc:	0000      	movs	r0, r0
	...

080027e0 <MPU6050_Read_All>:
    temp = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
    DataStruct->Temperature = (float)((int16_t)temp / (float)340.0 + (float)36.53);
}

void MPU6050_Read_All(I2C_HandleTypeDef *I2Cx, MPU6050_t *DataStruct, double RateCalibrationRoll, double RateCalibrationPitch, double RateCalibrationYaw)
{
 80027e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80027e4:	b096      	sub	sp, #88	; 0x58
 80027e6:	af04      	add	r7, sp, #16
 80027e8:	60f8      	str	r0, [r7, #12]
 80027ea:	60b9      	str	r1, [r7, #8]
 80027ec:	e9c7 2300 	strd	r2, r3, [r7]
    uint8_t Rec_Data[14];
    int16_t temp;

    // Read 14 BYTES of data starting from ACCEL_XOUT_H register

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 14, i2c_timeout);
 80027f0:	2364      	movs	r3, #100	; 0x64
 80027f2:	9302      	str	r3, [sp, #8]
 80027f4:	230e      	movs	r3, #14
 80027f6:	9301      	str	r3, [sp, #4]
 80027f8:	f107 0310 	add.w	r3, r7, #16
 80027fc:	9300      	str	r3, [sp, #0]
 80027fe:	2301      	movs	r3, #1
 8002800:	223b      	movs	r2, #59	; 0x3b
 8002802:	21d0      	movs	r1, #208	; 0xd0
 8002804:	68f8      	ldr	r0, [r7, #12]
 8002806:	f001 fd61 	bl	80042cc <HAL_I2C_Mem_Read>

    DataStruct->Accel_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
 800280a:	7c3b      	ldrb	r3, [r7, #16]
 800280c:	021b      	lsls	r3, r3, #8
 800280e:	b21a      	sxth	r2, r3
 8002810:	7c7b      	ldrb	r3, [r7, #17]
 8002812:	b21b      	sxth	r3, r3
 8002814:	4313      	orrs	r3, r2
 8002816:	b21a      	sxth	r2, r3
 8002818:	68bb      	ldr	r3, [r7, #8]
 800281a:	801a      	strh	r2, [r3, #0]
    DataStruct->Accel_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data[3]);
 800281c:	7cbb      	ldrb	r3, [r7, #18]
 800281e:	021b      	lsls	r3, r3, #8
 8002820:	b21a      	sxth	r2, r3
 8002822:	7cfb      	ldrb	r3, [r7, #19]
 8002824:	b21b      	sxth	r3, r3
 8002826:	4313      	orrs	r3, r2
 8002828:	b21a      	sxth	r2, r3
 800282a:	68bb      	ldr	r3, [r7, #8]
 800282c:	805a      	strh	r2, [r3, #2]
    DataStruct->Accel_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data[5]);
 800282e:	7d3b      	ldrb	r3, [r7, #20]
 8002830:	021b      	lsls	r3, r3, #8
 8002832:	b21a      	sxth	r2, r3
 8002834:	7d7b      	ldrb	r3, [r7, #21]
 8002836:	b21b      	sxth	r3, r3
 8002838:	4313      	orrs	r3, r2
 800283a:	b21a      	sxth	r2, r3
 800283c:	68bb      	ldr	r3, [r7, #8]
 800283e:	809a      	strh	r2, [r3, #4]
    temp = (int16_t)(Rec_Data[6] << 8 | Rec_Data[7]);
 8002840:	7dbb      	ldrb	r3, [r7, #22]
 8002842:	021b      	lsls	r3, r3, #8
 8002844:	b21a      	sxth	r2, r3
 8002846:	7dfb      	ldrb	r3, [r7, #23]
 8002848:	b21b      	sxth	r3, r3
 800284a:	4313      	orrs	r3, r2
 800284c:	87fb      	strh	r3, [r7, #62]	; 0x3e
    DataStruct->Gyro_X_RAW = (int16_t)(Rec_Data[8] << 8 | Rec_Data[9]);
 800284e:	7e3b      	ldrb	r3, [r7, #24]
 8002850:	021b      	lsls	r3, r3, #8
 8002852:	b21a      	sxth	r2, r3
 8002854:	7e7b      	ldrb	r3, [r7, #25]
 8002856:	b21b      	sxth	r3, r3
 8002858:	4313      	orrs	r3, r2
 800285a:	b21a      	sxth	r2, r3
 800285c:	68bb      	ldr	r3, [r7, #8]
 800285e:	841a      	strh	r2, [r3, #32]
    DataStruct->Gyro_Y_RAW = (int16_t)(Rec_Data[10] << 8 | Rec_Data[11]);
 8002860:	7ebb      	ldrb	r3, [r7, #26]
 8002862:	021b      	lsls	r3, r3, #8
 8002864:	b21a      	sxth	r2, r3
 8002866:	7efb      	ldrb	r3, [r7, #27]
 8002868:	b21b      	sxth	r3, r3
 800286a:	4313      	orrs	r3, r2
 800286c:	b21a      	sxth	r2, r3
 800286e:	68bb      	ldr	r3, [r7, #8]
 8002870:	845a      	strh	r2, [r3, #34]	; 0x22
    DataStruct->Gyro_Z_RAW = (int16_t)(Rec_Data[12] << 8 | Rec_Data[13]);
 8002872:	7f3b      	ldrb	r3, [r7, #28]
 8002874:	021b      	lsls	r3, r3, #8
 8002876:	b21a      	sxth	r2, r3
 8002878:	7f7b      	ldrb	r3, [r7, #29]
 800287a:	b21b      	sxth	r3, r3
 800287c:	4313      	orrs	r3, r2
 800287e:	b21a      	sxth	r2, r3
 8002880:	68bb      	ldr	r3, [r7, #8]
 8002882:	849a      	strh	r2, [r3, #36]	; 0x24

    DataStruct->Ax = DataStruct->Accel_X_RAW / 16384.0;
 8002884:	68bb      	ldr	r3, [r7, #8]
 8002886:	f9b3 3000 	ldrsh.w	r3, [r3]
 800288a:	4618      	mov	r0, r3
 800288c:	f7fd fd92 	bl	80003b4 <__aeabi_i2d>
 8002890:	f04f 0200 	mov.w	r2, #0
 8002894:	4ba0      	ldr	r3, [pc, #640]	; (8002b18 <MPU6050_Read_All+0x338>)
 8002896:	f7fd ff21 	bl	80006dc <__aeabi_ddiv>
 800289a:	4602      	mov	r2, r0
 800289c:	460b      	mov	r3, r1
 800289e:	68b9      	ldr	r1, [r7, #8]
 80028a0:	e9c1 2302 	strd	r2, r3, [r1, #8]
    DataStruct->Ay = DataStruct->Accel_Y_RAW / 16384.0;
 80028a4:	68bb      	ldr	r3, [r7, #8]
 80028a6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80028aa:	4618      	mov	r0, r3
 80028ac:	f7fd fd82 	bl	80003b4 <__aeabi_i2d>
 80028b0:	f04f 0200 	mov.w	r2, #0
 80028b4:	4b98      	ldr	r3, [pc, #608]	; (8002b18 <MPU6050_Read_All+0x338>)
 80028b6:	f7fd ff11 	bl	80006dc <__aeabi_ddiv>
 80028ba:	4602      	mov	r2, r0
 80028bc:	460b      	mov	r3, r1
 80028be:	68b9      	ldr	r1, [r7, #8]
 80028c0:	e9c1 2304 	strd	r2, r3, [r1, #16]
    DataStruct->Az = DataStruct->Accel_Z_RAW / Accel_Z_corrector;
 80028c4:	68bb      	ldr	r3, [r7, #8]
 80028c6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80028ca:	4618      	mov	r0, r3
 80028cc:	f7fd fd72 	bl	80003b4 <__aeabi_i2d>
 80028d0:	a38b      	add	r3, pc, #556	; (adr r3, 8002b00 <MPU6050_Read_All+0x320>)
 80028d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028d6:	f7fd ff01 	bl	80006dc <__aeabi_ddiv>
 80028da:	4602      	mov	r2, r0
 80028dc:	460b      	mov	r3, r1
 80028de:	68b9      	ldr	r1, [r7, #8]
 80028e0:	e9c1 2306 	strd	r2, r3, [r1, #24]
    DataStruct->Temperature = (float)((int16_t)temp / (float)340.0 + (float)36.53);
 80028e4:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 80028e8:	4618      	mov	r0, r3
 80028ea:	f7fe f9cf 	bl	8000c8c <__aeabi_i2f>
 80028ee:	4603      	mov	r3, r0
 80028f0:	498a      	ldr	r1, [pc, #552]	; (8002b1c <MPU6050_Read_All+0x33c>)
 80028f2:	4618      	mov	r0, r3
 80028f4:	f7fe fad2 	bl	8000e9c <__aeabi_fdiv>
 80028f8:	4603      	mov	r3, r0
 80028fa:	4989      	ldr	r1, [pc, #548]	; (8002b20 <MPU6050_Read_All+0x340>)
 80028fc:	4618      	mov	r0, r3
 80028fe:	f7fe f911 	bl	8000b24 <__addsf3>
 8002902:	4603      	mov	r3, r0
 8002904:	461a      	mov	r2, r3
 8002906:	68bb      	ldr	r3, [r7, #8]
 8002908:	641a      	str	r2, [r3, #64]	; 0x40
    DataStruct->Gx = DataStruct->Gyro_X_RAW / 131.0 - RateCalibrationRoll;
 800290a:	68bb      	ldr	r3, [r7, #8]
 800290c:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8002910:	4618      	mov	r0, r3
 8002912:	f7fd fd4f 	bl	80003b4 <__aeabi_i2d>
 8002916:	a37c      	add	r3, pc, #496	; (adr r3, 8002b08 <MPU6050_Read_All+0x328>)
 8002918:	e9d3 2300 	ldrd	r2, r3, [r3]
 800291c:	f7fd fede 	bl	80006dc <__aeabi_ddiv>
 8002920:	4602      	mov	r2, r0
 8002922:	460b      	mov	r3, r1
 8002924:	4610      	mov	r0, r2
 8002926:	4619      	mov	r1, r3
 8002928:	e9d7 2300 	ldrd	r2, r3, [r7]
 800292c:	f7fd fbf4 	bl	8000118 <__aeabi_dsub>
 8002930:	4602      	mov	r2, r0
 8002932:	460b      	mov	r3, r1
 8002934:	68b9      	ldr	r1, [r7, #8]
 8002936:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    DataStruct->Gy = DataStruct->Gyro_Y_RAW / 131.0 - RateCalibrationPitch;
 800293a:	68bb      	ldr	r3, [r7, #8]
 800293c:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8002940:	4618      	mov	r0, r3
 8002942:	f7fd fd37 	bl	80003b4 <__aeabi_i2d>
 8002946:	a370      	add	r3, pc, #448	; (adr r3, 8002b08 <MPU6050_Read_All+0x328>)
 8002948:	e9d3 2300 	ldrd	r2, r3, [r3]
 800294c:	f7fd fec6 	bl	80006dc <__aeabi_ddiv>
 8002950:	4602      	mov	r2, r0
 8002952:	460b      	mov	r3, r1
 8002954:	4610      	mov	r0, r2
 8002956:	4619      	mov	r1, r3
 8002958:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800295c:	f7fd fbdc 	bl	8000118 <__aeabi_dsub>
 8002960:	4602      	mov	r2, r0
 8002962:	460b      	mov	r3, r1
 8002964:	68b9      	ldr	r1, [r7, #8]
 8002966:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    DataStruct->Gz = DataStruct->Gyro_Z_RAW / 131.0 - RateCalibrationYaw;
 800296a:	68bb      	ldr	r3, [r7, #8]
 800296c:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8002970:	4618      	mov	r0, r3
 8002972:	f7fd fd1f 	bl	80003b4 <__aeabi_i2d>
 8002976:	a364      	add	r3, pc, #400	; (adr r3, 8002b08 <MPU6050_Read_All+0x328>)
 8002978:	e9d3 2300 	ldrd	r2, r3, [r3]
 800297c:	f7fd feae 	bl	80006dc <__aeabi_ddiv>
 8002980:	4602      	mov	r2, r0
 8002982:	460b      	mov	r3, r1
 8002984:	4610      	mov	r0, r2
 8002986:	4619      	mov	r1, r3
 8002988:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800298c:	f7fd fbc4 	bl	8000118 <__aeabi_dsub>
 8002990:	4602      	mov	r2, r0
 8002992:	460b      	mov	r3, r1
 8002994:	68b9      	ldr	r1, [r7, #8]
 8002996:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

    // Kalman angle solve
    double dt = (double)(HAL_GetTick() - timer) / 1000;
 800299a:	f000 ff51 	bl	8003840 <HAL_GetTick>
 800299e:	4602      	mov	r2, r0
 80029a0:	4b60      	ldr	r3, [pc, #384]	; (8002b24 <MPU6050_Read_All+0x344>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	1ad3      	subs	r3, r2, r3
 80029a6:	4618      	mov	r0, r3
 80029a8:	f7fd fcf4 	bl	8000394 <__aeabi_ui2d>
 80029ac:	f04f 0200 	mov.w	r2, #0
 80029b0:	4b5d      	ldr	r3, [pc, #372]	; (8002b28 <MPU6050_Read_All+0x348>)
 80029b2:	f7fd fe93 	bl	80006dc <__aeabi_ddiv>
 80029b6:	4602      	mov	r2, r0
 80029b8:	460b      	mov	r3, r1
 80029ba:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    timer = HAL_GetTick();
 80029be:	f000 ff3f 	bl	8003840 <HAL_GetTick>
 80029c2:	4603      	mov	r3, r0
 80029c4:	4a57      	ldr	r2, [pc, #348]	; (8002b24 <MPU6050_Read_All+0x344>)
 80029c6:	6013      	str	r3, [r2, #0]
    double roll;
    double roll_sqrt = sqrt(
        DataStruct->Accel_X_RAW * DataStruct->Accel_X_RAW + DataStruct->Accel_Z_RAW * DataStruct->Accel_Z_RAW);
 80029c8:	68bb      	ldr	r3, [r7, #8]
 80029ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 80029ce:	461a      	mov	r2, r3
 80029d0:	68bb      	ldr	r3, [r7, #8]
 80029d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80029d6:	fb03 f202 	mul.w	r2, r3, r2
 80029da:	68bb      	ldr	r3, [r7, #8]
 80029dc:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80029e0:	4619      	mov	r1, r3
 80029e2:	68bb      	ldr	r3, [r7, #8]
 80029e4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80029e8:	fb01 f303 	mul.w	r3, r1, r3
 80029ec:	4413      	add	r3, r2
    double roll_sqrt = sqrt(
 80029ee:	4618      	mov	r0, r3
 80029f0:	f7fd fce0 	bl	80003b4 <__aeabi_i2d>
 80029f4:	4602      	mov	r2, r0
 80029f6:	460b      	mov	r3, r1
 80029f8:	4610      	mov	r0, r2
 80029fa:	4619      	mov	r1, r3
 80029fc:	f004 fbc8 	bl	8007190 <sqrt>
 8002a00:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
    if (roll_sqrt != 0.0)
 8002a04:	f04f 0200 	mov.w	r2, #0
 8002a08:	f04f 0300 	mov.w	r3, #0
 8002a0c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002a10:	f7fd ffa2 	bl	8000958 <__aeabi_dcmpeq>
 8002a14:	4603      	mov	r3, r0
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d119      	bne.n	8002a4e <MPU6050_Read_All+0x26e>
    {
        roll = atan(DataStruct->Accel_Y_RAW / roll_sqrt) * RAD_TO_DEG;
 8002a1a:	68bb      	ldr	r3, [r7, #8]
 8002a1c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002a20:	4618      	mov	r0, r3
 8002a22:	f7fd fcc7 	bl	80003b4 <__aeabi_i2d>
 8002a26:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002a2a:	f7fd fe57 	bl	80006dc <__aeabi_ddiv>
 8002a2e:	4602      	mov	r2, r0
 8002a30:	460b      	mov	r3, r1
 8002a32:	4610      	mov	r0, r2
 8002a34:	4619      	mov	r1, r3
 8002a36:	f004 fbd3 	bl	80071e0 <atan>
 8002a3a:	a335      	add	r3, pc, #212	; (adr r3, 8002b10 <MPU6050_Read_All+0x330>)
 8002a3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a40:	f7fd fd22 	bl	8000488 <__aeabi_dmul>
 8002a44:	4602      	mov	r2, r0
 8002a46:	460b      	mov	r3, r1
 8002a48:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
 8002a4c:	e005      	b.n	8002a5a <MPU6050_Read_All+0x27a>
    }
    else
    {
        roll = 0.0;
 8002a4e:	f04f 0200 	mov.w	r2, #0
 8002a52:	f04f 0300 	mov.w	r3, #0
 8002a56:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    }
    double pitch = atan2(-DataStruct->Accel_X_RAW, DataStruct->Accel_Z_RAW) * RAD_TO_DEG;
 8002a5a:	68bb      	ldr	r3, [r7, #8]
 8002a5c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002a60:	425b      	negs	r3, r3
 8002a62:	4618      	mov	r0, r3
 8002a64:	f7fd fca6 	bl	80003b4 <__aeabi_i2d>
 8002a68:	4682      	mov	sl, r0
 8002a6a:	468b      	mov	fp, r1
 8002a6c:	68bb      	ldr	r3, [r7, #8]
 8002a6e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002a72:	4618      	mov	r0, r3
 8002a74:	f7fd fc9e 	bl	80003b4 <__aeabi_i2d>
 8002a78:	4602      	mov	r2, r0
 8002a7a:	460b      	mov	r3, r1
 8002a7c:	4650      	mov	r0, sl
 8002a7e:	4659      	mov	r1, fp
 8002a80:	f004 fb84 	bl	800718c <atan2>
 8002a84:	a322      	add	r3, pc, #136	; (adr r3, 8002b10 <MPU6050_Read_All+0x330>)
 8002a86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a8a:	f7fd fcfd 	bl	8000488 <__aeabi_dmul>
 8002a8e:	4602      	mov	r2, r0
 8002a90:	460b      	mov	r3, r1
 8002a92:	e9c7 2308 	strd	r2, r3, [r7, #32]
    if ((pitch < -90 && DataStruct->KalmanAngleY > 90) || (pitch > 90 && DataStruct->KalmanAngleY < -90))
 8002a96:	f04f 0200 	mov.w	r2, #0
 8002a9a:	4b24      	ldr	r3, [pc, #144]	; (8002b2c <MPU6050_Read_All+0x34c>)
 8002a9c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002aa0:	f7fd ff64 	bl	800096c <__aeabi_dcmplt>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d00a      	beq.n	8002ac0 <MPU6050_Read_All+0x2e0>
 8002aaa:	68bb      	ldr	r3, [r7, #8]
 8002aac:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8002ab0:	f04f 0200 	mov.w	r2, #0
 8002ab4:	4b1e      	ldr	r3, [pc, #120]	; (8002b30 <MPU6050_Read_All+0x350>)
 8002ab6:	f7fd ff77 	bl	80009a8 <__aeabi_dcmpgt>
 8002aba:	4603      	mov	r3, r0
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d114      	bne.n	8002aea <MPU6050_Read_All+0x30a>
 8002ac0:	f04f 0200 	mov.w	r2, #0
 8002ac4:	4b1a      	ldr	r3, [pc, #104]	; (8002b30 <MPU6050_Read_All+0x350>)
 8002ac6:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002aca:	f7fd ff6d 	bl	80009a8 <__aeabi_dcmpgt>
 8002ace:	4603      	mov	r3, r0
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d031      	beq.n	8002b38 <MPU6050_Read_All+0x358>
 8002ad4:	68bb      	ldr	r3, [r7, #8]
 8002ad6:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8002ada:	f04f 0200 	mov.w	r2, #0
 8002ade:	4b13      	ldr	r3, [pc, #76]	; (8002b2c <MPU6050_Read_All+0x34c>)
 8002ae0:	f7fd ff44 	bl	800096c <__aeabi_dcmplt>
 8002ae4:	4603      	mov	r3, r0
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d026      	beq.n	8002b38 <MPU6050_Read_All+0x358>
    {
        KalmanY.angle = pitch;
 8002aea:	4912      	ldr	r1, [pc, #72]	; (8002b34 <MPU6050_Read_All+0x354>)
 8002aec:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002af0:	e9c1 2306 	strd	r2, r3, [r1, #24]
        DataStruct->KalmanAngleY = pitch;
 8002af4:	68b9      	ldr	r1, [r7, #8]
 8002af6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002afa:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 8002afe:	e02e      	b.n	8002b5e <MPU6050_Read_All+0x37e>
 8002b00:	00000000 	.word	0x00000000
 8002b04:	40cc2900 	.word	0x40cc2900
 8002b08:	00000000 	.word	0x00000000
 8002b0c:	40606000 	.word	0x40606000
 8002b10:	1a63c1f8 	.word	0x1a63c1f8
 8002b14:	404ca5dc 	.word	0x404ca5dc
 8002b18:	40d00000 	.word	0x40d00000
 8002b1c:	43aa0000 	.word	0x43aa0000
 8002b20:	42121eb8 	.word	0x42121eb8
 8002b24:	20000364 	.word	0x20000364
 8002b28:	408f4000 	.word	0x408f4000
 8002b2c:	c0568000 	.word	0xc0568000
 8002b30:	40568000 	.word	0x40568000
 8002b34:	20000120 	.word	0x20000120
    }
    else
    {
        DataStruct->KalmanAngleY = Kalman_getAngle(&KalmanY, pitch, DataStruct->Gy, dt);
 8002b38:	68bb      	ldr	r3, [r7, #8]
 8002b3a:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8002b3e:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8002b42:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002b46:	e9cd 2300 	strd	r2, r3, [sp]
 8002b4a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002b4e:	481c      	ldr	r0, [pc, #112]	; (8002bc0 <MPU6050_Read_All+0x3e0>)
 8002b50:	f000 f83c 	bl	8002bcc <Kalman_getAngle>
 8002b54:	4602      	mov	r2, r0
 8002b56:	460b      	mov	r3, r1
 8002b58:	68b9      	ldr	r1, [r7, #8]
 8002b5a:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
    }
    if (fabs(DataStruct->KalmanAngleY) > 90)
 8002b5e:	68bb      	ldr	r3, [r7, #8]
 8002b60:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8002b64:	4690      	mov	r8, r2
 8002b66:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 8002b6a:	f04f 0200 	mov.w	r2, #0
 8002b6e:	4b15      	ldr	r3, [pc, #84]	; (8002bc4 <MPU6050_Read_All+0x3e4>)
 8002b70:	4640      	mov	r0, r8
 8002b72:	4649      	mov	r1, r9
 8002b74:	f7fd ff18 	bl	80009a8 <__aeabi_dcmpgt>
 8002b78:	4603      	mov	r3, r0
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d008      	beq.n	8002b90 <MPU6050_Read_All+0x3b0>
        DataStruct->Gx = -DataStruct->Gx;
 8002b7e:	68bb      	ldr	r3, [r7, #8]
 8002b80:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8002b84:	4614      	mov	r4, r2
 8002b86:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8002b8a:	68bb      	ldr	r3, [r7, #8]
 8002b8c:	e9c3 450a 	strd	r4, r5, [r3, #40]	; 0x28
    DataStruct->KalmanAngleX = Kalman_getAngle(&KalmanX, roll, DataStruct->Gx, dt);
 8002b90:	68bb      	ldr	r3, [r7, #8]
 8002b92:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8002b96:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8002b9a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002b9e:	e9cd 2300 	strd	r2, r3, [sp]
 8002ba2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002ba6:	4808      	ldr	r0, [pc, #32]	; (8002bc8 <MPU6050_Read_All+0x3e8>)
 8002ba8:	f000 f810 	bl	8002bcc <Kalman_getAngle>
 8002bac:	4602      	mov	r2, r0
 8002bae:	460b      	mov	r3, r1
 8002bb0:	68b9      	ldr	r1, [r7, #8]
 8002bb2:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
}
 8002bb6:	bf00      	nop
 8002bb8:	3748      	adds	r7, #72	; 0x48
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002bc0:	20000120 	.word	0x20000120
 8002bc4:	40568000 	.word	0x40568000
 8002bc8:	200000d8 	.word	0x200000d8

08002bcc <Kalman_getAngle>:

double Kalman_getAngle(Kalman_t *Kalman, double newAngle, double newRate, double dt)
{
 8002bcc:	b5b0      	push	{r4, r5, r7, lr}
 8002bce:	b092      	sub	sp, #72	; 0x48
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	60f8      	str	r0, [r7, #12]
 8002bd4:	e9c7 2300 	strd	r2, r3, [r7]
    double rate = newRate - Kalman->bias;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8002bde:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8002be2:	f7fd fa99 	bl	8000118 <__aeabi_dsub>
 8002be6:	4602      	mov	r2, r0
 8002be8:	460b      	mov	r3, r1
 8002bea:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    Kalman->angle += dt * rate;
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8002bf4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002bf8:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8002bfc:	f7fd fc44 	bl	8000488 <__aeabi_dmul>
 8002c00:	4602      	mov	r2, r0
 8002c02:	460b      	mov	r3, r1
 8002c04:	4620      	mov	r0, r4
 8002c06:	4629      	mov	r1, r5
 8002c08:	f7fd fa88 	bl	800011c <__adddf3>
 8002c0c:	4602      	mov	r2, r0
 8002c0e:	460b      	mov	r3, r1
 8002c10:	68f9      	ldr	r1, [r7, #12]
 8002c12:	e9c1 2306 	strd	r2, r3, [r1, #24]

    Kalman->P[0][0] += dt * (dt * Kalman->P[1][1] - Kalman->P[0][1] - Kalman->P[1][0] + Kalman->Q_angle);
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8002c22:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8002c26:	f7fd fc2f 	bl	8000488 <__aeabi_dmul>
 8002c2a:	4602      	mov	r2, r0
 8002c2c:	460b      	mov	r3, r1
 8002c2e:	4610      	mov	r0, r2
 8002c30:	4619      	mov	r1, r3
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8002c38:	f7fd fa6e 	bl	8000118 <__aeabi_dsub>
 8002c3c:	4602      	mov	r2, r0
 8002c3e:	460b      	mov	r3, r1
 8002c40:	4610      	mov	r0, r2
 8002c42:	4619      	mov	r1, r3
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8002c4a:	f7fd fa65 	bl	8000118 <__aeabi_dsub>
 8002c4e:	4602      	mov	r2, r0
 8002c50:	460b      	mov	r3, r1
 8002c52:	4610      	mov	r0, r2
 8002c54:	4619      	mov	r1, r3
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c5c:	f7fd fa5e 	bl	800011c <__adddf3>
 8002c60:	4602      	mov	r2, r0
 8002c62:	460b      	mov	r3, r1
 8002c64:	4610      	mov	r0, r2
 8002c66:	4619      	mov	r1, r3
 8002c68:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8002c6c:	f7fd fc0c 	bl	8000488 <__aeabi_dmul>
 8002c70:	4602      	mov	r2, r0
 8002c72:	460b      	mov	r3, r1
 8002c74:	4620      	mov	r0, r4
 8002c76:	4629      	mov	r1, r5
 8002c78:	f7fd fa50 	bl	800011c <__adddf3>
 8002c7c:	4602      	mov	r2, r0
 8002c7e:	460b      	mov	r3, r1
 8002c80:	68f9      	ldr	r1, [r7, #12]
 8002c82:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    Kalman->P[0][1] -= dt * Kalman->P[1][1];
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8002c92:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8002c96:	f7fd fbf7 	bl	8000488 <__aeabi_dmul>
 8002c9a:	4602      	mov	r2, r0
 8002c9c:	460b      	mov	r3, r1
 8002c9e:	4620      	mov	r0, r4
 8002ca0:	4629      	mov	r1, r5
 8002ca2:	f7fd fa39 	bl	8000118 <__aeabi_dsub>
 8002ca6:	4602      	mov	r2, r0
 8002ca8:	460b      	mov	r3, r1
 8002caa:	68f9      	ldr	r1, [r7, #12]
 8002cac:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    Kalman->P[1][0] -= dt * Kalman->P[1][1];
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8002cbc:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8002cc0:	f7fd fbe2 	bl	8000488 <__aeabi_dmul>
 8002cc4:	4602      	mov	r2, r0
 8002cc6:	460b      	mov	r3, r1
 8002cc8:	4620      	mov	r0, r4
 8002cca:	4629      	mov	r1, r5
 8002ccc:	f7fd fa24 	bl	8000118 <__aeabi_dsub>
 8002cd0:	4602      	mov	r2, r0
 8002cd2:	460b      	mov	r3, r1
 8002cd4:	68f9      	ldr	r1, [r7, #12]
 8002cd6:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    Kalman->P[1][1] += Kalman->Q_bias * dt;
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8002ce6:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8002cea:	f7fd fbcd 	bl	8000488 <__aeabi_dmul>
 8002cee:	4602      	mov	r2, r0
 8002cf0:	460b      	mov	r3, r1
 8002cf2:	4620      	mov	r0, r4
 8002cf4:	4629      	mov	r1, r5
 8002cf6:	f7fd fa11 	bl	800011c <__adddf3>
 8002cfa:	4602      	mov	r2, r0
 8002cfc:	460b      	mov	r3, r1
 8002cfe:	68f9      	ldr	r1, [r7, #12]
 8002d00:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

    double S = Kalman->P[0][0] + Kalman->R_measure;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002d10:	f7fd fa04 	bl	800011c <__adddf3>
 8002d14:	4602      	mov	r2, r0
 8002d16:	460b      	mov	r3, r1
 8002d18:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    double K[2];
    K[0] = Kalman->P[0][0] / S;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8002d22:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002d26:	f7fd fcd9 	bl	80006dc <__aeabi_ddiv>
 8002d2a:	4602      	mov	r2, r0
 8002d2c:	460b      	mov	r3, r1
 8002d2e:	e9c7 2304 	strd	r2, r3, [r7, #16]
    K[1] = Kalman->P[1][0] / S;
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8002d38:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002d3c:	f7fd fcce 	bl	80006dc <__aeabi_ddiv>
 8002d40:	4602      	mov	r2, r0
 8002d42:	460b      	mov	r3, r1
 8002d44:	e9c7 2306 	strd	r2, r3, [r7, #24]

    double y = newAngle - Kalman->angle;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8002d4e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002d52:	f7fd f9e1 	bl	8000118 <__aeabi_dsub>
 8002d56:	4602      	mov	r2, r0
 8002d58:	460b      	mov	r3, r1
 8002d5a:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    Kalman->angle += K[0] * y;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8002d64:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002d68:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002d6c:	f7fd fb8c 	bl	8000488 <__aeabi_dmul>
 8002d70:	4602      	mov	r2, r0
 8002d72:	460b      	mov	r3, r1
 8002d74:	4620      	mov	r0, r4
 8002d76:	4629      	mov	r1, r5
 8002d78:	f7fd f9d0 	bl	800011c <__adddf3>
 8002d7c:	4602      	mov	r2, r0
 8002d7e:	460b      	mov	r3, r1
 8002d80:	68f9      	ldr	r1, [r7, #12]
 8002d82:	e9c1 2306 	strd	r2, r3, [r1, #24]
    Kalman->bias += K[1] * y;
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 8002d8c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002d90:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002d94:	f7fd fb78 	bl	8000488 <__aeabi_dmul>
 8002d98:	4602      	mov	r2, r0
 8002d9a:	460b      	mov	r3, r1
 8002d9c:	4620      	mov	r0, r4
 8002d9e:	4629      	mov	r1, r5
 8002da0:	f7fd f9bc 	bl	800011c <__adddf3>
 8002da4:	4602      	mov	r2, r0
 8002da6:	460b      	mov	r3, r1
 8002da8:	68f9      	ldr	r1, [r7, #12]
 8002daa:	e9c1 2308 	strd	r2, r3, [r1, #32]

    double P00_temp = Kalman->P[0][0];
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8002db4:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    double P01_temp = Kalman->P[0][1];
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8002dbe:	e9c7 2308 	strd	r2, r3, [r7, #32]

    Kalman->P[0][0] -= K[0] * P00_temp;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8002dc8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002dcc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002dd0:	f7fd fb5a 	bl	8000488 <__aeabi_dmul>
 8002dd4:	4602      	mov	r2, r0
 8002dd6:	460b      	mov	r3, r1
 8002dd8:	4620      	mov	r0, r4
 8002dda:	4629      	mov	r1, r5
 8002ddc:	f7fd f99c 	bl	8000118 <__aeabi_dsub>
 8002de0:	4602      	mov	r2, r0
 8002de2:	460b      	mov	r3, r1
 8002de4:	68f9      	ldr	r1, [r7, #12]
 8002de6:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    Kalman->P[0][1] -= K[0] * P01_temp;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 8002df0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002df4:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002df8:	f7fd fb46 	bl	8000488 <__aeabi_dmul>
 8002dfc:	4602      	mov	r2, r0
 8002dfe:	460b      	mov	r3, r1
 8002e00:	4620      	mov	r0, r4
 8002e02:	4629      	mov	r1, r5
 8002e04:	f7fd f988 	bl	8000118 <__aeabi_dsub>
 8002e08:	4602      	mov	r2, r0
 8002e0a:	460b      	mov	r3, r1
 8002e0c:	68f9      	ldr	r1, [r7, #12]
 8002e0e:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    Kalman->P[1][0] -= K[1] * P00_temp;
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 8002e18:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002e1c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002e20:	f7fd fb32 	bl	8000488 <__aeabi_dmul>
 8002e24:	4602      	mov	r2, r0
 8002e26:	460b      	mov	r3, r1
 8002e28:	4620      	mov	r0, r4
 8002e2a:	4629      	mov	r1, r5
 8002e2c:	f7fd f974 	bl	8000118 <__aeabi_dsub>
 8002e30:	4602      	mov	r2, r0
 8002e32:	460b      	mov	r3, r1
 8002e34:	68f9      	ldr	r1, [r7, #12]
 8002e36:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    Kalman->P[1][1] -= K[1] * P01_temp;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 8002e40:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002e44:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002e48:	f7fd fb1e 	bl	8000488 <__aeabi_dmul>
 8002e4c:	4602      	mov	r2, r0
 8002e4e:	460b      	mov	r3, r1
 8002e50:	4620      	mov	r0, r4
 8002e52:	4629      	mov	r1, r5
 8002e54:	f7fd f960 	bl	8000118 <__aeabi_dsub>
 8002e58:	4602      	mov	r2, r0
 8002e5a:	460b      	mov	r3, r1
 8002e5c:	68f9      	ldr	r1, [r7, #12]
 8002e5e:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

    return Kalman->angle;
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
};
 8002e68:	4610      	mov	r0, r2
 8002e6a:	4619      	mov	r1, r3
 8002e6c:	3748      	adds	r7, #72	; 0x48
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	bdb0      	pop	{r4, r5, r7, pc}
	...

08002e74 <SetupPixy>:
		1
};

uint8_t buffer_rx[32];

void SetupPixy(int *pixyChecked) {
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b082      	sub	sp, #8
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
	while(HAL_SPI_Receive(&hspi1, buffer_rx, 1, 1000));
 8002e7c:	bf00      	nop
 8002e7e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002e82:	2201      	movs	r2, #1
 8002e84:	4912      	ldr	r1, [pc, #72]	; (8002ed0 <SetupPixy+0x5c>)
 8002e86:	4813      	ldr	r0, [pc, #76]	; (8002ed4 <SetupPixy+0x60>)
 8002e88:	f002 fda8 	bl	80059dc <HAL_SPI_Receive>
 8002e8c:	4603      	mov	r3, r0
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d1f5      	bne.n	8002e7e <SetupPixy+0xa>

	HAL_SPI_Transmit(&hspi1, versionRequest, 4, 1000);
 8002e92:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002e96:	2204      	movs	r2, #4
 8002e98:	490f      	ldr	r1, [pc, #60]	; (8002ed8 <SetupPixy+0x64>)
 8002e9a:	480e      	ldr	r0, [pc, #56]	; (8002ed4 <SetupPixy+0x60>)
 8002e9c:	f002 fc62 	bl	8005764 <HAL_SPI_Transmit>
	HAL_Delay(1);
 8002ea0:	2001      	movs	r0, #1
 8002ea2:	f000 fcd7 	bl	8003854 <HAL_Delay>
	HAL_SPI_Receive(&hspi1, buffer_rx, 8, 1000);
 8002ea6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002eaa:	2208      	movs	r2, #8
 8002eac:	4908      	ldr	r1, [pc, #32]	; (8002ed0 <SetupPixy+0x5c>)
 8002eae:	4809      	ldr	r0, [pc, #36]	; (8002ed4 <SetupPixy+0x60>)
 8002eb0:	f002 fd94 	bl	80059dc <HAL_SPI_Receive>
	HAL_SPI_Receive(&hspi1, buffer_rx, 22, 1000);
 8002eb4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002eb8:	2216      	movs	r2, #22
 8002eba:	4905      	ldr	r1, [pc, #20]	; (8002ed0 <SetupPixy+0x5c>)
 8002ebc:	4805      	ldr	r0, [pc, #20]	; (8002ed4 <SetupPixy+0x60>)
 8002ebe:	f002 fd8d 	bl	80059dc <HAL_SPI_Receive>

	*pixyChecked = 1;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2201      	movs	r2, #1
 8002ec6:	601a      	str	r2, [r3, #0]
}
 8002ec8:	bf00      	nop
 8002eca:	3708      	adds	r7, #8
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	bd80      	pop	{r7, pc}
 8002ed0:	20000368 	.word	0x20000368
 8002ed4:	20000388 	.word	0x20000388
 8002ed8:	20000168 	.word	0x20000168

08002edc <getBallPosition>:

void getBallPosition(BallTransform *ball_transform, int *ballInView) {
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b084      	sub	sp, #16
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
 8002ee4:	6039      	str	r1, [r7, #0]

	// sending the getBlocks request and receiving datas
	// from pixy
	HAL_SPI_Transmit(&hspi1, getBlocks, 6, 1000);
 8002ee6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002eea:	2206      	movs	r2, #6
 8002eec:	4952      	ldr	r1, [pc, #328]	; (8003038 <getBallPosition+0x15c>)
 8002eee:	4853      	ldr	r0, [pc, #332]	; (800303c <getBallPosition+0x160>)
 8002ef0:	f002 fc38 	bl	8005764 <HAL_SPI_Transmit>
	HAL_Delay(1);
 8002ef4:	2001      	movs	r0, #1
 8002ef6:	f000 fcad 	bl	8003854 <HAL_Delay>
	HAL_SPI_Receive(&hspi1, buffer_rx, 8, 1000); //garbage values
 8002efa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002efe:	2208      	movs	r2, #8
 8002f00:	494f      	ldr	r1, [pc, #316]	; (8003040 <getBallPosition+0x164>)
 8002f02:	484e      	ldr	r0, [pc, #312]	; (800303c <getBallPosition+0x160>)
 8002f04:	f002 fd6a 	bl	80059dc <HAL_SPI_Receive>
	HAL_SPI_Receive(&hspi1, buffer_rx, 18, 1000);
 8002f08:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002f0c:	2212      	movs	r2, #18
 8002f0e:	494c      	ldr	r1, [pc, #304]	; (8003040 <getBallPosition+0x164>)
 8002f10:	484a      	ldr	r0, [pc, #296]	; (800303c <getBallPosition+0x160>)
 8002f12:	f002 fd63 	bl	80059dc <HAL_SPI_Receive>

	// checking if the length received data is 14 and the
	// ball is in the view and return from the function if it's not
	if (buffer_rx[3] != 14) {
 8002f16:	4b4a      	ldr	r3, [pc, #296]	; (8003040 <getBallPosition+0x164>)
 8002f18:	78db      	ldrb	r3, [r3, #3]
 8002f1a:	2b0e      	cmp	r3, #14
 8002f1c:	d003      	beq.n	8002f26 <getBallPosition+0x4a>
		*ballInView = 0;
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	2200      	movs	r2, #0
 8002f22:	601a      	str	r2, [r3, #0]
		return;
 8002f24:	e084      	b.n	8003030 <getBallPosition+0x154>
	}

	// saving the received data into the stuct
	ball_transform->ballx = buffer_rx[8] + buffer_rx[9] * 255;
 8002f26:	4b46      	ldr	r3, [pc, #280]	; (8003040 <getBallPosition+0x164>)
 8002f28:	7a1b      	ldrb	r3, [r3, #8]
 8002f2a:	4619      	mov	r1, r3
 8002f2c:	4b44      	ldr	r3, [pc, #272]	; (8003040 <getBallPosition+0x164>)
 8002f2e:	7a5b      	ldrb	r3, [r3, #9]
 8002f30:	461a      	mov	r2, r3
 8002f32:	4613      	mov	r3, r2
 8002f34:	021b      	lsls	r3, r3, #8
 8002f36:	1a9b      	subs	r3, r3, r2
 8002f38:	18ca      	adds	r2, r1, r3
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	601a      	str	r2, [r3, #0]
	ball_transform->bally = buffer_rx[10] + buffer_rx[11] * 255;
 8002f3e:	4b40      	ldr	r3, [pc, #256]	; (8003040 <getBallPosition+0x164>)
 8002f40:	7a9b      	ldrb	r3, [r3, #10]
 8002f42:	4619      	mov	r1, r3
 8002f44:	4b3e      	ldr	r3, [pc, #248]	; (8003040 <getBallPosition+0x164>)
 8002f46:	7adb      	ldrb	r3, [r3, #11]
 8002f48:	461a      	mov	r2, r3
 8002f4a:	4613      	mov	r3, r2
 8002f4c:	021b      	lsls	r3, r3, #8
 8002f4e:	1a9b      	subs	r3, r3, r2
 8002f50:	18ca      	adds	r2, r1, r3
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	605a      	str	r2, [r3, #4]
	ball_transform->ballWidth = buffer_rx[12] + buffer_rx[13] * 255;
 8002f56:	4b3a      	ldr	r3, [pc, #232]	; (8003040 <getBallPosition+0x164>)
 8002f58:	7b1b      	ldrb	r3, [r3, #12]
 8002f5a:	4619      	mov	r1, r3
 8002f5c:	4b38      	ldr	r3, [pc, #224]	; (8003040 <getBallPosition+0x164>)
 8002f5e:	7b5b      	ldrb	r3, [r3, #13]
 8002f60:	461a      	mov	r2, r3
 8002f62:	4613      	mov	r3, r2
 8002f64:	021b      	lsls	r3, r3, #8
 8002f66:	1a9b      	subs	r3, r3, r2
 8002f68:	18ca      	adds	r2, r1, r3
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	60da      	str	r2, [r3, #12]
	ball_transform->ballHeight = buffer_rx[14] + buffer_rx[15] * 255;
 8002f6e:	4b34      	ldr	r3, [pc, #208]	; (8003040 <getBallPosition+0x164>)
 8002f70:	7b9b      	ldrb	r3, [r3, #14]
 8002f72:	4619      	mov	r1, r3
 8002f74:	4b32      	ldr	r3, [pc, #200]	; (8003040 <getBallPosition+0x164>)
 8002f76:	7bdb      	ldrb	r3, [r3, #15]
 8002f78:	461a      	mov	r2, r3
 8002f7a:	4613      	mov	r3, r2
 8002f7c:	021b      	lsls	r3, r3, #8
 8002f7e:	1a9b      	subs	r3, r3, r2
 8002f80:	18ca      	adds	r2, r1, r3
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	609a      	str	r2, [r3, #8]

	// cropping the received ball position to be only in the mirror
	if (!(ball_transform->ballx > PIXY_X_MIN && ball_transform->ballx < PIXY_X_MAX)) {
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	2b53      	cmp	r3, #83	; 0x53
 8002f8c:	dd03      	ble.n	8002f96 <getBallPosition+0xba>
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	2be5      	cmp	r3, #229	; 0xe5
 8002f94:	dd03      	ble.n	8002f9e <getBallPosition+0xc2>
		*ballInView = 0;
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	2200      	movs	r2, #0
 8002f9a:	601a      	str	r2, [r3, #0]
		return;
 8002f9c:	e048      	b.n	8003030 <getBallPosition+0x154>
	}
	if (!(ball_transform->bally > PIXY_Y_MIN && ball_transform->bally < PIXY_Y_MAX)) {
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	685b      	ldr	r3, [r3, #4]
 8002fa2:	2b33      	cmp	r3, #51	; 0x33
 8002fa4:	dd03      	ble.n	8002fae <getBallPosition+0xd2>
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	685b      	ldr	r3, [r3, #4]
 8002faa:	2bc4      	cmp	r3, #196	; 0xc4
 8002fac:	dd03      	ble.n	8002fb6 <getBallPosition+0xda>
		*ballInView = 0;
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	601a      	str	r2, [r3, #0]
		return;
 8002fb4:	e03c      	b.n	8003030 <getBallPosition+0x154>
	}

	*ballInView = 1;
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	2201      	movs	r2, #1
 8002fba:	601a      	str	r2, [r3, #0]

	// changing the center of the image from the top left corner to the center of mirror
	if (ball_transform->ballx >= PIXY_X_ZERO) {
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	2ba1      	cmp	r3, #161	; 0xa1
 8002fc2:	dd06      	ble.n	8002fd2 <getBallPosition+0xf6>
		ball_transform->ballx -= PIXY_X_ZERO;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f1a3 02a2 	sub.w	r2, r3, #162	; 0xa2
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	601a      	str	r2, [r3, #0]
 8002fd0:	e005      	b.n	8002fde <getBallPosition+0x102>
	}else {
		ball_transform->ballx = -1 * (PIXY_X_ZERO - ball_transform->ballx);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f1a3 02a2 	sub.w	r2, r3, #162	; 0xa2
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	601a      	str	r2, [r3, #0]
	}

	if (ball_transform->bally >= PIXY_Y_ZERO) {
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	685b      	ldr	r3, [r3, #4]
 8002fe2:	2b6f      	cmp	r3, #111	; 0x6f
 8002fe4:	dd06      	ble.n	8002ff4 <getBallPosition+0x118>
		ball_transform->bally = -1 * (PIXY_Y_ZERO - ball_transform->bally);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	685b      	ldr	r3, [r3, #4]
 8002fea:	f1a3 0270 	sub.w	r2, r3, #112	; 0x70
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	605a      	str	r2, [r3, #4]
 8002ff2:	e005      	b.n	8003000 <getBallPosition+0x124>
	}else {
		ball_transform->bally -= PIXY_Y_ZERO;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	685b      	ldr	r3, [r3, #4]
 8002ff8:	f1a3 0270 	sub.w	r2, r3, #112	; 0x70
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	605a      	str	r2, [r3, #4]
	}

	ball_transform->ballx *= -1;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	425a      	negs	r2, r3
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	601a      	str	r2, [r3, #0]
	ball_transform->bally *= -1;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	685b      	ldr	r3, [r3, #4]
 800300e:	425a      	negs	r2, r3
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	605a      	str	r2, [r3, #4]

	for (int i = 0; i < 26; i++) {
 8003014:	2300      	movs	r3, #0
 8003016:	60fb      	str	r3, [r7, #12]
 8003018:	e007      	b.n	800302a <getBallPosition+0x14e>
		buffer_rx[i] = 0;
 800301a:	4a09      	ldr	r2, [pc, #36]	; (8003040 <getBallPosition+0x164>)
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	4413      	add	r3, r2
 8003020:	2200      	movs	r2, #0
 8003022:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 26; i++) {
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	3301      	adds	r3, #1
 8003028:	60fb      	str	r3, [r7, #12]
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	2b19      	cmp	r3, #25
 800302e:	ddf4      	ble.n	800301a <getBallPosition+0x13e>
	}
}
 8003030:	3710      	adds	r7, #16
 8003032:	46bd      	mov	sp, r7
 8003034:	bd80      	pop	{r7, pc}
 8003036:	bf00      	nop
 8003038:	2000016c 	.word	0x2000016c
 800303c:	20000388 	.word	0x20000388
 8003040:	20000368 	.word	0x20000368

08003044 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8003048:	4b17      	ldr	r3, [pc, #92]	; (80030a8 <MX_SPI1_Init+0x64>)
 800304a:	4a18      	ldr	r2, [pc, #96]	; (80030ac <MX_SPI1_Init+0x68>)
 800304c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800304e:	4b16      	ldr	r3, [pc, #88]	; (80030a8 <MX_SPI1_Init+0x64>)
 8003050:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003054:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003056:	4b14      	ldr	r3, [pc, #80]	; (80030a8 <MX_SPI1_Init+0x64>)
 8003058:	2200      	movs	r2, #0
 800305a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800305c:	4b12      	ldr	r3, [pc, #72]	; (80030a8 <MX_SPI1_Init+0x64>)
 800305e:	2200      	movs	r2, #0
 8003060:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003062:	4b11      	ldr	r3, [pc, #68]	; (80030a8 <MX_SPI1_Init+0x64>)
 8003064:	2200      	movs	r2, #0
 8003066:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003068:	4b0f      	ldr	r3, [pc, #60]	; (80030a8 <MX_SPI1_Init+0x64>)
 800306a:	2200      	movs	r2, #0
 800306c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800306e:	4b0e      	ldr	r3, [pc, #56]	; (80030a8 <MX_SPI1_Init+0x64>)
 8003070:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003074:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8003076:	4b0c      	ldr	r3, [pc, #48]	; (80030a8 <MX_SPI1_Init+0x64>)
 8003078:	2210      	movs	r2, #16
 800307a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800307c:	4b0a      	ldr	r3, [pc, #40]	; (80030a8 <MX_SPI1_Init+0x64>)
 800307e:	2200      	movs	r2, #0
 8003080:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003082:	4b09      	ldr	r3, [pc, #36]	; (80030a8 <MX_SPI1_Init+0x64>)
 8003084:	2200      	movs	r2, #0
 8003086:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003088:	4b07      	ldr	r3, [pc, #28]	; (80030a8 <MX_SPI1_Init+0x64>)
 800308a:	2200      	movs	r2, #0
 800308c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800308e:	4b06      	ldr	r3, [pc, #24]	; (80030a8 <MX_SPI1_Init+0x64>)
 8003090:	220a      	movs	r2, #10
 8003092:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003094:	4804      	ldr	r0, [pc, #16]	; (80030a8 <MX_SPI1_Init+0x64>)
 8003096:	f002 fae1 	bl	800565c <HAL_SPI_Init>
 800309a:	4603      	mov	r3, r0
 800309c:	2b00      	cmp	r3, #0
 800309e:	d001      	beq.n	80030a4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80030a0:	f7ff fb2f 	bl	8002702 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80030a4:	bf00      	nop
 80030a6:	bd80      	pop	{r7, pc}
 80030a8:	20000388 	.word	0x20000388
 80030ac:	40013000 	.word	0x40013000

080030b0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b08a      	sub	sp, #40	; 0x28
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030b8:	f107 0314 	add.w	r3, r7, #20
 80030bc:	2200      	movs	r2, #0
 80030be:	601a      	str	r2, [r3, #0]
 80030c0:	605a      	str	r2, [r3, #4]
 80030c2:	609a      	str	r2, [r3, #8]
 80030c4:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	4a22      	ldr	r2, [pc, #136]	; (8003154 <HAL_SPI_MspInit+0xa4>)
 80030cc:	4293      	cmp	r3, r2
 80030ce:	d13d      	bne.n	800314c <HAL_SPI_MspInit+0x9c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80030d0:	4b21      	ldr	r3, [pc, #132]	; (8003158 <HAL_SPI_MspInit+0xa8>)
 80030d2:	699b      	ldr	r3, [r3, #24]
 80030d4:	4a20      	ldr	r2, [pc, #128]	; (8003158 <HAL_SPI_MspInit+0xa8>)
 80030d6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80030da:	6193      	str	r3, [r2, #24]
 80030dc:	4b1e      	ldr	r3, [pc, #120]	; (8003158 <HAL_SPI_MspInit+0xa8>)
 80030de:	699b      	ldr	r3, [r3, #24]
 80030e0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80030e4:	613b      	str	r3, [r7, #16]
 80030e6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80030e8:	4b1b      	ldr	r3, [pc, #108]	; (8003158 <HAL_SPI_MspInit+0xa8>)
 80030ea:	699b      	ldr	r3, [r3, #24]
 80030ec:	4a1a      	ldr	r2, [pc, #104]	; (8003158 <HAL_SPI_MspInit+0xa8>)
 80030ee:	f043 0308 	orr.w	r3, r3, #8
 80030f2:	6193      	str	r3, [r2, #24]
 80030f4:	4b18      	ldr	r3, [pc, #96]	; (8003158 <HAL_SPI_MspInit+0xa8>)
 80030f6:	699b      	ldr	r3, [r3, #24]
 80030f8:	f003 0308 	and.w	r3, r3, #8
 80030fc:	60fb      	str	r3, [r7, #12]
 80030fe:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 8003100:	2328      	movs	r3, #40	; 0x28
 8003102:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003104:	2302      	movs	r3, #2
 8003106:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003108:	2303      	movs	r3, #3
 800310a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800310c:	f107 0314 	add.w	r3, r7, #20
 8003110:	4619      	mov	r1, r3
 8003112:	4812      	ldr	r0, [pc, #72]	; (800315c <HAL_SPI_MspInit+0xac>)
 8003114:	f000 fcd0 	bl	8003ab8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8003118:	2310      	movs	r3, #16
 800311a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800311c:	2300      	movs	r3, #0
 800311e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003120:	2300      	movs	r3, #0
 8003122:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003124:	f107 0314 	add.w	r3, r7, #20
 8003128:	4619      	mov	r1, r3
 800312a:	480c      	ldr	r0, [pc, #48]	; (800315c <HAL_SPI_MspInit+0xac>)
 800312c:	f000 fcc4 	bl	8003ab8 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_SPI1_ENABLE();
 8003130:	4b0b      	ldr	r3, [pc, #44]	; (8003160 <HAL_SPI_MspInit+0xb0>)
 8003132:	685b      	ldr	r3, [r3, #4]
 8003134:	627b      	str	r3, [r7, #36]	; 0x24
 8003136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003138:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800313c:	627b      	str	r3, [r7, #36]	; 0x24
 800313e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003140:	f043 0301 	orr.w	r3, r3, #1
 8003144:	627b      	str	r3, [r7, #36]	; 0x24
 8003146:	4a06      	ldr	r2, [pc, #24]	; (8003160 <HAL_SPI_MspInit+0xb0>)
 8003148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800314a:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800314c:	bf00      	nop
 800314e:	3728      	adds	r7, #40	; 0x28
 8003150:	46bd      	mov	sp, r7
 8003152:	bd80      	pop	{r7, pc}
 8003154:	40013000 	.word	0x40013000
 8003158:	40021000 	.word	0x40021000
 800315c:	40010c00 	.word	0x40010c00
 8003160:	40010000 	.word	0x40010000

08003164 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003164:	b480      	push	{r7}
 8003166:	b085      	sub	sp, #20
 8003168:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800316a:	4b15      	ldr	r3, [pc, #84]	; (80031c0 <HAL_MspInit+0x5c>)
 800316c:	699b      	ldr	r3, [r3, #24]
 800316e:	4a14      	ldr	r2, [pc, #80]	; (80031c0 <HAL_MspInit+0x5c>)
 8003170:	f043 0301 	orr.w	r3, r3, #1
 8003174:	6193      	str	r3, [r2, #24]
 8003176:	4b12      	ldr	r3, [pc, #72]	; (80031c0 <HAL_MspInit+0x5c>)
 8003178:	699b      	ldr	r3, [r3, #24]
 800317a:	f003 0301 	and.w	r3, r3, #1
 800317e:	60bb      	str	r3, [r7, #8]
 8003180:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003182:	4b0f      	ldr	r3, [pc, #60]	; (80031c0 <HAL_MspInit+0x5c>)
 8003184:	69db      	ldr	r3, [r3, #28]
 8003186:	4a0e      	ldr	r2, [pc, #56]	; (80031c0 <HAL_MspInit+0x5c>)
 8003188:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800318c:	61d3      	str	r3, [r2, #28]
 800318e:	4b0c      	ldr	r3, [pc, #48]	; (80031c0 <HAL_MspInit+0x5c>)
 8003190:	69db      	ldr	r3, [r3, #28]
 8003192:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003196:	607b      	str	r3, [r7, #4]
 8003198:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800319a:	4b0a      	ldr	r3, [pc, #40]	; (80031c4 <HAL_MspInit+0x60>)
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	60fb      	str	r3, [r7, #12]
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80031a6:	60fb      	str	r3, [r7, #12]
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80031ae:	60fb      	str	r3, [r7, #12]
 80031b0:	4a04      	ldr	r2, [pc, #16]	; (80031c4 <HAL_MspInit+0x60>)
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80031b6:	bf00      	nop
 80031b8:	3714      	adds	r7, #20
 80031ba:	46bd      	mov	sp, r7
 80031bc:	bc80      	pop	{r7}
 80031be:	4770      	bx	lr
 80031c0:	40021000 	.word	0x40021000
 80031c4:	40010000 	.word	0x40010000

080031c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80031c8:	b480      	push	{r7}
 80031ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80031cc:	bf00      	nop
 80031ce:	e7fd      	b.n	80031cc <NMI_Handler+0x4>

080031d0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80031d0:	b480      	push	{r7}
 80031d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80031d4:	bf00      	nop
 80031d6:	e7fd      	b.n	80031d4 <HardFault_Handler+0x4>

080031d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80031d8:	b480      	push	{r7}
 80031da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80031dc:	bf00      	nop
 80031de:	e7fd      	b.n	80031dc <MemManage_Handler+0x4>

080031e0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80031e0:	b480      	push	{r7}
 80031e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80031e4:	bf00      	nop
 80031e6:	e7fd      	b.n	80031e4 <BusFault_Handler+0x4>

080031e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80031e8:	b480      	push	{r7}
 80031ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80031ec:	bf00      	nop
 80031ee:	e7fd      	b.n	80031ec <UsageFault_Handler+0x4>

080031f0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80031f0:	b480      	push	{r7}
 80031f2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80031f4:	bf00      	nop
 80031f6:	46bd      	mov	sp, r7
 80031f8:	bc80      	pop	{r7}
 80031fa:	4770      	bx	lr

080031fc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80031fc:	b480      	push	{r7}
 80031fe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003200:	bf00      	nop
 8003202:	46bd      	mov	sp, r7
 8003204:	bc80      	pop	{r7}
 8003206:	4770      	bx	lr

08003208 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003208:	b480      	push	{r7}
 800320a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800320c:	bf00      	nop
 800320e:	46bd      	mov	sp, r7
 8003210:	bc80      	pop	{r7}
 8003212:	4770      	bx	lr

08003214 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003218:	f000 fb00 	bl	800381c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800321c:	bf00      	nop
 800321e:	bd80      	pop	{r7, pc}

08003220 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8003224:	2004      	movs	r0, #4
 8003226:	f000 fdfb 	bl	8003e20 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 800322a:	bf00      	nop
 800322c:	bd80      	pop	{r7, pc}
	...

08003230 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003234:	4802      	ldr	r0, [pc, #8]	; (8003240 <TIM4_IRQHandler+0x10>)
 8003236:	f003 f963 	bl	8006500 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800323a:	bf00      	nop
 800323c:	bd80      	pop	{r7, pc}
 800323e:	bf00      	nop
 8003240:	200004b8 	.word	0x200004b8

08003244 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003244:	b480      	push	{r7}
 8003246:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003248:	bf00      	nop
 800324a:	46bd      	mov	sp, r7
 800324c:	bc80      	pop	{r7}
 800324e:	4770      	bx	lr

08003250 <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	b096      	sub	sp, #88	; 0x58
 8003254:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003256:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800325a:	2200      	movs	r2, #0
 800325c:	601a      	str	r2, [r3, #0]
 800325e:	605a      	str	r2, [r3, #4]
 8003260:	609a      	str	r2, [r3, #8]
 8003262:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003264:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003268:	2200      	movs	r2, #0
 800326a:	601a      	str	r2, [r3, #0]
 800326c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800326e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003272:	2200      	movs	r2, #0
 8003274:	601a      	str	r2, [r3, #0]
 8003276:	605a      	str	r2, [r3, #4]
 8003278:	609a      	str	r2, [r3, #8]
 800327a:	60da      	str	r2, [r3, #12]
 800327c:	611a      	str	r2, [r3, #16]
 800327e:	615a      	str	r2, [r3, #20]
 8003280:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003282:	1d3b      	adds	r3, r7, #4
 8003284:	2220      	movs	r2, #32
 8003286:	2100      	movs	r1, #0
 8003288:	4618      	mov	r0, r3
 800328a:	f003 ff4c 	bl	8007126 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800328e:	4b4a      	ldr	r3, [pc, #296]	; (80033b8 <MX_TIM1_Init+0x168>)
 8003290:	4a4a      	ldr	r2, [pc, #296]	; (80033bc <MX_TIM1_Init+0x16c>)
 8003292:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 47;
 8003294:	4b48      	ldr	r3, [pc, #288]	; (80033b8 <MX_TIM1_Init+0x168>)
 8003296:	222f      	movs	r2, #47	; 0x2f
 8003298:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800329a:	4b47      	ldr	r3, [pc, #284]	; (80033b8 <MX_TIM1_Init+0x168>)
 800329c:	2200      	movs	r2, #0
 800329e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 99;
 80032a0:	4b45      	ldr	r3, [pc, #276]	; (80033b8 <MX_TIM1_Init+0x168>)
 80032a2:	2263      	movs	r2, #99	; 0x63
 80032a4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80032a6:	4b44      	ldr	r3, [pc, #272]	; (80033b8 <MX_TIM1_Init+0x168>)
 80032a8:	2200      	movs	r2, #0
 80032aa:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80032ac:	4b42      	ldr	r3, [pc, #264]	; (80033b8 <MX_TIM1_Init+0x168>)
 80032ae:	2200      	movs	r2, #0
 80032b0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80032b2:	4b41      	ldr	r3, [pc, #260]	; (80033b8 <MX_TIM1_Init+0x168>)
 80032b4:	2200      	movs	r2, #0
 80032b6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80032b8:	483f      	ldr	r0, [pc, #252]	; (80033b8 <MX_TIM1_Init+0x168>)
 80032ba:	f002 ff3b 	bl	8006134 <HAL_TIM_Base_Init>
 80032be:	4603      	mov	r3, r0
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d001      	beq.n	80032c8 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 80032c4:	f7ff fa1d 	bl	8002702 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80032c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80032cc:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80032ce:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80032d2:	4619      	mov	r1, r3
 80032d4:	4838      	ldr	r0, [pc, #224]	; (80033b8 <MX_TIM1_Init+0x168>)
 80032d6:	f003 fad9 	bl	800688c <HAL_TIM_ConfigClockSource>
 80032da:	4603      	mov	r3, r0
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d001      	beq.n	80032e4 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 80032e0:	f7ff fa0f 	bl	8002702 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80032e4:	4834      	ldr	r0, [pc, #208]	; (80033b8 <MX_TIM1_Init+0x168>)
 80032e6:	f003 f811 	bl	800630c <HAL_TIM_PWM_Init>
 80032ea:	4603      	mov	r3, r0
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d001      	beq.n	80032f4 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 80032f0:	f7ff fa07 	bl	8002702 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80032f4:	2300      	movs	r3, #0
 80032f6:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80032f8:	2300      	movs	r3, #0
 80032fa:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80032fc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003300:	4619      	mov	r1, r3
 8003302:	482d      	ldr	r0, [pc, #180]	; (80033b8 <MX_TIM1_Init+0x168>)
 8003304:	f003 fe4e 	bl	8006fa4 <HAL_TIMEx_MasterConfigSynchronization>
 8003308:	4603      	mov	r3, r0
 800330a:	2b00      	cmp	r3, #0
 800330c:	d001      	beq.n	8003312 <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 800330e:	f7ff f9f8 	bl	8002702 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003312:	2360      	movs	r3, #96	; 0x60
 8003314:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8003316:	2300      	movs	r3, #0
 8003318:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800331a:	2300      	movs	r3, #0
 800331c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800331e:	2300      	movs	r3, #0
 8003320:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003322:	2300      	movs	r3, #0
 8003324:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003326:	2300      	movs	r3, #0
 8003328:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800332a:	2300      	movs	r3, #0
 800332c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800332e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003332:	2204      	movs	r2, #4
 8003334:	4619      	mov	r1, r3
 8003336:	4820      	ldr	r0, [pc, #128]	; (80033b8 <MX_TIM1_Init+0x168>)
 8003338:	f003 f9ea 	bl	8006710 <HAL_TIM_PWM_ConfigChannel>
 800333c:	4603      	mov	r3, r0
 800333e:	2b00      	cmp	r3, #0
 8003340:	d001      	beq.n	8003346 <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8003342:	f7ff f9de 	bl	8002702 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003346:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800334a:	2208      	movs	r2, #8
 800334c:	4619      	mov	r1, r3
 800334e:	481a      	ldr	r0, [pc, #104]	; (80033b8 <MX_TIM1_Init+0x168>)
 8003350:	f003 f9de 	bl	8006710 <HAL_TIM_PWM_ConfigChannel>
 8003354:	4603      	mov	r3, r0
 8003356:	2b00      	cmp	r3, #0
 8003358:	d001      	beq.n	800335e <MX_TIM1_Init+0x10e>
  {
    Error_Handler();
 800335a:	f7ff f9d2 	bl	8002702 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800335e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003362:	220c      	movs	r2, #12
 8003364:	4619      	mov	r1, r3
 8003366:	4814      	ldr	r0, [pc, #80]	; (80033b8 <MX_TIM1_Init+0x168>)
 8003368:	f003 f9d2 	bl	8006710 <HAL_TIM_PWM_ConfigChannel>
 800336c:	4603      	mov	r3, r0
 800336e:	2b00      	cmp	r3, #0
 8003370:	d001      	beq.n	8003376 <MX_TIM1_Init+0x126>
  {
    Error_Handler();
 8003372:	f7ff f9c6 	bl	8002702 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003376:	2300      	movs	r3, #0
 8003378:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800337a:	2300      	movs	r3, #0
 800337c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800337e:	2300      	movs	r3, #0
 8003380:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003382:	2300      	movs	r3, #0
 8003384:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003386:	2300      	movs	r3, #0
 8003388:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800338a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800338e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003390:	2300      	movs	r3, #0
 8003392:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003394:	1d3b      	adds	r3, r7, #4
 8003396:	4619      	mov	r1, r3
 8003398:	4807      	ldr	r0, [pc, #28]	; (80033b8 <MX_TIM1_Init+0x168>)
 800339a:	f003 fe61 	bl	8007060 <HAL_TIMEx_ConfigBreakDeadTime>
 800339e:	4603      	mov	r3, r0
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d001      	beq.n	80033a8 <MX_TIM1_Init+0x158>
  {
    Error_Handler();
 80033a4:	f7ff f9ad 	bl	8002702 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80033a8:	4803      	ldr	r0, [pc, #12]	; (80033b8 <MX_TIM1_Init+0x168>)
 80033aa:	f000 f979 	bl	80036a0 <HAL_TIM_MspPostInit>

}
 80033ae:	bf00      	nop
 80033b0:	3758      	adds	r7, #88	; 0x58
 80033b2:	46bd      	mov	sp, r7
 80033b4:	bd80      	pop	{r7, pc}
 80033b6:	bf00      	nop
 80033b8:	200003e0 	.word	0x200003e0
 80033bc:	40012c00 	.word	0x40012c00

080033c0 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b08e      	sub	sp, #56	; 0x38
 80033c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80033c6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80033ca:	2200      	movs	r2, #0
 80033cc:	601a      	str	r2, [r3, #0]
 80033ce:	605a      	str	r2, [r3, #4]
 80033d0:	609a      	str	r2, [r3, #8]
 80033d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80033d4:	f107 0320 	add.w	r3, r7, #32
 80033d8:	2200      	movs	r2, #0
 80033da:	601a      	str	r2, [r3, #0]
 80033dc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80033de:	1d3b      	adds	r3, r7, #4
 80033e0:	2200      	movs	r2, #0
 80033e2:	601a      	str	r2, [r3, #0]
 80033e4:	605a      	str	r2, [r3, #4]
 80033e6:	609a      	str	r2, [r3, #8]
 80033e8:	60da      	str	r2, [r3, #12]
 80033ea:	611a      	str	r2, [r3, #16]
 80033ec:	615a      	str	r2, [r3, #20]
 80033ee:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80033f0:	4b2c      	ldr	r3, [pc, #176]	; (80034a4 <MX_TIM2_Init+0xe4>)
 80033f2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80033f6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 47;
 80033f8:	4b2a      	ldr	r3, [pc, #168]	; (80034a4 <MX_TIM2_Init+0xe4>)
 80033fa:	222f      	movs	r2, #47	; 0x2f
 80033fc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80033fe:	4b29      	ldr	r3, [pc, #164]	; (80034a4 <MX_TIM2_Init+0xe4>)
 8003400:	2200      	movs	r2, #0
 8003402:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 99;
 8003404:	4b27      	ldr	r3, [pc, #156]	; (80034a4 <MX_TIM2_Init+0xe4>)
 8003406:	2263      	movs	r2, #99	; 0x63
 8003408:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800340a:	4b26      	ldr	r3, [pc, #152]	; (80034a4 <MX_TIM2_Init+0xe4>)
 800340c:	2200      	movs	r2, #0
 800340e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003410:	4b24      	ldr	r3, [pc, #144]	; (80034a4 <MX_TIM2_Init+0xe4>)
 8003412:	2200      	movs	r2, #0
 8003414:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003416:	4823      	ldr	r0, [pc, #140]	; (80034a4 <MX_TIM2_Init+0xe4>)
 8003418:	f002 fe8c 	bl	8006134 <HAL_TIM_Base_Init>
 800341c:	4603      	mov	r3, r0
 800341e:	2b00      	cmp	r3, #0
 8003420:	d001      	beq.n	8003426 <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 8003422:	f7ff f96e 	bl	8002702 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003426:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800342a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800342c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003430:	4619      	mov	r1, r3
 8003432:	481c      	ldr	r0, [pc, #112]	; (80034a4 <MX_TIM2_Init+0xe4>)
 8003434:	f003 fa2a 	bl	800688c <HAL_TIM_ConfigClockSource>
 8003438:	4603      	mov	r3, r0
 800343a:	2b00      	cmp	r3, #0
 800343c:	d001      	beq.n	8003442 <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 800343e:	f7ff f960 	bl	8002702 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8003442:	4818      	ldr	r0, [pc, #96]	; (80034a4 <MX_TIM2_Init+0xe4>)
 8003444:	f002 ff62 	bl	800630c <HAL_TIM_PWM_Init>
 8003448:	4603      	mov	r3, r0
 800344a:	2b00      	cmp	r3, #0
 800344c:	d001      	beq.n	8003452 <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 800344e:	f7ff f958 	bl	8002702 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003452:	2300      	movs	r3, #0
 8003454:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003456:	2300      	movs	r3, #0
 8003458:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800345a:	f107 0320 	add.w	r3, r7, #32
 800345e:	4619      	mov	r1, r3
 8003460:	4810      	ldr	r0, [pc, #64]	; (80034a4 <MX_TIM2_Init+0xe4>)
 8003462:	f003 fd9f 	bl	8006fa4 <HAL_TIMEx_MasterConfigSynchronization>
 8003466:	4603      	mov	r3, r0
 8003468:	2b00      	cmp	r3, #0
 800346a:	d001      	beq.n	8003470 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 800346c:	f7ff f949 	bl	8002702 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003470:	2360      	movs	r3, #96	; 0x60
 8003472:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8003474:	2300      	movs	r3, #0
 8003476:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003478:	2300      	movs	r3, #0
 800347a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800347c:	2300      	movs	r3, #0
 800347e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003480:	1d3b      	adds	r3, r7, #4
 8003482:	220c      	movs	r2, #12
 8003484:	4619      	mov	r1, r3
 8003486:	4807      	ldr	r0, [pc, #28]	; (80034a4 <MX_TIM2_Init+0xe4>)
 8003488:	f003 f942 	bl	8006710 <HAL_TIM_PWM_ConfigChannel>
 800348c:	4603      	mov	r3, r0
 800348e:	2b00      	cmp	r3, #0
 8003490:	d001      	beq.n	8003496 <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 8003492:	f7ff f936 	bl	8002702 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8003496:	4803      	ldr	r0, [pc, #12]	; (80034a4 <MX_TIM2_Init+0xe4>)
 8003498:	f000 f902 	bl	80036a0 <HAL_TIM_MspPostInit>

}
 800349c:	bf00      	nop
 800349e:	3738      	adds	r7, #56	; 0x38
 80034a0:	46bd      	mov	sp, r7
 80034a2:	bd80      	pop	{r7, pc}
 80034a4:	20000428 	.word	0x20000428

080034a8 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b086      	sub	sp, #24
 80034ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80034ae:	f107 0308 	add.w	r3, r7, #8
 80034b2:	2200      	movs	r2, #0
 80034b4:	601a      	str	r2, [r3, #0]
 80034b6:	605a      	str	r2, [r3, #4]
 80034b8:	609a      	str	r2, [r3, #8]
 80034ba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80034bc:	463b      	mov	r3, r7
 80034be:	2200      	movs	r2, #0
 80034c0:	601a      	str	r2, [r3, #0]
 80034c2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80034c4:	4b1d      	ldr	r3, [pc, #116]	; (800353c <MX_TIM3_Init+0x94>)
 80034c6:	4a1e      	ldr	r2, [pc, #120]	; (8003540 <MX_TIM3_Init+0x98>)
 80034c8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 47;
 80034ca:	4b1c      	ldr	r3, [pc, #112]	; (800353c <MX_TIM3_Init+0x94>)
 80034cc:	222f      	movs	r2, #47	; 0x2f
 80034ce:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80034d0:	4b1a      	ldr	r3, [pc, #104]	; (800353c <MX_TIM3_Init+0x94>)
 80034d2:	2200      	movs	r2, #0
 80034d4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0xffff-1;
 80034d6:	4b19      	ldr	r3, [pc, #100]	; (800353c <MX_TIM3_Init+0x94>)
 80034d8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80034dc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80034de:	4b17      	ldr	r3, [pc, #92]	; (800353c <MX_TIM3_Init+0x94>)
 80034e0:	2200      	movs	r2, #0
 80034e2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80034e4:	4b15      	ldr	r3, [pc, #84]	; (800353c <MX_TIM3_Init+0x94>)
 80034e6:	2200      	movs	r2, #0
 80034e8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80034ea:	4814      	ldr	r0, [pc, #80]	; (800353c <MX_TIM3_Init+0x94>)
 80034ec:	f002 fe22 	bl	8006134 <HAL_TIM_Base_Init>
 80034f0:	4603      	mov	r3, r0
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d001      	beq.n	80034fa <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 80034f6:	f7ff f904 	bl	8002702 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80034fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80034fe:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003500:	f107 0308 	add.w	r3, r7, #8
 8003504:	4619      	mov	r1, r3
 8003506:	480d      	ldr	r0, [pc, #52]	; (800353c <MX_TIM3_Init+0x94>)
 8003508:	f003 f9c0 	bl	800688c <HAL_TIM_ConfigClockSource>
 800350c:	4603      	mov	r3, r0
 800350e:	2b00      	cmp	r3, #0
 8003510:	d001      	beq.n	8003516 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8003512:	f7ff f8f6 	bl	8002702 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003516:	2300      	movs	r3, #0
 8003518:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800351a:	2300      	movs	r3, #0
 800351c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800351e:	463b      	mov	r3, r7
 8003520:	4619      	mov	r1, r3
 8003522:	4806      	ldr	r0, [pc, #24]	; (800353c <MX_TIM3_Init+0x94>)
 8003524:	f003 fd3e 	bl	8006fa4 <HAL_TIMEx_MasterConfigSynchronization>
 8003528:	4603      	mov	r3, r0
 800352a:	2b00      	cmp	r3, #0
 800352c:	d001      	beq.n	8003532 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 800352e:	f7ff f8e8 	bl	8002702 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8003532:	bf00      	nop
 8003534:	3718      	adds	r7, #24
 8003536:	46bd      	mov	sp, r7
 8003538:	bd80      	pop	{r7, pc}
 800353a:	bf00      	nop
 800353c:	20000470 	.word	0x20000470
 8003540:	40000400 	.word	0x40000400

08003544 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	b086      	sub	sp, #24
 8003548:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800354a:	f107 0308 	add.w	r3, r7, #8
 800354e:	2200      	movs	r2, #0
 8003550:	601a      	str	r2, [r3, #0]
 8003552:	605a      	str	r2, [r3, #4]
 8003554:	609a      	str	r2, [r3, #8]
 8003556:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003558:	463b      	mov	r3, r7
 800355a:	2200      	movs	r2, #0
 800355c:	601a      	str	r2, [r3, #0]
 800355e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003560:	4b1d      	ldr	r3, [pc, #116]	; (80035d8 <MX_TIM4_Init+0x94>)
 8003562:	4a1e      	ldr	r2, [pc, #120]	; (80035dc <MX_TIM4_Init+0x98>)
 8003564:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 47;
 8003566:	4b1c      	ldr	r3, [pc, #112]	; (80035d8 <MX_TIM4_Init+0x94>)
 8003568:	222f      	movs	r2, #47	; 0x2f
 800356a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800356c:	4b1a      	ldr	r3, [pc, #104]	; (80035d8 <MX_TIM4_Init+0x94>)
 800356e:	2200      	movs	r2, #0
 8003570:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 8003572:	4b19      	ldr	r3, [pc, #100]	; (80035d8 <MX_TIM4_Init+0x94>)
 8003574:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003578:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800357a:	4b17      	ldr	r3, [pc, #92]	; (80035d8 <MX_TIM4_Init+0x94>)
 800357c:	2200      	movs	r2, #0
 800357e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003580:	4b15      	ldr	r3, [pc, #84]	; (80035d8 <MX_TIM4_Init+0x94>)
 8003582:	2200      	movs	r2, #0
 8003584:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8003586:	4814      	ldr	r0, [pc, #80]	; (80035d8 <MX_TIM4_Init+0x94>)
 8003588:	f002 fdd4 	bl	8006134 <HAL_TIM_Base_Init>
 800358c:	4603      	mov	r3, r0
 800358e:	2b00      	cmp	r3, #0
 8003590:	d001      	beq.n	8003596 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8003592:	f7ff f8b6 	bl	8002702 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003596:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800359a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800359c:	f107 0308 	add.w	r3, r7, #8
 80035a0:	4619      	mov	r1, r3
 80035a2:	480d      	ldr	r0, [pc, #52]	; (80035d8 <MX_TIM4_Init+0x94>)
 80035a4:	f003 f972 	bl	800688c <HAL_TIM_ConfigClockSource>
 80035a8:	4603      	mov	r3, r0
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d001      	beq.n	80035b2 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 80035ae:	f7ff f8a8 	bl	8002702 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80035b2:	2300      	movs	r3, #0
 80035b4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80035b6:	2300      	movs	r3, #0
 80035b8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80035ba:	463b      	mov	r3, r7
 80035bc:	4619      	mov	r1, r3
 80035be:	4806      	ldr	r0, [pc, #24]	; (80035d8 <MX_TIM4_Init+0x94>)
 80035c0:	f003 fcf0 	bl	8006fa4 <HAL_TIMEx_MasterConfigSynchronization>
 80035c4:	4603      	mov	r3, r0
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d001      	beq.n	80035ce <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 80035ca:	f7ff f89a 	bl	8002702 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80035ce:	bf00      	nop
 80035d0:	3718      	adds	r7, #24
 80035d2:	46bd      	mov	sp, r7
 80035d4:	bd80      	pop	{r7, pc}
 80035d6:	bf00      	nop
 80035d8:	200004b8 	.word	0x200004b8
 80035dc:	40000800 	.word	0x40000800

080035e0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b086      	sub	sp, #24
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	4a28      	ldr	r2, [pc, #160]	; (8003690 <HAL_TIM_Base_MspInit+0xb0>)
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d10c      	bne.n	800360c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80035f2:	4b28      	ldr	r3, [pc, #160]	; (8003694 <HAL_TIM_Base_MspInit+0xb4>)
 80035f4:	699b      	ldr	r3, [r3, #24]
 80035f6:	4a27      	ldr	r2, [pc, #156]	; (8003694 <HAL_TIM_Base_MspInit+0xb4>)
 80035f8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80035fc:	6193      	str	r3, [r2, #24]
 80035fe:	4b25      	ldr	r3, [pc, #148]	; (8003694 <HAL_TIM_Base_MspInit+0xb4>)
 8003600:	699b      	ldr	r3, [r3, #24]
 8003602:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003606:	617b      	str	r3, [r7, #20]
 8003608:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 800360a:	e03c      	b.n	8003686 <HAL_TIM_Base_MspInit+0xa6>
  else if(tim_baseHandle->Instance==TIM2)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003614:	d10c      	bne.n	8003630 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003616:	4b1f      	ldr	r3, [pc, #124]	; (8003694 <HAL_TIM_Base_MspInit+0xb4>)
 8003618:	69db      	ldr	r3, [r3, #28]
 800361a:	4a1e      	ldr	r2, [pc, #120]	; (8003694 <HAL_TIM_Base_MspInit+0xb4>)
 800361c:	f043 0301 	orr.w	r3, r3, #1
 8003620:	61d3      	str	r3, [r2, #28]
 8003622:	4b1c      	ldr	r3, [pc, #112]	; (8003694 <HAL_TIM_Base_MspInit+0xb4>)
 8003624:	69db      	ldr	r3, [r3, #28]
 8003626:	f003 0301 	and.w	r3, r3, #1
 800362a:	613b      	str	r3, [r7, #16]
 800362c:	693b      	ldr	r3, [r7, #16]
}
 800362e:	e02a      	b.n	8003686 <HAL_TIM_Base_MspInit+0xa6>
  else if(tim_baseHandle->Instance==TIM3)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4a18      	ldr	r2, [pc, #96]	; (8003698 <HAL_TIM_Base_MspInit+0xb8>)
 8003636:	4293      	cmp	r3, r2
 8003638:	d10c      	bne.n	8003654 <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800363a:	4b16      	ldr	r3, [pc, #88]	; (8003694 <HAL_TIM_Base_MspInit+0xb4>)
 800363c:	69db      	ldr	r3, [r3, #28]
 800363e:	4a15      	ldr	r2, [pc, #84]	; (8003694 <HAL_TIM_Base_MspInit+0xb4>)
 8003640:	f043 0302 	orr.w	r3, r3, #2
 8003644:	61d3      	str	r3, [r2, #28]
 8003646:	4b13      	ldr	r3, [pc, #76]	; (8003694 <HAL_TIM_Base_MspInit+0xb4>)
 8003648:	69db      	ldr	r3, [r3, #28]
 800364a:	f003 0302 	and.w	r3, r3, #2
 800364e:	60fb      	str	r3, [r7, #12]
 8003650:	68fb      	ldr	r3, [r7, #12]
}
 8003652:	e018      	b.n	8003686 <HAL_TIM_Base_MspInit+0xa6>
  else if(tim_baseHandle->Instance==TIM4)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	4a10      	ldr	r2, [pc, #64]	; (800369c <HAL_TIM_Base_MspInit+0xbc>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d113      	bne.n	8003686 <HAL_TIM_Base_MspInit+0xa6>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800365e:	4b0d      	ldr	r3, [pc, #52]	; (8003694 <HAL_TIM_Base_MspInit+0xb4>)
 8003660:	69db      	ldr	r3, [r3, #28]
 8003662:	4a0c      	ldr	r2, [pc, #48]	; (8003694 <HAL_TIM_Base_MspInit+0xb4>)
 8003664:	f043 0304 	orr.w	r3, r3, #4
 8003668:	61d3      	str	r3, [r2, #28]
 800366a:	4b0a      	ldr	r3, [pc, #40]	; (8003694 <HAL_TIM_Base_MspInit+0xb4>)
 800366c:	69db      	ldr	r3, [r3, #28]
 800366e:	f003 0304 	and.w	r3, r3, #4
 8003672:	60bb      	str	r3, [r7, #8]
 8003674:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 2, 0);
 8003676:	2200      	movs	r2, #0
 8003678:	2102      	movs	r1, #2
 800367a:	201e      	movs	r0, #30
 800367c:	f000 f9e5 	bl	8003a4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8003680:	201e      	movs	r0, #30
 8003682:	f000 f9fe 	bl	8003a82 <HAL_NVIC_EnableIRQ>
}
 8003686:	bf00      	nop
 8003688:	3718      	adds	r7, #24
 800368a:	46bd      	mov	sp, r7
 800368c:	bd80      	pop	{r7, pc}
 800368e:	bf00      	nop
 8003690:	40012c00 	.word	0x40012c00
 8003694:	40021000 	.word	0x40021000
 8003698:	40000400 	.word	0x40000400
 800369c:	40000800 	.word	0x40000800

080036a0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b088      	sub	sp, #32
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036a8:	f107 0310 	add.w	r3, r7, #16
 80036ac:	2200      	movs	r2, #0
 80036ae:	601a      	str	r2, [r3, #0]
 80036b0:	605a      	str	r2, [r3, #4]
 80036b2:	609a      	str	r2, [r3, #8]
 80036b4:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM1)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4a1f      	ldr	r2, [pc, #124]	; (8003738 <HAL_TIM_MspPostInit+0x98>)
 80036bc:	4293      	cmp	r3, r2
 80036be:	d119      	bne.n	80036f4 <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80036c0:	4b1e      	ldr	r3, [pc, #120]	; (800373c <HAL_TIM_MspPostInit+0x9c>)
 80036c2:	699b      	ldr	r3, [r3, #24]
 80036c4:	4a1d      	ldr	r2, [pc, #116]	; (800373c <HAL_TIM_MspPostInit+0x9c>)
 80036c6:	f043 0304 	orr.w	r3, r3, #4
 80036ca:	6193      	str	r3, [r2, #24]
 80036cc:	4b1b      	ldr	r3, [pc, #108]	; (800373c <HAL_TIM_MspPostInit+0x9c>)
 80036ce:	699b      	ldr	r3, [r3, #24]
 80036d0:	f003 0304 	and.w	r3, r3, #4
 80036d4:	60fb      	str	r3, [r7, #12]
 80036d6:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 80036d8:	f44f 6360 	mov.w	r3, #3584	; 0xe00
 80036dc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036de:	2302      	movs	r3, #2
 80036e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036e2:	2302      	movs	r3, #2
 80036e4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036e6:	f107 0310 	add.w	r3, r7, #16
 80036ea:	4619      	mov	r1, r3
 80036ec:	4814      	ldr	r0, [pc, #80]	; (8003740 <HAL_TIM_MspPostInit+0xa0>)
 80036ee:	f000 f9e3 	bl	8003ab8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80036f2:	e01c      	b.n	800372e <HAL_TIM_MspPostInit+0x8e>
  else if(timHandle->Instance==TIM2)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036fc:	d117      	bne.n	800372e <HAL_TIM_MspPostInit+0x8e>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80036fe:	4b0f      	ldr	r3, [pc, #60]	; (800373c <HAL_TIM_MspPostInit+0x9c>)
 8003700:	699b      	ldr	r3, [r3, #24]
 8003702:	4a0e      	ldr	r2, [pc, #56]	; (800373c <HAL_TIM_MspPostInit+0x9c>)
 8003704:	f043 0304 	orr.w	r3, r3, #4
 8003708:	6193      	str	r3, [r2, #24]
 800370a:	4b0c      	ldr	r3, [pc, #48]	; (800373c <HAL_TIM_MspPostInit+0x9c>)
 800370c:	699b      	ldr	r3, [r3, #24]
 800370e:	f003 0304 	and.w	r3, r3, #4
 8003712:	60bb      	str	r3, [r7, #8]
 8003714:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003716:	2308      	movs	r3, #8
 8003718:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800371a:	2302      	movs	r3, #2
 800371c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800371e:	2302      	movs	r3, #2
 8003720:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003722:	f107 0310 	add.w	r3, r7, #16
 8003726:	4619      	mov	r1, r3
 8003728:	4805      	ldr	r0, [pc, #20]	; (8003740 <HAL_TIM_MspPostInit+0xa0>)
 800372a:	f000 f9c5 	bl	8003ab8 <HAL_GPIO_Init>
}
 800372e:	bf00      	nop
 8003730:	3720      	adds	r7, #32
 8003732:	46bd      	mov	sp, r7
 8003734:	bd80      	pop	{r7, pc}
 8003736:	bf00      	nop
 8003738:	40012c00 	.word	0x40012c00
 800373c:	40021000 	.word	0x40021000
 8003740:	40010800 	.word	0x40010800

08003744 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003744:	480c      	ldr	r0, [pc, #48]	; (8003778 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003746:	490d      	ldr	r1, [pc, #52]	; (800377c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003748:	4a0d      	ldr	r2, [pc, #52]	; (8003780 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800374a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800374c:	e002      	b.n	8003754 <LoopCopyDataInit>

0800374e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800374e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003750:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003752:	3304      	adds	r3, #4

08003754 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003754:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003756:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003758:	d3f9      	bcc.n	800374e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800375a:	4a0a      	ldr	r2, [pc, #40]	; (8003784 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800375c:	4c0a      	ldr	r4, [pc, #40]	; (8003788 <LoopFillZerobss+0x22>)
  movs r3, #0
 800375e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003760:	e001      	b.n	8003766 <LoopFillZerobss>

08003762 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003762:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003764:	3204      	adds	r2, #4

08003766 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003766:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003768:	d3fb      	bcc.n	8003762 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800376a:	f7ff fd6b 	bl	8003244 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800376e:	f003 fce9 	bl	8007144 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003772:	f7fe fd15 	bl	80021a0 <main>
  bx lr
 8003776:	4770      	bx	lr
  ldr r0, =_sdata
 8003778:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800377c:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8003780:	08009038 	.word	0x08009038
  ldr r2, =_sbss
 8003784:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8003788:	2000063c 	.word	0x2000063c

0800378c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800378c:	e7fe      	b.n	800378c <ADC1_2_IRQHandler>
	...

08003790 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003794:	4b08      	ldr	r3, [pc, #32]	; (80037b8 <HAL_Init+0x28>)
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	4a07      	ldr	r2, [pc, #28]	; (80037b8 <HAL_Init+0x28>)
 800379a:	f043 0310 	orr.w	r3, r3, #16
 800379e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80037a0:	2003      	movs	r0, #3
 80037a2:	f000 f947 	bl	8003a34 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80037a6:	2000      	movs	r0, #0
 80037a8:	f000 f808 	bl	80037bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80037ac:	f7ff fcda 	bl	8003164 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80037b0:	2300      	movs	r3, #0
}
 80037b2:	4618      	mov	r0, r3
 80037b4:	bd80      	pop	{r7, pc}
 80037b6:	bf00      	nop
 80037b8:	40022000 	.word	0x40022000

080037bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	b082      	sub	sp, #8
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80037c4:	4b12      	ldr	r3, [pc, #72]	; (8003810 <HAL_InitTick+0x54>)
 80037c6:	681a      	ldr	r2, [r3, #0]
 80037c8:	4b12      	ldr	r3, [pc, #72]	; (8003814 <HAL_InitTick+0x58>)
 80037ca:	781b      	ldrb	r3, [r3, #0]
 80037cc:	4619      	mov	r1, r3
 80037ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80037d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80037d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80037da:	4618      	mov	r0, r3
 80037dc:	f000 f95f 	bl	8003a9e <HAL_SYSTICK_Config>
 80037e0:	4603      	mov	r3, r0
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d001      	beq.n	80037ea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80037e6:	2301      	movs	r3, #1
 80037e8:	e00e      	b.n	8003808 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2b0f      	cmp	r3, #15
 80037ee:	d80a      	bhi.n	8003806 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80037f0:	2200      	movs	r2, #0
 80037f2:	6879      	ldr	r1, [r7, #4]
 80037f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80037f8:	f000 f927 	bl	8003a4a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80037fc:	4a06      	ldr	r2, [pc, #24]	; (8003818 <HAL_InitTick+0x5c>)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003802:	2300      	movs	r3, #0
 8003804:	e000      	b.n	8003808 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003806:	2301      	movs	r3, #1
}
 8003808:	4618      	mov	r0, r3
 800380a:	3708      	adds	r7, #8
 800380c:	46bd      	mov	sp, r7
 800380e:	bd80      	pop	{r7, pc}
 8003810:	20000174 	.word	0x20000174
 8003814:	2000017c 	.word	0x2000017c
 8003818:	20000178 	.word	0x20000178

0800381c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800381c:	b480      	push	{r7}
 800381e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003820:	4b05      	ldr	r3, [pc, #20]	; (8003838 <HAL_IncTick+0x1c>)
 8003822:	781b      	ldrb	r3, [r3, #0]
 8003824:	461a      	mov	r2, r3
 8003826:	4b05      	ldr	r3, [pc, #20]	; (800383c <HAL_IncTick+0x20>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	4413      	add	r3, r2
 800382c:	4a03      	ldr	r2, [pc, #12]	; (800383c <HAL_IncTick+0x20>)
 800382e:	6013      	str	r3, [r2, #0]
}
 8003830:	bf00      	nop
 8003832:	46bd      	mov	sp, r7
 8003834:	bc80      	pop	{r7}
 8003836:	4770      	bx	lr
 8003838:	2000017c 	.word	0x2000017c
 800383c:	20000500 	.word	0x20000500

08003840 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003840:	b480      	push	{r7}
 8003842:	af00      	add	r7, sp, #0
  return uwTick;
 8003844:	4b02      	ldr	r3, [pc, #8]	; (8003850 <HAL_GetTick+0x10>)
 8003846:	681b      	ldr	r3, [r3, #0]
}
 8003848:	4618      	mov	r0, r3
 800384a:	46bd      	mov	sp, r7
 800384c:	bc80      	pop	{r7}
 800384e:	4770      	bx	lr
 8003850:	20000500 	.word	0x20000500

08003854 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b084      	sub	sp, #16
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800385c:	f7ff fff0 	bl	8003840 <HAL_GetTick>
 8003860:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800386c:	d005      	beq.n	800387a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800386e:	4b0a      	ldr	r3, [pc, #40]	; (8003898 <HAL_Delay+0x44>)
 8003870:	781b      	ldrb	r3, [r3, #0]
 8003872:	461a      	mov	r2, r3
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	4413      	add	r3, r2
 8003878:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800387a:	bf00      	nop
 800387c:	f7ff ffe0 	bl	8003840 <HAL_GetTick>
 8003880:	4602      	mov	r2, r0
 8003882:	68bb      	ldr	r3, [r7, #8]
 8003884:	1ad3      	subs	r3, r2, r3
 8003886:	68fa      	ldr	r2, [r7, #12]
 8003888:	429a      	cmp	r2, r3
 800388a:	d8f7      	bhi.n	800387c <HAL_Delay+0x28>
  {
  }
}
 800388c:	bf00      	nop
 800388e:	bf00      	nop
 8003890:	3710      	adds	r7, #16
 8003892:	46bd      	mov	sp, r7
 8003894:	bd80      	pop	{r7, pc}
 8003896:	bf00      	nop
 8003898:	2000017c 	.word	0x2000017c

0800389c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800389c:	b480      	push	{r7}
 800389e:	b085      	sub	sp, #20
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	f003 0307 	and.w	r3, r3, #7
 80038aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80038ac:	4b0c      	ldr	r3, [pc, #48]	; (80038e0 <__NVIC_SetPriorityGrouping+0x44>)
 80038ae:	68db      	ldr	r3, [r3, #12]
 80038b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80038b2:	68ba      	ldr	r2, [r7, #8]
 80038b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80038b8:	4013      	ands	r3, r2
 80038ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80038c0:	68bb      	ldr	r3, [r7, #8]
 80038c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80038c4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80038c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80038cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80038ce:	4a04      	ldr	r2, [pc, #16]	; (80038e0 <__NVIC_SetPriorityGrouping+0x44>)
 80038d0:	68bb      	ldr	r3, [r7, #8]
 80038d2:	60d3      	str	r3, [r2, #12]
}
 80038d4:	bf00      	nop
 80038d6:	3714      	adds	r7, #20
 80038d8:	46bd      	mov	sp, r7
 80038da:	bc80      	pop	{r7}
 80038dc:	4770      	bx	lr
 80038de:	bf00      	nop
 80038e0:	e000ed00 	.word	0xe000ed00

080038e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80038e4:	b480      	push	{r7}
 80038e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80038e8:	4b04      	ldr	r3, [pc, #16]	; (80038fc <__NVIC_GetPriorityGrouping+0x18>)
 80038ea:	68db      	ldr	r3, [r3, #12]
 80038ec:	0a1b      	lsrs	r3, r3, #8
 80038ee:	f003 0307 	and.w	r3, r3, #7
}
 80038f2:	4618      	mov	r0, r3
 80038f4:	46bd      	mov	sp, r7
 80038f6:	bc80      	pop	{r7}
 80038f8:	4770      	bx	lr
 80038fa:	bf00      	nop
 80038fc:	e000ed00 	.word	0xe000ed00

08003900 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003900:	b480      	push	{r7}
 8003902:	b083      	sub	sp, #12
 8003904:	af00      	add	r7, sp, #0
 8003906:	4603      	mov	r3, r0
 8003908:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800390a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800390e:	2b00      	cmp	r3, #0
 8003910:	db0b      	blt.n	800392a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003912:	79fb      	ldrb	r3, [r7, #7]
 8003914:	f003 021f 	and.w	r2, r3, #31
 8003918:	4906      	ldr	r1, [pc, #24]	; (8003934 <__NVIC_EnableIRQ+0x34>)
 800391a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800391e:	095b      	lsrs	r3, r3, #5
 8003920:	2001      	movs	r0, #1
 8003922:	fa00 f202 	lsl.w	r2, r0, r2
 8003926:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800392a:	bf00      	nop
 800392c:	370c      	adds	r7, #12
 800392e:	46bd      	mov	sp, r7
 8003930:	bc80      	pop	{r7}
 8003932:	4770      	bx	lr
 8003934:	e000e100 	.word	0xe000e100

08003938 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003938:	b480      	push	{r7}
 800393a:	b083      	sub	sp, #12
 800393c:	af00      	add	r7, sp, #0
 800393e:	4603      	mov	r3, r0
 8003940:	6039      	str	r1, [r7, #0]
 8003942:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003944:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003948:	2b00      	cmp	r3, #0
 800394a:	db0a      	blt.n	8003962 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	b2da      	uxtb	r2, r3
 8003950:	490c      	ldr	r1, [pc, #48]	; (8003984 <__NVIC_SetPriority+0x4c>)
 8003952:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003956:	0112      	lsls	r2, r2, #4
 8003958:	b2d2      	uxtb	r2, r2
 800395a:	440b      	add	r3, r1
 800395c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003960:	e00a      	b.n	8003978 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	b2da      	uxtb	r2, r3
 8003966:	4908      	ldr	r1, [pc, #32]	; (8003988 <__NVIC_SetPriority+0x50>)
 8003968:	79fb      	ldrb	r3, [r7, #7]
 800396a:	f003 030f 	and.w	r3, r3, #15
 800396e:	3b04      	subs	r3, #4
 8003970:	0112      	lsls	r2, r2, #4
 8003972:	b2d2      	uxtb	r2, r2
 8003974:	440b      	add	r3, r1
 8003976:	761a      	strb	r2, [r3, #24]
}
 8003978:	bf00      	nop
 800397a:	370c      	adds	r7, #12
 800397c:	46bd      	mov	sp, r7
 800397e:	bc80      	pop	{r7}
 8003980:	4770      	bx	lr
 8003982:	bf00      	nop
 8003984:	e000e100 	.word	0xe000e100
 8003988:	e000ed00 	.word	0xe000ed00

0800398c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800398c:	b480      	push	{r7}
 800398e:	b089      	sub	sp, #36	; 0x24
 8003990:	af00      	add	r7, sp, #0
 8003992:	60f8      	str	r0, [r7, #12]
 8003994:	60b9      	str	r1, [r7, #8]
 8003996:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	f003 0307 	and.w	r3, r3, #7
 800399e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80039a0:	69fb      	ldr	r3, [r7, #28]
 80039a2:	f1c3 0307 	rsb	r3, r3, #7
 80039a6:	2b04      	cmp	r3, #4
 80039a8:	bf28      	it	cs
 80039aa:	2304      	movcs	r3, #4
 80039ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80039ae:	69fb      	ldr	r3, [r7, #28]
 80039b0:	3304      	adds	r3, #4
 80039b2:	2b06      	cmp	r3, #6
 80039b4:	d902      	bls.n	80039bc <NVIC_EncodePriority+0x30>
 80039b6:	69fb      	ldr	r3, [r7, #28]
 80039b8:	3b03      	subs	r3, #3
 80039ba:	e000      	b.n	80039be <NVIC_EncodePriority+0x32>
 80039bc:	2300      	movs	r3, #0
 80039be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80039c0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80039c4:	69bb      	ldr	r3, [r7, #24]
 80039c6:	fa02 f303 	lsl.w	r3, r2, r3
 80039ca:	43da      	mvns	r2, r3
 80039cc:	68bb      	ldr	r3, [r7, #8]
 80039ce:	401a      	ands	r2, r3
 80039d0:	697b      	ldr	r3, [r7, #20]
 80039d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80039d4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80039d8:	697b      	ldr	r3, [r7, #20]
 80039da:	fa01 f303 	lsl.w	r3, r1, r3
 80039de:	43d9      	mvns	r1, r3
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80039e4:	4313      	orrs	r3, r2
         );
}
 80039e6:	4618      	mov	r0, r3
 80039e8:	3724      	adds	r7, #36	; 0x24
 80039ea:	46bd      	mov	sp, r7
 80039ec:	bc80      	pop	{r7}
 80039ee:	4770      	bx	lr

080039f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b082      	sub	sp, #8
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	3b01      	subs	r3, #1
 80039fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003a00:	d301      	bcc.n	8003a06 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003a02:	2301      	movs	r3, #1
 8003a04:	e00f      	b.n	8003a26 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003a06:	4a0a      	ldr	r2, [pc, #40]	; (8003a30 <SysTick_Config+0x40>)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	3b01      	subs	r3, #1
 8003a0c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003a0e:	210f      	movs	r1, #15
 8003a10:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003a14:	f7ff ff90 	bl	8003938 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003a18:	4b05      	ldr	r3, [pc, #20]	; (8003a30 <SysTick_Config+0x40>)
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003a1e:	4b04      	ldr	r3, [pc, #16]	; (8003a30 <SysTick_Config+0x40>)
 8003a20:	2207      	movs	r2, #7
 8003a22:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003a24:	2300      	movs	r3, #0
}
 8003a26:	4618      	mov	r0, r3
 8003a28:	3708      	adds	r7, #8
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	bd80      	pop	{r7, pc}
 8003a2e:	bf00      	nop
 8003a30:	e000e010 	.word	0xe000e010

08003a34 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b082      	sub	sp, #8
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003a3c:	6878      	ldr	r0, [r7, #4]
 8003a3e:	f7ff ff2d 	bl	800389c <__NVIC_SetPriorityGrouping>
}
 8003a42:	bf00      	nop
 8003a44:	3708      	adds	r7, #8
 8003a46:	46bd      	mov	sp, r7
 8003a48:	bd80      	pop	{r7, pc}

08003a4a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003a4a:	b580      	push	{r7, lr}
 8003a4c:	b086      	sub	sp, #24
 8003a4e:	af00      	add	r7, sp, #0
 8003a50:	4603      	mov	r3, r0
 8003a52:	60b9      	str	r1, [r7, #8]
 8003a54:	607a      	str	r2, [r7, #4]
 8003a56:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003a58:	2300      	movs	r3, #0
 8003a5a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003a5c:	f7ff ff42 	bl	80038e4 <__NVIC_GetPriorityGrouping>
 8003a60:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003a62:	687a      	ldr	r2, [r7, #4]
 8003a64:	68b9      	ldr	r1, [r7, #8]
 8003a66:	6978      	ldr	r0, [r7, #20]
 8003a68:	f7ff ff90 	bl	800398c <NVIC_EncodePriority>
 8003a6c:	4602      	mov	r2, r0
 8003a6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a72:	4611      	mov	r1, r2
 8003a74:	4618      	mov	r0, r3
 8003a76:	f7ff ff5f 	bl	8003938 <__NVIC_SetPriority>
}
 8003a7a:	bf00      	nop
 8003a7c:	3718      	adds	r7, #24
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	bd80      	pop	{r7, pc}

08003a82 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a82:	b580      	push	{r7, lr}
 8003a84:	b082      	sub	sp, #8
 8003a86:	af00      	add	r7, sp, #0
 8003a88:	4603      	mov	r3, r0
 8003a8a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003a8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a90:	4618      	mov	r0, r3
 8003a92:	f7ff ff35 	bl	8003900 <__NVIC_EnableIRQ>
}
 8003a96:	bf00      	nop
 8003a98:	3708      	adds	r7, #8
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	bd80      	pop	{r7, pc}

08003a9e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003a9e:	b580      	push	{r7, lr}
 8003aa0:	b082      	sub	sp, #8
 8003aa2:	af00      	add	r7, sp, #0
 8003aa4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003aa6:	6878      	ldr	r0, [r7, #4]
 8003aa8:	f7ff ffa2 	bl	80039f0 <SysTick_Config>
 8003aac:	4603      	mov	r3, r0
}
 8003aae:	4618      	mov	r0, r3
 8003ab0:	3708      	adds	r7, #8
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	bd80      	pop	{r7, pc}
	...

08003ab8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003ab8:	b480      	push	{r7}
 8003aba:	b08b      	sub	sp, #44	; 0x2c
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
 8003ac0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003aca:	e169      	b.n	8003da0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003acc:	2201      	movs	r2, #1
 8003ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ad4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	69fa      	ldr	r2, [r7, #28]
 8003adc:	4013      	ands	r3, r2
 8003ade:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003ae0:	69ba      	ldr	r2, [r7, #24]
 8003ae2:	69fb      	ldr	r3, [r7, #28]
 8003ae4:	429a      	cmp	r2, r3
 8003ae6:	f040 8158 	bne.w	8003d9a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	685b      	ldr	r3, [r3, #4]
 8003aee:	4a9a      	ldr	r2, [pc, #616]	; (8003d58 <HAL_GPIO_Init+0x2a0>)
 8003af0:	4293      	cmp	r3, r2
 8003af2:	d05e      	beq.n	8003bb2 <HAL_GPIO_Init+0xfa>
 8003af4:	4a98      	ldr	r2, [pc, #608]	; (8003d58 <HAL_GPIO_Init+0x2a0>)
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d875      	bhi.n	8003be6 <HAL_GPIO_Init+0x12e>
 8003afa:	4a98      	ldr	r2, [pc, #608]	; (8003d5c <HAL_GPIO_Init+0x2a4>)
 8003afc:	4293      	cmp	r3, r2
 8003afe:	d058      	beq.n	8003bb2 <HAL_GPIO_Init+0xfa>
 8003b00:	4a96      	ldr	r2, [pc, #600]	; (8003d5c <HAL_GPIO_Init+0x2a4>)
 8003b02:	4293      	cmp	r3, r2
 8003b04:	d86f      	bhi.n	8003be6 <HAL_GPIO_Init+0x12e>
 8003b06:	4a96      	ldr	r2, [pc, #600]	; (8003d60 <HAL_GPIO_Init+0x2a8>)
 8003b08:	4293      	cmp	r3, r2
 8003b0a:	d052      	beq.n	8003bb2 <HAL_GPIO_Init+0xfa>
 8003b0c:	4a94      	ldr	r2, [pc, #592]	; (8003d60 <HAL_GPIO_Init+0x2a8>)
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d869      	bhi.n	8003be6 <HAL_GPIO_Init+0x12e>
 8003b12:	4a94      	ldr	r2, [pc, #592]	; (8003d64 <HAL_GPIO_Init+0x2ac>)
 8003b14:	4293      	cmp	r3, r2
 8003b16:	d04c      	beq.n	8003bb2 <HAL_GPIO_Init+0xfa>
 8003b18:	4a92      	ldr	r2, [pc, #584]	; (8003d64 <HAL_GPIO_Init+0x2ac>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d863      	bhi.n	8003be6 <HAL_GPIO_Init+0x12e>
 8003b1e:	4a92      	ldr	r2, [pc, #584]	; (8003d68 <HAL_GPIO_Init+0x2b0>)
 8003b20:	4293      	cmp	r3, r2
 8003b22:	d046      	beq.n	8003bb2 <HAL_GPIO_Init+0xfa>
 8003b24:	4a90      	ldr	r2, [pc, #576]	; (8003d68 <HAL_GPIO_Init+0x2b0>)
 8003b26:	4293      	cmp	r3, r2
 8003b28:	d85d      	bhi.n	8003be6 <HAL_GPIO_Init+0x12e>
 8003b2a:	2b12      	cmp	r3, #18
 8003b2c:	d82a      	bhi.n	8003b84 <HAL_GPIO_Init+0xcc>
 8003b2e:	2b12      	cmp	r3, #18
 8003b30:	d859      	bhi.n	8003be6 <HAL_GPIO_Init+0x12e>
 8003b32:	a201      	add	r2, pc, #4	; (adr r2, 8003b38 <HAL_GPIO_Init+0x80>)
 8003b34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b38:	08003bb3 	.word	0x08003bb3
 8003b3c:	08003b8d 	.word	0x08003b8d
 8003b40:	08003b9f 	.word	0x08003b9f
 8003b44:	08003be1 	.word	0x08003be1
 8003b48:	08003be7 	.word	0x08003be7
 8003b4c:	08003be7 	.word	0x08003be7
 8003b50:	08003be7 	.word	0x08003be7
 8003b54:	08003be7 	.word	0x08003be7
 8003b58:	08003be7 	.word	0x08003be7
 8003b5c:	08003be7 	.word	0x08003be7
 8003b60:	08003be7 	.word	0x08003be7
 8003b64:	08003be7 	.word	0x08003be7
 8003b68:	08003be7 	.word	0x08003be7
 8003b6c:	08003be7 	.word	0x08003be7
 8003b70:	08003be7 	.word	0x08003be7
 8003b74:	08003be7 	.word	0x08003be7
 8003b78:	08003be7 	.word	0x08003be7
 8003b7c:	08003b95 	.word	0x08003b95
 8003b80:	08003ba9 	.word	0x08003ba9
 8003b84:	4a79      	ldr	r2, [pc, #484]	; (8003d6c <HAL_GPIO_Init+0x2b4>)
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d013      	beq.n	8003bb2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003b8a:	e02c      	b.n	8003be6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	68db      	ldr	r3, [r3, #12]
 8003b90:	623b      	str	r3, [r7, #32]
          break;
 8003b92:	e029      	b.n	8003be8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003b94:	683b      	ldr	r3, [r7, #0]
 8003b96:	68db      	ldr	r3, [r3, #12]
 8003b98:	3304      	adds	r3, #4
 8003b9a:	623b      	str	r3, [r7, #32]
          break;
 8003b9c:	e024      	b.n	8003be8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	68db      	ldr	r3, [r3, #12]
 8003ba2:	3308      	adds	r3, #8
 8003ba4:	623b      	str	r3, [r7, #32]
          break;
 8003ba6:	e01f      	b.n	8003be8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	68db      	ldr	r3, [r3, #12]
 8003bac:	330c      	adds	r3, #12
 8003bae:	623b      	str	r3, [r7, #32]
          break;
 8003bb0:	e01a      	b.n	8003be8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003bb2:	683b      	ldr	r3, [r7, #0]
 8003bb4:	689b      	ldr	r3, [r3, #8]
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d102      	bne.n	8003bc0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003bba:	2304      	movs	r3, #4
 8003bbc:	623b      	str	r3, [r7, #32]
          break;
 8003bbe:	e013      	b.n	8003be8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	689b      	ldr	r3, [r3, #8]
 8003bc4:	2b01      	cmp	r3, #1
 8003bc6:	d105      	bne.n	8003bd4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003bc8:	2308      	movs	r3, #8
 8003bca:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	69fa      	ldr	r2, [r7, #28]
 8003bd0:	611a      	str	r2, [r3, #16]
          break;
 8003bd2:	e009      	b.n	8003be8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003bd4:	2308      	movs	r3, #8
 8003bd6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	69fa      	ldr	r2, [r7, #28]
 8003bdc:	615a      	str	r2, [r3, #20]
          break;
 8003bde:	e003      	b.n	8003be8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003be0:	2300      	movs	r3, #0
 8003be2:	623b      	str	r3, [r7, #32]
          break;
 8003be4:	e000      	b.n	8003be8 <HAL_GPIO_Init+0x130>
          break;
 8003be6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003be8:	69bb      	ldr	r3, [r7, #24]
 8003bea:	2bff      	cmp	r3, #255	; 0xff
 8003bec:	d801      	bhi.n	8003bf2 <HAL_GPIO_Init+0x13a>
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	e001      	b.n	8003bf6 <HAL_GPIO_Init+0x13e>
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	3304      	adds	r3, #4
 8003bf6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003bf8:	69bb      	ldr	r3, [r7, #24]
 8003bfa:	2bff      	cmp	r3, #255	; 0xff
 8003bfc:	d802      	bhi.n	8003c04 <HAL_GPIO_Init+0x14c>
 8003bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c00:	009b      	lsls	r3, r3, #2
 8003c02:	e002      	b.n	8003c0a <HAL_GPIO_Init+0x152>
 8003c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c06:	3b08      	subs	r3, #8
 8003c08:	009b      	lsls	r3, r3, #2
 8003c0a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003c0c:	697b      	ldr	r3, [r7, #20]
 8003c0e:	681a      	ldr	r2, [r3, #0]
 8003c10:	210f      	movs	r1, #15
 8003c12:	693b      	ldr	r3, [r7, #16]
 8003c14:	fa01 f303 	lsl.w	r3, r1, r3
 8003c18:	43db      	mvns	r3, r3
 8003c1a:	401a      	ands	r2, r3
 8003c1c:	6a39      	ldr	r1, [r7, #32]
 8003c1e:	693b      	ldr	r3, [r7, #16]
 8003c20:	fa01 f303 	lsl.w	r3, r1, r3
 8003c24:	431a      	orrs	r2, r3
 8003c26:	697b      	ldr	r3, [r7, #20]
 8003c28:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	685b      	ldr	r3, [r3, #4]
 8003c2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	f000 80b1 	beq.w	8003d9a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003c38:	4b4d      	ldr	r3, [pc, #308]	; (8003d70 <HAL_GPIO_Init+0x2b8>)
 8003c3a:	699b      	ldr	r3, [r3, #24]
 8003c3c:	4a4c      	ldr	r2, [pc, #304]	; (8003d70 <HAL_GPIO_Init+0x2b8>)
 8003c3e:	f043 0301 	orr.w	r3, r3, #1
 8003c42:	6193      	str	r3, [r2, #24]
 8003c44:	4b4a      	ldr	r3, [pc, #296]	; (8003d70 <HAL_GPIO_Init+0x2b8>)
 8003c46:	699b      	ldr	r3, [r3, #24]
 8003c48:	f003 0301 	and.w	r3, r3, #1
 8003c4c:	60bb      	str	r3, [r7, #8]
 8003c4e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003c50:	4a48      	ldr	r2, [pc, #288]	; (8003d74 <HAL_GPIO_Init+0x2bc>)
 8003c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c54:	089b      	lsrs	r3, r3, #2
 8003c56:	3302      	adds	r3, #2
 8003c58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c5c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c60:	f003 0303 	and.w	r3, r3, #3
 8003c64:	009b      	lsls	r3, r3, #2
 8003c66:	220f      	movs	r2, #15
 8003c68:	fa02 f303 	lsl.w	r3, r2, r3
 8003c6c:	43db      	mvns	r3, r3
 8003c6e:	68fa      	ldr	r2, [r7, #12]
 8003c70:	4013      	ands	r3, r2
 8003c72:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	4a40      	ldr	r2, [pc, #256]	; (8003d78 <HAL_GPIO_Init+0x2c0>)
 8003c78:	4293      	cmp	r3, r2
 8003c7a:	d013      	beq.n	8003ca4 <HAL_GPIO_Init+0x1ec>
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	4a3f      	ldr	r2, [pc, #252]	; (8003d7c <HAL_GPIO_Init+0x2c4>)
 8003c80:	4293      	cmp	r3, r2
 8003c82:	d00d      	beq.n	8003ca0 <HAL_GPIO_Init+0x1e8>
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	4a3e      	ldr	r2, [pc, #248]	; (8003d80 <HAL_GPIO_Init+0x2c8>)
 8003c88:	4293      	cmp	r3, r2
 8003c8a:	d007      	beq.n	8003c9c <HAL_GPIO_Init+0x1e4>
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	4a3d      	ldr	r2, [pc, #244]	; (8003d84 <HAL_GPIO_Init+0x2cc>)
 8003c90:	4293      	cmp	r3, r2
 8003c92:	d101      	bne.n	8003c98 <HAL_GPIO_Init+0x1e0>
 8003c94:	2303      	movs	r3, #3
 8003c96:	e006      	b.n	8003ca6 <HAL_GPIO_Init+0x1ee>
 8003c98:	2304      	movs	r3, #4
 8003c9a:	e004      	b.n	8003ca6 <HAL_GPIO_Init+0x1ee>
 8003c9c:	2302      	movs	r3, #2
 8003c9e:	e002      	b.n	8003ca6 <HAL_GPIO_Init+0x1ee>
 8003ca0:	2301      	movs	r3, #1
 8003ca2:	e000      	b.n	8003ca6 <HAL_GPIO_Init+0x1ee>
 8003ca4:	2300      	movs	r3, #0
 8003ca6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ca8:	f002 0203 	and.w	r2, r2, #3
 8003cac:	0092      	lsls	r2, r2, #2
 8003cae:	4093      	lsls	r3, r2
 8003cb0:	68fa      	ldr	r2, [r7, #12]
 8003cb2:	4313      	orrs	r3, r2
 8003cb4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003cb6:	492f      	ldr	r1, [pc, #188]	; (8003d74 <HAL_GPIO_Init+0x2bc>)
 8003cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cba:	089b      	lsrs	r3, r3, #2
 8003cbc:	3302      	adds	r3, #2
 8003cbe:	68fa      	ldr	r2, [r7, #12]
 8003cc0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	685b      	ldr	r3, [r3, #4]
 8003cc8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d006      	beq.n	8003cde <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003cd0:	4b2d      	ldr	r3, [pc, #180]	; (8003d88 <HAL_GPIO_Init+0x2d0>)
 8003cd2:	681a      	ldr	r2, [r3, #0]
 8003cd4:	492c      	ldr	r1, [pc, #176]	; (8003d88 <HAL_GPIO_Init+0x2d0>)
 8003cd6:	69bb      	ldr	r3, [r7, #24]
 8003cd8:	4313      	orrs	r3, r2
 8003cda:	600b      	str	r3, [r1, #0]
 8003cdc:	e006      	b.n	8003cec <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003cde:	4b2a      	ldr	r3, [pc, #168]	; (8003d88 <HAL_GPIO_Init+0x2d0>)
 8003ce0:	681a      	ldr	r2, [r3, #0]
 8003ce2:	69bb      	ldr	r3, [r7, #24]
 8003ce4:	43db      	mvns	r3, r3
 8003ce6:	4928      	ldr	r1, [pc, #160]	; (8003d88 <HAL_GPIO_Init+0x2d0>)
 8003ce8:	4013      	ands	r3, r2
 8003cea:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	685b      	ldr	r3, [r3, #4]
 8003cf0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d006      	beq.n	8003d06 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003cf8:	4b23      	ldr	r3, [pc, #140]	; (8003d88 <HAL_GPIO_Init+0x2d0>)
 8003cfa:	685a      	ldr	r2, [r3, #4]
 8003cfc:	4922      	ldr	r1, [pc, #136]	; (8003d88 <HAL_GPIO_Init+0x2d0>)
 8003cfe:	69bb      	ldr	r3, [r7, #24]
 8003d00:	4313      	orrs	r3, r2
 8003d02:	604b      	str	r3, [r1, #4]
 8003d04:	e006      	b.n	8003d14 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003d06:	4b20      	ldr	r3, [pc, #128]	; (8003d88 <HAL_GPIO_Init+0x2d0>)
 8003d08:	685a      	ldr	r2, [r3, #4]
 8003d0a:	69bb      	ldr	r3, [r7, #24]
 8003d0c:	43db      	mvns	r3, r3
 8003d0e:	491e      	ldr	r1, [pc, #120]	; (8003d88 <HAL_GPIO_Init+0x2d0>)
 8003d10:	4013      	ands	r3, r2
 8003d12:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	685b      	ldr	r3, [r3, #4]
 8003d18:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d006      	beq.n	8003d2e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003d20:	4b19      	ldr	r3, [pc, #100]	; (8003d88 <HAL_GPIO_Init+0x2d0>)
 8003d22:	689a      	ldr	r2, [r3, #8]
 8003d24:	4918      	ldr	r1, [pc, #96]	; (8003d88 <HAL_GPIO_Init+0x2d0>)
 8003d26:	69bb      	ldr	r3, [r7, #24]
 8003d28:	4313      	orrs	r3, r2
 8003d2a:	608b      	str	r3, [r1, #8]
 8003d2c:	e006      	b.n	8003d3c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003d2e:	4b16      	ldr	r3, [pc, #88]	; (8003d88 <HAL_GPIO_Init+0x2d0>)
 8003d30:	689a      	ldr	r2, [r3, #8]
 8003d32:	69bb      	ldr	r3, [r7, #24]
 8003d34:	43db      	mvns	r3, r3
 8003d36:	4914      	ldr	r1, [pc, #80]	; (8003d88 <HAL_GPIO_Init+0x2d0>)
 8003d38:	4013      	ands	r3, r2
 8003d3a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	685b      	ldr	r3, [r3, #4]
 8003d40:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d021      	beq.n	8003d8c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003d48:	4b0f      	ldr	r3, [pc, #60]	; (8003d88 <HAL_GPIO_Init+0x2d0>)
 8003d4a:	68da      	ldr	r2, [r3, #12]
 8003d4c:	490e      	ldr	r1, [pc, #56]	; (8003d88 <HAL_GPIO_Init+0x2d0>)
 8003d4e:	69bb      	ldr	r3, [r7, #24]
 8003d50:	4313      	orrs	r3, r2
 8003d52:	60cb      	str	r3, [r1, #12]
 8003d54:	e021      	b.n	8003d9a <HAL_GPIO_Init+0x2e2>
 8003d56:	bf00      	nop
 8003d58:	10320000 	.word	0x10320000
 8003d5c:	10310000 	.word	0x10310000
 8003d60:	10220000 	.word	0x10220000
 8003d64:	10210000 	.word	0x10210000
 8003d68:	10120000 	.word	0x10120000
 8003d6c:	10110000 	.word	0x10110000
 8003d70:	40021000 	.word	0x40021000
 8003d74:	40010000 	.word	0x40010000
 8003d78:	40010800 	.word	0x40010800
 8003d7c:	40010c00 	.word	0x40010c00
 8003d80:	40011000 	.word	0x40011000
 8003d84:	40011400 	.word	0x40011400
 8003d88:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003d8c:	4b0b      	ldr	r3, [pc, #44]	; (8003dbc <HAL_GPIO_Init+0x304>)
 8003d8e:	68da      	ldr	r2, [r3, #12]
 8003d90:	69bb      	ldr	r3, [r7, #24]
 8003d92:	43db      	mvns	r3, r3
 8003d94:	4909      	ldr	r1, [pc, #36]	; (8003dbc <HAL_GPIO_Init+0x304>)
 8003d96:	4013      	ands	r3, r2
 8003d98:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8003d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d9c:	3301      	adds	r3, #1
 8003d9e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	681a      	ldr	r2, [r3, #0]
 8003da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003da6:	fa22 f303 	lsr.w	r3, r2, r3
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	f47f ae8e 	bne.w	8003acc <HAL_GPIO_Init+0x14>
  }
}
 8003db0:	bf00      	nop
 8003db2:	bf00      	nop
 8003db4:	372c      	adds	r7, #44	; 0x2c
 8003db6:	46bd      	mov	sp, r7
 8003db8:	bc80      	pop	{r7}
 8003dba:	4770      	bx	lr
 8003dbc:	40010400 	.word	0x40010400

08003dc0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003dc0:	b480      	push	{r7}
 8003dc2:	b085      	sub	sp, #20
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
 8003dc8:	460b      	mov	r3, r1
 8003dca:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	689a      	ldr	r2, [r3, #8]
 8003dd0:	887b      	ldrh	r3, [r7, #2]
 8003dd2:	4013      	ands	r3, r2
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d002      	beq.n	8003dde <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003dd8:	2301      	movs	r3, #1
 8003dda:	73fb      	strb	r3, [r7, #15]
 8003ddc:	e001      	b.n	8003de2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003dde:	2300      	movs	r3, #0
 8003de0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003de2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003de4:	4618      	mov	r0, r3
 8003de6:	3714      	adds	r7, #20
 8003de8:	46bd      	mov	sp, r7
 8003dea:	bc80      	pop	{r7}
 8003dec:	4770      	bx	lr

08003dee <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003dee:	b480      	push	{r7}
 8003df0:	b083      	sub	sp, #12
 8003df2:	af00      	add	r7, sp, #0
 8003df4:	6078      	str	r0, [r7, #4]
 8003df6:	460b      	mov	r3, r1
 8003df8:	807b      	strh	r3, [r7, #2]
 8003dfa:	4613      	mov	r3, r2
 8003dfc:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003dfe:	787b      	ldrb	r3, [r7, #1]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d003      	beq.n	8003e0c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003e04:	887a      	ldrh	r2, [r7, #2]
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003e0a:	e003      	b.n	8003e14 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003e0c:	887b      	ldrh	r3, [r7, #2]
 8003e0e:	041a      	lsls	r2, r3, #16
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	611a      	str	r2, [r3, #16]
}
 8003e14:	bf00      	nop
 8003e16:	370c      	adds	r7, #12
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	bc80      	pop	{r7}
 8003e1c:	4770      	bx	lr
	...

08003e20 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b082      	sub	sp, #8
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	4603      	mov	r3, r0
 8003e28:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003e2a:	4b08      	ldr	r3, [pc, #32]	; (8003e4c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003e2c:	695a      	ldr	r2, [r3, #20]
 8003e2e:	88fb      	ldrh	r3, [r7, #6]
 8003e30:	4013      	ands	r3, r2
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d006      	beq.n	8003e44 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003e36:	4a05      	ldr	r2, [pc, #20]	; (8003e4c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003e38:	88fb      	ldrh	r3, [r7, #6]
 8003e3a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003e3c:	88fb      	ldrh	r3, [r7, #6]
 8003e3e:	4618      	mov	r0, r3
 8003e40:	f7fe f960 	bl	8002104 <HAL_GPIO_EXTI_Callback>
  }
}
 8003e44:	bf00      	nop
 8003e46:	3708      	adds	r7, #8
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	bd80      	pop	{r7, pc}
 8003e4c:	40010400 	.word	0x40010400

08003e50 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b084      	sub	sp, #16
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d101      	bne.n	8003e62 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003e5e:	2301      	movs	r3, #1
 8003e60:	e12b      	b.n	80040ba <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e68:	b2db      	uxtb	r3, r3
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d106      	bne.n	8003e7c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2200      	movs	r2, #0
 8003e72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003e76:	6878      	ldr	r0, [r7, #4]
 8003e78:	f7fd ff5e 	bl	8001d38 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2224      	movs	r2, #36	; 0x24
 8003e80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	681a      	ldr	r2, [r3, #0]
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f022 0201 	bic.w	r2, r2, #1
 8003e92:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	681a      	ldr	r2, [r3, #0]
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003ea2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	681a      	ldr	r2, [r3, #0]
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003eb2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003eb4:	f001 fba0 	bl	80055f8 <HAL_RCC_GetPCLK1Freq>
 8003eb8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	685b      	ldr	r3, [r3, #4]
 8003ebe:	4a81      	ldr	r2, [pc, #516]	; (80040c4 <HAL_I2C_Init+0x274>)
 8003ec0:	4293      	cmp	r3, r2
 8003ec2:	d807      	bhi.n	8003ed4 <HAL_I2C_Init+0x84>
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	4a80      	ldr	r2, [pc, #512]	; (80040c8 <HAL_I2C_Init+0x278>)
 8003ec8:	4293      	cmp	r3, r2
 8003eca:	bf94      	ite	ls
 8003ecc:	2301      	movls	r3, #1
 8003ece:	2300      	movhi	r3, #0
 8003ed0:	b2db      	uxtb	r3, r3
 8003ed2:	e006      	b.n	8003ee2 <HAL_I2C_Init+0x92>
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	4a7d      	ldr	r2, [pc, #500]	; (80040cc <HAL_I2C_Init+0x27c>)
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	bf94      	ite	ls
 8003edc:	2301      	movls	r3, #1
 8003ede:	2300      	movhi	r3, #0
 8003ee0:	b2db      	uxtb	r3, r3
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d001      	beq.n	8003eea <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003ee6:	2301      	movs	r3, #1
 8003ee8:	e0e7      	b.n	80040ba <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	4a78      	ldr	r2, [pc, #480]	; (80040d0 <HAL_I2C_Init+0x280>)
 8003eee:	fba2 2303 	umull	r2, r3, r2, r3
 8003ef2:	0c9b      	lsrs	r3, r3, #18
 8003ef4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	685b      	ldr	r3, [r3, #4]
 8003efc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	68ba      	ldr	r2, [r7, #8]
 8003f06:	430a      	orrs	r2, r1
 8003f08:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	6a1b      	ldr	r3, [r3, #32]
 8003f10:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	685b      	ldr	r3, [r3, #4]
 8003f18:	4a6a      	ldr	r2, [pc, #424]	; (80040c4 <HAL_I2C_Init+0x274>)
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d802      	bhi.n	8003f24 <HAL_I2C_Init+0xd4>
 8003f1e:	68bb      	ldr	r3, [r7, #8]
 8003f20:	3301      	adds	r3, #1
 8003f22:	e009      	b.n	8003f38 <HAL_I2C_Init+0xe8>
 8003f24:	68bb      	ldr	r3, [r7, #8]
 8003f26:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003f2a:	fb02 f303 	mul.w	r3, r2, r3
 8003f2e:	4a69      	ldr	r2, [pc, #420]	; (80040d4 <HAL_I2C_Init+0x284>)
 8003f30:	fba2 2303 	umull	r2, r3, r2, r3
 8003f34:	099b      	lsrs	r3, r3, #6
 8003f36:	3301      	adds	r3, #1
 8003f38:	687a      	ldr	r2, [r7, #4]
 8003f3a:	6812      	ldr	r2, [r2, #0]
 8003f3c:	430b      	orrs	r3, r1
 8003f3e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	69db      	ldr	r3, [r3, #28]
 8003f46:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003f4a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	685b      	ldr	r3, [r3, #4]
 8003f52:	495c      	ldr	r1, [pc, #368]	; (80040c4 <HAL_I2C_Init+0x274>)
 8003f54:	428b      	cmp	r3, r1
 8003f56:	d819      	bhi.n	8003f8c <HAL_I2C_Init+0x13c>
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	1e59      	subs	r1, r3, #1
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	685b      	ldr	r3, [r3, #4]
 8003f60:	005b      	lsls	r3, r3, #1
 8003f62:	fbb1 f3f3 	udiv	r3, r1, r3
 8003f66:	1c59      	adds	r1, r3, #1
 8003f68:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003f6c:	400b      	ands	r3, r1
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d00a      	beq.n	8003f88 <HAL_I2C_Init+0x138>
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	1e59      	subs	r1, r3, #1
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	685b      	ldr	r3, [r3, #4]
 8003f7a:	005b      	lsls	r3, r3, #1
 8003f7c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003f80:	3301      	adds	r3, #1
 8003f82:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f86:	e051      	b.n	800402c <HAL_I2C_Init+0x1dc>
 8003f88:	2304      	movs	r3, #4
 8003f8a:	e04f      	b.n	800402c <HAL_I2C_Init+0x1dc>
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	689b      	ldr	r3, [r3, #8]
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d111      	bne.n	8003fb8 <HAL_I2C_Init+0x168>
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	1e58      	subs	r0, r3, #1
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6859      	ldr	r1, [r3, #4]
 8003f9c:	460b      	mov	r3, r1
 8003f9e:	005b      	lsls	r3, r3, #1
 8003fa0:	440b      	add	r3, r1
 8003fa2:	fbb0 f3f3 	udiv	r3, r0, r3
 8003fa6:	3301      	adds	r3, #1
 8003fa8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	bf0c      	ite	eq
 8003fb0:	2301      	moveq	r3, #1
 8003fb2:	2300      	movne	r3, #0
 8003fb4:	b2db      	uxtb	r3, r3
 8003fb6:	e012      	b.n	8003fde <HAL_I2C_Init+0x18e>
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	1e58      	subs	r0, r3, #1
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6859      	ldr	r1, [r3, #4]
 8003fc0:	460b      	mov	r3, r1
 8003fc2:	009b      	lsls	r3, r3, #2
 8003fc4:	440b      	add	r3, r1
 8003fc6:	0099      	lsls	r1, r3, #2
 8003fc8:	440b      	add	r3, r1
 8003fca:	fbb0 f3f3 	udiv	r3, r0, r3
 8003fce:	3301      	adds	r3, #1
 8003fd0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	bf0c      	ite	eq
 8003fd8:	2301      	moveq	r3, #1
 8003fda:	2300      	movne	r3, #0
 8003fdc:	b2db      	uxtb	r3, r3
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d001      	beq.n	8003fe6 <HAL_I2C_Init+0x196>
 8003fe2:	2301      	movs	r3, #1
 8003fe4:	e022      	b.n	800402c <HAL_I2C_Init+0x1dc>
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	689b      	ldr	r3, [r3, #8]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d10e      	bne.n	800400c <HAL_I2C_Init+0x1bc>
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	1e58      	subs	r0, r3, #1
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6859      	ldr	r1, [r3, #4]
 8003ff6:	460b      	mov	r3, r1
 8003ff8:	005b      	lsls	r3, r3, #1
 8003ffa:	440b      	add	r3, r1
 8003ffc:	fbb0 f3f3 	udiv	r3, r0, r3
 8004000:	3301      	adds	r3, #1
 8004002:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004006:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800400a:	e00f      	b.n	800402c <HAL_I2C_Init+0x1dc>
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	1e58      	subs	r0, r3, #1
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6859      	ldr	r1, [r3, #4]
 8004014:	460b      	mov	r3, r1
 8004016:	009b      	lsls	r3, r3, #2
 8004018:	440b      	add	r3, r1
 800401a:	0099      	lsls	r1, r3, #2
 800401c:	440b      	add	r3, r1
 800401e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004022:	3301      	adds	r3, #1
 8004024:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004028:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800402c:	6879      	ldr	r1, [r7, #4]
 800402e:	6809      	ldr	r1, [r1, #0]
 8004030:	4313      	orrs	r3, r2
 8004032:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	69da      	ldr	r2, [r3, #28]
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6a1b      	ldr	r3, [r3, #32]
 8004046:	431a      	orrs	r2, r3
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	430a      	orrs	r2, r1
 800404e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	689b      	ldr	r3, [r3, #8]
 8004056:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800405a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800405e:	687a      	ldr	r2, [r7, #4]
 8004060:	6911      	ldr	r1, [r2, #16]
 8004062:	687a      	ldr	r2, [r7, #4]
 8004064:	68d2      	ldr	r2, [r2, #12]
 8004066:	4311      	orrs	r1, r2
 8004068:	687a      	ldr	r2, [r7, #4]
 800406a:	6812      	ldr	r2, [r2, #0]
 800406c:	430b      	orrs	r3, r1
 800406e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	68db      	ldr	r3, [r3, #12]
 8004076:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	695a      	ldr	r2, [r3, #20]
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	699b      	ldr	r3, [r3, #24]
 8004082:	431a      	orrs	r2, r3
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	430a      	orrs	r2, r1
 800408a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	681a      	ldr	r2, [r3, #0]
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f042 0201 	orr.w	r2, r2, #1
 800409a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2200      	movs	r2, #0
 80040a0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	2220      	movs	r2, #32
 80040a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	2200      	movs	r2, #0
 80040ae:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2200      	movs	r2, #0
 80040b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80040b8:	2300      	movs	r3, #0
}
 80040ba:	4618      	mov	r0, r3
 80040bc:	3710      	adds	r7, #16
 80040be:	46bd      	mov	sp, r7
 80040c0:	bd80      	pop	{r7, pc}
 80040c2:	bf00      	nop
 80040c4:	000186a0 	.word	0x000186a0
 80040c8:	001e847f 	.word	0x001e847f
 80040cc:	003d08ff 	.word	0x003d08ff
 80040d0:	431bde83 	.word	0x431bde83
 80040d4:	10624dd3 	.word	0x10624dd3

080040d8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	b088      	sub	sp, #32
 80040dc:	af02      	add	r7, sp, #8
 80040de:	60f8      	str	r0, [r7, #12]
 80040e0:	4608      	mov	r0, r1
 80040e2:	4611      	mov	r1, r2
 80040e4:	461a      	mov	r2, r3
 80040e6:	4603      	mov	r3, r0
 80040e8:	817b      	strh	r3, [r7, #10]
 80040ea:	460b      	mov	r3, r1
 80040ec:	813b      	strh	r3, [r7, #8]
 80040ee:	4613      	mov	r3, r2
 80040f0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80040f2:	f7ff fba5 	bl	8003840 <HAL_GetTick>
 80040f6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040fe:	b2db      	uxtb	r3, r3
 8004100:	2b20      	cmp	r3, #32
 8004102:	f040 80d9 	bne.w	80042b8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004106:	697b      	ldr	r3, [r7, #20]
 8004108:	9300      	str	r3, [sp, #0]
 800410a:	2319      	movs	r3, #25
 800410c:	2201      	movs	r2, #1
 800410e:	496d      	ldr	r1, [pc, #436]	; (80042c4 <HAL_I2C_Mem_Write+0x1ec>)
 8004110:	68f8      	ldr	r0, [r7, #12]
 8004112:	f000 fcc1 	bl	8004a98 <I2C_WaitOnFlagUntilTimeout>
 8004116:	4603      	mov	r3, r0
 8004118:	2b00      	cmp	r3, #0
 800411a:	d001      	beq.n	8004120 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800411c:	2302      	movs	r3, #2
 800411e:	e0cc      	b.n	80042ba <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004126:	2b01      	cmp	r3, #1
 8004128:	d101      	bne.n	800412e <HAL_I2C_Mem_Write+0x56>
 800412a:	2302      	movs	r3, #2
 800412c:	e0c5      	b.n	80042ba <HAL_I2C_Mem_Write+0x1e2>
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	2201      	movs	r2, #1
 8004132:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f003 0301 	and.w	r3, r3, #1
 8004140:	2b01      	cmp	r3, #1
 8004142:	d007      	beq.n	8004154 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	681a      	ldr	r2, [r3, #0]
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f042 0201 	orr.w	r2, r2, #1
 8004152:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	681a      	ldr	r2, [r3, #0]
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004162:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	2221      	movs	r2, #33	; 0x21
 8004168:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	2240      	movs	r2, #64	; 0x40
 8004170:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	2200      	movs	r2, #0
 8004178:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	6a3a      	ldr	r2, [r7, #32]
 800417e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004184:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800418a:	b29a      	uxth	r2, r3
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	4a4d      	ldr	r2, [pc, #308]	; (80042c8 <HAL_I2C_Mem_Write+0x1f0>)
 8004194:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004196:	88f8      	ldrh	r0, [r7, #6]
 8004198:	893a      	ldrh	r2, [r7, #8]
 800419a:	8979      	ldrh	r1, [r7, #10]
 800419c:	697b      	ldr	r3, [r7, #20]
 800419e:	9301      	str	r3, [sp, #4]
 80041a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041a2:	9300      	str	r3, [sp, #0]
 80041a4:	4603      	mov	r3, r0
 80041a6:	68f8      	ldr	r0, [r7, #12]
 80041a8:	f000 faf8 	bl	800479c <I2C_RequestMemoryWrite>
 80041ac:	4603      	mov	r3, r0
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d052      	beq.n	8004258 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80041b2:	2301      	movs	r3, #1
 80041b4:	e081      	b.n	80042ba <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80041b6:	697a      	ldr	r2, [r7, #20]
 80041b8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80041ba:	68f8      	ldr	r0, [r7, #12]
 80041bc:	f000 fd42 	bl	8004c44 <I2C_WaitOnTXEFlagUntilTimeout>
 80041c0:	4603      	mov	r3, r0
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d00d      	beq.n	80041e2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ca:	2b04      	cmp	r3, #4
 80041cc:	d107      	bne.n	80041de <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	681a      	ldr	r2, [r3, #0]
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80041dc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80041de:	2301      	movs	r3, #1
 80041e0:	e06b      	b.n	80042ba <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041e6:	781a      	ldrb	r2, [r3, #0]
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041f2:	1c5a      	adds	r2, r3, #1
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041fc:	3b01      	subs	r3, #1
 80041fe:	b29a      	uxth	r2, r3
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004208:	b29b      	uxth	r3, r3
 800420a:	3b01      	subs	r3, #1
 800420c:	b29a      	uxth	r2, r3
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	695b      	ldr	r3, [r3, #20]
 8004218:	f003 0304 	and.w	r3, r3, #4
 800421c:	2b04      	cmp	r3, #4
 800421e:	d11b      	bne.n	8004258 <HAL_I2C_Mem_Write+0x180>
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004224:	2b00      	cmp	r3, #0
 8004226:	d017      	beq.n	8004258 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800422c:	781a      	ldrb	r2, [r3, #0]
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004238:	1c5a      	adds	r2, r3, #1
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004242:	3b01      	subs	r3, #1
 8004244:	b29a      	uxth	r2, r3
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800424e:	b29b      	uxth	r3, r3
 8004250:	3b01      	subs	r3, #1
 8004252:	b29a      	uxth	r2, r3
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800425c:	2b00      	cmp	r3, #0
 800425e:	d1aa      	bne.n	80041b6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004260:	697a      	ldr	r2, [r7, #20]
 8004262:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004264:	68f8      	ldr	r0, [r7, #12]
 8004266:	f000 fd2e 	bl	8004cc6 <I2C_WaitOnBTFFlagUntilTimeout>
 800426a:	4603      	mov	r3, r0
 800426c:	2b00      	cmp	r3, #0
 800426e:	d00d      	beq.n	800428c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004274:	2b04      	cmp	r3, #4
 8004276:	d107      	bne.n	8004288 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	681a      	ldr	r2, [r3, #0]
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004286:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004288:	2301      	movs	r3, #1
 800428a:	e016      	b.n	80042ba <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	681a      	ldr	r2, [r3, #0]
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800429a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	2220      	movs	r2, #32
 80042a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	2200      	movs	r2, #0
 80042a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	2200      	movs	r2, #0
 80042b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80042b4:	2300      	movs	r3, #0
 80042b6:	e000      	b.n	80042ba <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80042b8:	2302      	movs	r3, #2
  }
}
 80042ba:	4618      	mov	r0, r3
 80042bc:	3718      	adds	r7, #24
 80042be:	46bd      	mov	sp, r7
 80042c0:	bd80      	pop	{r7, pc}
 80042c2:	bf00      	nop
 80042c4:	00100002 	.word	0x00100002
 80042c8:	ffff0000 	.word	0xffff0000

080042cc <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80042cc:	b580      	push	{r7, lr}
 80042ce:	b08c      	sub	sp, #48	; 0x30
 80042d0:	af02      	add	r7, sp, #8
 80042d2:	60f8      	str	r0, [r7, #12]
 80042d4:	4608      	mov	r0, r1
 80042d6:	4611      	mov	r1, r2
 80042d8:	461a      	mov	r2, r3
 80042da:	4603      	mov	r3, r0
 80042dc:	817b      	strh	r3, [r7, #10]
 80042de:	460b      	mov	r3, r1
 80042e0:	813b      	strh	r3, [r7, #8]
 80042e2:	4613      	mov	r3, r2
 80042e4:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 80042e6:	2300      	movs	r3, #0
 80042e8:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80042ea:	f7ff faa9 	bl	8003840 <HAL_GetTick>
 80042ee:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042f6:	b2db      	uxtb	r3, r3
 80042f8:	2b20      	cmp	r3, #32
 80042fa:	f040 8244 	bne.w	8004786 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80042fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004300:	9300      	str	r3, [sp, #0]
 8004302:	2319      	movs	r3, #25
 8004304:	2201      	movs	r2, #1
 8004306:	4982      	ldr	r1, [pc, #520]	; (8004510 <HAL_I2C_Mem_Read+0x244>)
 8004308:	68f8      	ldr	r0, [r7, #12]
 800430a:	f000 fbc5 	bl	8004a98 <I2C_WaitOnFlagUntilTimeout>
 800430e:	4603      	mov	r3, r0
 8004310:	2b00      	cmp	r3, #0
 8004312:	d001      	beq.n	8004318 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8004314:	2302      	movs	r3, #2
 8004316:	e237      	b.n	8004788 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800431e:	2b01      	cmp	r3, #1
 8004320:	d101      	bne.n	8004326 <HAL_I2C_Mem_Read+0x5a>
 8004322:	2302      	movs	r3, #2
 8004324:	e230      	b.n	8004788 <HAL_I2C_Mem_Read+0x4bc>
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	2201      	movs	r2, #1
 800432a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f003 0301 	and.w	r3, r3, #1
 8004338:	2b01      	cmp	r3, #1
 800433a:	d007      	beq.n	800434c <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	681a      	ldr	r2, [r3, #0]
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f042 0201 	orr.w	r2, r2, #1
 800434a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	681a      	ldr	r2, [r3, #0]
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800435a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	2222      	movs	r2, #34	; 0x22
 8004360:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	2240      	movs	r2, #64	; 0x40
 8004368:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	2200      	movs	r2, #0
 8004370:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004376:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800437c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004382:	b29a      	uxth	r2, r3
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	4a62      	ldr	r2, [pc, #392]	; (8004514 <HAL_I2C_Mem_Read+0x248>)
 800438c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800438e:	88f8      	ldrh	r0, [r7, #6]
 8004390:	893a      	ldrh	r2, [r7, #8]
 8004392:	8979      	ldrh	r1, [r7, #10]
 8004394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004396:	9301      	str	r3, [sp, #4]
 8004398:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800439a:	9300      	str	r3, [sp, #0]
 800439c:	4603      	mov	r3, r0
 800439e:	68f8      	ldr	r0, [r7, #12]
 80043a0:	f000 fa92 	bl	80048c8 <I2C_RequestMemoryRead>
 80043a4:	4603      	mov	r3, r0
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d001      	beq.n	80043ae <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 80043aa:	2301      	movs	r3, #1
 80043ac:	e1ec      	b.n	8004788 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d113      	bne.n	80043de <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80043b6:	2300      	movs	r3, #0
 80043b8:	61fb      	str	r3, [r7, #28]
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	695b      	ldr	r3, [r3, #20]
 80043c0:	61fb      	str	r3, [r7, #28]
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	699b      	ldr	r3, [r3, #24]
 80043c8:	61fb      	str	r3, [r7, #28]
 80043ca:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	681a      	ldr	r2, [r3, #0]
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80043da:	601a      	str	r2, [r3, #0]
 80043dc:	e1c0      	b.n	8004760 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043e2:	2b01      	cmp	r3, #1
 80043e4:	d11e      	bne.n	8004424 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	681a      	ldr	r2, [r3, #0]
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80043f4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80043f6:	b672      	cpsid	i
}
 80043f8:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80043fa:	2300      	movs	r3, #0
 80043fc:	61bb      	str	r3, [r7, #24]
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	695b      	ldr	r3, [r3, #20]
 8004404:	61bb      	str	r3, [r7, #24]
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	699b      	ldr	r3, [r3, #24]
 800440c:	61bb      	str	r3, [r7, #24]
 800440e:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	681a      	ldr	r2, [r3, #0]
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800441e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004420:	b662      	cpsie	i
}
 8004422:	e035      	b.n	8004490 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004428:	2b02      	cmp	r3, #2
 800442a:	d11e      	bne.n	800446a <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	681a      	ldr	r2, [r3, #0]
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800443a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800443c:	b672      	cpsid	i
}
 800443e:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004440:	2300      	movs	r3, #0
 8004442:	617b      	str	r3, [r7, #20]
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	695b      	ldr	r3, [r3, #20]
 800444a:	617b      	str	r3, [r7, #20]
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	699b      	ldr	r3, [r3, #24]
 8004452:	617b      	str	r3, [r7, #20]
 8004454:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	681a      	ldr	r2, [r3, #0]
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004464:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004466:	b662      	cpsie	i
}
 8004468:	e012      	b.n	8004490 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	681a      	ldr	r2, [r3, #0]
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004478:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800447a:	2300      	movs	r3, #0
 800447c:	613b      	str	r3, [r7, #16]
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	695b      	ldr	r3, [r3, #20]
 8004484:	613b      	str	r3, [r7, #16]
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	699b      	ldr	r3, [r3, #24]
 800448c:	613b      	str	r3, [r7, #16]
 800448e:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8004490:	e166      	b.n	8004760 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004496:	2b03      	cmp	r3, #3
 8004498:	f200 811f 	bhi.w	80046da <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044a0:	2b01      	cmp	r3, #1
 80044a2:	d123      	bne.n	80044ec <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80044a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044a6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80044a8:	68f8      	ldr	r0, [r7, #12]
 80044aa:	f000 fc4d 	bl	8004d48 <I2C_WaitOnRXNEFlagUntilTimeout>
 80044ae:	4603      	mov	r3, r0
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d001      	beq.n	80044b8 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 80044b4:	2301      	movs	r3, #1
 80044b6:	e167      	b.n	8004788 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	691a      	ldr	r2, [r3, #16]
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044c2:	b2d2      	uxtb	r2, r2
 80044c4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ca:	1c5a      	adds	r2, r3, #1
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044d4:	3b01      	subs	r3, #1
 80044d6:	b29a      	uxth	r2, r3
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044e0:	b29b      	uxth	r3, r3
 80044e2:	3b01      	subs	r3, #1
 80044e4:	b29a      	uxth	r2, r3
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80044ea:	e139      	b.n	8004760 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044f0:	2b02      	cmp	r3, #2
 80044f2:	d152      	bne.n	800459a <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80044f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044f6:	9300      	str	r3, [sp, #0]
 80044f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044fa:	2200      	movs	r2, #0
 80044fc:	4906      	ldr	r1, [pc, #24]	; (8004518 <HAL_I2C_Mem_Read+0x24c>)
 80044fe:	68f8      	ldr	r0, [r7, #12]
 8004500:	f000 faca 	bl	8004a98 <I2C_WaitOnFlagUntilTimeout>
 8004504:	4603      	mov	r3, r0
 8004506:	2b00      	cmp	r3, #0
 8004508:	d008      	beq.n	800451c <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 800450a:	2301      	movs	r3, #1
 800450c:	e13c      	b.n	8004788 <HAL_I2C_Mem_Read+0x4bc>
 800450e:	bf00      	nop
 8004510:	00100002 	.word	0x00100002
 8004514:	ffff0000 	.word	0xffff0000
 8004518:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 800451c:	b672      	cpsid	i
}
 800451e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	681a      	ldr	r2, [r3, #0]
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800452e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	691a      	ldr	r2, [r3, #16]
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800453a:	b2d2      	uxtb	r2, r2
 800453c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004542:	1c5a      	adds	r2, r3, #1
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800454c:	3b01      	subs	r3, #1
 800454e:	b29a      	uxth	r2, r3
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004558:	b29b      	uxth	r3, r3
 800455a:	3b01      	subs	r3, #1
 800455c:	b29a      	uxth	r2, r3
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8004562:	b662      	cpsie	i
}
 8004564:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	691a      	ldr	r2, [r3, #16]
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004570:	b2d2      	uxtb	r2, r2
 8004572:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004578:	1c5a      	adds	r2, r3, #1
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004582:	3b01      	subs	r3, #1
 8004584:	b29a      	uxth	r2, r3
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800458e:	b29b      	uxth	r3, r3
 8004590:	3b01      	subs	r3, #1
 8004592:	b29a      	uxth	r2, r3
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004598:	e0e2      	b.n	8004760 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800459a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800459c:	9300      	str	r3, [sp, #0]
 800459e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045a0:	2200      	movs	r2, #0
 80045a2:	497b      	ldr	r1, [pc, #492]	; (8004790 <HAL_I2C_Mem_Read+0x4c4>)
 80045a4:	68f8      	ldr	r0, [r7, #12]
 80045a6:	f000 fa77 	bl	8004a98 <I2C_WaitOnFlagUntilTimeout>
 80045aa:	4603      	mov	r3, r0
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d001      	beq.n	80045b4 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 80045b0:	2301      	movs	r3, #1
 80045b2:	e0e9      	b.n	8004788 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	681a      	ldr	r2, [r3, #0]
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80045c2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80045c4:	b672      	cpsid	i
}
 80045c6:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	691a      	ldr	r2, [r3, #16]
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045d2:	b2d2      	uxtb	r2, r2
 80045d4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045da:	1c5a      	adds	r2, r3, #1
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045e4:	3b01      	subs	r3, #1
 80045e6:	b29a      	uxth	r2, r3
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045f0:	b29b      	uxth	r3, r3
 80045f2:	3b01      	subs	r3, #1
 80045f4:	b29a      	uxth	r2, r3
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80045fa:	4b66      	ldr	r3, [pc, #408]	; (8004794 <HAL_I2C_Mem_Read+0x4c8>)
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	08db      	lsrs	r3, r3, #3
 8004600:	4a65      	ldr	r2, [pc, #404]	; (8004798 <HAL_I2C_Mem_Read+0x4cc>)
 8004602:	fba2 2303 	umull	r2, r3, r2, r3
 8004606:	0a1a      	lsrs	r2, r3, #8
 8004608:	4613      	mov	r3, r2
 800460a:	009b      	lsls	r3, r3, #2
 800460c:	4413      	add	r3, r2
 800460e:	00da      	lsls	r2, r3, #3
 8004610:	1ad3      	subs	r3, r2, r3
 8004612:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8004614:	6a3b      	ldr	r3, [r7, #32]
 8004616:	3b01      	subs	r3, #1
 8004618:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800461a:	6a3b      	ldr	r3, [r7, #32]
 800461c:	2b00      	cmp	r3, #0
 800461e:	d118      	bne.n	8004652 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	2200      	movs	r2, #0
 8004624:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	2220      	movs	r2, #32
 800462a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	2200      	movs	r2, #0
 8004632:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800463a:	f043 0220 	orr.w	r2, r3, #32
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8004642:	b662      	cpsie	i
}
 8004644:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	2200      	movs	r2, #0
 800464a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 800464e:	2301      	movs	r3, #1
 8004650:	e09a      	b.n	8004788 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	695b      	ldr	r3, [r3, #20]
 8004658:	f003 0304 	and.w	r3, r3, #4
 800465c:	2b04      	cmp	r3, #4
 800465e:	d1d9      	bne.n	8004614 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	681a      	ldr	r2, [r3, #0]
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800466e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	691a      	ldr	r2, [r3, #16]
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800467a:	b2d2      	uxtb	r2, r2
 800467c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004682:	1c5a      	adds	r2, r3, #1
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800468c:	3b01      	subs	r3, #1
 800468e:	b29a      	uxth	r2, r3
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004698:	b29b      	uxth	r3, r3
 800469a:	3b01      	subs	r3, #1
 800469c:	b29a      	uxth	r2, r3
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80046a2:	b662      	cpsie	i
}
 80046a4:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	691a      	ldr	r2, [r3, #16]
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046b0:	b2d2      	uxtb	r2, r2
 80046b2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046b8:	1c5a      	adds	r2, r3, #1
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046c2:	3b01      	subs	r3, #1
 80046c4:	b29a      	uxth	r2, r3
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046ce:	b29b      	uxth	r3, r3
 80046d0:	3b01      	subs	r3, #1
 80046d2:	b29a      	uxth	r2, r3
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80046d8:	e042      	b.n	8004760 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80046da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046dc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80046de:	68f8      	ldr	r0, [r7, #12]
 80046e0:	f000 fb32 	bl	8004d48 <I2C_WaitOnRXNEFlagUntilTimeout>
 80046e4:	4603      	mov	r3, r0
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d001      	beq.n	80046ee <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 80046ea:	2301      	movs	r3, #1
 80046ec:	e04c      	b.n	8004788 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	691a      	ldr	r2, [r3, #16]
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046f8:	b2d2      	uxtb	r2, r2
 80046fa:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004700:	1c5a      	adds	r2, r3, #1
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800470a:	3b01      	subs	r3, #1
 800470c:	b29a      	uxth	r2, r3
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004716:	b29b      	uxth	r3, r3
 8004718:	3b01      	subs	r3, #1
 800471a:	b29a      	uxth	r2, r3
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	695b      	ldr	r3, [r3, #20]
 8004726:	f003 0304 	and.w	r3, r3, #4
 800472a:	2b04      	cmp	r3, #4
 800472c:	d118      	bne.n	8004760 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	691a      	ldr	r2, [r3, #16]
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004738:	b2d2      	uxtb	r2, r2
 800473a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004740:	1c5a      	adds	r2, r3, #1
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800474a:	3b01      	subs	r3, #1
 800474c:	b29a      	uxth	r2, r3
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004756:	b29b      	uxth	r3, r3
 8004758:	3b01      	subs	r3, #1
 800475a:	b29a      	uxth	r2, r3
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004764:	2b00      	cmp	r3, #0
 8004766:	f47f ae94 	bne.w	8004492 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	2220      	movs	r2, #32
 800476e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	2200      	movs	r2, #0
 8004776:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	2200      	movs	r2, #0
 800477e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004782:	2300      	movs	r3, #0
 8004784:	e000      	b.n	8004788 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8004786:	2302      	movs	r3, #2
  }
}
 8004788:	4618      	mov	r0, r3
 800478a:	3728      	adds	r7, #40	; 0x28
 800478c:	46bd      	mov	sp, r7
 800478e:	bd80      	pop	{r7, pc}
 8004790:	00010004 	.word	0x00010004
 8004794:	20000174 	.word	0x20000174
 8004798:	14f8b589 	.word	0x14f8b589

0800479c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800479c:	b580      	push	{r7, lr}
 800479e:	b088      	sub	sp, #32
 80047a0:	af02      	add	r7, sp, #8
 80047a2:	60f8      	str	r0, [r7, #12]
 80047a4:	4608      	mov	r0, r1
 80047a6:	4611      	mov	r1, r2
 80047a8:	461a      	mov	r2, r3
 80047aa:	4603      	mov	r3, r0
 80047ac:	817b      	strh	r3, [r7, #10]
 80047ae:	460b      	mov	r3, r1
 80047b0:	813b      	strh	r3, [r7, #8]
 80047b2:	4613      	mov	r3, r2
 80047b4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	681a      	ldr	r2, [r3, #0]
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80047c4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80047c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047c8:	9300      	str	r3, [sp, #0]
 80047ca:	6a3b      	ldr	r3, [r7, #32]
 80047cc:	2200      	movs	r2, #0
 80047ce:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80047d2:	68f8      	ldr	r0, [r7, #12]
 80047d4:	f000 f960 	bl	8004a98 <I2C_WaitOnFlagUntilTimeout>
 80047d8:	4603      	mov	r3, r0
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d00d      	beq.n	80047fa <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80047ec:	d103      	bne.n	80047f6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80047f4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80047f6:	2303      	movs	r3, #3
 80047f8:	e05f      	b.n	80048ba <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80047fa:	897b      	ldrh	r3, [r7, #10]
 80047fc:	b2db      	uxtb	r3, r3
 80047fe:	461a      	mov	r2, r3
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004808:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800480a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800480c:	6a3a      	ldr	r2, [r7, #32]
 800480e:	492d      	ldr	r1, [pc, #180]	; (80048c4 <I2C_RequestMemoryWrite+0x128>)
 8004810:	68f8      	ldr	r0, [r7, #12]
 8004812:	f000 f998 	bl	8004b46 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004816:	4603      	mov	r3, r0
 8004818:	2b00      	cmp	r3, #0
 800481a:	d001      	beq.n	8004820 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800481c:	2301      	movs	r3, #1
 800481e:	e04c      	b.n	80048ba <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004820:	2300      	movs	r3, #0
 8004822:	617b      	str	r3, [r7, #20]
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	695b      	ldr	r3, [r3, #20]
 800482a:	617b      	str	r3, [r7, #20]
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	699b      	ldr	r3, [r3, #24]
 8004832:	617b      	str	r3, [r7, #20]
 8004834:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004836:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004838:	6a39      	ldr	r1, [r7, #32]
 800483a:	68f8      	ldr	r0, [r7, #12]
 800483c:	f000 fa02 	bl	8004c44 <I2C_WaitOnTXEFlagUntilTimeout>
 8004840:	4603      	mov	r3, r0
 8004842:	2b00      	cmp	r3, #0
 8004844:	d00d      	beq.n	8004862 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800484a:	2b04      	cmp	r3, #4
 800484c:	d107      	bne.n	800485e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	681a      	ldr	r2, [r3, #0]
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800485c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800485e:	2301      	movs	r3, #1
 8004860:	e02b      	b.n	80048ba <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004862:	88fb      	ldrh	r3, [r7, #6]
 8004864:	2b01      	cmp	r3, #1
 8004866:	d105      	bne.n	8004874 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004868:	893b      	ldrh	r3, [r7, #8]
 800486a:	b2da      	uxtb	r2, r3
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	611a      	str	r2, [r3, #16]
 8004872:	e021      	b.n	80048b8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004874:	893b      	ldrh	r3, [r7, #8]
 8004876:	0a1b      	lsrs	r3, r3, #8
 8004878:	b29b      	uxth	r3, r3
 800487a:	b2da      	uxtb	r2, r3
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004882:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004884:	6a39      	ldr	r1, [r7, #32]
 8004886:	68f8      	ldr	r0, [r7, #12]
 8004888:	f000 f9dc 	bl	8004c44 <I2C_WaitOnTXEFlagUntilTimeout>
 800488c:	4603      	mov	r3, r0
 800488e:	2b00      	cmp	r3, #0
 8004890:	d00d      	beq.n	80048ae <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004896:	2b04      	cmp	r3, #4
 8004898:	d107      	bne.n	80048aa <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	681a      	ldr	r2, [r3, #0]
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80048a8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80048aa:	2301      	movs	r3, #1
 80048ac:	e005      	b.n	80048ba <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80048ae:	893b      	ldrh	r3, [r7, #8]
 80048b0:	b2da      	uxtb	r2, r3
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80048b8:	2300      	movs	r3, #0
}
 80048ba:	4618      	mov	r0, r3
 80048bc:	3718      	adds	r7, #24
 80048be:	46bd      	mov	sp, r7
 80048c0:	bd80      	pop	{r7, pc}
 80048c2:	bf00      	nop
 80048c4:	00010002 	.word	0x00010002

080048c8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80048c8:	b580      	push	{r7, lr}
 80048ca:	b088      	sub	sp, #32
 80048cc:	af02      	add	r7, sp, #8
 80048ce:	60f8      	str	r0, [r7, #12]
 80048d0:	4608      	mov	r0, r1
 80048d2:	4611      	mov	r1, r2
 80048d4:	461a      	mov	r2, r3
 80048d6:	4603      	mov	r3, r0
 80048d8:	817b      	strh	r3, [r7, #10]
 80048da:	460b      	mov	r3, r1
 80048dc:	813b      	strh	r3, [r7, #8]
 80048de:	4613      	mov	r3, r2
 80048e0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	681a      	ldr	r2, [r3, #0]
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80048f0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	681a      	ldr	r2, [r3, #0]
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004900:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004904:	9300      	str	r3, [sp, #0]
 8004906:	6a3b      	ldr	r3, [r7, #32]
 8004908:	2200      	movs	r2, #0
 800490a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800490e:	68f8      	ldr	r0, [r7, #12]
 8004910:	f000 f8c2 	bl	8004a98 <I2C_WaitOnFlagUntilTimeout>
 8004914:	4603      	mov	r3, r0
 8004916:	2b00      	cmp	r3, #0
 8004918:	d00d      	beq.n	8004936 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004924:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004928:	d103      	bne.n	8004932 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004930:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004932:	2303      	movs	r3, #3
 8004934:	e0aa      	b.n	8004a8c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004936:	897b      	ldrh	r3, [r7, #10]
 8004938:	b2db      	uxtb	r3, r3
 800493a:	461a      	mov	r2, r3
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004944:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004948:	6a3a      	ldr	r2, [r7, #32]
 800494a:	4952      	ldr	r1, [pc, #328]	; (8004a94 <I2C_RequestMemoryRead+0x1cc>)
 800494c:	68f8      	ldr	r0, [r7, #12]
 800494e:	f000 f8fa 	bl	8004b46 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004952:	4603      	mov	r3, r0
 8004954:	2b00      	cmp	r3, #0
 8004956:	d001      	beq.n	800495c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004958:	2301      	movs	r3, #1
 800495a:	e097      	b.n	8004a8c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800495c:	2300      	movs	r3, #0
 800495e:	617b      	str	r3, [r7, #20]
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	695b      	ldr	r3, [r3, #20]
 8004966:	617b      	str	r3, [r7, #20]
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	699b      	ldr	r3, [r3, #24]
 800496e:	617b      	str	r3, [r7, #20]
 8004970:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004972:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004974:	6a39      	ldr	r1, [r7, #32]
 8004976:	68f8      	ldr	r0, [r7, #12]
 8004978:	f000 f964 	bl	8004c44 <I2C_WaitOnTXEFlagUntilTimeout>
 800497c:	4603      	mov	r3, r0
 800497e:	2b00      	cmp	r3, #0
 8004980:	d00d      	beq.n	800499e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004986:	2b04      	cmp	r3, #4
 8004988:	d107      	bne.n	800499a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	681a      	ldr	r2, [r3, #0]
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004998:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800499a:	2301      	movs	r3, #1
 800499c:	e076      	b.n	8004a8c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800499e:	88fb      	ldrh	r3, [r7, #6]
 80049a0:	2b01      	cmp	r3, #1
 80049a2:	d105      	bne.n	80049b0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80049a4:	893b      	ldrh	r3, [r7, #8]
 80049a6:	b2da      	uxtb	r2, r3
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	611a      	str	r2, [r3, #16]
 80049ae:	e021      	b.n	80049f4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80049b0:	893b      	ldrh	r3, [r7, #8]
 80049b2:	0a1b      	lsrs	r3, r3, #8
 80049b4:	b29b      	uxth	r3, r3
 80049b6:	b2da      	uxtb	r2, r3
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80049be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049c0:	6a39      	ldr	r1, [r7, #32]
 80049c2:	68f8      	ldr	r0, [r7, #12]
 80049c4:	f000 f93e 	bl	8004c44 <I2C_WaitOnTXEFlagUntilTimeout>
 80049c8:	4603      	mov	r3, r0
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d00d      	beq.n	80049ea <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049d2:	2b04      	cmp	r3, #4
 80049d4:	d107      	bne.n	80049e6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	681a      	ldr	r2, [r3, #0]
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80049e4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80049e6:	2301      	movs	r3, #1
 80049e8:	e050      	b.n	8004a8c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80049ea:	893b      	ldrh	r3, [r7, #8]
 80049ec:	b2da      	uxtb	r2, r3
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80049f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049f6:	6a39      	ldr	r1, [r7, #32]
 80049f8:	68f8      	ldr	r0, [r7, #12]
 80049fa:	f000 f923 	bl	8004c44 <I2C_WaitOnTXEFlagUntilTimeout>
 80049fe:	4603      	mov	r3, r0
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d00d      	beq.n	8004a20 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a08:	2b04      	cmp	r3, #4
 8004a0a:	d107      	bne.n	8004a1c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	681a      	ldr	r2, [r3, #0]
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a1a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004a1c:	2301      	movs	r3, #1
 8004a1e:	e035      	b.n	8004a8c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	681a      	ldr	r2, [r3, #0]
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004a2e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a32:	9300      	str	r3, [sp, #0]
 8004a34:	6a3b      	ldr	r3, [r7, #32]
 8004a36:	2200      	movs	r2, #0
 8004a38:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004a3c:	68f8      	ldr	r0, [r7, #12]
 8004a3e:	f000 f82b 	bl	8004a98 <I2C_WaitOnFlagUntilTimeout>
 8004a42:	4603      	mov	r3, r0
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d00d      	beq.n	8004a64 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a52:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a56:	d103      	bne.n	8004a60 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004a5e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004a60:	2303      	movs	r3, #3
 8004a62:	e013      	b.n	8004a8c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004a64:	897b      	ldrh	r3, [r7, #10]
 8004a66:	b2db      	uxtb	r3, r3
 8004a68:	f043 0301 	orr.w	r3, r3, #1
 8004a6c:	b2da      	uxtb	r2, r3
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a76:	6a3a      	ldr	r2, [r7, #32]
 8004a78:	4906      	ldr	r1, [pc, #24]	; (8004a94 <I2C_RequestMemoryRead+0x1cc>)
 8004a7a:	68f8      	ldr	r0, [r7, #12]
 8004a7c:	f000 f863 	bl	8004b46 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004a80:	4603      	mov	r3, r0
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d001      	beq.n	8004a8a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004a86:	2301      	movs	r3, #1
 8004a88:	e000      	b.n	8004a8c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004a8a:	2300      	movs	r3, #0
}
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	3718      	adds	r7, #24
 8004a90:	46bd      	mov	sp, r7
 8004a92:	bd80      	pop	{r7, pc}
 8004a94:	00010002 	.word	0x00010002

08004a98 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	b084      	sub	sp, #16
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	60f8      	str	r0, [r7, #12]
 8004aa0:	60b9      	str	r1, [r7, #8]
 8004aa2:	603b      	str	r3, [r7, #0]
 8004aa4:	4613      	mov	r3, r2
 8004aa6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004aa8:	e025      	b.n	8004af6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004aaa:	683b      	ldr	r3, [r7, #0]
 8004aac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004ab0:	d021      	beq.n	8004af6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ab2:	f7fe fec5 	bl	8003840 <HAL_GetTick>
 8004ab6:	4602      	mov	r2, r0
 8004ab8:	69bb      	ldr	r3, [r7, #24]
 8004aba:	1ad3      	subs	r3, r2, r3
 8004abc:	683a      	ldr	r2, [r7, #0]
 8004abe:	429a      	cmp	r2, r3
 8004ac0:	d302      	bcc.n	8004ac8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004ac2:	683b      	ldr	r3, [r7, #0]
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d116      	bne.n	8004af6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	2200      	movs	r2, #0
 8004acc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	2220      	movs	r2, #32
 8004ad2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	2200      	movs	r2, #0
 8004ada:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ae2:	f043 0220 	orr.w	r2, r3, #32
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	2200      	movs	r2, #0
 8004aee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004af2:	2301      	movs	r3, #1
 8004af4:	e023      	b.n	8004b3e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004af6:	68bb      	ldr	r3, [r7, #8]
 8004af8:	0c1b      	lsrs	r3, r3, #16
 8004afa:	b2db      	uxtb	r3, r3
 8004afc:	2b01      	cmp	r3, #1
 8004afe:	d10d      	bne.n	8004b1c <I2C_WaitOnFlagUntilTimeout+0x84>
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	695b      	ldr	r3, [r3, #20]
 8004b06:	43da      	mvns	r2, r3
 8004b08:	68bb      	ldr	r3, [r7, #8]
 8004b0a:	4013      	ands	r3, r2
 8004b0c:	b29b      	uxth	r3, r3
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	bf0c      	ite	eq
 8004b12:	2301      	moveq	r3, #1
 8004b14:	2300      	movne	r3, #0
 8004b16:	b2db      	uxtb	r3, r3
 8004b18:	461a      	mov	r2, r3
 8004b1a:	e00c      	b.n	8004b36 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	699b      	ldr	r3, [r3, #24]
 8004b22:	43da      	mvns	r2, r3
 8004b24:	68bb      	ldr	r3, [r7, #8]
 8004b26:	4013      	ands	r3, r2
 8004b28:	b29b      	uxth	r3, r3
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	bf0c      	ite	eq
 8004b2e:	2301      	moveq	r3, #1
 8004b30:	2300      	movne	r3, #0
 8004b32:	b2db      	uxtb	r3, r3
 8004b34:	461a      	mov	r2, r3
 8004b36:	79fb      	ldrb	r3, [r7, #7]
 8004b38:	429a      	cmp	r2, r3
 8004b3a:	d0b6      	beq.n	8004aaa <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004b3c:	2300      	movs	r3, #0
}
 8004b3e:	4618      	mov	r0, r3
 8004b40:	3710      	adds	r7, #16
 8004b42:	46bd      	mov	sp, r7
 8004b44:	bd80      	pop	{r7, pc}

08004b46 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004b46:	b580      	push	{r7, lr}
 8004b48:	b084      	sub	sp, #16
 8004b4a:	af00      	add	r7, sp, #0
 8004b4c:	60f8      	str	r0, [r7, #12]
 8004b4e:	60b9      	str	r1, [r7, #8]
 8004b50:	607a      	str	r2, [r7, #4]
 8004b52:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004b54:	e051      	b.n	8004bfa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	695b      	ldr	r3, [r3, #20]
 8004b5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b60:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b64:	d123      	bne.n	8004bae <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	681a      	ldr	r2, [r3, #0]
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b74:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004b7e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	2200      	movs	r2, #0
 8004b84:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	2220      	movs	r2, #32
 8004b8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	2200      	movs	r2, #0
 8004b92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b9a:	f043 0204 	orr.w	r2, r3, #4
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004baa:	2301      	movs	r3, #1
 8004bac:	e046      	b.n	8004c3c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004bb4:	d021      	beq.n	8004bfa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004bb6:	f7fe fe43 	bl	8003840 <HAL_GetTick>
 8004bba:	4602      	mov	r2, r0
 8004bbc:	683b      	ldr	r3, [r7, #0]
 8004bbe:	1ad3      	subs	r3, r2, r3
 8004bc0:	687a      	ldr	r2, [r7, #4]
 8004bc2:	429a      	cmp	r2, r3
 8004bc4:	d302      	bcc.n	8004bcc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d116      	bne.n	8004bfa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	2200      	movs	r2, #0
 8004bd0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	2220      	movs	r2, #32
 8004bd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	2200      	movs	r2, #0
 8004bde:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004be6:	f043 0220 	orr.w	r2, r3, #32
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004bf6:	2301      	movs	r3, #1
 8004bf8:	e020      	b.n	8004c3c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004bfa:	68bb      	ldr	r3, [r7, #8]
 8004bfc:	0c1b      	lsrs	r3, r3, #16
 8004bfe:	b2db      	uxtb	r3, r3
 8004c00:	2b01      	cmp	r3, #1
 8004c02:	d10c      	bne.n	8004c1e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	695b      	ldr	r3, [r3, #20]
 8004c0a:	43da      	mvns	r2, r3
 8004c0c:	68bb      	ldr	r3, [r7, #8]
 8004c0e:	4013      	ands	r3, r2
 8004c10:	b29b      	uxth	r3, r3
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	bf14      	ite	ne
 8004c16:	2301      	movne	r3, #1
 8004c18:	2300      	moveq	r3, #0
 8004c1a:	b2db      	uxtb	r3, r3
 8004c1c:	e00b      	b.n	8004c36 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	699b      	ldr	r3, [r3, #24]
 8004c24:	43da      	mvns	r2, r3
 8004c26:	68bb      	ldr	r3, [r7, #8]
 8004c28:	4013      	ands	r3, r2
 8004c2a:	b29b      	uxth	r3, r3
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	bf14      	ite	ne
 8004c30:	2301      	movne	r3, #1
 8004c32:	2300      	moveq	r3, #0
 8004c34:	b2db      	uxtb	r3, r3
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d18d      	bne.n	8004b56 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004c3a:	2300      	movs	r3, #0
}
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	3710      	adds	r7, #16
 8004c40:	46bd      	mov	sp, r7
 8004c42:	bd80      	pop	{r7, pc}

08004c44 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004c44:	b580      	push	{r7, lr}
 8004c46:	b084      	sub	sp, #16
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	60f8      	str	r0, [r7, #12]
 8004c4c:	60b9      	str	r1, [r7, #8]
 8004c4e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004c50:	e02d      	b.n	8004cae <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004c52:	68f8      	ldr	r0, [r7, #12]
 8004c54:	f000 f8ce 	bl	8004df4 <I2C_IsAcknowledgeFailed>
 8004c58:	4603      	mov	r3, r0
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d001      	beq.n	8004c62 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004c5e:	2301      	movs	r3, #1
 8004c60:	e02d      	b.n	8004cbe <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c62:	68bb      	ldr	r3, [r7, #8]
 8004c64:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004c68:	d021      	beq.n	8004cae <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c6a:	f7fe fde9 	bl	8003840 <HAL_GetTick>
 8004c6e:	4602      	mov	r2, r0
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	1ad3      	subs	r3, r2, r3
 8004c74:	68ba      	ldr	r2, [r7, #8]
 8004c76:	429a      	cmp	r2, r3
 8004c78:	d302      	bcc.n	8004c80 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004c7a:	68bb      	ldr	r3, [r7, #8]
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d116      	bne.n	8004cae <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	2200      	movs	r2, #0
 8004c84:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	2220      	movs	r2, #32
 8004c8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	2200      	movs	r2, #0
 8004c92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c9a:	f043 0220 	orr.w	r2, r3, #32
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004caa:	2301      	movs	r3, #1
 8004cac:	e007      	b.n	8004cbe <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	695b      	ldr	r3, [r3, #20]
 8004cb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cb8:	2b80      	cmp	r3, #128	; 0x80
 8004cba:	d1ca      	bne.n	8004c52 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004cbc:	2300      	movs	r3, #0
}
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	3710      	adds	r7, #16
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	bd80      	pop	{r7, pc}

08004cc6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004cc6:	b580      	push	{r7, lr}
 8004cc8:	b084      	sub	sp, #16
 8004cca:	af00      	add	r7, sp, #0
 8004ccc:	60f8      	str	r0, [r7, #12]
 8004cce:	60b9      	str	r1, [r7, #8]
 8004cd0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004cd2:	e02d      	b.n	8004d30 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004cd4:	68f8      	ldr	r0, [r7, #12]
 8004cd6:	f000 f88d 	bl	8004df4 <I2C_IsAcknowledgeFailed>
 8004cda:	4603      	mov	r3, r0
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d001      	beq.n	8004ce4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004ce0:	2301      	movs	r3, #1
 8004ce2:	e02d      	b.n	8004d40 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ce4:	68bb      	ldr	r3, [r7, #8]
 8004ce6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004cea:	d021      	beq.n	8004d30 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004cec:	f7fe fda8 	bl	8003840 <HAL_GetTick>
 8004cf0:	4602      	mov	r2, r0
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	1ad3      	subs	r3, r2, r3
 8004cf6:	68ba      	ldr	r2, [r7, #8]
 8004cf8:	429a      	cmp	r2, r3
 8004cfa:	d302      	bcc.n	8004d02 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004cfc:	68bb      	ldr	r3, [r7, #8]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d116      	bne.n	8004d30 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	2200      	movs	r2, #0
 8004d06:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	2220      	movs	r2, #32
 8004d0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	2200      	movs	r2, #0
 8004d14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d1c:	f043 0220 	orr.w	r2, r3, #32
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	2200      	movs	r2, #0
 8004d28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004d2c:	2301      	movs	r3, #1
 8004d2e:	e007      	b.n	8004d40 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	695b      	ldr	r3, [r3, #20]
 8004d36:	f003 0304 	and.w	r3, r3, #4
 8004d3a:	2b04      	cmp	r3, #4
 8004d3c:	d1ca      	bne.n	8004cd4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004d3e:	2300      	movs	r3, #0
}
 8004d40:	4618      	mov	r0, r3
 8004d42:	3710      	adds	r7, #16
 8004d44:	46bd      	mov	sp, r7
 8004d46:	bd80      	pop	{r7, pc}

08004d48 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004d48:	b580      	push	{r7, lr}
 8004d4a:	b084      	sub	sp, #16
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	60f8      	str	r0, [r7, #12]
 8004d50:	60b9      	str	r1, [r7, #8]
 8004d52:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004d54:	e042      	b.n	8004ddc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	695b      	ldr	r3, [r3, #20]
 8004d5c:	f003 0310 	and.w	r3, r3, #16
 8004d60:	2b10      	cmp	r3, #16
 8004d62:	d119      	bne.n	8004d98 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f06f 0210 	mvn.w	r2, #16
 8004d6c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	2200      	movs	r2, #0
 8004d72:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	2220      	movs	r2, #32
 8004d78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	2200      	movs	r2, #0
 8004d80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	2200      	movs	r2, #0
 8004d90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004d94:	2301      	movs	r3, #1
 8004d96:	e029      	b.n	8004dec <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d98:	f7fe fd52 	bl	8003840 <HAL_GetTick>
 8004d9c:	4602      	mov	r2, r0
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	1ad3      	subs	r3, r2, r3
 8004da2:	68ba      	ldr	r2, [r7, #8]
 8004da4:	429a      	cmp	r2, r3
 8004da6:	d302      	bcc.n	8004dae <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004da8:	68bb      	ldr	r3, [r7, #8]
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d116      	bne.n	8004ddc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	2200      	movs	r2, #0
 8004db2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	2220      	movs	r2, #32
 8004db8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dc8:	f043 0220 	orr.w	r2, r3, #32
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004dd8:	2301      	movs	r3, #1
 8004dda:	e007      	b.n	8004dec <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	695b      	ldr	r3, [r3, #20]
 8004de2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004de6:	2b40      	cmp	r3, #64	; 0x40
 8004de8:	d1b5      	bne.n	8004d56 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004dea:	2300      	movs	r3, #0
}
 8004dec:	4618      	mov	r0, r3
 8004dee:	3710      	adds	r7, #16
 8004df0:	46bd      	mov	sp, r7
 8004df2:	bd80      	pop	{r7, pc}

08004df4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004df4:	b480      	push	{r7}
 8004df6:	b083      	sub	sp, #12
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	695b      	ldr	r3, [r3, #20]
 8004e02:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e06:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e0a:	d11b      	bne.n	8004e44 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004e14:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	2200      	movs	r2, #0
 8004e1a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2220      	movs	r2, #32
 8004e20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2200      	movs	r2, #0
 8004e28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e30:	f043 0204 	orr.w	r2, r3, #4
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004e40:	2301      	movs	r3, #1
 8004e42:	e000      	b.n	8004e46 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004e44:	2300      	movs	r3, #0
}
 8004e46:	4618      	mov	r0, r3
 8004e48:	370c      	adds	r7, #12
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	bc80      	pop	{r7}
 8004e4e:	4770      	bx	lr

08004e50 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004e50:	b580      	push	{r7, lr}
 8004e52:	b086      	sub	sp, #24
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d101      	bne.n	8004e62 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004e5e:	2301      	movs	r3, #1
 8004e60:	e272      	b.n	8005348 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f003 0301 	and.w	r3, r3, #1
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	f000 8087 	beq.w	8004f7e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004e70:	4b92      	ldr	r3, [pc, #584]	; (80050bc <HAL_RCC_OscConfig+0x26c>)
 8004e72:	685b      	ldr	r3, [r3, #4]
 8004e74:	f003 030c 	and.w	r3, r3, #12
 8004e78:	2b04      	cmp	r3, #4
 8004e7a:	d00c      	beq.n	8004e96 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004e7c:	4b8f      	ldr	r3, [pc, #572]	; (80050bc <HAL_RCC_OscConfig+0x26c>)
 8004e7e:	685b      	ldr	r3, [r3, #4]
 8004e80:	f003 030c 	and.w	r3, r3, #12
 8004e84:	2b08      	cmp	r3, #8
 8004e86:	d112      	bne.n	8004eae <HAL_RCC_OscConfig+0x5e>
 8004e88:	4b8c      	ldr	r3, [pc, #560]	; (80050bc <HAL_RCC_OscConfig+0x26c>)
 8004e8a:	685b      	ldr	r3, [r3, #4]
 8004e8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004e90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e94:	d10b      	bne.n	8004eae <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e96:	4b89      	ldr	r3, [pc, #548]	; (80050bc <HAL_RCC_OscConfig+0x26c>)
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d06c      	beq.n	8004f7c <HAL_RCC_OscConfig+0x12c>
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	685b      	ldr	r3, [r3, #4]
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d168      	bne.n	8004f7c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004eaa:	2301      	movs	r3, #1
 8004eac:	e24c      	b.n	8005348 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	685b      	ldr	r3, [r3, #4]
 8004eb2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004eb6:	d106      	bne.n	8004ec6 <HAL_RCC_OscConfig+0x76>
 8004eb8:	4b80      	ldr	r3, [pc, #512]	; (80050bc <HAL_RCC_OscConfig+0x26c>)
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	4a7f      	ldr	r2, [pc, #508]	; (80050bc <HAL_RCC_OscConfig+0x26c>)
 8004ebe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ec2:	6013      	str	r3, [r2, #0]
 8004ec4:	e02e      	b.n	8004f24 <HAL_RCC_OscConfig+0xd4>
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	685b      	ldr	r3, [r3, #4]
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d10c      	bne.n	8004ee8 <HAL_RCC_OscConfig+0x98>
 8004ece:	4b7b      	ldr	r3, [pc, #492]	; (80050bc <HAL_RCC_OscConfig+0x26c>)
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	4a7a      	ldr	r2, [pc, #488]	; (80050bc <HAL_RCC_OscConfig+0x26c>)
 8004ed4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ed8:	6013      	str	r3, [r2, #0]
 8004eda:	4b78      	ldr	r3, [pc, #480]	; (80050bc <HAL_RCC_OscConfig+0x26c>)
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	4a77      	ldr	r2, [pc, #476]	; (80050bc <HAL_RCC_OscConfig+0x26c>)
 8004ee0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004ee4:	6013      	str	r3, [r2, #0]
 8004ee6:	e01d      	b.n	8004f24 <HAL_RCC_OscConfig+0xd4>
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	685b      	ldr	r3, [r3, #4]
 8004eec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004ef0:	d10c      	bne.n	8004f0c <HAL_RCC_OscConfig+0xbc>
 8004ef2:	4b72      	ldr	r3, [pc, #456]	; (80050bc <HAL_RCC_OscConfig+0x26c>)
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	4a71      	ldr	r2, [pc, #452]	; (80050bc <HAL_RCC_OscConfig+0x26c>)
 8004ef8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004efc:	6013      	str	r3, [r2, #0]
 8004efe:	4b6f      	ldr	r3, [pc, #444]	; (80050bc <HAL_RCC_OscConfig+0x26c>)
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	4a6e      	ldr	r2, [pc, #440]	; (80050bc <HAL_RCC_OscConfig+0x26c>)
 8004f04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f08:	6013      	str	r3, [r2, #0]
 8004f0a:	e00b      	b.n	8004f24 <HAL_RCC_OscConfig+0xd4>
 8004f0c:	4b6b      	ldr	r3, [pc, #428]	; (80050bc <HAL_RCC_OscConfig+0x26c>)
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	4a6a      	ldr	r2, [pc, #424]	; (80050bc <HAL_RCC_OscConfig+0x26c>)
 8004f12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f16:	6013      	str	r3, [r2, #0]
 8004f18:	4b68      	ldr	r3, [pc, #416]	; (80050bc <HAL_RCC_OscConfig+0x26c>)
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	4a67      	ldr	r2, [pc, #412]	; (80050bc <HAL_RCC_OscConfig+0x26c>)
 8004f1e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004f22:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	685b      	ldr	r3, [r3, #4]
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d013      	beq.n	8004f54 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f2c:	f7fe fc88 	bl	8003840 <HAL_GetTick>
 8004f30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f32:	e008      	b.n	8004f46 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004f34:	f7fe fc84 	bl	8003840 <HAL_GetTick>
 8004f38:	4602      	mov	r2, r0
 8004f3a:	693b      	ldr	r3, [r7, #16]
 8004f3c:	1ad3      	subs	r3, r2, r3
 8004f3e:	2b64      	cmp	r3, #100	; 0x64
 8004f40:	d901      	bls.n	8004f46 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004f42:	2303      	movs	r3, #3
 8004f44:	e200      	b.n	8005348 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f46:	4b5d      	ldr	r3, [pc, #372]	; (80050bc <HAL_RCC_OscConfig+0x26c>)
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d0f0      	beq.n	8004f34 <HAL_RCC_OscConfig+0xe4>
 8004f52:	e014      	b.n	8004f7e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f54:	f7fe fc74 	bl	8003840 <HAL_GetTick>
 8004f58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f5a:	e008      	b.n	8004f6e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004f5c:	f7fe fc70 	bl	8003840 <HAL_GetTick>
 8004f60:	4602      	mov	r2, r0
 8004f62:	693b      	ldr	r3, [r7, #16]
 8004f64:	1ad3      	subs	r3, r2, r3
 8004f66:	2b64      	cmp	r3, #100	; 0x64
 8004f68:	d901      	bls.n	8004f6e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004f6a:	2303      	movs	r3, #3
 8004f6c:	e1ec      	b.n	8005348 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f6e:	4b53      	ldr	r3, [pc, #332]	; (80050bc <HAL_RCC_OscConfig+0x26c>)
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d1f0      	bne.n	8004f5c <HAL_RCC_OscConfig+0x10c>
 8004f7a:	e000      	b.n	8004f7e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f7c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f003 0302 	and.w	r3, r3, #2
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d063      	beq.n	8005052 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004f8a:	4b4c      	ldr	r3, [pc, #304]	; (80050bc <HAL_RCC_OscConfig+0x26c>)
 8004f8c:	685b      	ldr	r3, [r3, #4]
 8004f8e:	f003 030c 	and.w	r3, r3, #12
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d00b      	beq.n	8004fae <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004f96:	4b49      	ldr	r3, [pc, #292]	; (80050bc <HAL_RCC_OscConfig+0x26c>)
 8004f98:	685b      	ldr	r3, [r3, #4]
 8004f9a:	f003 030c 	and.w	r3, r3, #12
 8004f9e:	2b08      	cmp	r3, #8
 8004fa0:	d11c      	bne.n	8004fdc <HAL_RCC_OscConfig+0x18c>
 8004fa2:	4b46      	ldr	r3, [pc, #280]	; (80050bc <HAL_RCC_OscConfig+0x26c>)
 8004fa4:	685b      	ldr	r3, [r3, #4]
 8004fa6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d116      	bne.n	8004fdc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004fae:	4b43      	ldr	r3, [pc, #268]	; (80050bc <HAL_RCC_OscConfig+0x26c>)
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	f003 0302 	and.w	r3, r3, #2
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d005      	beq.n	8004fc6 <HAL_RCC_OscConfig+0x176>
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	691b      	ldr	r3, [r3, #16]
 8004fbe:	2b01      	cmp	r3, #1
 8004fc0:	d001      	beq.n	8004fc6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004fc2:	2301      	movs	r3, #1
 8004fc4:	e1c0      	b.n	8005348 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004fc6:	4b3d      	ldr	r3, [pc, #244]	; (80050bc <HAL_RCC_OscConfig+0x26c>)
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	695b      	ldr	r3, [r3, #20]
 8004fd2:	00db      	lsls	r3, r3, #3
 8004fd4:	4939      	ldr	r1, [pc, #228]	; (80050bc <HAL_RCC_OscConfig+0x26c>)
 8004fd6:	4313      	orrs	r3, r2
 8004fd8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004fda:	e03a      	b.n	8005052 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	691b      	ldr	r3, [r3, #16]
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d020      	beq.n	8005026 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004fe4:	4b36      	ldr	r3, [pc, #216]	; (80050c0 <HAL_RCC_OscConfig+0x270>)
 8004fe6:	2201      	movs	r2, #1
 8004fe8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fea:	f7fe fc29 	bl	8003840 <HAL_GetTick>
 8004fee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ff0:	e008      	b.n	8005004 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004ff2:	f7fe fc25 	bl	8003840 <HAL_GetTick>
 8004ff6:	4602      	mov	r2, r0
 8004ff8:	693b      	ldr	r3, [r7, #16]
 8004ffa:	1ad3      	subs	r3, r2, r3
 8004ffc:	2b02      	cmp	r3, #2
 8004ffe:	d901      	bls.n	8005004 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8005000:	2303      	movs	r3, #3
 8005002:	e1a1      	b.n	8005348 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005004:	4b2d      	ldr	r3, [pc, #180]	; (80050bc <HAL_RCC_OscConfig+0x26c>)
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f003 0302 	and.w	r3, r3, #2
 800500c:	2b00      	cmp	r3, #0
 800500e:	d0f0      	beq.n	8004ff2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005010:	4b2a      	ldr	r3, [pc, #168]	; (80050bc <HAL_RCC_OscConfig+0x26c>)
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	695b      	ldr	r3, [r3, #20]
 800501c:	00db      	lsls	r3, r3, #3
 800501e:	4927      	ldr	r1, [pc, #156]	; (80050bc <HAL_RCC_OscConfig+0x26c>)
 8005020:	4313      	orrs	r3, r2
 8005022:	600b      	str	r3, [r1, #0]
 8005024:	e015      	b.n	8005052 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005026:	4b26      	ldr	r3, [pc, #152]	; (80050c0 <HAL_RCC_OscConfig+0x270>)
 8005028:	2200      	movs	r2, #0
 800502a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800502c:	f7fe fc08 	bl	8003840 <HAL_GetTick>
 8005030:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005032:	e008      	b.n	8005046 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005034:	f7fe fc04 	bl	8003840 <HAL_GetTick>
 8005038:	4602      	mov	r2, r0
 800503a:	693b      	ldr	r3, [r7, #16]
 800503c:	1ad3      	subs	r3, r2, r3
 800503e:	2b02      	cmp	r3, #2
 8005040:	d901      	bls.n	8005046 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8005042:	2303      	movs	r3, #3
 8005044:	e180      	b.n	8005348 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005046:	4b1d      	ldr	r3, [pc, #116]	; (80050bc <HAL_RCC_OscConfig+0x26c>)
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f003 0302 	and.w	r3, r3, #2
 800504e:	2b00      	cmp	r3, #0
 8005050:	d1f0      	bne.n	8005034 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f003 0308 	and.w	r3, r3, #8
 800505a:	2b00      	cmp	r3, #0
 800505c:	d03a      	beq.n	80050d4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	699b      	ldr	r3, [r3, #24]
 8005062:	2b00      	cmp	r3, #0
 8005064:	d019      	beq.n	800509a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005066:	4b17      	ldr	r3, [pc, #92]	; (80050c4 <HAL_RCC_OscConfig+0x274>)
 8005068:	2201      	movs	r2, #1
 800506a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800506c:	f7fe fbe8 	bl	8003840 <HAL_GetTick>
 8005070:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005072:	e008      	b.n	8005086 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005074:	f7fe fbe4 	bl	8003840 <HAL_GetTick>
 8005078:	4602      	mov	r2, r0
 800507a:	693b      	ldr	r3, [r7, #16]
 800507c:	1ad3      	subs	r3, r2, r3
 800507e:	2b02      	cmp	r3, #2
 8005080:	d901      	bls.n	8005086 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8005082:	2303      	movs	r3, #3
 8005084:	e160      	b.n	8005348 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005086:	4b0d      	ldr	r3, [pc, #52]	; (80050bc <HAL_RCC_OscConfig+0x26c>)
 8005088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800508a:	f003 0302 	and.w	r3, r3, #2
 800508e:	2b00      	cmp	r3, #0
 8005090:	d0f0      	beq.n	8005074 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8005092:	2001      	movs	r0, #1
 8005094:	f000 fac4 	bl	8005620 <RCC_Delay>
 8005098:	e01c      	b.n	80050d4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800509a:	4b0a      	ldr	r3, [pc, #40]	; (80050c4 <HAL_RCC_OscConfig+0x274>)
 800509c:	2200      	movs	r2, #0
 800509e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80050a0:	f7fe fbce 	bl	8003840 <HAL_GetTick>
 80050a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80050a6:	e00f      	b.n	80050c8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80050a8:	f7fe fbca 	bl	8003840 <HAL_GetTick>
 80050ac:	4602      	mov	r2, r0
 80050ae:	693b      	ldr	r3, [r7, #16]
 80050b0:	1ad3      	subs	r3, r2, r3
 80050b2:	2b02      	cmp	r3, #2
 80050b4:	d908      	bls.n	80050c8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80050b6:	2303      	movs	r3, #3
 80050b8:	e146      	b.n	8005348 <HAL_RCC_OscConfig+0x4f8>
 80050ba:	bf00      	nop
 80050bc:	40021000 	.word	0x40021000
 80050c0:	42420000 	.word	0x42420000
 80050c4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80050c8:	4b92      	ldr	r3, [pc, #584]	; (8005314 <HAL_RCC_OscConfig+0x4c4>)
 80050ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050cc:	f003 0302 	and.w	r3, r3, #2
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d1e9      	bne.n	80050a8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f003 0304 	and.w	r3, r3, #4
 80050dc:	2b00      	cmp	r3, #0
 80050de:	f000 80a6 	beq.w	800522e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80050e2:	2300      	movs	r3, #0
 80050e4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80050e6:	4b8b      	ldr	r3, [pc, #556]	; (8005314 <HAL_RCC_OscConfig+0x4c4>)
 80050e8:	69db      	ldr	r3, [r3, #28]
 80050ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d10d      	bne.n	800510e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80050f2:	4b88      	ldr	r3, [pc, #544]	; (8005314 <HAL_RCC_OscConfig+0x4c4>)
 80050f4:	69db      	ldr	r3, [r3, #28]
 80050f6:	4a87      	ldr	r2, [pc, #540]	; (8005314 <HAL_RCC_OscConfig+0x4c4>)
 80050f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80050fc:	61d3      	str	r3, [r2, #28]
 80050fe:	4b85      	ldr	r3, [pc, #532]	; (8005314 <HAL_RCC_OscConfig+0x4c4>)
 8005100:	69db      	ldr	r3, [r3, #28]
 8005102:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005106:	60bb      	str	r3, [r7, #8]
 8005108:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800510a:	2301      	movs	r3, #1
 800510c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800510e:	4b82      	ldr	r3, [pc, #520]	; (8005318 <HAL_RCC_OscConfig+0x4c8>)
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005116:	2b00      	cmp	r3, #0
 8005118:	d118      	bne.n	800514c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800511a:	4b7f      	ldr	r3, [pc, #508]	; (8005318 <HAL_RCC_OscConfig+0x4c8>)
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	4a7e      	ldr	r2, [pc, #504]	; (8005318 <HAL_RCC_OscConfig+0x4c8>)
 8005120:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005124:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005126:	f7fe fb8b 	bl	8003840 <HAL_GetTick>
 800512a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800512c:	e008      	b.n	8005140 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800512e:	f7fe fb87 	bl	8003840 <HAL_GetTick>
 8005132:	4602      	mov	r2, r0
 8005134:	693b      	ldr	r3, [r7, #16]
 8005136:	1ad3      	subs	r3, r2, r3
 8005138:	2b64      	cmp	r3, #100	; 0x64
 800513a:	d901      	bls.n	8005140 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800513c:	2303      	movs	r3, #3
 800513e:	e103      	b.n	8005348 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005140:	4b75      	ldr	r3, [pc, #468]	; (8005318 <HAL_RCC_OscConfig+0x4c8>)
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005148:	2b00      	cmp	r3, #0
 800514a:	d0f0      	beq.n	800512e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	68db      	ldr	r3, [r3, #12]
 8005150:	2b01      	cmp	r3, #1
 8005152:	d106      	bne.n	8005162 <HAL_RCC_OscConfig+0x312>
 8005154:	4b6f      	ldr	r3, [pc, #444]	; (8005314 <HAL_RCC_OscConfig+0x4c4>)
 8005156:	6a1b      	ldr	r3, [r3, #32]
 8005158:	4a6e      	ldr	r2, [pc, #440]	; (8005314 <HAL_RCC_OscConfig+0x4c4>)
 800515a:	f043 0301 	orr.w	r3, r3, #1
 800515e:	6213      	str	r3, [r2, #32]
 8005160:	e02d      	b.n	80051be <HAL_RCC_OscConfig+0x36e>
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	68db      	ldr	r3, [r3, #12]
 8005166:	2b00      	cmp	r3, #0
 8005168:	d10c      	bne.n	8005184 <HAL_RCC_OscConfig+0x334>
 800516a:	4b6a      	ldr	r3, [pc, #424]	; (8005314 <HAL_RCC_OscConfig+0x4c4>)
 800516c:	6a1b      	ldr	r3, [r3, #32]
 800516e:	4a69      	ldr	r2, [pc, #420]	; (8005314 <HAL_RCC_OscConfig+0x4c4>)
 8005170:	f023 0301 	bic.w	r3, r3, #1
 8005174:	6213      	str	r3, [r2, #32]
 8005176:	4b67      	ldr	r3, [pc, #412]	; (8005314 <HAL_RCC_OscConfig+0x4c4>)
 8005178:	6a1b      	ldr	r3, [r3, #32]
 800517a:	4a66      	ldr	r2, [pc, #408]	; (8005314 <HAL_RCC_OscConfig+0x4c4>)
 800517c:	f023 0304 	bic.w	r3, r3, #4
 8005180:	6213      	str	r3, [r2, #32]
 8005182:	e01c      	b.n	80051be <HAL_RCC_OscConfig+0x36e>
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	68db      	ldr	r3, [r3, #12]
 8005188:	2b05      	cmp	r3, #5
 800518a:	d10c      	bne.n	80051a6 <HAL_RCC_OscConfig+0x356>
 800518c:	4b61      	ldr	r3, [pc, #388]	; (8005314 <HAL_RCC_OscConfig+0x4c4>)
 800518e:	6a1b      	ldr	r3, [r3, #32]
 8005190:	4a60      	ldr	r2, [pc, #384]	; (8005314 <HAL_RCC_OscConfig+0x4c4>)
 8005192:	f043 0304 	orr.w	r3, r3, #4
 8005196:	6213      	str	r3, [r2, #32]
 8005198:	4b5e      	ldr	r3, [pc, #376]	; (8005314 <HAL_RCC_OscConfig+0x4c4>)
 800519a:	6a1b      	ldr	r3, [r3, #32]
 800519c:	4a5d      	ldr	r2, [pc, #372]	; (8005314 <HAL_RCC_OscConfig+0x4c4>)
 800519e:	f043 0301 	orr.w	r3, r3, #1
 80051a2:	6213      	str	r3, [r2, #32]
 80051a4:	e00b      	b.n	80051be <HAL_RCC_OscConfig+0x36e>
 80051a6:	4b5b      	ldr	r3, [pc, #364]	; (8005314 <HAL_RCC_OscConfig+0x4c4>)
 80051a8:	6a1b      	ldr	r3, [r3, #32]
 80051aa:	4a5a      	ldr	r2, [pc, #360]	; (8005314 <HAL_RCC_OscConfig+0x4c4>)
 80051ac:	f023 0301 	bic.w	r3, r3, #1
 80051b0:	6213      	str	r3, [r2, #32]
 80051b2:	4b58      	ldr	r3, [pc, #352]	; (8005314 <HAL_RCC_OscConfig+0x4c4>)
 80051b4:	6a1b      	ldr	r3, [r3, #32]
 80051b6:	4a57      	ldr	r2, [pc, #348]	; (8005314 <HAL_RCC_OscConfig+0x4c4>)
 80051b8:	f023 0304 	bic.w	r3, r3, #4
 80051bc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	68db      	ldr	r3, [r3, #12]
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d015      	beq.n	80051f2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80051c6:	f7fe fb3b 	bl	8003840 <HAL_GetTick>
 80051ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80051cc:	e00a      	b.n	80051e4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80051ce:	f7fe fb37 	bl	8003840 <HAL_GetTick>
 80051d2:	4602      	mov	r2, r0
 80051d4:	693b      	ldr	r3, [r7, #16]
 80051d6:	1ad3      	subs	r3, r2, r3
 80051d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80051dc:	4293      	cmp	r3, r2
 80051de:	d901      	bls.n	80051e4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80051e0:	2303      	movs	r3, #3
 80051e2:	e0b1      	b.n	8005348 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80051e4:	4b4b      	ldr	r3, [pc, #300]	; (8005314 <HAL_RCC_OscConfig+0x4c4>)
 80051e6:	6a1b      	ldr	r3, [r3, #32]
 80051e8:	f003 0302 	and.w	r3, r3, #2
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d0ee      	beq.n	80051ce <HAL_RCC_OscConfig+0x37e>
 80051f0:	e014      	b.n	800521c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80051f2:	f7fe fb25 	bl	8003840 <HAL_GetTick>
 80051f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80051f8:	e00a      	b.n	8005210 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80051fa:	f7fe fb21 	bl	8003840 <HAL_GetTick>
 80051fe:	4602      	mov	r2, r0
 8005200:	693b      	ldr	r3, [r7, #16]
 8005202:	1ad3      	subs	r3, r2, r3
 8005204:	f241 3288 	movw	r2, #5000	; 0x1388
 8005208:	4293      	cmp	r3, r2
 800520a:	d901      	bls.n	8005210 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800520c:	2303      	movs	r3, #3
 800520e:	e09b      	b.n	8005348 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005210:	4b40      	ldr	r3, [pc, #256]	; (8005314 <HAL_RCC_OscConfig+0x4c4>)
 8005212:	6a1b      	ldr	r3, [r3, #32]
 8005214:	f003 0302 	and.w	r3, r3, #2
 8005218:	2b00      	cmp	r3, #0
 800521a:	d1ee      	bne.n	80051fa <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800521c:	7dfb      	ldrb	r3, [r7, #23]
 800521e:	2b01      	cmp	r3, #1
 8005220:	d105      	bne.n	800522e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005222:	4b3c      	ldr	r3, [pc, #240]	; (8005314 <HAL_RCC_OscConfig+0x4c4>)
 8005224:	69db      	ldr	r3, [r3, #28]
 8005226:	4a3b      	ldr	r2, [pc, #236]	; (8005314 <HAL_RCC_OscConfig+0x4c4>)
 8005228:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800522c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	69db      	ldr	r3, [r3, #28]
 8005232:	2b00      	cmp	r3, #0
 8005234:	f000 8087 	beq.w	8005346 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005238:	4b36      	ldr	r3, [pc, #216]	; (8005314 <HAL_RCC_OscConfig+0x4c4>)
 800523a:	685b      	ldr	r3, [r3, #4]
 800523c:	f003 030c 	and.w	r3, r3, #12
 8005240:	2b08      	cmp	r3, #8
 8005242:	d061      	beq.n	8005308 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	69db      	ldr	r3, [r3, #28]
 8005248:	2b02      	cmp	r3, #2
 800524a:	d146      	bne.n	80052da <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800524c:	4b33      	ldr	r3, [pc, #204]	; (800531c <HAL_RCC_OscConfig+0x4cc>)
 800524e:	2200      	movs	r2, #0
 8005250:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005252:	f7fe faf5 	bl	8003840 <HAL_GetTick>
 8005256:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005258:	e008      	b.n	800526c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800525a:	f7fe faf1 	bl	8003840 <HAL_GetTick>
 800525e:	4602      	mov	r2, r0
 8005260:	693b      	ldr	r3, [r7, #16]
 8005262:	1ad3      	subs	r3, r2, r3
 8005264:	2b02      	cmp	r3, #2
 8005266:	d901      	bls.n	800526c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8005268:	2303      	movs	r3, #3
 800526a:	e06d      	b.n	8005348 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800526c:	4b29      	ldr	r3, [pc, #164]	; (8005314 <HAL_RCC_OscConfig+0x4c4>)
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005274:	2b00      	cmp	r3, #0
 8005276:	d1f0      	bne.n	800525a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	6a1b      	ldr	r3, [r3, #32]
 800527c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005280:	d108      	bne.n	8005294 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005282:	4b24      	ldr	r3, [pc, #144]	; (8005314 <HAL_RCC_OscConfig+0x4c4>)
 8005284:	685b      	ldr	r3, [r3, #4]
 8005286:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	689b      	ldr	r3, [r3, #8]
 800528e:	4921      	ldr	r1, [pc, #132]	; (8005314 <HAL_RCC_OscConfig+0x4c4>)
 8005290:	4313      	orrs	r3, r2
 8005292:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005294:	4b1f      	ldr	r3, [pc, #124]	; (8005314 <HAL_RCC_OscConfig+0x4c4>)
 8005296:	685b      	ldr	r3, [r3, #4]
 8005298:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	6a19      	ldr	r1, [r3, #32]
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052a4:	430b      	orrs	r3, r1
 80052a6:	491b      	ldr	r1, [pc, #108]	; (8005314 <HAL_RCC_OscConfig+0x4c4>)
 80052a8:	4313      	orrs	r3, r2
 80052aa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80052ac:	4b1b      	ldr	r3, [pc, #108]	; (800531c <HAL_RCC_OscConfig+0x4cc>)
 80052ae:	2201      	movs	r2, #1
 80052b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052b2:	f7fe fac5 	bl	8003840 <HAL_GetTick>
 80052b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80052b8:	e008      	b.n	80052cc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80052ba:	f7fe fac1 	bl	8003840 <HAL_GetTick>
 80052be:	4602      	mov	r2, r0
 80052c0:	693b      	ldr	r3, [r7, #16]
 80052c2:	1ad3      	subs	r3, r2, r3
 80052c4:	2b02      	cmp	r3, #2
 80052c6:	d901      	bls.n	80052cc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80052c8:	2303      	movs	r3, #3
 80052ca:	e03d      	b.n	8005348 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80052cc:	4b11      	ldr	r3, [pc, #68]	; (8005314 <HAL_RCC_OscConfig+0x4c4>)
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d0f0      	beq.n	80052ba <HAL_RCC_OscConfig+0x46a>
 80052d8:	e035      	b.n	8005346 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80052da:	4b10      	ldr	r3, [pc, #64]	; (800531c <HAL_RCC_OscConfig+0x4cc>)
 80052dc:	2200      	movs	r2, #0
 80052de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052e0:	f7fe faae 	bl	8003840 <HAL_GetTick>
 80052e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80052e6:	e008      	b.n	80052fa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80052e8:	f7fe faaa 	bl	8003840 <HAL_GetTick>
 80052ec:	4602      	mov	r2, r0
 80052ee:	693b      	ldr	r3, [r7, #16]
 80052f0:	1ad3      	subs	r3, r2, r3
 80052f2:	2b02      	cmp	r3, #2
 80052f4:	d901      	bls.n	80052fa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80052f6:	2303      	movs	r3, #3
 80052f8:	e026      	b.n	8005348 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80052fa:	4b06      	ldr	r3, [pc, #24]	; (8005314 <HAL_RCC_OscConfig+0x4c4>)
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005302:	2b00      	cmp	r3, #0
 8005304:	d1f0      	bne.n	80052e8 <HAL_RCC_OscConfig+0x498>
 8005306:	e01e      	b.n	8005346 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	69db      	ldr	r3, [r3, #28]
 800530c:	2b01      	cmp	r3, #1
 800530e:	d107      	bne.n	8005320 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8005310:	2301      	movs	r3, #1
 8005312:	e019      	b.n	8005348 <HAL_RCC_OscConfig+0x4f8>
 8005314:	40021000 	.word	0x40021000
 8005318:	40007000 	.word	0x40007000
 800531c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005320:	4b0b      	ldr	r3, [pc, #44]	; (8005350 <HAL_RCC_OscConfig+0x500>)
 8005322:	685b      	ldr	r3, [r3, #4]
 8005324:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	6a1b      	ldr	r3, [r3, #32]
 8005330:	429a      	cmp	r2, r3
 8005332:	d106      	bne.n	8005342 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800533e:	429a      	cmp	r2, r3
 8005340:	d001      	beq.n	8005346 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8005342:	2301      	movs	r3, #1
 8005344:	e000      	b.n	8005348 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8005346:	2300      	movs	r3, #0
}
 8005348:	4618      	mov	r0, r3
 800534a:	3718      	adds	r7, #24
 800534c:	46bd      	mov	sp, r7
 800534e:	bd80      	pop	{r7, pc}
 8005350:	40021000 	.word	0x40021000

08005354 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005354:	b580      	push	{r7, lr}
 8005356:	b084      	sub	sp, #16
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]
 800535c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	2b00      	cmp	r3, #0
 8005362:	d101      	bne.n	8005368 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005364:	2301      	movs	r3, #1
 8005366:	e0d0      	b.n	800550a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005368:	4b6a      	ldr	r3, [pc, #424]	; (8005514 <HAL_RCC_ClockConfig+0x1c0>)
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f003 0307 	and.w	r3, r3, #7
 8005370:	683a      	ldr	r2, [r7, #0]
 8005372:	429a      	cmp	r2, r3
 8005374:	d910      	bls.n	8005398 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005376:	4b67      	ldr	r3, [pc, #412]	; (8005514 <HAL_RCC_ClockConfig+0x1c0>)
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f023 0207 	bic.w	r2, r3, #7
 800537e:	4965      	ldr	r1, [pc, #404]	; (8005514 <HAL_RCC_ClockConfig+0x1c0>)
 8005380:	683b      	ldr	r3, [r7, #0]
 8005382:	4313      	orrs	r3, r2
 8005384:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005386:	4b63      	ldr	r3, [pc, #396]	; (8005514 <HAL_RCC_ClockConfig+0x1c0>)
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f003 0307 	and.w	r3, r3, #7
 800538e:	683a      	ldr	r2, [r7, #0]
 8005390:	429a      	cmp	r2, r3
 8005392:	d001      	beq.n	8005398 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005394:	2301      	movs	r3, #1
 8005396:	e0b8      	b.n	800550a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f003 0302 	and.w	r3, r3, #2
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d020      	beq.n	80053e6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f003 0304 	and.w	r3, r3, #4
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d005      	beq.n	80053bc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80053b0:	4b59      	ldr	r3, [pc, #356]	; (8005518 <HAL_RCC_ClockConfig+0x1c4>)
 80053b2:	685b      	ldr	r3, [r3, #4]
 80053b4:	4a58      	ldr	r2, [pc, #352]	; (8005518 <HAL_RCC_ClockConfig+0x1c4>)
 80053b6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80053ba:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f003 0308 	and.w	r3, r3, #8
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d005      	beq.n	80053d4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80053c8:	4b53      	ldr	r3, [pc, #332]	; (8005518 <HAL_RCC_ClockConfig+0x1c4>)
 80053ca:	685b      	ldr	r3, [r3, #4]
 80053cc:	4a52      	ldr	r2, [pc, #328]	; (8005518 <HAL_RCC_ClockConfig+0x1c4>)
 80053ce:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80053d2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80053d4:	4b50      	ldr	r3, [pc, #320]	; (8005518 <HAL_RCC_ClockConfig+0x1c4>)
 80053d6:	685b      	ldr	r3, [r3, #4]
 80053d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	689b      	ldr	r3, [r3, #8]
 80053e0:	494d      	ldr	r1, [pc, #308]	; (8005518 <HAL_RCC_ClockConfig+0x1c4>)
 80053e2:	4313      	orrs	r3, r2
 80053e4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	f003 0301 	and.w	r3, r3, #1
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d040      	beq.n	8005474 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	685b      	ldr	r3, [r3, #4]
 80053f6:	2b01      	cmp	r3, #1
 80053f8:	d107      	bne.n	800540a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80053fa:	4b47      	ldr	r3, [pc, #284]	; (8005518 <HAL_RCC_ClockConfig+0x1c4>)
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005402:	2b00      	cmp	r3, #0
 8005404:	d115      	bne.n	8005432 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005406:	2301      	movs	r3, #1
 8005408:	e07f      	b.n	800550a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	685b      	ldr	r3, [r3, #4]
 800540e:	2b02      	cmp	r3, #2
 8005410:	d107      	bne.n	8005422 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005412:	4b41      	ldr	r3, [pc, #260]	; (8005518 <HAL_RCC_ClockConfig+0x1c4>)
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800541a:	2b00      	cmp	r3, #0
 800541c:	d109      	bne.n	8005432 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800541e:	2301      	movs	r3, #1
 8005420:	e073      	b.n	800550a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005422:	4b3d      	ldr	r3, [pc, #244]	; (8005518 <HAL_RCC_ClockConfig+0x1c4>)
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f003 0302 	and.w	r3, r3, #2
 800542a:	2b00      	cmp	r3, #0
 800542c:	d101      	bne.n	8005432 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800542e:	2301      	movs	r3, #1
 8005430:	e06b      	b.n	800550a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005432:	4b39      	ldr	r3, [pc, #228]	; (8005518 <HAL_RCC_ClockConfig+0x1c4>)
 8005434:	685b      	ldr	r3, [r3, #4]
 8005436:	f023 0203 	bic.w	r2, r3, #3
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	685b      	ldr	r3, [r3, #4]
 800543e:	4936      	ldr	r1, [pc, #216]	; (8005518 <HAL_RCC_ClockConfig+0x1c4>)
 8005440:	4313      	orrs	r3, r2
 8005442:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005444:	f7fe f9fc 	bl	8003840 <HAL_GetTick>
 8005448:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800544a:	e00a      	b.n	8005462 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800544c:	f7fe f9f8 	bl	8003840 <HAL_GetTick>
 8005450:	4602      	mov	r2, r0
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	1ad3      	subs	r3, r2, r3
 8005456:	f241 3288 	movw	r2, #5000	; 0x1388
 800545a:	4293      	cmp	r3, r2
 800545c:	d901      	bls.n	8005462 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800545e:	2303      	movs	r3, #3
 8005460:	e053      	b.n	800550a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005462:	4b2d      	ldr	r3, [pc, #180]	; (8005518 <HAL_RCC_ClockConfig+0x1c4>)
 8005464:	685b      	ldr	r3, [r3, #4]
 8005466:	f003 020c 	and.w	r2, r3, #12
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	685b      	ldr	r3, [r3, #4]
 800546e:	009b      	lsls	r3, r3, #2
 8005470:	429a      	cmp	r2, r3
 8005472:	d1eb      	bne.n	800544c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005474:	4b27      	ldr	r3, [pc, #156]	; (8005514 <HAL_RCC_ClockConfig+0x1c0>)
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f003 0307 	and.w	r3, r3, #7
 800547c:	683a      	ldr	r2, [r7, #0]
 800547e:	429a      	cmp	r2, r3
 8005480:	d210      	bcs.n	80054a4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005482:	4b24      	ldr	r3, [pc, #144]	; (8005514 <HAL_RCC_ClockConfig+0x1c0>)
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f023 0207 	bic.w	r2, r3, #7
 800548a:	4922      	ldr	r1, [pc, #136]	; (8005514 <HAL_RCC_ClockConfig+0x1c0>)
 800548c:	683b      	ldr	r3, [r7, #0]
 800548e:	4313      	orrs	r3, r2
 8005490:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005492:	4b20      	ldr	r3, [pc, #128]	; (8005514 <HAL_RCC_ClockConfig+0x1c0>)
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f003 0307 	and.w	r3, r3, #7
 800549a:	683a      	ldr	r2, [r7, #0]
 800549c:	429a      	cmp	r2, r3
 800549e:	d001      	beq.n	80054a4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80054a0:	2301      	movs	r3, #1
 80054a2:	e032      	b.n	800550a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	f003 0304 	and.w	r3, r3, #4
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d008      	beq.n	80054c2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80054b0:	4b19      	ldr	r3, [pc, #100]	; (8005518 <HAL_RCC_ClockConfig+0x1c4>)
 80054b2:	685b      	ldr	r3, [r3, #4]
 80054b4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	68db      	ldr	r3, [r3, #12]
 80054bc:	4916      	ldr	r1, [pc, #88]	; (8005518 <HAL_RCC_ClockConfig+0x1c4>)
 80054be:	4313      	orrs	r3, r2
 80054c0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	f003 0308 	and.w	r3, r3, #8
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d009      	beq.n	80054e2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80054ce:	4b12      	ldr	r3, [pc, #72]	; (8005518 <HAL_RCC_ClockConfig+0x1c4>)
 80054d0:	685b      	ldr	r3, [r3, #4]
 80054d2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	691b      	ldr	r3, [r3, #16]
 80054da:	00db      	lsls	r3, r3, #3
 80054dc:	490e      	ldr	r1, [pc, #56]	; (8005518 <HAL_RCC_ClockConfig+0x1c4>)
 80054de:	4313      	orrs	r3, r2
 80054e0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80054e2:	f000 f821 	bl	8005528 <HAL_RCC_GetSysClockFreq>
 80054e6:	4602      	mov	r2, r0
 80054e8:	4b0b      	ldr	r3, [pc, #44]	; (8005518 <HAL_RCC_ClockConfig+0x1c4>)
 80054ea:	685b      	ldr	r3, [r3, #4]
 80054ec:	091b      	lsrs	r3, r3, #4
 80054ee:	f003 030f 	and.w	r3, r3, #15
 80054f2:	490a      	ldr	r1, [pc, #40]	; (800551c <HAL_RCC_ClockConfig+0x1c8>)
 80054f4:	5ccb      	ldrb	r3, [r1, r3]
 80054f6:	fa22 f303 	lsr.w	r3, r2, r3
 80054fa:	4a09      	ldr	r2, [pc, #36]	; (8005520 <HAL_RCC_ClockConfig+0x1cc>)
 80054fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80054fe:	4b09      	ldr	r3, [pc, #36]	; (8005524 <HAL_RCC_ClockConfig+0x1d0>)
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	4618      	mov	r0, r3
 8005504:	f7fe f95a 	bl	80037bc <HAL_InitTick>

  return HAL_OK;
 8005508:	2300      	movs	r3, #0
}
 800550a:	4618      	mov	r0, r3
 800550c:	3710      	adds	r7, #16
 800550e:	46bd      	mov	sp, r7
 8005510:	bd80      	pop	{r7, pc}
 8005512:	bf00      	nop
 8005514:	40022000 	.word	0x40022000
 8005518:	40021000 	.word	0x40021000
 800551c:	08008dc8 	.word	0x08008dc8
 8005520:	20000174 	.word	0x20000174
 8005524:	20000178 	.word	0x20000178

08005528 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005528:	b490      	push	{r4, r7}
 800552a:	b08a      	sub	sp, #40	; 0x28
 800552c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800552e:	4b29      	ldr	r3, [pc, #164]	; (80055d4 <HAL_RCC_GetSysClockFreq+0xac>)
 8005530:	1d3c      	adds	r4, r7, #4
 8005532:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005534:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8005538:	f240 2301 	movw	r3, #513	; 0x201
 800553c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800553e:	2300      	movs	r3, #0
 8005540:	61fb      	str	r3, [r7, #28]
 8005542:	2300      	movs	r3, #0
 8005544:	61bb      	str	r3, [r7, #24]
 8005546:	2300      	movs	r3, #0
 8005548:	627b      	str	r3, [r7, #36]	; 0x24
 800554a:	2300      	movs	r3, #0
 800554c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800554e:	2300      	movs	r3, #0
 8005550:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005552:	4b21      	ldr	r3, [pc, #132]	; (80055d8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8005554:	685b      	ldr	r3, [r3, #4]
 8005556:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005558:	69fb      	ldr	r3, [r7, #28]
 800555a:	f003 030c 	and.w	r3, r3, #12
 800555e:	2b04      	cmp	r3, #4
 8005560:	d002      	beq.n	8005568 <HAL_RCC_GetSysClockFreq+0x40>
 8005562:	2b08      	cmp	r3, #8
 8005564:	d003      	beq.n	800556e <HAL_RCC_GetSysClockFreq+0x46>
 8005566:	e02b      	b.n	80055c0 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005568:	4b1c      	ldr	r3, [pc, #112]	; (80055dc <HAL_RCC_GetSysClockFreq+0xb4>)
 800556a:	623b      	str	r3, [r7, #32]
      break;
 800556c:	e02b      	b.n	80055c6 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800556e:	69fb      	ldr	r3, [r7, #28]
 8005570:	0c9b      	lsrs	r3, r3, #18
 8005572:	f003 030f 	and.w	r3, r3, #15
 8005576:	3328      	adds	r3, #40	; 0x28
 8005578:	443b      	add	r3, r7
 800557a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800557e:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005580:	69fb      	ldr	r3, [r7, #28]
 8005582:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005586:	2b00      	cmp	r3, #0
 8005588:	d012      	beq.n	80055b0 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800558a:	4b13      	ldr	r3, [pc, #76]	; (80055d8 <HAL_RCC_GetSysClockFreq+0xb0>)
 800558c:	685b      	ldr	r3, [r3, #4]
 800558e:	0c5b      	lsrs	r3, r3, #17
 8005590:	f003 0301 	and.w	r3, r3, #1
 8005594:	3328      	adds	r3, #40	; 0x28
 8005596:	443b      	add	r3, r7
 8005598:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800559c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800559e:	697b      	ldr	r3, [r7, #20]
 80055a0:	4a0e      	ldr	r2, [pc, #56]	; (80055dc <HAL_RCC_GetSysClockFreq+0xb4>)
 80055a2:	fb03 f202 	mul.w	r2, r3, r2
 80055a6:	69bb      	ldr	r3, [r7, #24]
 80055a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80055ac:	627b      	str	r3, [r7, #36]	; 0x24
 80055ae:	e004      	b.n	80055ba <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80055b0:	697b      	ldr	r3, [r7, #20]
 80055b2:	4a0b      	ldr	r2, [pc, #44]	; (80055e0 <HAL_RCC_GetSysClockFreq+0xb8>)
 80055b4:	fb02 f303 	mul.w	r3, r2, r3
 80055b8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80055ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055bc:	623b      	str	r3, [r7, #32]
      break;
 80055be:	e002      	b.n	80055c6 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80055c0:	4b06      	ldr	r3, [pc, #24]	; (80055dc <HAL_RCC_GetSysClockFreq+0xb4>)
 80055c2:	623b      	str	r3, [r7, #32]
      break;
 80055c4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80055c6:	6a3b      	ldr	r3, [r7, #32]
}
 80055c8:	4618      	mov	r0, r3
 80055ca:	3728      	adds	r7, #40	; 0x28
 80055cc:	46bd      	mov	sp, r7
 80055ce:	bc90      	pop	{r4, r7}
 80055d0:	4770      	bx	lr
 80055d2:	bf00      	nop
 80055d4:	08008db8 	.word	0x08008db8
 80055d8:	40021000 	.word	0x40021000
 80055dc:	007a1200 	.word	0x007a1200
 80055e0:	003d0900 	.word	0x003d0900

080055e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80055e4:	b480      	push	{r7}
 80055e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80055e8:	4b02      	ldr	r3, [pc, #8]	; (80055f4 <HAL_RCC_GetHCLKFreq+0x10>)
 80055ea:	681b      	ldr	r3, [r3, #0]
}
 80055ec:	4618      	mov	r0, r3
 80055ee:	46bd      	mov	sp, r7
 80055f0:	bc80      	pop	{r7}
 80055f2:	4770      	bx	lr
 80055f4:	20000174 	.word	0x20000174

080055f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80055f8:	b580      	push	{r7, lr}
 80055fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80055fc:	f7ff fff2 	bl	80055e4 <HAL_RCC_GetHCLKFreq>
 8005600:	4602      	mov	r2, r0
 8005602:	4b05      	ldr	r3, [pc, #20]	; (8005618 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005604:	685b      	ldr	r3, [r3, #4]
 8005606:	0a1b      	lsrs	r3, r3, #8
 8005608:	f003 0307 	and.w	r3, r3, #7
 800560c:	4903      	ldr	r1, [pc, #12]	; (800561c <HAL_RCC_GetPCLK1Freq+0x24>)
 800560e:	5ccb      	ldrb	r3, [r1, r3]
 8005610:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005614:	4618      	mov	r0, r3
 8005616:	bd80      	pop	{r7, pc}
 8005618:	40021000 	.word	0x40021000
 800561c:	08008dd8 	.word	0x08008dd8

08005620 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005620:	b480      	push	{r7}
 8005622:	b085      	sub	sp, #20
 8005624:	af00      	add	r7, sp, #0
 8005626:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005628:	4b0a      	ldr	r3, [pc, #40]	; (8005654 <RCC_Delay+0x34>)
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	4a0a      	ldr	r2, [pc, #40]	; (8005658 <RCC_Delay+0x38>)
 800562e:	fba2 2303 	umull	r2, r3, r2, r3
 8005632:	0a5b      	lsrs	r3, r3, #9
 8005634:	687a      	ldr	r2, [r7, #4]
 8005636:	fb02 f303 	mul.w	r3, r2, r3
 800563a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800563c:	bf00      	nop
  }
  while (Delay --);
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	1e5a      	subs	r2, r3, #1
 8005642:	60fa      	str	r2, [r7, #12]
 8005644:	2b00      	cmp	r3, #0
 8005646:	d1f9      	bne.n	800563c <RCC_Delay+0x1c>
}
 8005648:	bf00      	nop
 800564a:	bf00      	nop
 800564c:	3714      	adds	r7, #20
 800564e:	46bd      	mov	sp, r7
 8005650:	bc80      	pop	{r7}
 8005652:	4770      	bx	lr
 8005654:	20000174 	.word	0x20000174
 8005658:	10624dd3 	.word	0x10624dd3

0800565c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800565c:	b580      	push	{r7, lr}
 800565e:	b082      	sub	sp, #8
 8005660:	af00      	add	r7, sp, #0
 8005662:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	2b00      	cmp	r3, #0
 8005668:	d101      	bne.n	800566e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800566a:	2301      	movs	r3, #1
 800566c:	e076      	b.n	800575c <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005672:	2b00      	cmp	r3, #0
 8005674:	d108      	bne.n	8005688 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	685b      	ldr	r3, [r3, #4]
 800567a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800567e:	d009      	beq.n	8005694 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	2200      	movs	r2, #0
 8005684:	61da      	str	r2, [r3, #28]
 8005686:	e005      	b.n	8005694 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2200      	movs	r2, #0
 800568c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	2200      	movs	r2, #0
 8005692:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2200      	movs	r2, #0
 8005698:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80056a0:	b2db      	uxtb	r3, r3
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d106      	bne.n	80056b4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	2200      	movs	r2, #0
 80056aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80056ae:	6878      	ldr	r0, [r7, #4]
 80056b0:	f7fd fcfe 	bl	80030b0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2202      	movs	r2, #2
 80056b8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	681a      	ldr	r2, [r3, #0]
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80056ca:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	685b      	ldr	r3, [r3, #4]
 80056d0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	689b      	ldr	r3, [r3, #8]
 80056d8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80056dc:	431a      	orrs	r2, r3
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	68db      	ldr	r3, [r3, #12]
 80056e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80056e6:	431a      	orrs	r2, r3
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	691b      	ldr	r3, [r3, #16]
 80056ec:	f003 0302 	and.w	r3, r3, #2
 80056f0:	431a      	orrs	r2, r3
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	695b      	ldr	r3, [r3, #20]
 80056f6:	f003 0301 	and.w	r3, r3, #1
 80056fa:	431a      	orrs	r2, r3
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	699b      	ldr	r3, [r3, #24]
 8005700:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005704:	431a      	orrs	r2, r3
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	69db      	ldr	r3, [r3, #28]
 800570a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800570e:	431a      	orrs	r2, r3
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	6a1b      	ldr	r3, [r3, #32]
 8005714:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005718:	ea42 0103 	orr.w	r1, r2, r3
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005720:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	430a      	orrs	r2, r1
 800572a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	699b      	ldr	r3, [r3, #24]
 8005730:	0c1a      	lsrs	r2, r3, #16
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	f002 0204 	and.w	r2, r2, #4
 800573a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	69da      	ldr	r2, [r3, #28]
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800574a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2200      	movs	r2, #0
 8005750:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	2201      	movs	r2, #1
 8005756:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800575a:	2300      	movs	r3, #0
}
 800575c:	4618      	mov	r0, r3
 800575e:	3708      	adds	r7, #8
 8005760:	46bd      	mov	sp, r7
 8005762:	bd80      	pop	{r7, pc}

08005764 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005764:	b580      	push	{r7, lr}
 8005766:	b088      	sub	sp, #32
 8005768:	af00      	add	r7, sp, #0
 800576a:	60f8      	str	r0, [r7, #12]
 800576c:	60b9      	str	r1, [r7, #8]
 800576e:	603b      	str	r3, [r7, #0]
 8005770:	4613      	mov	r3, r2
 8005772:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005774:	2300      	movs	r3, #0
 8005776:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800577e:	2b01      	cmp	r3, #1
 8005780:	d101      	bne.n	8005786 <HAL_SPI_Transmit+0x22>
 8005782:	2302      	movs	r3, #2
 8005784:	e126      	b.n	80059d4 <HAL_SPI_Transmit+0x270>
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	2201      	movs	r2, #1
 800578a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800578e:	f7fe f857 	bl	8003840 <HAL_GetTick>
 8005792:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005794:	88fb      	ldrh	r3, [r7, #6]
 8005796:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800579e:	b2db      	uxtb	r3, r3
 80057a0:	2b01      	cmp	r3, #1
 80057a2:	d002      	beq.n	80057aa <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80057a4:	2302      	movs	r3, #2
 80057a6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80057a8:	e10b      	b.n	80059c2 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80057aa:	68bb      	ldr	r3, [r7, #8]
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d002      	beq.n	80057b6 <HAL_SPI_Transmit+0x52>
 80057b0:	88fb      	ldrh	r3, [r7, #6]
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d102      	bne.n	80057bc <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80057b6:	2301      	movs	r3, #1
 80057b8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80057ba:	e102      	b.n	80059c2 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	2203      	movs	r2, #3
 80057c0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	2200      	movs	r2, #0
 80057c8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	68ba      	ldr	r2, [r7, #8]
 80057ce:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	88fa      	ldrh	r2, [r7, #6]
 80057d4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	88fa      	ldrh	r2, [r7, #6]
 80057da:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	2200      	movs	r2, #0
 80057e0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	2200      	movs	r2, #0
 80057e6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	2200      	movs	r2, #0
 80057ec:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	2200      	movs	r2, #0
 80057f2:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	2200      	movs	r2, #0
 80057f8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	689b      	ldr	r3, [r3, #8]
 80057fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005802:	d10f      	bne.n	8005824 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	681a      	ldr	r2, [r3, #0]
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005812:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	681a      	ldr	r2, [r3, #0]
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005822:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800582e:	2b40      	cmp	r3, #64	; 0x40
 8005830:	d007      	beq.n	8005842 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	681a      	ldr	r2, [r3, #0]
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005840:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	68db      	ldr	r3, [r3, #12]
 8005846:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800584a:	d14b      	bne.n	80058e4 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	685b      	ldr	r3, [r3, #4]
 8005850:	2b00      	cmp	r3, #0
 8005852:	d002      	beq.n	800585a <HAL_SPI_Transmit+0xf6>
 8005854:	8afb      	ldrh	r3, [r7, #22]
 8005856:	2b01      	cmp	r3, #1
 8005858:	d13e      	bne.n	80058d8 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800585e:	881a      	ldrh	r2, [r3, #0]
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800586a:	1c9a      	adds	r2, r3, #2
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005874:	b29b      	uxth	r3, r3
 8005876:	3b01      	subs	r3, #1
 8005878:	b29a      	uxth	r2, r3
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800587e:	e02b      	b.n	80058d8 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	689b      	ldr	r3, [r3, #8]
 8005886:	f003 0302 	and.w	r3, r3, #2
 800588a:	2b02      	cmp	r3, #2
 800588c:	d112      	bne.n	80058b4 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005892:	881a      	ldrh	r2, [r3, #0]
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800589e:	1c9a      	adds	r2, r3, #2
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80058a8:	b29b      	uxth	r3, r3
 80058aa:	3b01      	subs	r3, #1
 80058ac:	b29a      	uxth	r2, r3
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	86da      	strh	r2, [r3, #54]	; 0x36
 80058b2:	e011      	b.n	80058d8 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80058b4:	f7fd ffc4 	bl	8003840 <HAL_GetTick>
 80058b8:	4602      	mov	r2, r0
 80058ba:	69bb      	ldr	r3, [r7, #24]
 80058bc:	1ad3      	subs	r3, r2, r3
 80058be:	683a      	ldr	r2, [r7, #0]
 80058c0:	429a      	cmp	r2, r3
 80058c2:	d803      	bhi.n	80058cc <HAL_SPI_Transmit+0x168>
 80058c4:	683b      	ldr	r3, [r7, #0]
 80058c6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80058ca:	d102      	bne.n	80058d2 <HAL_SPI_Transmit+0x16e>
 80058cc:	683b      	ldr	r3, [r7, #0]
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d102      	bne.n	80058d8 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80058d2:	2303      	movs	r3, #3
 80058d4:	77fb      	strb	r3, [r7, #31]
          goto error;
 80058d6:	e074      	b.n	80059c2 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80058dc:	b29b      	uxth	r3, r3
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d1ce      	bne.n	8005880 <HAL_SPI_Transmit+0x11c>
 80058e2:	e04c      	b.n	800597e <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	685b      	ldr	r3, [r3, #4]
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d002      	beq.n	80058f2 <HAL_SPI_Transmit+0x18e>
 80058ec:	8afb      	ldrh	r3, [r7, #22]
 80058ee:	2b01      	cmp	r3, #1
 80058f0:	d140      	bne.n	8005974 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	330c      	adds	r3, #12
 80058fc:	7812      	ldrb	r2, [r2, #0]
 80058fe:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005904:	1c5a      	adds	r2, r3, #1
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800590e:	b29b      	uxth	r3, r3
 8005910:	3b01      	subs	r3, #1
 8005912:	b29a      	uxth	r2, r3
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005918:	e02c      	b.n	8005974 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	689b      	ldr	r3, [r3, #8]
 8005920:	f003 0302 	and.w	r3, r3, #2
 8005924:	2b02      	cmp	r3, #2
 8005926:	d113      	bne.n	8005950 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	330c      	adds	r3, #12
 8005932:	7812      	ldrb	r2, [r2, #0]
 8005934:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800593a:	1c5a      	adds	r2, r3, #1
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005944:	b29b      	uxth	r3, r3
 8005946:	3b01      	subs	r3, #1
 8005948:	b29a      	uxth	r2, r3
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	86da      	strh	r2, [r3, #54]	; 0x36
 800594e:	e011      	b.n	8005974 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005950:	f7fd ff76 	bl	8003840 <HAL_GetTick>
 8005954:	4602      	mov	r2, r0
 8005956:	69bb      	ldr	r3, [r7, #24]
 8005958:	1ad3      	subs	r3, r2, r3
 800595a:	683a      	ldr	r2, [r7, #0]
 800595c:	429a      	cmp	r2, r3
 800595e:	d803      	bhi.n	8005968 <HAL_SPI_Transmit+0x204>
 8005960:	683b      	ldr	r3, [r7, #0]
 8005962:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005966:	d102      	bne.n	800596e <HAL_SPI_Transmit+0x20a>
 8005968:	683b      	ldr	r3, [r7, #0]
 800596a:	2b00      	cmp	r3, #0
 800596c:	d102      	bne.n	8005974 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800596e:	2303      	movs	r3, #3
 8005970:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005972:	e026      	b.n	80059c2 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005978:	b29b      	uxth	r3, r3
 800597a:	2b00      	cmp	r3, #0
 800597c:	d1cd      	bne.n	800591a <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800597e:	69ba      	ldr	r2, [r7, #24]
 8005980:	6839      	ldr	r1, [r7, #0]
 8005982:	68f8      	ldr	r0, [r7, #12]
 8005984:	f000 fbb8 	bl	80060f8 <SPI_EndRxTxTransaction>
 8005988:	4603      	mov	r3, r0
 800598a:	2b00      	cmp	r3, #0
 800598c:	d002      	beq.n	8005994 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	2220      	movs	r2, #32
 8005992:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	689b      	ldr	r3, [r3, #8]
 8005998:	2b00      	cmp	r3, #0
 800599a:	d10a      	bne.n	80059b2 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800599c:	2300      	movs	r3, #0
 800599e:	613b      	str	r3, [r7, #16]
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	68db      	ldr	r3, [r3, #12]
 80059a6:	613b      	str	r3, [r7, #16]
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	689b      	ldr	r3, [r3, #8]
 80059ae:	613b      	str	r3, [r7, #16]
 80059b0:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d002      	beq.n	80059c0 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80059ba:	2301      	movs	r3, #1
 80059bc:	77fb      	strb	r3, [r7, #31]
 80059be:	e000      	b.n	80059c2 <HAL_SPI_Transmit+0x25e>
  }

error:
 80059c0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	2201      	movs	r2, #1
 80059c6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	2200      	movs	r2, #0
 80059ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80059d2:	7ffb      	ldrb	r3, [r7, #31]
}
 80059d4:	4618      	mov	r0, r3
 80059d6:	3720      	adds	r7, #32
 80059d8:	46bd      	mov	sp, r7
 80059da:	bd80      	pop	{r7, pc}

080059dc <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80059dc:	b580      	push	{r7, lr}
 80059de:	b088      	sub	sp, #32
 80059e0:	af02      	add	r7, sp, #8
 80059e2:	60f8      	str	r0, [r7, #12]
 80059e4:	60b9      	str	r1, [r7, #8]
 80059e6:	603b      	str	r3, [r7, #0]
 80059e8:	4613      	mov	r3, r2
 80059ea:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80059ec:	2300      	movs	r3, #0
 80059ee:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	685b      	ldr	r3, [r3, #4]
 80059f4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80059f8:	d112      	bne.n	8005a20 <HAL_SPI_Receive+0x44>
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	689b      	ldr	r3, [r3, #8]
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d10e      	bne.n	8005a20 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	2204      	movs	r2, #4
 8005a06:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005a0a:	88fa      	ldrh	r2, [r7, #6]
 8005a0c:	683b      	ldr	r3, [r7, #0]
 8005a0e:	9300      	str	r3, [sp, #0]
 8005a10:	4613      	mov	r3, r2
 8005a12:	68ba      	ldr	r2, [r7, #8]
 8005a14:	68b9      	ldr	r1, [r7, #8]
 8005a16:	68f8      	ldr	r0, [r7, #12]
 8005a18:	f000 f8f1 	bl	8005bfe <HAL_SPI_TransmitReceive>
 8005a1c:	4603      	mov	r3, r0
 8005a1e:	e0ea      	b.n	8005bf6 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005a26:	2b01      	cmp	r3, #1
 8005a28:	d101      	bne.n	8005a2e <HAL_SPI_Receive+0x52>
 8005a2a:	2302      	movs	r3, #2
 8005a2c:	e0e3      	b.n	8005bf6 <HAL_SPI_Receive+0x21a>
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	2201      	movs	r2, #1
 8005a32:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005a36:	f7fd ff03 	bl	8003840 <HAL_GetTick>
 8005a3a:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005a42:	b2db      	uxtb	r3, r3
 8005a44:	2b01      	cmp	r3, #1
 8005a46:	d002      	beq.n	8005a4e <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8005a48:	2302      	movs	r3, #2
 8005a4a:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005a4c:	e0ca      	b.n	8005be4 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8005a4e:	68bb      	ldr	r3, [r7, #8]
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d002      	beq.n	8005a5a <HAL_SPI_Receive+0x7e>
 8005a54:	88fb      	ldrh	r3, [r7, #6]
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d102      	bne.n	8005a60 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8005a5a:	2301      	movs	r3, #1
 8005a5c:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005a5e:	e0c1      	b.n	8005be4 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	2204      	movs	r2, #4
 8005a64:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	2200      	movs	r2, #0
 8005a6c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	68ba      	ldr	r2, [r7, #8]
 8005a72:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	88fa      	ldrh	r2, [r7, #6]
 8005a78:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	88fa      	ldrh	r2, [r7, #6]
 8005a7e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	2200      	movs	r2, #0
 8005a84:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	2200      	movs	r2, #0
 8005a8a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	2200      	movs	r2, #0
 8005a90:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	2200      	movs	r2, #0
 8005a96:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	2200      	movs	r2, #0
 8005a9c:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	689b      	ldr	r3, [r3, #8]
 8005aa2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005aa6:	d10f      	bne.n	8005ac8 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	681a      	ldr	r2, [r3, #0]
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005ab6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	681a      	ldr	r2, [r3, #0]
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005ac6:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ad2:	2b40      	cmp	r3, #64	; 0x40
 8005ad4:	d007      	beq.n	8005ae6 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	681a      	ldr	r2, [r3, #0]
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005ae4:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	68db      	ldr	r3, [r3, #12]
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d162      	bne.n	8005bb4 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005aee:	e02e      	b.n	8005b4e <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	689b      	ldr	r3, [r3, #8]
 8005af6:	f003 0301 	and.w	r3, r3, #1
 8005afa:	2b01      	cmp	r3, #1
 8005afc:	d115      	bne.n	8005b2a <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	f103 020c 	add.w	r2, r3, #12
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b0a:	7812      	ldrb	r2, [r2, #0]
 8005b0c:	b2d2      	uxtb	r2, r2
 8005b0e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b14:	1c5a      	adds	r2, r3, #1
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b1e:	b29b      	uxth	r3, r3
 8005b20:	3b01      	subs	r3, #1
 8005b22:	b29a      	uxth	r2, r3
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005b28:	e011      	b.n	8005b4e <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005b2a:	f7fd fe89 	bl	8003840 <HAL_GetTick>
 8005b2e:	4602      	mov	r2, r0
 8005b30:	693b      	ldr	r3, [r7, #16]
 8005b32:	1ad3      	subs	r3, r2, r3
 8005b34:	683a      	ldr	r2, [r7, #0]
 8005b36:	429a      	cmp	r2, r3
 8005b38:	d803      	bhi.n	8005b42 <HAL_SPI_Receive+0x166>
 8005b3a:	683b      	ldr	r3, [r7, #0]
 8005b3c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005b40:	d102      	bne.n	8005b48 <HAL_SPI_Receive+0x16c>
 8005b42:	683b      	ldr	r3, [r7, #0]
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d102      	bne.n	8005b4e <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8005b48:	2303      	movs	r3, #3
 8005b4a:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005b4c:	e04a      	b.n	8005be4 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b52:	b29b      	uxth	r3, r3
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d1cb      	bne.n	8005af0 <HAL_SPI_Receive+0x114>
 8005b58:	e031      	b.n	8005bbe <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	689b      	ldr	r3, [r3, #8]
 8005b60:	f003 0301 	and.w	r3, r3, #1
 8005b64:	2b01      	cmp	r3, #1
 8005b66:	d113      	bne.n	8005b90 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	68da      	ldr	r2, [r3, #12]
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b72:	b292      	uxth	r2, r2
 8005b74:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b7a:	1c9a      	adds	r2, r3, #2
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b84:	b29b      	uxth	r3, r3
 8005b86:	3b01      	subs	r3, #1
 8005b88:	b29a      	uxth	r2, r3
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005b8e:	e011      	b.n	8005bb4 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005b90:	f7fd fe56 	bl	8003840 <HAL_GetTick>
 8005b94:	4602      	mov	r2, r0
 8005b96:	693b      	ldr	r3, [r7, #16]
 8005b98:	1ad3      	subs	r3, r2, r3
 8005b9a:	683a      	ldr	r2, [r7, #0]
 8005b9c:	429a      	cmp	r2, r3
 8005b9e:	d803      	bhi.n	8005ba8 <HAL_SPI_Receive+0x1cc>
 8005ba0:	683b      	ldr	r3, [r7, #0]
 8005ba2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005ba6:	d102      	bne.n	8005bae <HAL_SPI_Receive+0x1d2>
 8005ba8:	683b      	ldr	r3, [r7, #0]
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d102      	bne.n	8005bb4 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8005bae:	2303      	movs	r3, #3
 8005bb0:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005bb2:	e017      	b.n	8005be4 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005bb8:	b29b      	uxth	r3, r3
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d1cd      	bne.n	8005b5a <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005bbe:	693a      	ldr	r2, [r7, #16]
 8005bc0:	6839      	ldr	r1, [r7, #0]
 8005bc2:	68f8      	ldr	r0, [r7, #12]
 8005bc4:	f000 fa46 	bl	8006054 <SPI_EndRxTransaction>
 8005bc8:	4603      	mov	r3, r0
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d002      	beq.n	8005bd4 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	2220      	movs	r2, #32
 8005bd2:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d002      	beq.n	8005be2 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8005bdc:	2301      	movs	r3, #1
 8005bde:	75fb      	strb	r3, [r7, #23]
 8005be0:	e000      	b.n	8005be4 <HAL_SPI_Receive+0x208>
  }

error :
 8005be2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	2201      	movs	r2, #1
 8005be8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	2200      	movs	r2, #0
 8005bf0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005bf4:	7dfb      	ldrb	r3, [r7, #23]
}
 8005bf6:	4618      	mov	r0, r3
 8005bf8:	3718      	adds	r7, #24
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	bd80      	pop	{r7, pc}

08005bfe <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005bfe:	b580      	push	{r7, lr}
 8005c00:	b08c      	sub	sp, #48	; 0x30
 8005c02:	af00      	add	r7, sp, #0
 8005c04:	60f8      	str	r0, [r7, #12]
 8005c06:	60b9      	str	r1, [r7, #8]
 8005c08:	607a      	str	r2, [r7, #4]
 8005c0a:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005c0c:	2301      	movs	r3, #1
 8005c0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005c10:	2300      	movs	r3, #0
 8005c12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005c1c:	2b01      	cmp	r3, #1
 8005c1e:	d101      	bne.n	8005c24 <HAL_SPI_TransmitReceive+0x26>
 8005c20:	2302      	movs	r3, #2
 8005c22:	e18a      	b.n	8005f3a <HAL_SPI_TransmitReceive+0x33c>
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	2201      	movs	r2, #1
 8005c28:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005c2c:	f7fd fe08 	bl	8003840 <HAL_GetTick>
 8005c30:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005c38:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	685b      	ldr	r3, [r3, #4]
 8005c40:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8005c42:	887b      	ldrh	r3, [r7, #2]
 8005c44:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005c46:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005c4a:	2b01      	cmp	r3, #1
 8005c4c:	d00f      	beq.n	8005c6e <HAL_SPI_TransmitReceive+0x70>
 8005c4e:	69fb      	ldr	r3, [r7, #28]
 8005c50:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005c54:	d107      	bne.n	8005c66 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	689b      	ldr	r3, [r3, #8]
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d103      	bne.n	8005c66 <HAL_SPI_TransmitReceive+0x68>
 8005c5e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005c62:	2b04      	cmp	r3, #4
 8005c64:	d003      	beq.n	8005c6e <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8005c66:	2302      	movs	r3, #2
 8005c68:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005c6c:	e15b      	b.n	8005f26 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005c6e:	68bb      	ldr	r3, [r7, #8]
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d005      	beq.n	8005c80 <HAL_SPI_TransmitReceive+0x82>
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d002      	beq.n	8005c80 <HAL_SPI_TransmitReceive+0x82>
 8005c7a:	887b      	ldrh	r3, [r7, #2]
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d103      	bne.n	8005c88 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8005c80:	2301      	movs	r3, #1
 8005c82:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005c86:	e14e      	b.n	8005f26 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005c8e:	b2db      	uxtb	r3, r3
 8005c90:	2b04      	cmp	r3, #4
 8005c92:	d003      	beq.n	8005c9c <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	2205      	movs	r2, #5
 8005c98:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	2200      	movs	r2, #0
 8005ca0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	687a      	ldr	r2, [r7, #4]
 8005ca6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	887a      	ldrh	r2, [r7, #2]
 8005cac:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	887a      	ldrh	r2, [r7, #2]
 8005cb2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	68ba      	ldr	r2, [r7, #8]
 8005cb8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	887a      	ldrh	r2, [r7, #2]
 8005cbe:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	887a      	ldrh	r2, [r7, #2]
 8005cc4:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	2200      	movs	r2, #0
 8005cca:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	2200      	movs	r2, #0
 8005cd0:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cdc:	2b40      	cmp	r3, #64	; 0x40
 8005cde:	d007      	beq.n	8005cf0 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	681a      	ldr	r2, [r3, #0]
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005cee:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	68db      	ldr	r3, [r3, #12]
 8005cf4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005cf8:	d178      	bne.n	8005dec <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	685b      	ldr	r3, [r3, #4]
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d002      	beq.n	8005d08 <HAL_SPI_TransmitReceive+0x10a>
 8005d02:	8b7b      	ldrh	r3, [r7, #26]
 8005d04:	2b01      	cmp	r3, #1
 8005d06:	d166      	bne.n	8005dd6 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d0c:	881a      	ldrh	r2, [r3, #0]
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d18:	1c9a      	adds	r2, r3, #2
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005d22:	b29b      	uxth	r3, r3
 8005d24:	3b01      	subs	r3, #1
 8005d26:	b29a      	uxth	r2, r3
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005d2c:	e053      	b.n	8005dd6 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	689b      	ldr	r3, [r3, #8]
 8005d34:	f003 0302 	and.w	r3, r3, #2
 8005d38:	2b02      	cmp	r3, #2
 8005d3a:	d11b      	bne.n	8005d74 <HAL_SPI_TransmitReceive+0x176>
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005d40:	b29b      	uxth	r3, r3
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d016      	beq.n	8005d74 <HAL_SPI_TransmitReceive+0x176>
 8005d46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d48:	2b01      	cmp	r3, #1
 8005d4a:	d113      	bne.n	8005d74 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d50:	881a      	ldrh	r2, [r3, #0]
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d5c:	1c9a      	adds	r2, r3, #2
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005d66:	b29b      	uxth	r3, r3
 8005d68:	3b01      	subs	r3, #1
 8005d6a:	b29a      	uxth	r2, r3
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005d70:	2300      	movs	r3, #0
 8005d72:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	689b      	ldr	r3, [r3, #8]
 8005d7a:	f003 0301 	and.w	r3, r3, #1
 8005d7e:	2b01      	cmp	r3, #1
 8005d80:	d119      	bne.n	8005db6 <HAL_SPI_TransmitReceive+0x1b8>
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d86:	b29b      	uxth	r3, r3
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d014      	beq.n	8005db6 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	68da      	ldr	r2, [r3, #12]
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d96:	b292      	uxth	r2, r2
 8005d98:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d9e:	1c9a      	adds	r2, r3, #2
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005da8:	b29b      	uxth	r3, r3
 8005daa:	3b01      	subs	r3, #1
 8005dac:	b29a      	uxth	r2, r3
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005db2:	2301      	movs	r3, #1
 8005db4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005db6:	f7fd fd43 	bl	8003840 <HAL_GetTick>
 8005dba:	4602      	mov	r2, r0
 8005dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dbe:	1ad3      	subs	r3, r2, r3
 8005dc0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005dc2:	429a      	cmp	r2, r3
 8005dc4:	d807      	bhi.n	8005dd6 <HAL_SPI_TransmitReceive+0x1d8>
 8005dc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dc8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005dcc:	d003      	beq.n	8005dd6 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8005dce:	2303      	movs	r3, #3
 8005dd0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005dd4:	e0a7      	b.n	8005f26 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005dda:	b29b      	uxth	r3, r3
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d1a6      	bne.n	8005d2e <HAL_SPI_TransmitReceive+0x130>
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005de4:	b29b      	uxth	r3, r3
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d1a1      	bne.n	8005d2e <HAL_SPI_TransmitReceive+0x130>
 8005dea:	e07c      	b.n	8005ee6 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	685b      	ldr	r3, [r3, #4]
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d002      	beq.n	8005dfa <HAL_SPI_TransmitReceive+0x1fc>
 8005df4:	8b7b      	ldrh	r3, [r7, #26]
 8005df6:	2b01      	cmp	r3, #1
 8005df8:	d16b      	bne.n	8005ed2 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	330c      	adds	r3, #12
 8005e04:	7812      	ldrb	r2, [r2, #0]
 8005e06:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e0c:	1c5a      	adds	r2, r3, #1
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005e16:	b29b      	uxth	r3, r3
 8005e18:	3b01      	subs	r3, #1
 8005e1a:	b29a      	uxth	r2, r3
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005e20:	e057      	b.n	8005ed2 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	689b      	ldr	r3, [r3, #8]
 8005e28:	f003 0302 	and.w	r3, r3, #2
 8005e2c:	2b02      	cmp	r3, #2
 8005e2e:	d11c      	bne.n	8005e6a <HAL_SPI_TransmitReceive+0x26c>
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005e34:	b29b      	uxth	r3, r3
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d017      	beq.n	8005e6a <HAL_SPI_TransmitReceive+0x26c>
 8005e3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e3c:	2b01      	cmp	r3, #1
 8005e3e:	d114      	bne.n	8005e6a <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	330c      	adds	r3, #12
 8005e4a:	7812      	ldrb	r2, [r2, #0]
 8005e4c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e52:	1c5a      	adds	r2, r3, #1
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005e5c:	b29b      	uxth	r3, r3
 8005e5e:	3b01      	subs	r3, #1
 8005e60:	b29a      	uxth	r2, r3
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005e66:	2300      	movs	r3, #0
 8005e68:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	689b      	ldr	r3, [r3, #8]
 8005e70:	f003 0301 	and.w	r3, r3, #1
 8005e74:	2b01      	cmp	r3, #1
 8005e76:	d119      	bne.n	8005eac <HAL_SPI_TransmitReceive+0x2ae>
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e7c:	b29b      	uxth	r3, r3
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d014      	beq.n	8005eac <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	68da      	ldr	r2, [r3, #12]
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e8c:	b2d2      	uxtb	r2, r2
 8005e8e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e94:	1c5a      	adds	r2, r3, #1
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e9e:	b29b      	uxth	r3, r3
 8005ea0:	3b01      	subs	r3, #1
 8005ea2:	b29a      	uxth	r2, r3
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005ea8:	2301      	movs	r3, #1
 8005eaa:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005eac:	f7fd fcc8 	bl	8003840 <HAL_GetTick>
 8005eb0:	4602      	mov	r2, r0
 8005eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eb4:	1ad3      	subs	r3, r2, r3
 8005eb6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005eb8:	429a      	cmp	r2, r3
 8005eba:	d803      	bhi.n	8005ec4 <HAL_SPI_TransmitReceive+0x2c6>
 8005ebc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ebe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005ec2:	d102      	bne.n	8005eca <HAL_SPI_TransmitReceive+0x2cc>
 8005ec4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d103      	bne.n	8005ed2 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8005eca:	2303      	movs	r3, #3
 8005ecc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005ed0:	e029      	b.n	8005f26 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005ed6:	b29b      	uxth	r3, r3
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d1a2      	bne.n	8005e22 <HAL_SPI_TransmitReceive+0x224>
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ee0:	b29b      	uxth	r3, r3
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d19d      	bne.n	8005e22 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005ee6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ee8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005eea:	68f8      	ldr	r0, [r7, #12]
 8005eec:	f000 f904 	bl	80060f8 <SPI_EndRxTxTransaction>
 8005ef0:	4603      	mov	r3, r0
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d006      	beq.n	8005f04 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8005ef6:	2301      	movs	r3, #1
 8005ef8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	2220      	movs	r2, #32
 8005f00:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8005f02:	e010      	b.n	8005f26 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	689b      	ldr	r3, [r3, #8]
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d10b      	bne.n	8005f24 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005f0c:	2300      	movs	r3, #0
 8005f0e:	617b      	str	r3, [r7, #20]
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	68db      	ldr	r3, [r3, #12]
 8005f16:	617b      	str	r3, [r7, #20]
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	689b      	ldr	r3, [r3, #8]
 8005f1e:	617b      	str	r3, [r7, #20]
 8005f20:	697b      	ldr	r3, [r7, #20]
 8005f22:	e000      	b.n	8005f26 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8005f24:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	2201      	movs	r2, #1
 8005f2a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	2200      	movs	r2, #0
 8005f32:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005f36:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8005f3a:	4618      	mov	r0, r3
 8005f3c:	3730      	adds	r7, #48	; 0x30
 8005f3e:	46bd      	mov	sp, r7
 8005f40:	bd80      	pop	{r7, pc}
	...

08005f44 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005f44:	b580      	push	{r7, lr}
 8005f46:	b088      	sub	sp, #32
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	60f8      	str	r0, [r7, #12]
 8005f4c:	60b9      	str	r1, [r7, #8]
 8005f4e:	603b      	str	r3, [r7, #0]
 8005f50:	4613      	mov	r3, r2
 8005f52:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005f54:	f7fd fc74 	bl	8003840 <HAL_GetTick>
 8005f58:	4602      	mov	r2, r0
 8005f5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f5c:	1a9b      	subs	r3, r3, r2
 8005f5e:	683a      	ldr	r2, [r7, #0]
 8005f60:	4413      	add	r3, r2
 8005f62:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005f64:	f7fd fc6c 	bl	8003840 <HAL_GetTick>
 8005f68:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005f6a:	4b39      	ldr	r3, [pc, #228]	; (8006050 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	015b      	lsls	r3, r3, #5
 8005f70:	0d1b      	lsrs	r3, r3, #20
 8005f72:	69fa      	ldr	r2, [r7, #28]
 8005f74:	fb02 f303 	mul.w	r3, r2, r3
 8005f78:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005f7a:	e054      	b.n	8006026 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005f7c:	683b      	ldr	r3, [r7, #0]
 8005f7e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005f82:	d050      	beq.n	8006026 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005f84:	f7fd fc5c 	bl	8003840 <HAL_GetTick>
 8005f88:	4602      	mov	r2, r0
 8005f8a:	69bb      	ldr	r3, [r7, #24]
 8005f8c:	1ad3      	subs	r3, r2, r3
 8005f8e:	69fa      	ldr	r2, [r7, #28]
 8005f90:	429a      	cmp	r2, r3
 8005f92:	d902      	bls.n	8005f9a <SPI_WaitFlagStateUntilTimeout+0x56>
 8005f94:	69fb      	ldr	r3, [r7, #28]
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d13d      	bne.n	8006016 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	685a      	ldr	r2, [r3, #4]
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005fa8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	685b      	ldr	r3, [r3, #4]
 8005fae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005fb2:	d111      	bne.n	8005fd8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	689b      	ldr	r3, [r3, #8]
 8005fb8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005fbc:	d004      	beq.n	8005fc8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	689b      	ldr	r3, [r3, #8]
 8005fc2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005fc6:	d107      	bne.n	8005fd8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	681a      	ldr	r2, [r3, #0]
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005fd6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fdc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005fe0:	d10f      	bne.n	8006002 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	681a      	ldr	r2, [r3, #0]
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005ff0:	601a      	str	r2, [r3, #0]
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	681a      	ldr	r2, [r3, #0]
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006000:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	2201      	movs	r2, #1
 8006006:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	2200      	movs	r2, #0
 800600e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8006012:	2303      	movs	r3, #3
 8006014:	e017      	b.n	8006046 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8006016:	697b      	ldr	r3, [r7, #20]
 8006018:	2b00      	cmp	r3, #0
 800601a:	d101      	bne.n	8006020 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800601c:	2300      	movs	r3, #0
 800601e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006020:	697b      	ldr	r3, [r7, #20]
 8006022:	3b01      	subs	r3, #1
 8006024:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	689a      	ldr	r2, [r3, #8]
 800602c:	68bb      	ldr	r3, [r7, #8]
 800602e:	4013      	ands	r3, r2
 8006030:	68ba      	ldr	r2, [r7, #8]
 8006032:	429a      	cmp	r2, r3
 8006034:	bf0c      	ite	eq
 8006036:	2301      	moveq	r3, #1
 8006038:	2300      	movne	r3, #0
 800603a:	b2db      	uxtb	r3, r3
 800603c:	461a      	mov	r2, r3
 800603e:	79fb      	ldrb	r3, [r7, #7]
 8006040:	429a      	cmp	r2, r3
 8006042:	d19b      	bne.n	8005f7c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006044:	2300      	movs	r3, #0
}
 8006046:	4618      	mov	r0, r3
 8006048:	3720      	adds	r7, #32
 800604a:	46bd      	mov	sp, r7
 800604c:	bd80      	pop	{r7, pc}
 800604e:	bf00      	nop
 8006050:	20000174 	.word	0x20000174

08006054 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006054:	b580      	push	{r7, lr}
 8006056:	b086      	sub	sp, #24
 8006058:	af02      	add	r7, sp, #8
 800605a:	60f8      	str	r0, [r7, #12]
 800605c:	60b9      	str	r1, [r7, #8]
 800605e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	685b      	ldr	r3, [r3, #4]
 8006064:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006068:	d111      	bne.n	800608e <SPI_EndRxTransaction+0x3a>
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	689b      	ldr	r3, [r3, #8]
 800606e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006072:	d004      	beq.n	800607e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	689b      	ldr	r3, [r3, #8]
 8006078:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800607c:	d107      	bne.n	800608e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	681a      	ldr	r2, [r3, #0]
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800608c:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	685b      	ldr	r3, [r3, #4]
 8006092:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006096:	d117      	bne.n	80060c8 <SPI_EndRxTransaction+0x74>
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	689b      	ldr	r3, [r3, #8]
 800609c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80060a0:	d112      	bne.n	80060c8 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	9300      	str	r3, [sp, #0]
 80060a6:	68bb      	ldr	r3, [r7, #8]
 80060a8:	2200      	movs	r2, #0
 80060aa:	2101      	movs	r1, #1
 80060ac:	68f8      	ldr	r0, [r7, #12]
 80060ae:	f7ff ff49 	bl	8005f44 <SPI_WaitFlagStateUntilTimeout>
 80060b2:	4603      	mov	r3, r0
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d01a      	beq.n	80060ee <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060bc:	f043 0220 	orr.w	r2, r3, #32
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80060c4:	2303      	movs	r3, #3
 80060c6:	e013      	b.n	80060f0 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	9300      	str	r3, [sp, #0]
 80060cc:	68bb      	ldr	r3, [r7, #8]
 80060ce:	2200      	movs	r2, #0
 80060d0:	2180      	movs	r1, #128	; 0x80
 80060d2:	68f8      	ldr	r0, [r7, #12]
 80060d4:	f7ff ff36 	bl	8005f44 <SPI_WaitFlagStateUntilTimeout>
 80060d8:	4603      	mov	r3, r0
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d007      	beq.n	80060ee <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060e2:	f043 0220 	orr.w	r2, r3, #32
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80060ea:	2303      	movs	r3, #3
 80060ec:	e000      	b.n	80060f0 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 80060ee:	2300      	movs	r3, #0
}
 80060f0:	4618      	mov	r0, r3
 80060f2:	3710      	adds	r7, #16
 80060f4:	46bd      	mov	sp, r7
 80060f6:	bd80      	pop	{r7, pc}

080060f8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80060f8:	b580      	push	{r7, lr}
 80060fa:	b086      	sub	sp, #24
 80060fc:	af02      	add	r7, sp, #8
 80060fe:	60f8      	str	r0, [r7, #12]
 8006100:	60b9      	str	r1, [r7, #8]
 8006102:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	9300      	str	r3, [sp, #0]
 8006108:	68bb      	ldr	r3, [r7, #8]
 800610a:	2200      	movs	r2, #0
 800610c:	2180      	movs	r1, #128	; 0x80
 800610e:	68f8      	ldr	r0, [r7, #12]
 8006110:	f7ff ff18 	bl	8005f44 <SPI_WaitFlagStateUntilTimeout>
 8006114:	4603      	mov	r3, r0
 8006116:	2b00      	cmp	r3, #0
 8006118:	d007      	beq.n	800612a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800611e:	f043 0220 	orr.w	r2, r3, #32
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8006126:	2303      	movs	r3, #3
 8006128:	e000      	b.n	800612c <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 800612a:	2300      	movs	r3, #0
}
 800612c:	4618      	mov	r0, r3
 800612e:	3710      	adds	r7, #16
 8006130:	46bd      	mov	sp, r7
 8006132:	bd80      	pop	{r7, pc}

08006134 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006134:	b580      	push	{r7, lr}
 8006136:	b082      	sub	sp, #8
 8006138:	af00      	add	r7, sp, #0
 800613a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	2b00      	cmp	r3, #0
 8006140:	d101      	bne.n	8006146 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006142:	2301      	movs	r3, #1
 8006144:	e041      	b.n	80061ca <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800614c:	b2db      	uxtb	r3, r3
 800614e:	2b00      	cmp	r3, #0
 8006150:	d106      	bne.n	8006160 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	2200      	movs	r2, #0
 8006156:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800615a:	6878      	ldr	r0, [r7, #4]
 800615c:	f7fd fa40 	bl	80035e0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	2202      	movs	r2, #2
 8006164:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681a      	ldr	r2, [r3, #0]
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	3304      	adds	r3, #4
 8006170:	4619      	mov	r1, r3
 8006172:	4610      	mov	r0, r2
 8006174:	f000 fc72 	bl	8006a5c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	2201      	movs	r2, #1
 800617c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	2201      	movs	r2, #1
 8006184:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	2201      	movs	r2, #1
 800618c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	2201      	movs	r2, #1
 8006194:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	2201      	movs	r2, #1
 800619c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	2201      	movs	r2, #1
 80061a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	2201      	movs	r2, #1
 80061ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	2201      	movs	r2, #1
 80061b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	2201      	movs	r2, #1
 80061bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	2201      	movs	r2, #1
 80061c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80061c8:	2300      	movs	r3, #0
}
 80061ca:	4618      	mov	r0, r3
 80061cc:	3708      	adds	r7, #8
 80061ce:	46bd      	mov	sp, r7
 80061d0:	bd80      	pop	{r7, pc}
	...

080061d4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80061d4:	b480      	push	{r7}
 80061d6:	b085      	sub	sp, #20
 80061d8:	af00      	add	r7, sp, #0
 80061da:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80061e2:	b2db      	uxtb	r3, r3
 80061e4:	2b01      	cmp	r3, #1
 80061e6:	d001      	beq.n	80061ec <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80061e8:	2301      	movs	r3, #1
 80061ea:	e032      	b.n	8006252 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	2202      	movs	r2, #2
 80061f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	4a18      	ldr	r2, [pc, #96]	; (800625c <HAL_TIM_Base_Start+0x88>)
 80061fa:	4293      	cmp	r3, r2
 80061fc:	d00e      	beq.n	800621c <HAL_TIM_Base_Start+0x48>
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006206:	d009      	beq.n	800621c <HAL_TIM_Base_Start+0x48>
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	4a14      	ldr	r2, [pc, #80]	; (8006260 <HAL_TIM_Base_Start+0x8c>)
 800620e:	4293      	cmp	r3, r2
 8006210:	d004      	beq.n	800621c <HAL_TIM_Base_Start+0x48>
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	4a13      	ldr	r2, [pc, #76]	; (8006264 <HAL_TIM_Base_Start+0x90>)
 8006218:	4293      	cmp	r3, r2
 800621a:	d111      	bne.n	8006240 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	689b      	ldr	r3, [r3, #8]
 8006222:	f003 0307 	and.w	r3, r3, #7
 8006226:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	2b06      	cmp	r3, #6
 800622c:	d010      	beq.n	8006250 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	681a      	ldr	r2, [r3, #0]
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	f042 0201 	orr.w	r2, r2, #1
 800623c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800623e:	e007      	b.n	8006250 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	681a      	ldr	r2, [r3, #0]
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	f042 0201 	orr.w	r2, r2, #1
 800624e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006250:	2300      	movs	r3, #0
}
 8006252:	4618      	mov	r0, r3
 8006254:	3714      	adds	r7, #20
 8006256:	46bd      	mov	sp, r7
 8006258:	bc80      	pop	{r7}
 800625a:	4770      	bx	lr
 800625c:	40012c00 	.word	0x40012c00
 8006260:	40000400 	.word	0x40000400
 8006264:	40000800 	.word	0x40000800

08006268 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006268:	b480      	push	{r7}
 800626a:	b085      	sub	sp, #20
 800626c:	af00      	add	r7, sp, #0
 800626e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006276:	b2db      	uxtb	r3, r3
 8006278:	2b01      	cmp	r3, #1
 800627a:	d001      	beq.n	8006280 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800627c:	2301      	movs	r3, #1
 800627e:	e03a      	b.n	80062f6 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	2202      	movs	r2, #2
 8006284:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	68da      	ldr	r2, [r3, #12]
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	f042 0201 	orr.w	r2, r2, #1
 8006296:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	4a18      	ldr	r2, [pc, #96]	; (8006300 <HAL_TIM_Base_Start_IT+0x98>)
 800629e:	4293      	cmp	r3, r2
 80062a0:	d00e      	beq.n	80062c0 <HAL_TIM_Base_Start_IT+0x58>
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80062aa:	d009      	beq.n	80062c0 <HAL_TIM_Base_Start_IT+0x58>
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	4a14      	ldr	r2, [pc, #80]	; (8006304 <HAL_TIM_Base_Start_IT+0x9c>)
 80062b2:	4293      	cmp	r3, r2
 80062b4:	d004      	beq.n	80062c0 <HAL_TIM_Base_Start_IT+0x58>
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	4a13      	ldr	r2, [pc, #76]	; (8006308 <HAL_TIM_Base_Start_IT+0xa0>)
 80062bc:	4293      	cmp	r3, r2
 80062be:	d111      	bne.n	80062e4 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	689b      	ldr	r3, [r3, #8]
 80062c6:	f003 0307 	and.w	r3, r3, #7
 80062ca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	2b06      	cmp	r3, #6
 80062d0:	d010      	beq.n	80062f4 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	681a      	ldr	r2, [r3, #0]
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	f042 0201 	orr.w	r2, r2, #1
 80062e0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062e2:	e007      	b.n	80062f4 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	681a      	ldr	r2, [r3, #0]
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	f042 0201 	orr.w	r2, r2, #1
 80062f2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80062f4:	2300      	movs	r3, #0
}
 80062f6:	4618      	mov	r0, r3
 80062f8:	3714      	adds	r7, #20
 80062fa:	46bd      	mov	sp, r7
 80062fc:	bc80      	pop	{r7}
 80062fe:	4770      	bx	lr
 8006300:	40012c00 	.word	0x40012c00
 8006304:	40000400 	.word	0x40000400
 8006308:	40000800 	.word	0x40000800

0800630c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800630c:	b580      	push	{r7, lr}
 800630e:	b082      	sub	sp, #8
 8006310:	af00      	add	r7, sp, #0
 8006312:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	2b00      	cmp	r3, #0
 8006318:	d101      	bne.n	800631e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800631a:	2301      	movs	r3, #1
 800631c:	e041      	b.n	80063a2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006324:	b2db      	uxtb	r3, r3
 8006326:	2b00      	cmp	r3, #0
 8006328:	d106      	bne.n	8006338 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	2200      	movs	r2, #0
 800632e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006332:	6878      	ldr	r0, [r7, #4]
 8006334:	f000 f839 	bl	80063aa <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	2202      	movs	r2, #2
 800633c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681a      	ldr	r2, [r3, #0]
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	3304      	adds	r3, #4
 8006348:	4619      	mov	r1, r3
 800634a:	4610      	mov	r0, r2
 800634c:	f000 fb86 	bl	8006a5c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	2201      	movs	r2, #1
 8006354:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	2201      	movs	r2, #1
 800635c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	2201      	movs	r2, #1
 8006364:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	2201      	movs	r2, #1
 800636c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	2201      	movs	r2, #1
 8006374:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	2201      	movs	r2, #1
 800637c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	2201      	movs	r2, #1
 8006384:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	2201      	movs	r2, #1
 800638c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	2201      	movs	r2, #1
 8006394:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	2201      	movs	r2, #1
 800639c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80063a0:	2300      	movs	r3, #0
}
 80063a2:	4618      	mov	r0, r3
 80063a4:	3708      	adds	r7, #8
 80063a6:	46bd      	mov	sp, r7
 80063a8:	bd80      	pop	{r7, pc}

080063aa <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80063aa:	b480      	push	{r7}
 80063ac:	b083      	sub	sp, #12
 80063ae:	af00      	add	r7, sp, #0
 80063b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80063b2:	bf00      	nop
 80063b4:	370c      	adds	r7, #12
 80063b6:	46bd      	mov	sp, r7
 80063b8:	bc80      	pop	{r7}
 80063ba:	4770      	bx	lr

080063bc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80063bc:	b580      	push	{r7, lr}
 80063be:	b084      	sub	sp, #16
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	6078      	str	r0, [r7, #4]
 80063c4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80063c6:	683b      	ldr	r3, [r7, #0]
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d109      	bne.n	80063e0 <HAL_TIM_PWM_Start+0x24>
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80063d2:	b2db      	uxtb	r3, r3
 80063d4:	2b01      	cmp	r3, #1
 80063d6:	bf14      	ite	ne
 80063d8:	2301      	movne	r3, #1
 80063da:	2300      	moveq	r3, #0
 80063dc:	b2db      	uxtb	r3, r3
 80063de:	e022      	b.n	8006426 <HAL_TIM_PWM_Start+0x6a>
 80063e0:	683b      	ldr	r3, [r7, #0]
 80063e2:	2b04      	cmp	r3, #4
 80063e4:	d109      	bne.n	80063fa <HAL_TIM_PWM_Start+0x3e>
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80063ec:	b2db      	uxtb	r3, r3
 80063ee:	2b01      	cmp	r3, #1
 80063f0:	bf14      	ite	ne
 80063f2:	2301      	movne	r3, #1
 80063f4:	2300      	moveq	r3, #0
 80063f6:	b2db      	uxtb	r3, r3
 80063f8:	e015      	b.n	8006426 <HAL_TIM_PWM_Start+0x6a>
 80063fa:	683b      	ldr	r3, [r7, #0]
 80063fc:	2b08      	cmp	r3, #8
 80063fe:	d109      	bne.n	8006414 <HAL_TIM_PWM_Start+0x58>
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006406:	b2db      	uxtb	r3, r3
 8006408:	2b01      	cmp	r3, #1
 800640a:	bf14      	ite	ne
 800640c:	2301      	movne	r3, #1
 800640e:	2300      	moveq	r3, #0
 8006410:	b2db      	uxtb	r3, r3
 8006412:	e008      	b.n	8006426 <HAL_TIM_PWM_Start+0x6a>
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800641a:	b2db      	uxtb	r3, r3
 800641c:	2b01      	cmp	r3, #1
 800641e:	bf14      	ite	ne
 8006420:	2301      	movne	r3, #1
 8006422:	2300      	moveq	r3, #0
 8006424:	b2db      	uxtb	r3, r3
 8006426:	2b00      	cmp	r3, #0
 8006428:	d001      	beq.n	800642e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800642a:	2301      	movs	r3, #1
 800642c:	e05e      	b.n	80064ec <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800642e:	683b      	ldr	r3, [r7, #0]
 8006430:	2b00      	cmp	r3, #0
 8006432:	d104      	bne.n	800643e <HAL_TIM_PWM_Start+0x82>
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	2202      	movs	r2, #2
 8006438:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800643c:	e013      	b.n	8006466 <HAL_TIM_PWM_Start+0xaa>
 800643e:	683b      	ldr	r3, [r7, #0]
 8006440:	2b04      	cmp	r3, #4
 8006442:	d104      	bne.n	800644e <HAL_TIM_PWM_Start+0x92>
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	2202      	movs	r2, #2
 8006448:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800644c:	e00b      	b.n	8006466 <HAL_TIM_PWM_Start+0xaa>
 800644e:	683b      	ldr	r3, [r7, #0]
 8006450:	2b08      	cmp	r3, #8
 8006452:	d104      	bne.n	800645e <HAL_TIM_PWM_Start+0xa2>
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	2202      	movs	r2, #2
 8006458:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800645c:	e003      	b.n	8006466 <HAL_TIM_PWM_Start+0xaa>
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	2202      	movs	r2, #2
 8006462:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	2201      	movs	r2, #1
 800646c:	6839      	ldr	r1, [r7, #0]
 800646e:	4618      	mov	r0, r3
 8006470:	f000 fd74 	bl	8006f5c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	4a1e      	ldr	r2, [pc, #120]	; (80064f4 <HAL_TIM_PWM_Start+0x138>)
 800647a:	4293      	cmp	r3, r2
 800647c:	d107      	bne.n	800648e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800648c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	4a18      	ldr	r2, [pc, #96]	; (80064f4 <HAL_TIM_PWM_Start+0x138>)
 8006494:	4293      	cmp	r3, r2
 8006496:	d00e      	beq.n	80064b6 <HAL_TIM_PWM_Start+0xfa>
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80064a0:	d009      	beq.n	80064b6 <HAL_TIM_PWM_Start+0xfa>
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	4a14      	ldr	r2, [pc, #80]	; (80064f8 <HAL_TIM_PWM_Start+0x13c>)
 80064a8:	4293      	cmp	r3, r2
 80064aa:	d004      	beq.n	80064b6 <HAL_TIM_PWM_Start+0xfa>
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	4a12      	ldr	r2, [pc, #72]	; (80064fc <HAL_TIM_PWM_Start+0x140>)
 80064b2:	4293      	cmp	r3, r2
 80064b4:	d111      	bne.n	80064da <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	689b      	ldr	r3, [r3, #8]
 80064bc:	f003 0307 	and.w	r3, r3, #7
 80064c0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	2b06      	cmp	r3, #6
 80064c6:	d010      	beq.n	80064ea <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	681a      	ldr	r2, [r3, #0]
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	f042 0201 	orr.w	r2, r2, #1
 80064d6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80064d8:	e007      	b.n	80064ea <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	681a      	ldr	r2, [r3, #0]
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	f042 0201 	orr.w	r2, r2, #1
 80064e8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80064ea:	2300      	movs	r3, #0
}
 80064ec:	4618      	mov	r0, r3
 80064ee:	3710      	adds	r7, #16
 80064f0:	46bd      	mov	sp, r7
 80064f2:	bd80      	pop	{r7, pc}
 80064f4:	40012c00 	.word	0x40012c00
 80064f8:	40000400 	.word	0x40000400
 80064fc:	40000800 	.word	0x40000800

08006500 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006500:	b580      	push	{r7, lr}
 8006502:	b082      	sub	sp, #8
 8006504:	af00      	add	r7, sp, #0
 8006506:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	691b      	ldr	r3, [r3, #16]
 800650e:	f003 0302 	and.w	r3, r3, #2
 8006512:	2b02      	cmp	r3, #2
 8006514:	d122      	bne.n	800655c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	68db      	ldr	r3, [r3, #12]
 800651c:	f003 0302 	and.w	r3, r3, #2
 8006520:	2b02      	cmp	r3, #2
 8006522:	d11b      	bne.n	800655c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	f06f 0202 	mvn.w	r2, #2
 800652c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	2201      	movs	r2, #1
 8006532:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	699b      	ldr	r3, [r3, #24]
 800653a:	f003 0303 	and.w	r3, r3, #3
 800653e:	2b00      	cmp	r3, #0
 8006540:	d003      	beq.n	800654a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006542:	6878      	ldr	r0, [r7, #4]
 8006544:	f000 fa6f 	bl	8006a26 <HAL_TIM_IC_CaptureCallback>
 8006548:	e005      	b.n	8006556 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800654a:	6878      	ldr	r0, [r7, #4]
 800654c:	f000 fa62 	bl	8006a14 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006550:	6878      	ldr	r0, [r7, #4]
 8006552:	f000 fa71 	bl	8006a38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	2200      	movs	r2, #0
 800655a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	691b      	ldr	r3, [r3, #16]
 8006562:	f003 0304 	and.w	r3, r3, #4
 8006566:	2b04      	cmp	r3, #4
 8006568:	d122      	bne.n	80065b0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	68db      	ldr	r3, [r3, #12]
 8006570:	f003 0304 	and.w	r3, r3, #4
 8006574:	2b04      	cmp	r3, #4
 8006576:	d11b      	bne.n	80065b0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	f06f 0204 	mvn.w	r2, #4
 8006580:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	2202      	movs	r2, #2
 8006586:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	699b      	ldr	r3, [r3, #24]
 800658e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006592:	2b00      	cmp	r3, #0
 8006594:	d003      	beq.n	800659e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006596:	6878      	ldr	r0, [r7, #4]
 8006598:	f000 fa45 	bl	8006a26 <HAL_TIM_IC_CaptureCallback>
 800659c:	e005      	b.n	80065aa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800659e:	6878      	ldr	r0, [r7, #4]
 80065a0:	f000 fa38 	bl	8006a14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80065a4:	6878      	ldr	r0, [r7, #4]
 80065a6:	f000 fa47 	bl	8006a38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	2200      	movs	r2, #0
 80065ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	691b      	ldr	r3, [r3, #16]
 80065b6:	f003 0308 	and.w	r3, r3, #8
 80065ba:	2b08      	cmp	r3, #8
 80065bc:	d122      	bne.n	8006604 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	68db      	ldr	r3, [r3, #12]
 80065c4:	f003 0308 	and.w	r3, r3, #8
 80065c8:	2b08      	cmp	r3, #8
 80065ca:	d11b      	bne.n	8006604 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	f06f 0208 	mvn.w	r2, #8
 80065d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	2204      	movs	r2, #4
 80065da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	69db      	ldr	r3, [r3, #28]
 80065e2:	f003 0303 	and.w	r3, r3, #3
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d003      	beq.n	80065f2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80065ea:	6878      	ldr	r0, [r7, #4]
 80065ec:	f000 fa1b 	bl	8006a26 <HAL_TIM_IC_CaptureCallback>
 80065f0:	e005      	b.n	80065fe <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80065f2:	6878      	ldr	r0, [r7, #4]
 80065f4:	f000 fa0e 	bl	8006a14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80065f8:	6878      	ldr	r0, [r7, #4]
 80065fa:	f000 fa1d 	bl	8006a38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	2200      	movs	r2, #0
 8006602:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	691b      	ldr	r3, [r3, #16]
 800660a:	f003 0310 	and.w	r3, r3, #16
 800660e:	2b10      	cmp	r3, #16
 8006610:	d122      	bne.n	8006658 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	68db      	ldr	r3, [r3, #12]
 8006618:	f003 0310 	and.w	r3, r3, #16
 800661c:	2b10      	cmp	r3, #16
 800661e:	d11b      	bne.n	8006658 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	f06f 0210 	mvn.w	r2, #16
 8006628:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	2208      	movs	r2, #8
 800662e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	69db      	ldr	r3, [r3, #28]
 8006636:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800663a:	2b00      	cmp	r3, #0
 800663c:	d003      	beq.n	8006646 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800663e:	6878      	ldr	r0, [r7, #4]
 8006640:	f000 f9f1 	bl	8006a26 <HAL_TIM_IC_CaptureCallback>
 8006644:	e005      	b.n	8006652 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006646:	6878      	ldr	r0, [r7, #4]
 8006648:	f000 f9e4 	bl	8006a14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800664c:	6878      	ldr	r0, [r7, #4]
 800664e:	f000 f9f3 	bl	8006a38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	2200      	movs	r2, #0
 8006656:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	691b      	ldr	r3, [r3, #16]
 800665e:	f003 0301 	and.w	r3, r3, #1
 8006662:	2b01      	cmp	r3, #1
 8006664:	d10e      	bne.n	8006684 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	68db      	ldr	r3, [r3, #12]
 800666c:	f003 0301 	and.w	r3, r3, #1
 8006670:	2b01      	cmp	r3, #1
 8006672:	d107      	bne.n	8006684 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	f06f 0201 	mvn.w	r2, #1
 800667c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800667e:	6878      	ldr	r0, [r7, #4]
 8006680:	f7fb fce0 	bl	8002044 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	691b      	ldr	r3, [r3, #16]
 800668a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800668e:	2b80      	cmp	r3, #128	; 0x80
 8006690:	d10e      	bne.n	80066b0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	68db      	ldr	r3, [r3, #12]
 8006698:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800669c:	2b80      	cmp	r3, #128	; 0x80
 800669e:	d107      	bne.n	80066b0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80066a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80066aa:	6878      	ldr	r0, [r7, #4]
 80066ac:	f000 fd32 	bl	8007114 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	691b      	ldr	r3, [r3, #16]
 80066b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066ba:	2b40      	cmp	r3, #64	; 0x40
 80066bc:	d10e      	bne.n	80066dc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	68db      	ldr	r3, [r3, #12]
 80066c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066c8:	2b40      	cmp	r3, #64	; 0x40
 80066ca:	d107      	bne.n	80066dc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80066d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80066d6:	6878      	ldr	r0, [r7, #4]
 80066d8:	f000 f9b7 	bl	8006a4a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	691b      	ldr	r3, [r3, #16]
 80066e2:	f003 0320 	and.w	r3, r3, #32
 80066e6:	2b20      	cmp	r3, #32
 80066e8:	d10e      	bne.n	8006708 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	68db      	ldr	r3, [r3, #12]
 80066f0:	f003 0320 	and.w	r3, r3, #32
 80066f4:	2b20      	cmp	r3, #32
 80066f6:	d107      	bne.n	8006708 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	f06f 0220 	mvn.w	r2, #32
 8006700:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006702:	6878      	ldr	r0, [r7, #4]
 8006704:	f000 fcfd 	bl	8007102 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006708:	bf00      	nop
 800670a:	3708      	adds	r7, #8
 800670c:	46bd      	mov	sp, r7
 800670e:	bd80      	pop	{r7, pc}

08006710 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006710:	b580      	push	{r7, lr}
 8006712:	b084      	sub	sp, #16
 8006714:	af00      	add	r7, sp, #0
 8006716:	60f8      	str	r0, [r7, #12]
 8006718:	60b9      	str	r1, [r7, #8]
 800671a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006722:	2b01      	cmp	r3, #1
 8006724:	d101      	bne.n	800672a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8006726:	2302      	movs	r3, #2
 8006728:	e0ac      	b.n	8006884 <HAL_TIM_PWM_ConfigChannel+0x174>
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	2201      	movs	r2, #1
 800672e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	2b0c      	cmp	r3, #12
 8006736:	f200 809f 	bhi.w	8006878 <HAL_TIM_PWM_ConfigChannel+0x168>
 800673a:	a201      	add	r2, pc, #4	; (adr r2, 8006740 <HAL_TIM_PWM_ConfigChannel+0x30>)
 800673c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006740:	08006775 	.word	0x08006775
 8006744:	08006879 	.word	0x08006879
 8006748:	08006879 	.word	0x08006879
 800674c:	08006879 	.word	0x08006879
 8006750:	080067b5 	.word	0x080067b5
 8006754:	08006879 	.word	0x08006879
 8006758:	08006879 	.word	0x08006879
 800675c:	08006879 	.word	0x08006879
 8006760:	080067f7 	.word	0x080067f7
 8006764:	08006879 	.word	0x08006879
 8006768:	08006879 	.word	0x08006879
 800676c:	08006879 	.word	0x08006879
 8006770:	08006837 	.word	0x08006837
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	68b9      	ldr	r1, [r7, #8]
 800677a:	4618      	mov	r0, r3
 800677c:	f000 f9d0 	bl	8006b20 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	699a      	ldr	r2, [r3, #24]
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	f042 0208 	orr.w	r2, r2, #8
 800678e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	699a      	ldr	r2, [r3, #24]
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	f022 0204 	bic.w	r2, r2, #4
 800679e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	6999      	ldr	r1, [r3, #24]
 80067a6:	68bb      	ldr	r3, [r7, #8]
 80067a8:	691a      	ldr	r2, [r3, #16]
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	430a      	orrs	r2, r1
 80067b0:	619a      	str	r2, [r3, #24]
      break;
 80067b2:	e062      	b.n	800687a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	68b9      	ldr	r1, [r7, #8]
 80067ba:	4618      	mov	r0, r3
 80067bc:	f000 fa16 	bl	8006bec <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	699a      	ldr	r2, [r3, #24]
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80067ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	699a      	ldr	r2, [r3, #24]
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80067de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	6999      	ldr	r1, [r3, #24]
 80067e6:	68bb      	ldr	r3, [r7, #8]
 80067e8:	691b      	ldr	r3, [r3, #16]
 80067ea:	021a      	lsls	r2, r3, #8
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	430a      	orrs	r2, r1
 80067f2:	619a      	str	r2, [r3, #24]
      break;
 80067f4:	e041      	b.n	800687a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	68b9      	ldr	r1, [r7, #8]
 80067fc:	4618      	mov	r0, r3
 80067fe:	f000 fa5f 	bl	8006cc0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	69da      	ldr	r2, [r3, #28]
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	f042 0208 	orr.w	r2, r2, #8
 8006810:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	69da      	ldr	r2, [r3, #28]
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	f022 0204 	bic.w	r2, r2, #4
 8006820:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	69d9      	ldr	r1, [r3, #28]
 8006828:	68bb      	ldr	r3, [r7, #8]
 800682a:	691a      	ldr	r2, [r3, #16]
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	430a      	orrs	r2, r1
 8006832:	61da      	str	r2, [r3, #28]
      break;
 8006834:	e021      	b.n	800687a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	68b9      	ldr	r1, [r7, #8]
 800683c:	4618      	mov	r0, r3
 800683e:	f000 faa9 	bl	8006d94 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	69da      	ldr	r2, [r3, #28]
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006850:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	69da      	ldr	r2, [r3, #28]
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006860:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	69d9      	ldr	r1, [r3, #28]
 8006868:	68bb      	ldr	r3, [r7, #8]
 800686a:	691b      	ldr	r3, [r3, #16]
 800686c:	021a      	lsls	r2, r3, #8
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	430a      	orrs	r2, r1
 8006874:	61da      	str	r2, [r3, #28]
      break;
 8006876:	e000      	b.n	800687a <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8006878:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	2200      	movs	r2, #0
 800687e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006882:	2300      	movs	r3, #0
}
 8006884:	4618      	mov	r0, r3
 8006886:	3710      	adds	r7, #16
 8006888:	46bd      	mov	sp, r7
 800688a:	bd80      	pop	{r7, pc}

0800688c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800688c:	b580      	push	{r7, lr}
 800688e:	b084      	sub	sp, #16
 8006890:	af00      	add	r7, sp, #0
 8006892:	6078      	str	r0, [r7, #4]
 8006894:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800689c:	2b01      	cmp	r3, #1
 800689e:	d101      	bne.n	80068a4 <HAL_TIM_ConfigClockSource+0x18>
 80068a0:	2302      	movs	r3, #2
 80068a2:	e0b3      	b.n	8006a0c <HAL_TIM_ConfigClockSource+0x180>
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	2201      	movs	r2, #1
 80068a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	2202      	movs	r2, #2
 80068b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	689b      	ldr	r3, [r3, #8]
 80068ba:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80068c2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80068ca:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	68fa      	ldr	r2, [r7, #12]
 80068d2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80068d4:	683b      	ldr	r3, [r7, #0]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80068dc:	d03e      	beq.n	800695c <HAL_TIM_ConfigClockSource+0xd0>
 80068de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80068e2:	f200 8087 	bhi.w	80069f4 <HAL_TIM_ConfigClockSource+0x168>
 80068e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80068ea:	f000 8085 	beq.w	80069f8 <HAL_TIM_ConfigClockSource+0x16c>
 80068ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80068f2:	d87f      	bhi.n	80069f4 <HAL_TIM_ConfigClockSource+0x168>
 80068f4:	2b70      	cmp	r3, #112	; 0x70
 80068f6:	d01a      	beq.n	800692e <HAL_TIM_ConfigClockSource+0xa2>
 80068f8:	2b70      	cmp	r3, #112	; 0x70
 80068fa:	d87b      	bhi.n	80069f4 <HAL_TIM_ConfigClockSource+0x168>
 80068fc:	2b60      	cmp	r3, #96	; 0x60
 80068fe:	d050      	beq.n	80069a2 <HAL_TIM_ConfigClockSource+0x116>
 8006900:	2b60      	cmp	r3, #96	; 0x60
 8006902:	d877      	bhi.n	80069f4 <HAL_TIM_ConfigClockSource+0x168>
 8006904:	2b50      	cmp	r3, #80	; 0x50
 8006906:	d03c      	beq.n	8006982 <HAL_TIM_ConfigClockSource+0xf6>
 8006908:	2b50      	cmp	r3, #80	; 0x50
 800690a:	d873      	bhi.n	80069f4 <HAL_TIM_ConfigClockSource+0x168>
 800690c:	2b40      	cmp	r3, #64	; 0x40
 800690e:	d058      	beq.n	80069c2 <HAL_TIM_ConfigClockSource+0x136>
 8006910:	2b40      	cmp	r3, #64	; 0x40
 8006912:	d86f      	bhi.n	80069f4 <HAL_TIM_ConfigClockSource+0x168>
 8006914:	2b30      	cmp	r3, #48	; 0x30
 8006916:	d064      	beq.n	80069e2 <HAL_TIM_ConfigClockSource+0x156>
 8006918:	2b30      	cmp	r3, #48	; 0x30
 800691a:	d86b      	bhi.n	80069f4 <HAL_TIM_ConfigClockSource+0x168>
 800691c:	2b20      	cmp	r3, #32
 800691e:	d060      	beq.n	80069e2 <HAL_TIM_ConfigClockSource+0x156>
 8006920:	2b20      	cmp	r3, #32
 8006922:	d867      	bhi.n	80069f4 <HAL_TIM_ConfigClockSource+0x168>
 8006924:	2b00      	cmp	r3, #0
 8006926:	d05c      	beq.n	80069e2 <HAL_TIM_ConfigClockSource+0x156>
 8006928:	2b10      	cmp	r3, #16
 800692a:	d05a      	beq.n	80069e2 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800692c:	e062      	b.n	80069f4 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	6818      	ldr	r0, [r3, #0]
 8006932:	683b      	ldr	r3, [r7, #0]
 8006934:	6899      	ldr	r1, [r3, #8]
 8006936:	683b      	ldr	r3, [r7, #0]
 8006938:	685a      	ldr	r2, [r3, #4]
 800693a:	683b      	ldr	r3, [r7, #0]
 800693c:	68db      	ldr	r3, [r3, #12]
 800693e:	f000 faee 	bl	8006f1e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	689b      	ldr	r3, [r3, #8]
 8006948:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006950:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	68fa      	ldr	r2, [r7, #12]
 8006958:	609a      	str	r2, [r3, #8]
      break;
 800695a:	e04e      	b.n	80069fa <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	6818      	ldr	r0, [r3, #0]
 8006960:	683b      	ldr	r3, [r7, #0]
 8006962:	6899      	ldr	r1, [r3, #8]
 8006964:	683b      	ldr	r3, [r7, #0]
 8006966:	685a      	ldr	r2, [r3, #4]
 8006968:	683b      	ldr	r3, [r7, #0]
 800696a:	68db      	ldr	r3, [r3, #12]
 800696c:	f000 fad7 	bl	8006f1e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	689a      	ldr	r2, [r3, #8]
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800697e:	609a      	str	r2, [r3, #8]
      break;
 8006980:	e03b      	b.n	80069fa <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	6818      	ldr	r0, [r3, #0]
 8006986:	683b      	ldr	r3, [r7, #0]
 8006988:	6859      	ldr	r1, [r3, #4]
 800698a:	683b      	ldr	r3, [r7, #0]
 800698c:	68db      	ldr	r3, [r3, #12]
 800698e:	461a      	mov	r2, r3
 8006990:	f000 fa4e 	bl	8006e30 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	2150      	movs	r1, #80	; 0x50
 800699a:	4618      	mov	r0, r3
 800699c:	f000 faa5 	bl	8006eea <TIM_ITRx_SetConfig>
      break;
 80069a0:	e02b      	b.n	80069fa <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	6818      	ldr	r0, [r3, #0]
 80069a6:	683b      	ldr	r3, [r7, #0]
 80069a8:	6859      	ldr	r1, [r3, #4]
 80069aa:	683b      	ldr	r3, [r7, #0]
 80069ac:	68db      	ldr	r3, [r3, #12]
 80069ae:	461a      	mov	r2, r3
 80069b0:	f000 fa6c 	bl	8006e8c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	2160      	movs	r1, #96	; 0x60
 80069ba:	4618      	mov	r0, r3
 80069bc:	f000 fa95 	bl	8006eea <TIM_ITRx_SetConfig>
      break;
 80069c0:	e01b      	b.n	80069fa <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	6818      	ldr	r0, [r3, #0]
 80069c6:	683b      	ldr	r3, [r7, #0]
 80069c8:	6859      	ldr	r1, [r3, #4]
 80069ca:	683b      	ldr	r3, [r7, #0]
 80069cc:	68db      	ldr	r3, [r3, #12]
 80069ce:	461a      	mov	r2, r3
 80069d0:	f000 fa2e 	bl	8006e30 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	2140      	movs	r1, #64	; 0x40
 80069da:	4618      	mov	r0, r3
 80069dc:	f000 fa85 	bl	8006eea <TIM_ITRx_SetConfig>
      break;
 80069e0:	e00b      	b.n	80069fa <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681a      	ldr	r2, [r3, #0]
 80069e6:	683b      	ldr	r3, [r7, #0]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	4619      	mov	r1, r3
 80069ec:	4610      	mov	r0, r2
 80069ee:	f000 fa7c 	bl	8006eea <TIM_ITRx_SetConfig>
        break;
 80069f2:	e002      	b.n	80069fa <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80069f4:	bf00      	nop
 80069f6:	e000      	b.n	80069fa <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80069f8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	2201      	movs	r2, #1
 80069fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	2200      	movs	r2, #0
 8006a06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006a0a:	2300      	movs	r3, #0
}
 8006a0c:	4618      	mov	r0, r3
 8006a0e:	3710      	adds	r7, #16
 8006a10:	46bd      	mov	sp, r7
 8006a12:	bd80      	pop	{r7, pc}

08006a14 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006a14:	b480      	push	{r7}
 8006a16:	b083      	sub	sp, #12
 8006a18:	af00      	add	r7, sp, #0
 8006a1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006a1c:	bf00      	nop
 8006a1e:	370c      	adds	r7, #12
 8006a20:	46bd      	mov	sp, r7
 8006a22:	bc80      	pop	{r7}
 8006a24:	4770      	bx	lr

08006a26 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006a26:	b480      	push	{r7}
 8006a28:	b083      	sub	sp, #12
 8006a2a:	af00      	add	r7, sp, #0
 8006a2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006a2e:	bf00      	nop
 8006a30:	370c      	adds	r7, #12
 8006a32:	46bd      	mov	sp, r7
 8006a34:	bc80      	pop	{r7}
 8006a36:	4770      	bx	lr

08006a38 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006a38:	b480      	push	{r7}
 8006a3a:	b083      	sub	sp, #12
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006a40:	bf00      	nop
 8006a42:	370c      	adds	r7, #12
 8006a44:	46bd      	mov	sp, r7
 8006a46:	bc80      	pop	{r7}
 8006a48:	4770      	bx	lr

08006a4a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006a4a:	b480      	push	{r7}
 8006a4c:	b083      	sub	sp, #12
 8006a4e:	af00      	add	r7, sp, #0
 8006a50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006a52:	bf00      	nop
 8006a54:	370c      	adds	r7, #12
 8006a56:	46bd      	mov	sp, r7
 8006a58:	bc80      	pop	{r7}
 8006a5a:	4770      	bx	lr

08006a5c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006a5c:	b480      	push	{r7}
 8006a5e:	b085      	sub	sp, #20
 8006a60:	af00      	add	r7, sp, #0
 8006a62:	6078      	str	r0, [r7, #4]
 8006a64:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	4a29      	ldr	r2, [pc, #164]	; (8006b14 <TIM_Base_SetConfig+0xb8>)
 8006a70:	4293      	cmp	r3, r2
 8006a72:	d00b      	beq.n	8006a8c <TIM_Base_SetConfig+0x30>
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a7a:	d007      	beq.n	8006a8c <TIM_Base_SetConfig+0x30>
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	4a26      	ldr	r2, [pc, #152]	; (8006b18 <TIM_Base_SetConfig+0xbc>)
 8006a80:	4293      	cmp	r3, r2
 8006a82:	d003      	beq.n	8006a8c <TIM_Base_SetConfig+0x30>
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	4a25      	ldr	r2, [pc, #148]	; (8006b1c <TIM_Base_SetConfig+0xc0>)
 8006a88:	4293      	cmp	r3, r2
 8006a8a:	d108      	bne.n	8006a9e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a92:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006a94:	683b      	ldr	r3, [r7, #0]
 8006a96:	685b      	ldr	r3, [r3, #4]
 8006a98:	68fa      	ldr	r2, [r7, #12]
 8006a9a:	4313      	orrs	r3, r2
 8006a9c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	4a1c      	ldr	r2, [pc, #112]	; (8006b14 <TIM_Base_SetConfig+0xb8>)
 8006aa2:	4293      	cmp	r3, r2
 8006aa4:	d00b      	beq.n	8006abe <TIM_Base_SetConfig+0x62>
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006aac:	d007      	beq.n	8006abe <TIM_Base_SetConfig+0x62>
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	4a19      	ldr	r2, [pc, #100]	; (8006b18 <TIM_Base_SetConfig+0xbc>)
 8006ab2:	4293      	cmp	r3, r2
 8006ab4:	d003      	beq.n	8006abe <TIM_Base_SetConfig+0x62>
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	4a18      	ldr	r2, [pc, #96]	; (8006b1c <TIM_Base_SetConfig+0xc0>)
 8006aba:	4293      	cmp	r3, r2
 8006abc:	d108      	bne.n	8006ad0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006ac4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006ac6:	683b      	ldr	r3, [r7, #0]
 8006ac8:	68db      	ldr	r3, [r3, #12]
 8006aca:	68fa      	ldr	r2, [r7, #12]
 8006acc:	4313      	orrs	r3, r2
 8006ace:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006ad6:	683b      	ldr	r3, [r7, #0]
 8006ad8:	695b      	ldr	r3, [r3, #20]
 8006ada:	4313      	orrs	r3, r2
 8006adc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	68fa      	ldr	r2, [r7, #12]
 8006ae2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006ae4:	683b      	ldr	r3, [r7, #0]
 8006ae6:	689a      	ldr	r2, [r3, #8]
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006aec:	683b      	ldr	r3, [r7, #0]
 8006aee:	681a      	ldr	r2, [r3, #0]
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	4a07      	ldr	r2, [pc, #28]	; (8006b14 <TIM_Base_SetConfig+0xb8>)
 8006af8:	4293      	cmp	r3, r2
 8006afa:	d103      	bne.n	8006b04 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006afc:	683b      	ldr	r3, [r7, #0]
 8006afe:	691a      	ldr	r2, [r3, #16]
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	2201      	movs	r2, #1
 8006b08:	615a      	str	r2, [r3, #20]
}
 8006b0a:	bf00      	nop
 8006b0c:	3714      	adds	r7, #20
 8006b0e:	46bd      	mov	sp, r7
 8006b10:	bc80      	pop	{r7}
 8006b12:	4770      	bx	lr
 8006b14:	40012c00 	.word	0x40012c00
 8006b18:	40000400 	.word	0x40000400
 8006b1c:	40000800 	.word	0x40000800

08006b20 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006b20:	b480      	push	{r7}
 8006b22:	b087      	sub	sp, #28
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	6078      	str	r0, [r7, #4]
 8006b28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	6a1b      	ldr	r3, [r3, #32]
 8006b2e:	f023 0201 	bic.w	r2, r3, #1
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	6a1b      	ldr	r3, [r3, #32]
 8006b3a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	685b      	ldr	r3, [r3, #4]
 8006b40:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	699b      	ldr	r3, [r3, #24]
 8006b46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	f023 0303 	bic.w	r3, r3, #3
 8006b56:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006b58:	683b      	ldr	r3, [r7, #0]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	68fa      	ldr	r2, [r7, #12]
 8006b5e:	4313      	orrs	r3, r2
 8006b60:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006b62:	697b      	ldr	r3, [r7, #20]
 8006b64:	f023 0302 	bic.w	r3, r3, #2
 8006b68:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006b6a:	683b      	ldr	r3, [r7, #0]
 8006b6c:	689b      	ldr	r3, [r3, #8]
 8006b6e:	697a      	ldr	r2, [r7, #20]
 8006b70:	4313      	orrs	r3, r2
 8006b72:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	4a1c      	ldr	r2, [pc, #112]	; (8006be8 <TIM_OC1_SetConfig+0xc8>)
 8006b78:	4293      	cmp	r3, r2
 8006b7a:	d10c      	bne.n	8006b96 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006b7c:	697b      	ldr	r3, [r7, #20]
 8006b7e:	f023 0308 	bic.w	r3, r3, #8
 8006b82:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006b84:	683b      	ldr	r3, [r7, #0]
 8006b86:	68db      	ldr	r3, [r3, #12]
 8006b88:	697a      	ldr	r2, [r7, #20]
 8006b8a:	4313      	orrs	r3, r2
 8006b8c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006b8e:	697b      	ldr	r3, [r7, #20]
 8006b90:	f023 0304 	bic.w	r3, r3, #4
 8006b94:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	4a13      	ldr	r2, [pc, #76]	; (8006be8 <TIM_OC1_SetConfig+0xc8>)
 8006b9a:	4293      	cmp	r3, r2
 8006b9c:	d111      	bne.n	8006bc2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006b9e:	693b      	ldr	r3, [r7, #16]
 8006ba0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006ba4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006ba6:	693b      	ldr	r3, [r7, #16]
 8006ba8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006bac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006bae:	683b      	ldr	r3, [r7, #0]
 8006bb0:	695b      	ldr	r3, [r3, #20]
 8006bb2:	693a      	ldr	r2, [r7, #16]
 8006bb4:	4313      	orrs	r3, r2
 8006bb6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006bb8:	683b      	ldr	r3, [r7, #0]
 8006bba:	699b      	ldr	r3, [r3, #24]
 8006bbc:	693a      	ldr	r2, [r7, #16]
 8006bbe:	4313      	orrs	r3, r2
 8006bc0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	693a      	ldr	r2, [r7, #16]
 8006bc6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	68fa      	ldr	r2, [r7, #12]
 8006bcc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006bce:	683b      	ldr	r3, [r7, #0]
 8006bd0:	685a      	ldr	r2, [r3, #4]
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	697a      	ldr	r2, [r7, #20]
 8006bda:	621a      	str	r2, [r3, #32]
}
 8006bdc:	bf00      	nop
 8006bde:	371c      	adds	r7, #28
 8006be0:	46bd      	mov	sp, r7
 8006be2:	bc80      	pop	{r7}
 8006be4:	4770      	bx	lr
 8006be6:	bf00      	nop
 8006be8:	40012c00 	.word	0x40012c00

08006bec <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006bec:	b480      	push	{r7}
 8006bee:	b087      	sub	sp, #28
 8006bf0:	af00      	add	r7, sp, #0
 8006bf2:	6078      	str	r0, [r7, #4]
 8006bf4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	6a1b      	ldr	r3, [r3, #32]
 8006bfa:	f023 0210 	bic.w	r2, r3, #16
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	6a1b      	ldr	r3, [r3, #32]
 8006c06:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	685b      	ldr	r3, [r3, #4]
 8006c0c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	699b      	ldr	r3, [r3, #24]
 8006c12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c22:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006c24:	683b      	ldr	r3, [r7, #0]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	021b      	lsls	r3, r3, #8
 8006c2a:	68fa      	ldr	r2, [r7, #12]
 8006c2c:	4313      	orrs	r3, r2
 8006c2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006c30:	697b      	ldr	r3, [r7, #20]
 8006c32:	f023 0320 	bic.w	r3, r3, #32
 8006c36:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006c38:	683b      	ldr	r3, [r7, #0]
 8006c3a:	689b      	ldr	r3, [r3, #8]
 8006c3c:	011b      	lsls	r3, r3, #4
 8006c3e:	697a      	ldr	r2, [r7, #20]
 8006c40:	4313      	orrs	r3, r2
 8006c42:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	4a1d      	ldr	r2, [pc, #116]	; (8006cbc <TIM_OC2_SetConfig+0xd0>)
 8006c48:	4293      	cmp	r3, r2
 8006c4a:	d10d      	bne.n	8006c68 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006c4c:	697b      	ldr	r3, [r7, #20]
 8006c4e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006c52:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006c54:	683b      	ldr	r3, [r7, #0]
 8006c56:	68db      	ldr	r3, [r3, #12]
 8006c58:	011b      	lsls	r3, r3, #4
 8006c5a:	697a      	ldr	r2, [r7, #20]
 8006c5c:	4313      	orrs	r3, r2
 8006c5e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006c60:	697b      	ldr	r3, [r7, #20]
 8006c62:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006c66:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	4a14      	ldr	r2, [pc, #80]	; (8006cbc <TIM_OC2_SetConfig+0xd0>)
 8006c6c:	4293      	cmp	r3, r2
 8006c6e:	d113      	bne.n	8006c98 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006c70:	693b      	ldr	r3, [r7, #16]
 8006c72:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006c76:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006c78:	693b      	ldr	r3, [r7, #16]
 8006c7a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006c7e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006c80:	683b      	ldr	r3, [r7, #0]
 8006c82:	695b      	ldr	r3, [r3, #20]
 8006c84:	009b      	lsls	r3, r3, #2
 8006c86:	693a      	ldr	r2, [r7, #16]
 8006c88:	4313      	orrs	r3, r2
 8006c8a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006c8c:	683b      	ldr	r3, [r7, #0]
 8006c8e:	699b      	ldr	r3, [r3, #24]
 8006c90:	009b      	lsls	r3, r3, #2
 8006c92:	693a      	ldr	r2, [r7, #16]
 8006c94:	4313      	orrs	r3, r2
 8006c96:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	693a      	ldr	r2, [r7, #16]
 8006c9c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	68fa      	ldr	r2, [r7, #12]
 8006ca2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006ca4:	683b      	ldr	r3, [r7, #0]
 8006ca6:	685a      	ldr	r2, [r3, #4]
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	697a      	ldr	r2, [r7, #20]
 8006cb0:	621a      	str	r2, [r3, #32]
}
 8006cb2:	bf00      	nop
 8006cb4:	371c      	adds	r7, #28
 8006cb6:	46bd      	mov	sp, r7
 8006cb8:	bc80      	pop	{r7}
 8006cba:	4770      	bx	lr
 8006cbc:	40012c00 	.word	0x40012c00

08006cc0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006cc0:	b480      	push	{r7}
 8006cc2:	b087      	sub	sp, #28
 8006cc4:	af00      	add	r7, sp, #0
 8006cc6:	6078      	str	r0, [r7, #4]
 8006cc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	6a1b      	ldr	r3, [r3, #32]
 8006cce:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	6a1b      	ldr	r3, [r3, #32]
 8006cda:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	685b      	ldr	r3, [r3, #4]
 8006ce0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	69db      	ldr	r3, [r3, #28]
 8006ce6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006cee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	f023 0303 	bic.w	r3, r3, #3
 8006cf6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006cf8:	683b      	ldr	r3, [r7, #0]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	68fa      	ldr	r2, [r7, #12]
 8006cfe:	4313      	orrs	r3, r2
 8006d00:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006d02:	697b      	ldr	r3, [r7, #20]
 8006d04:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006d08:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006d0a:	683b      	ldr	r3, [r7, #0]
 8006d0c:	689b      	ldr	r3, [r3, #8]
 8006d0e:	021b      	lsls	r3, r3, #8
 8006d10:	697a      	ldr	r2, [r7, #20]
 8006d12:	4313      	orrs	r3, r2
 8006d14:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	4a1d      	ldr	r2, [pc, #116]	; (8006d90 <TIM_OC3_SetConfig+0xd0>)
 8006d1a:	4293      	cmp	r3, r2
 8006d1c:	d10d      	bne.n	8006d3a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006d1e:	697b      	ldr	r3, [r7, #20]
 8006d20:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006d24:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006d26:	683b      	ldr	r3, [r7, #0]
 8006d28:	68db      	ldr	r3, [r3, #12]
 8006d2a:	021b      	lsls	r3, r3, #8
 8006d2c:	697a      	ldr	r2, [r7, #20]
 8006d2e:	4313      	orrs	r3, r2
 8006d30:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006d32:	697b      	ldr	r3, [r7, #20]
 8006d34:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006d38:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	4a14      	ldr	r2, [pc, #80]	; (8006d90 <TIM_OC3_SetConfig+0xd0>)
 8006d3e:	4293      	cmp	r3, r2
 8006d40:	d113      	bne.n	8006d6a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006d42:	693b      	ldr	r3, [r7, #16]
 8006d44:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006d48:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006d4a:	693b      	ldr	r3, [r7, #16]
 8006d4c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006d50:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006d52:	683b      	ldr	r3, [r7, #0]
 8006d54:	695b      	ldr	r3, [r3, #20]
 8006d56:	011b      	lsls	r3, r3, #4
 8006d58:	693a      	ldr	r2, [r7, #16]
 8006d5a:	4313      	orrs	r3, r2
 8006d5c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006d5e:	683b      	ldr	r3, [r7, #0]
 8006d60:	699b      	ldr	r3, [r3, #24]
 8006d62:	011b      	lsls	r3, r3, #4
 8006d64:	693a      	ldr	r2, [r7, #16]
 8006d66:	4313      	orrs	r3, r2
 8006d68:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	693a      	ldr	r2, [r7, #16]
 8006d6e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	68fa      	ldr	r2, [r7, #12]
 8006d74:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006d76:	683b      	ldr	r3, [r7, #0]
 8006d78:	685a      	ldr	r2, [r3, #4]
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	697a      	ldr	r2, [r7, #20]
 8006d82:	621a      	str	r2, [r3, #32]
}
 8006d84:	bf00      	nop
 8006d86:	371c      	adds	r7, #28
 8006d88:	46bd      	mov	sp, r7
 8006d8a:	bc80      	pop	{r7}
 8006d8c:	4770      	bx	lr
 8006d8e:	bf00      	nop
 8006d90:	40012c00 	.word	0x40012c00

08006d94 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006d94:	b480      	push	{r7}
 8006d96:	b087      	sub	sp, #28
 8006d98:	af00      	add	r7, sp, #0
 8006d9a:	6078      	str	r0, [r7, #4]
 8006d9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	6a1b      	ldr	r3, [r3, #32]
 8006da2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	6a1b      	ldr	r3, [r3, #32]
 8006dae:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	685b      	ldr	r3, [r3, #4]
 8006db4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	69db      	ldr	r3, [r3, #28]
 8006dba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006dc2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006dca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006dcc:	683b      	ldr	r3, [r7, #0]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	021b      	lsls	r3, r3, #8
 8006dd2:	68fa      	ldr	r2, [r7, #12]
 8006dd4:	4313      	orrs	r3, r2
 8006dd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006dd8:	693b      	ldr	r3, [r7, #16]
 8006dda:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006dde:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006de0:	683b      	ldr	r3, [r7, #0]
 8006de2:	689b      	ldr	r3, [r3, #8]
 8006de4:	031b      	lsls	r3, r3, #12
 8006de6:	693a      	ldr	r2, [r7, #16]
 8006de8:	4313      	orrs	r3, r2
 8006dea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	4a0f      	ldr	r2, [pc, #60]	; (8006e2c <TIM_OC4_SetConfig+0x98>)
 8006df0:	4293      	cmp	r3, r2
 8006df2:	d109      	bne.n	8006e08 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006df4:	697b      	ldr	r3, [r7, #20]
 8006df6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006dfa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006dfc:	683b      	ldr	r3, [r7, #0]
 8006dfe:	695b      	ldr	r3, [r3, #20]
 8006e00:	019b      	lsls	r3, r3, #6
 8006e02:	697a      	ldr	r2, [r7, #20]
 8006e04:	4313      	orrs	r3, r2
 8006e06:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	697a      	ldr	r2, [r7, #20]
 8006e0c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	68fa      	ldr	r2, [r7, #12]
 8006e12:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006e14:	683b      	ldr	r3, [r7, #0]
 8006e16:	685a      	ldr	r2, [r3, #4]
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	693a      	ldr	r2, [r7, #16]
 8006e20:	621a      	str	r2, [r3, #32]
}
 8006e22:	bf00      	nop
 8006e24:	371c      	adds	r7, #28
 8006e26:	46bd      	mov	sp, r7
 8006e28:	bc80      	pop	{r7}
 8006e2a:	4770      	bx	lr
 8006e2c:	40012c00 	.word	0x40012c00

08006e30 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006e30:	b480      	push	{r7}
 8006e32:	b087      	sub	sp, #28
 8006e34:	af00      	add	r7, sp, #0
 8006e36:	60f8      	str	r0, [r7, #12]
 8006e38:	60b9      	str	r1, [r7, #8]
 8006e3a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	6a1b      	ldr	r3, [r3, #32]
 8006e40:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	6a1b      	ldr	r3, [r3, #32]
 8006e46:	f023 0201 	bic.w	r2, r3, #1
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	699b      	ldr	r3, [r3, #24]
 8006e52:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006e54:	693b      	ldr	r3, [r7, #16]
 8006e56:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006e5a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	011b      	lsls	r3, r3, #4
 8006e60:	693a      	ldr	r2, [r7, #16]
 8006e62:	4313      	orrs	r3, r2
 8006e64:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006e66:	697b      	ldr	r3, [r7, #20]
 8006e68:	f023 030a 	bic.w	r3, r3, #10
 8006e6c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006e6e:	697a      	ldr	r2, [r7, #20]
 8006e70:	68bb      	ldr	r3, [r7, #8]
 8006e72:	4313      	orrs	r3, r2
 8006e74:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	693a      	ldr	r2, [r7, #16]
 8006e7a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	697a      	ldr	r2, [r7, #20]
 8006e80:	621a      	str	r2, [r3, #32]
}
 8006e82:	bf00      	nop
 8006e84:	371c      	adds	r7, #28
 8006e86:	46bd      	mov	sp, r7
 8006e88:	bc80      	pop	{r7}
 8006e8a:	4770      	bx	lr

08006e8c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006e8c:	b480      	push	{r7}
 8006e8e:	b087      	sub	sp, #28
 8006e90:	af00      	add	r7, sp, #0
 8006e92:	60f8      	str	r0, [r7, #12]
 8006e94:	60b9      	str	r1, [r7, #8]
 8006e96:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	6a1b      	ldr	r3, [r3, #32]
 8006e9c:	f023 0210 	bic.w	r2, r3, #16
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	699b      	ldr	r3, [r3, #24]
 8006ea8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	6a1b      	ldr	r3, [r3, #32]
 8006eae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006eb0:	697b      	ldr	r3, [r7, #20]
 8006eb2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006eb6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	031b      	lsls	r3, r3, #12
 8006ebc:	697a      	ldr	r2, [r7, #20]
 8006ebe:	4313      	orrs	r3, r2
 8006ec0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006ec2:	693b      	ldr	r3, [r7, #16]
 8006ec4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006ec8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006eca:	68bb      	ldr	r3, [r7, #8]
 8006ecc:	011b      	lsls	r3, r3, #4
 8006ece:	693a      	ldr	r2, [r7, #16]
 8006ed0:	4313      	orrs	r3, r2
 8006ed2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	697a      	ldr	r2, [r7, #20]
 8006ed8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	693a      	ldr	r2, [r7, #16]
 8006ede:	621a      	str	r2, [r3, #32]
}
 8006ee0:	bf00      	nop
 8006ee2:	371c      	adds	r7, #28
 8006ee4:	46bd      	mov	sp, r7
 8006ee6:	bc80      	pop	{r7}
 8006ee8:	4770      	bx	lr

08006eea <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006eea:	b480      	push	{r7}
 8006eec:	b085      	sub	sp, #20
 8006eee:	af00      	add	r7, sp, #0
 8006ef0:	6078      	str	r0, [r7, #4]
 8006ef2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	689b      	ldr	r3, [r3, #8]
 8006ef8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f00:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006f02:	683a      	ldr	r2, [r7, #0]
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	4313      	orrs	r3, r2
 8006f08:	f043 0307 	orr.w	r3, r3, #7
 8006f0c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	68fa      	ldr	r2, [r7, #12]
 8006f12:	609a      	str	r2, [r3, #8]
}
 8006f14:	bf00      	nop
 8006f16:	3714      	adds	r7, #20
 8006f18:	46bd      	mov	sp, r7
 8006f1a:	bc80      	pop	{r7}
 8006f1c:	4770      	bx	lr

08006f1e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006f1e:	b480      	push	{r7}
 8006f20:	b087      	sub	sp, #28
 8006f22:	af00      	add	r7, sp, #0
 8006f24:	60f8      	str	r0, [r7, #12]
 8006f26:	60b9      	str	r1, [r7, #8]
 8006f28:	607a      	str	r2, [r7, #4]
 8006f2a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	689b      	ldr	r3, [r3, #8]
 8006f30:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006f32:	697b      	ldr	r3, [r7, #20]
 8006f34:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006f38:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006f3a:	683b      	ldr	r3, [r7, #0]
 8006f3c:	021a      	lsls	r2, r3, #8
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	431a      	orrs	r2, r3
 8006f42:	68bb      	ldr	r3, [r7, #8]
 8006f44:	4313      	orrs	r3, r2
 8006f46:	697a      	ldr	r2, [r7, #20]
 8006f48:	4313      	orrs	r3, r2
 8006f4a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	697a      	ldr	r2, [r7, #20]
 8006f50:	609a      	str	r2, [r3, #8]
}
 8006f52:	bf00      	nop
 8006f54:	371c      	adds	r7, #28
 8006f56:	46bd      	mov	sp, r7
 8006f58:	bc80      	pop	{r7}
 8006f5a:	4770      	bx	lr

08006f5c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006f5c:	b480      	push	{r7}
 8006f5e:	b087      	sub	sp, #28
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	60f8      	str	r0, [r7, #12]
 8006f64:	60b9      	str	r1, [r7, #8]
 8006f66:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006f68:	68bb      	ldr	r3, [r7, #8]
 8006f6a:	f003 031f 	and.w	r3, r3, #31
 8006f6e:	2201      	movs	r2, #1
 8006f70:	fa02 f303 	lsl.w	r3, r2, r3
 8006f74:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	6a1a      	ldr	r2, [r3, #32]
 8006f7a:	697b      	ldr	r3, [r7, #20]
 8006f7c:	43db      	mvns	r3, r3
 8006f7e:	401a      	ands	r2, r3
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	6a1a      	ldr	r2, [r3, #32]
 8006f88:	68bb      	ldr	r3, [r7, #8]
 8006f8a:	f003 031f 	and.w	r3, r3, #31
 8006f8e:	6879      	ldr	r1, [r7, #4]
 8006f90:	fa01 f303 	lsl.w	r3, r1, r3
 8006f94:	431a      	orrs	r2, r3
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	621a      	str	r2, [r3, #32]
}
 8006f9a:	bf00      	nop
 8006f9c:	371c      	adds	r7, #28
 8006f9e:	46bd      	mov	sp, r7
 8006fa0:	bc80      	pop	{r7}
 8006fa2:	4770      	bx	lr

08006fa4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006fa4:	b480      	push	{r7}
 8006fa6:	b085      	sub	sp, #20
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	6078      	str	r0, [r7, #4]
 8006fac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006fb4:	2b01      	cmp	r3, #1
 8006fb6:	d101      	bne.n	8006fbc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006fb8:	2302      	movs	r3, #2
 8006fba:	e046      	b.n	800704a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	2201      	movs	r2, #1
 8006fc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	2202      	movs	r2, #2
 8006fc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	685b      	ldr	r3, [r3, #4]
 8006fd2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	689b      	ldr	r3, [r3, #8]
 8006fda:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006fe2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006fe4:	683b      	ldr	r3, [r7, #0]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	68fa      	ldr	r2, [r7, #12]
 8006fea:	4313      	orrs	r3, r2
 8006fec:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	68fa      	ldr	r2, [r7, #12]
 8006ff4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	4a16      	ldr	r2, [pc, #88]	; (8007054 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8006ffc:	4293      	cmp	r3, r2
 8006ffe:	d00e      	beq.n	800701e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007008:	d009      	beq.n	800701e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	4a12      	ldr	r2, [pc, #72]	; (8007058 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8007010:	4293      	cmp	r3, r2
 8007012:	d004      	beq.n	800701e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	4a10      	ldr	r2, [pc, #64]	; (800705c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800701a:	4293      	cmp	r3, r2
 800701c:	d10c      	bne.n	8007038 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800701e:	68bb      	ldr	r3, [r7, #8]
 8007020:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007024:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007026:	683b      	ldr	r3, [r7, #0]
 8007028:	685b      	ldr	r3, [r3, #4]
 800702a:	68ba      	ldr	r2, [r7, #8]
 800702c:	4313      	orrs	r3, r2
 800702e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	68ba      	ldr	r2, [r7, #8]
 8007036:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	2201      	movs	r2, #1
 800703c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	2200      	movs	r2, #0
 8007044:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007048:	2300      	movs	r3, #0
}
 800704a:	4618      	mov	r0, r3
 800704c:	3714      	adds	r7, #20
 800704e:	46bd      	mov	sp, r7
 8007050:	bc80      	pop	{r7}
 8007052:	4770      	bx	lr
 8007054:	40012c00 	.word	0x40012c00
 8007058:	40000400 	.word	0x40000400
 800705c:	40000800 	.word	0x40000800

08007060 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007060:	b480      	push	{r7}
 8007062:	b085      	sub	sp, #20
 8007064:	af00      	add	r7, sp, #0
 8007066:	6078      	str	r0, [r7, #4]
 8007068:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800706a:	2300      	movs	r3, #0
 800706c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007074:	2b01      	cmp	r3, #1
 8007076:	d101      	bne.n	800707c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007078:	2302      	movs	r3, #2
 800707a:	e03d      	b.n	80070f8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	2201      	movs	r2, #1
 8007080:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800708a:	683b      	ldr	r3, [r7, #0]
 800708c:	68db      	ldr	r3, [r3, #12]
 800708e:	4313      	orrs	r3, r2
 8007090:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007098:	683b      	ldr	r3, [r7, #0]
 800709a:	689b      	ldr	r3, [r3, #8]
 800709c:	4313      	orrs	r3, r2
 800709e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80070a6:	683b      	ldr	r3, [r7, #0]
 80070a8:	685b      	ldr	r3, [r3, #4]
 80070aa:	4313      	orrs	r3, r2
 80070ac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80070b4:	683b      	ldr	r3, [r7, #0]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	4313      	orrs	r3, r2
 80070ba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80070c2:	683b      	ldr	r3, [r7, #0]
 80070c4:	691b      	ldr	r3, [r3, #16]
 80070c6:	4313      	orrs	r3, r2
 80070c8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80070d0:	683b      	ldr	r3, [r7, #0]
 80070d2:	695b      	ldr	r3, [r3, #20]
 80070d4:	4313      	orrs	r3, r2
 80070d6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80070de:	683b      	ldr	r3, [r7, #0]
 80070e0:	69db      	ldr	r3, [r3, #28]
 80070e2:	4313      	orrs	r3, r2
 80070e4:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	68fa      	ldr	r2, [r7, #12]
 80070ec:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	2200      	movs	r2, #0
 80070f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80070f6:	2300      	movs	r3, #0
}
 80070f8:	4618      	mov	r0, r3
 80070fa:	3714      	adds	r7, #20
 80070fc:	46bd      	mov	sp, r7
 80070fe:	bc80      	pop	{r7}
 8007100:	4770      	bx	lr

08007102 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007102:	b480      	push	{r7}
 8007104:	b083      	sub	sp, #12
 8007106:	af00      	add	r7, sp, #0
 8007108:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800710a:	bf00      	nop
 800710c:	370c      	adds	r7, #12
 800710e:	46bd      	mov	sp, r7
 8007110:	bc80      	pop	{r7}
 8007112:	4770      	bx	lr

08007114 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007114:	b480      	push	{r7}
 8007116:	b083      	sub	sp, #12
 8007118:	af00      	add	r7, sp, #0
 800711a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800711c:	bf00      	nop
 800711e:	370c      	adds	r7, #12
 8007120:	46bd      	mov	sp, r7
 8007122:	bc80      	pop	{r7}
 8007124:	4770      	bx	lr

08007126 <memset>:
 8007126:	4603      	mov	r3, r0
 8007128:	4402      	add	r2, r0
 800712a:	4293      	cmp	r3, r2
 800712c:	d100      	bne.n	8007130 <memset+0xa>
 800712e:	4770      	bx	lr
 8007130:	f803 1b01 	strb.w	r1, [r3], #1
 8007134:	e7f9      	b.n	800712a <memset+0x4>
	...

08007138 <__errno>:
 8007138:	4b01      	ldr	r3, [pc, #4]	; (8007140 <__errno+0x8>)
 800713a:	6818      	ldr	r0, [r3, #0]
 800713c:	4770      	bx	lr
 800713e:	bf00      	nop
 8007140:	20000180 	.word	0x20000180

08007144 <__libc_init_array>:
 8007144:	b570      	push	{r4, r5, r6, lr}
 8007146:	2600      	movs	r6, #0
 8007148:	4d0c      	ldr	r5, [pc, #48]	; (800717c <__libc_init_array+0x38>)
 800714a:	4c0d      	ldr	r4, [pc, #52]	; (8007180 <__libc_init_array+0x3c>)
 800714c:	1b64      	subs	r4, r4, r5
 800714e:	10a4      	asrs	r4, r4, #2
 8007150:	42a6      	cmp	r6, r4
 8007152:	d109      	bne.n	8007168 <__libc_init_array+0x24>
 8007154:	f001 fe24 	bl	8008da0 <_init>
 8007158:	2600      	movs	r6, #0
 800715a:	4d0a      	ldr	r5, [pc, #40]	; (8007184 <__libc_init_array+0x40>)
 800715c:	4c0a      	ldr	r4, [pc, #40]	; (8007188 <__libc_init_array+0x44>)
 800715e:	1b64      	subs	r4, r4, r5
 8007160:	10a4      	asrs	r4, r4, #2
 8007162:	42a6      	cmp	r6, r4
 8007164:	d105      	bne.n	8007172 <__libc_init_array+0x2e>
 8007166:	bd70      	pop	{r4, r5, r6, pc}
 8007168:	f855 3b04 	ldr.w	r3, [r5], #4
 800716c:	4798      	blx	r3
 800716e:	3601      	adds	r6, #1
 8007170:	e7ee      	b.n	8007150 <__libc_init_array+0xc>
 8007172:	f855 3b04 	ldr.w	r3, [r5], #4
 8007176:	4798      	blx	r3
 8007178:	3601      	adds	r6, #1
 800717a:	e7f2      	b.n	8007162 <__libc_init_array+0x1e>
 800717c:	08009030 	.word	0x08009030
 8007180:	08009030 	.word	0x08009030
 8007184:	08009030 	.word	0x08009030
 8007188:	08009034 	.word	0x08009034

0800718c <atan2>:
 800718c:	f000 bcc8 	b.w	8007b20 <__ieee754_atan2>

08007190 <sqrt>:
 8007190:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007192:	4604      	mov	r4, r0
 8007194:	460d      	mov	r5, r1
 8007196:	f000 f9f5 	bl	8007584 <__ieee754_sqrt>
 800719a:	4622      	mov	r2, r4
 800719c:	4606      	mov	r6, r0
 800719e:	460f      	mov	r7, r1
 80071a0:	462b      	mov	r3, r5
 80071a2:	4620      	mov	r0, r4
 80071a4:	4629      	mov	r1, r5
 80071a6:	f7f9 fc09 	bl	80009bc <__aeabi_dcmpun>
 80071aa:	b930      	cbnz	r0, 80071ba <sqrt+0x2a>
 80071ac:	4620      	mov	r0, r4
 80071ae:	4629      	mov	r1, r5
 80071b0:	2200      	movs	r2, #0
 80071b2:	2300      	movs	r3, #0
 80071b4:	f7f9 fbda 	bl	800096c <__aeabi_dcmplt>
 80071b8:	b910      	cbnz	r0, 80071c0 <sqrt+0x30>
 80071ba:	4630      	mov	r0, r6
 80071bc:	4639      	mov	r1, r7
 80071be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80071c0:	f7ff ffba 	bl	8007138 <__errno>
 80071c4:	2200      	movs	r2, #0
 80071c6:	2300      	movs	r3, #0
 80071c8:	2121      	movs	r1, #33	; 0x21
 80071ca:	6001      	str	r1, [r0, #0]
 80071cc:	4610      	mov	r0, r2
 80071ce:	4619      	mov	r1, r3
 80071d0:	f7f9 fa84 	bl	80006dc <__aeabi_ddiv>
 80071d4:	4606      	mov	r6, r0
 80071d6:	460f      	mov	r7, r1
 80071d8:	4630      	mov	r0, r6
 80071da:	4639      	mov	r1, r7
 80071dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80071de:	bf00      	nop

080071e0 <atan>:
 80071e0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071e4:	4bb6      	ldr	r3, [pc, #728]	; (80074c0 <atan+0x2e0>)
 80071e6:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80071ea:	429e      	cmp	r6, r3
 80071ec:	4604      	mov	r4, r0
 80071ee:	460d      	mov	r5, r1
 80071f0:	468a      	mov	sl, r1
 80071f2:	d916      	bls.n	8007222 <atan+0x42>
 80071f4:	4bb3      	ldr	r3, [pc, #716]	; (80074c4 <atan+0x2e4>)
 80071f6:	429e      	cmp	r6, r3
 80071f8:	d80b      	bhi.n	8007212 <atan+0x32>
 80071fa:	d008      	beq.n	800720e <atan+0x2e>
 80071fc:	f1ba 0f00 	cmp.w	sl, #0
 8007200:	f340 80c2 	ble.w	8007388 <atan+0x1a8>
 8007204:	a192      	add	r1, pc, #584	; (adr r1, 8007450 <atan+0x270>)
 8007206:	e9d1 0100 	ldrd	r0, r1, [r1]
 800720a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800720e:	2800      	cmp	r0, #0
 8007210:	d0f4      	beq.n	80071fc <atan+0x1c>
 8007212:	4622      	mov	r2, r4
 8007214:	462b      	mov	r3, r5
 8007216:	4620      	mov	r0, r4
 8007218:	4629      	mov	r1, r5
 800721a:	f7f8 ff7f 	bl	800011c <__adddf3>
 800721e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007222:	4ba9      	ldr	r3, [pc, #676]	; (80074c8 <atan+0x2e8>)
 8007224:	429e      	cmp	r6, r3
 8007226:	f200 80b4 	bhi.w	8007392 <atan+0x1b2>
 800722a:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800722e:	429e      	cmp	r6, r3
 8007230:	f240 809b 	bls.w	800736a <atan+0x18a>
 8007234:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 8007238:	4622      	mov	r2, r4
 800723a:	462b      	mov	r3, r5
 800723c:	4620      	mov	r0, r4
 800723e:	4629      	mov	r1, r5
 8007240:	f7f9 f922 	bl	8000488 <__aeabi_dmul>
 8007244:	4602      	mov	r2, r0
 8007246:	460b      	mov	r3, r1
 8007248:	4680      	mov	r8, r0
 800724a:	4689      	mov	r9, r1
 800724c:	f7f9 f91c 	bl	8000488 <__aeabi_dmul>
 8007250:	a381      	add	r3, pc, #516	; (adr r3, 8007458 <atan+0x278>)
 8007252:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007256:	4606      	mov	r6, r0
 8007258:	460f      	mov	r7, r1
 800725a:	f7f9 f915 	bl	8000488 <__aeabi_dmul>
 800725e:	a380      	add	r3, pc, #512	; (adr r3, 8007460 <atan+0x280>)
 8007260:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007264:	f7f8 ff5a 	bl	800011c <__adddf3>
 8007268:	4632      	mov	r2, r6
 800726a:	463b      	mov	r3, r7
 800726c:	f7f9 f90c 	bl	8000488 <__aeabi_dmul>
 8007270:	a37d      	add	r3, pc, #500	; (adr r3, 8007468 <atan+0x288>)
 8007272:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007276:	f7f8 ff51 	bl	800011c <__adddf3>
 800727a:	4632      	mov	r2, r6
 800727c:	463b      	mov	r3, r7
 800727e:	f7f9 f903 	bl	8000488 <__aeabi_dmul>
 8007282:	a37b      	add	r3, pc, #492	; (adr r3, 8007470 <atan+0x290>)
 8007284:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007288:	f7f8 ff48 	bl	800011c <__adddf3>
 800728c:	4632      	mov	r2, r6
 800728e:	463b      	mov	r3, r7
 8007290:	f7f9 f8fa 	bl	8000488 <__aeabi_dmul>
 8007294:	a378      	add	r3, pc, #480	; (adr r3, 8007478 <atan+0x298>)
 8007296:	e9d3 2300 	ldrd	r2, r3, [r3]
 800729a:	f7f8 ff3f 	bl	800011c <__adddf3>
 800729e:	4632      	mov	r2, r6
 80072a0:	463b      	mov	r3, r7
 80072a2:	f7f9 f8f1 	bl	8000488 <__aeabi_dmul>
 80072a6:	a376      	add	r3, pc, #472	; (adr r3, 8007480 <atan+0x2a0>)
 80072a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072ac:	f7f8 ff36 	bl	800011c <__adddf3>
 80072b0:	4642      	mov	r2, r8
 80072b2:	464b      	mov	r3, r9
 80072b4:	f7f9 f8e8 	bl	8000488 <__aeabi_dmul>
 80072b8:	a373      	add	r3, pc, #460	; (adr r3, 8007488 <atan+0x2a8>)
 80072ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072be:	4680      	mov	r8, r0
 80072c0:	4689      	mov	r9, r1
 80072c2:	4630      	mov	r0, r6
 80072c4:	4639      	mov	r1, r7
 80072c6:	f7f9 f8df 	bl	8000488 <__aeabi_dmul>
 80072ca:	a371      	add	r3, pc, #452	; (adr r3, 8007490 <atan+0x2b0>)
 80072cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072d0:	f7f8 ff22 	bl	8000118 <__aeabi_dsub>
 80072d4:	4632      	mov	r2, r6
 80072d6:	463b      	mov	r3, r7
 80072d8:	f7f9 f8d6 	bl	8000488 <__aeabi_dmul>
 80072dc:	a36e      	add	r3, pc, #440	; (adr r3, 8007498 <atan+0x2b8>)
 80072de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072e2:	f7f8 ff19 	bl	8000118 <__aeabi_dsub>
 80072e6:	4632      	mov	r2, r6
 80072e8:	463b      	mov	r3, r7
 80072ea:	f7f9 f8cd 	bl	8000488 <__aeabi_dmul>
 80072ee:	a36c      	add	r3, pc, #432	; (adr r3, 80074a0 <atan+0x2c0>)
 80072f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072f4:	f7f8 ff10 	bl	8000118 <__aeabi_dsub>
 80072f8:	4632      	mov	r2, r6
 80072fa:	463b      	mov	r3, r7
 80072fc:	f7f9 f8c4 	bl	8000488 <__aeabi_dmul>
 8007300:	a369      	add	r3, pc, #420	; (adr r3, 80074a8 <atan+0x2c8>)
 8007302:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007306:	f7f8 ff07 	bl	8000118 <__aeabi_dsub>
 800730a:	4632      	mov	r2, r6
 800730c:	463b      	mov	r3, r7
 800730e:	f7f9 f8bb 	bl	8000488 <__aeabi_dmul>
 8007312:	4602      	mov	r2, r0
 8007314:	460b      	mov	r3, r1
 8007316:	4640      	mov	r0, r8
 8007318:	4649      	mov	r1, r9
 800731a:	f7f8 feff 	bl	800011c <__adddf3>
 800731e:	4622      	mov	r2, r4
 8007320:	462b      	mov	r3, r5
 8007322:	f7f9 f8b1 	bl	8000488 <__aeabi_dmul>
 8007326:	f1bb 3fff 	cmp.w	fp, #4294967295	; 0xffffffff
 800732a:	4602      	mov	r2, r0
 800732c:	460b      	mov	r3, r1
 800732e:	d04f      	beq.n	80073d0 <atan+0x1f0>
 8007330:	4b66      	ldr	r3, [pc, #408]	; (80074cc <atan+0x2ec>)
 8007332:	4e67      	ldr	r6, [pc, #412]	; (80074d0 <atan+0x2f0>)
 8007334:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8007338:	e9d3 2300 	ldrd	r2, r3, [r3]
 800733c:	f7f8 feec 	bl	8000118 <__aeabi_dsub>
 8007340:	4622      	mov	r2, r4
 8007342:	462b      	mov	r3, r5
 8007344:	f7f8 fee8 	bl	8000118 <__aeabi_dsub>
 8007348:	eb06 06cb 	add.w	r6, r6, fp, lsl #3
 800734c:	4602      	mov	r2, r0
 800734e:	460b      	mov	r3, r1
 8007350:	e9d6 0100 	ldrd	r0, r1, [r6]
 8007354:	f7f8 fee0 	bl	8000118 <__aeabi_dsub>
 8007358:	f1ba 0f00 	cmp.w	sl, #0
 800735c:	f6bf af5f 	bge.w	800721e <atan+0x3e>
 8007360:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007364:	4619      	mov	r1, r3
 8007366:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800736a:	a351      	add	r3, pc, #324	; (adr r3, 80074b0 <atan+0x2d0>)
 800736c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007370:	f7f8 fed4 	bl	800011c <__adddf3>
 8007374:	2200      	movs	r2, #0
 8007376:	4b57      	ldr	r3, [pc, #348]	; (80074d4 <atan+0x2f4>)
 8007378:	f7f9 fb16 	bl	80009a8 <__aeabi_dcmpgt>
 800737c:	2800      	cmp	r0, #0
 800737e:	f43f af59 	beq.w	8007234 <atan+0x54>
 8007382:	4620      	mov	r0, r4
 8007384:	4629      	mov	r1, r5
 8007386:	e74a      	b.n	800721e <atan+0x3e>
 8007388:	a14b      	add	r1, pc, #300	; (adr r1, 80074b8 <atan+0x2d8>)
 800738a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800738e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007392:	f000 f8a9 	bl	80074e8 <fabs>
 8007396:	4b50      	ldr	r3, [pc, #320]	; (80074d8 <atan+0x2f8>)
 8007398:	4604      	mov	r4, r0
 800739a:	429e      	cmp	r6, r3
 800739c:	460d      	mov	r5, r1
 800739e:	d81d      	bhi.n	80073dc <atan+0x1fc>
 80073a0:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 80073a4:	429e      	cmp	r6, r3
 80073a6:	d844      	bhi.n	8007432 <atan+0x252>
 80073a8:	4602      	mov	r2, r0
 80073aa:	460b      	mov	r3, r1
 80073ac:	f7f8 feb6 	bl	800011c <__adddf3>
 80073b0:	2200      	movs	r2, #0
 80073b2:	4b48      	ldr	r3, [pc, #288]	; (80074d4 <atan+0x2f4>)
 80073b4:	f7f8 feb0 	bl	8000118 <__aeabi_dsub>
 80073b8:	4602      	mov	r2, r0
 80073ba:	460b      	mov	r3, r1
 80073bc:	4620      	mov	r0, r4
 80073be:	4629      	mov	r1, r5
 80073c0:	4614      	mov	r4, r2
 80073c2:	461d      	mov	r5, r3
 80073c4:	f04f 0b00 	mov.w	fp, #0
 80073c8:	2200      	movs	r2, #0
 80073ca:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80073ce:	e01a      	b.n	8007406 <atan+0x226>
 80073d0:	4620      	mov	r0, r4
 80073d2:	4629      	mov	r1, r5
 80073d4:	f7f8 fea0 	bl	8000118 <__aeabi_dsub>
 80073d8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073dc:	4b3f      	ldr	r3, [pc, #252]	; (80074dc <atan+0x2fc>)
 80073de:	429e      	cmp	r6, r3
 80073e0:	d21c      	bcs.n	800741c <atan+0x23c>
 80073e2:	2200      	movs	r2, #0
 80073e4:	4b3e      	ldr	r3, [pc, #248]	; (80074e0 <atan+0x300>)
 80073e6:	f7f8 fe97 	bl	8000118 <__aeabi_dsub>
 80073ea:	4602      	mov	r2, r0
 80073ec:	460b      	mov	r3, r1
 80073ee:	4620      	mov	r0, r4
 80073f0:	4629      	mov	r1, r5
 80073f2:	4614      	mov	r4, r2
 80073f4:	461d      	mov	r5, r3
 80073f6:	2200      	movs	r2, #0
 80073f8:	4b39      	ldr	r3, [pc, #228]	; (80074e0 <atan+0x300>)
 80073fa:	f04f 0b02 	mov.w	fp, #2
 80073fe:	f7f9 f843 	bl	8000488 <__aeabi_dmul>
 8007402:	2200      	movs	r2, #0
 8007404:	4b33      	ldr	r3, [pc, #204]	; (80074d4 <atan+0x2f4>)
 8007406:	f7f8 fe89 	bl	800011c <__adddf3>
 800740a:	4602      	mov	r2, r0
 800740c:	460b      	mov	r3, r1
 800740e:	4620      	mov	r0, r4
 8007410:	4629      	mov	r1, r5
 8007412:	f7f9 f963 	bl	80006dc <__aeabi_ddiv>
 8007416:	4604      	mov	r4, r0
 8007418:	460d      	mov	r5, r1
 800741a:	e70d      	b.n	8007238 <atan+0x58>
 800741c:	4602      	mov	r2, r0
 800741e:	460b      	mov	r3, r1
 8007420:	2000      	movs	r0, #0
 8007422:	4930      	ldr	r1, [pc, #192]	; (80074e4 <atan+0x304>)
 8007424:	f7f9 f95a 	bl	80006dc <__aeabi_ddiv>
 8007428:	f04f 0b03 	mov.w	fp, #3
 800742c:	4604      	mov	r4, r0
 800742e:	460d      	mov	r5, r1
 8007430:	e702      	b.n	8007238 <atan+0x58>
 8007432:	2200      	movs	r2, #0
 8007434:	4b27      	ldr	r3, [pc, #156]	; (80074d4 <atan+0x2f4>)
 8007436:	f7f8 fe6f 	bl	8000118 <__aeabi_dsub>
 800743a:	4602      	mov	r2, r0
 800743c:	460b      	mov	r3, r1
 800743e:	4620      	mov	r0, r4
 8007440:	4629      	mov	r1, r5
 8007442:	f04f 0b01 	mov.w	fp, #1
 8007446:	4614      	mov	r4, r2
 8007448:	461d      	mov	r5, r3
 800744a:	e7da      	b.n	8007402 <atan+0x222>
 800744c:	f3af 8000 	nop.w
 8007450:	54442d18 	.word	0x54442d18
 8007454:	3ff921fb 	.word	0x3ff921fb
 8007458:	e322da11 	.word	0xe322da11
 800745c:	3f90ad3a 	.word	0x3f90ad3a
 8007460:	24760deb 	.word	0x24760deb
 8007464:	3fa97b4b 	.word	0x3fa97b4b
 8007468:	a0d03d51 	.word	0xa0d03d51
 800746c:	3fb10d66 	.word	0x3fb10d66
 8007470:	c54c206e 	.word	0xc54c206e
 8007474:	3fb745cd 	.word	0x3fb745cd
 8007478:	920083ff 	.word	0x920083ff
 800747c:	3fc24924 	.word	0x3fc24924
 8007480:	5555550d 	.word	0x5555550d
 8007484:	3fd55555 	.word	0x3fd55555
 8007488:	2c6a6c2f 	.word	0x2c6a6c2f
 800748c:	bfa2b444 	.word	0xbfa2b444
 8007490:	52defd9a 	.word	0x52defd9a
 8007494:	3fadde2d 	.word	0x3fadde2d
 8007498:	af749a6d 	.word	0xaf749a6d
 800749c:	3fb3b0f2 	.word	0x3fb3b0f2
 80074a0:	fe231671 	.word	0xfe231671
 80074a4:	3fbc71c6 	.word	0x3fbc71c6
 80074a8:	9998ebc4 	.word	0x9998ebc4
 80074ac:	3fc99999 	.word	0x3fc99999
 80074b0:	8800759c 	.word	0x8800759c
 80074b4:	7e37e43c 	.word	0x7e37e43c
 80074b8:	54442d18 	.word	0x54442d18
 80074bc:	bff921fb 	.word	0xbff921fb
 80074c0:	440fffff 	.word	0x440fffff
 80074c4:	7ff00000 	.word	0x7ff00000
 80074c8:	3fdbffff 	.word	0x3fdbffff
 80074cc:	08008de0 	.word	0x08008de0
 80074d0:	08008e00 	.word	0x08008e00
 80074d4:	3ff00000 	.word	0x3ff00000
 80074d8:	3ff2ffff 	.word	0x3ff2ffff
 80074dc:	40038000 	.word	0x40038000
 80074e0:	3ff80000 	.word	0x3ff80000
 80074e4:	bff00000 	.word	0xbff00000

080074e8 <fabs>:
 80074e8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80074ec:	4619      	mov	r1, r3
 80074ee:	4770      	bx	lr

080074f0 <sin>:
 80074f0:	b530      	push	{r4, r5, lr}
 80074f2:	4a22      	ldr	r2, [pc, #136]	; (800757c <sin+0x8c>)
 80074f4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80074f8:	4293      	cmp	r3, r2
 80074fa:	b087      	sub	sp, #28
 80074fc:	d91c      	bls.n	8007538 <sin+0x48>
 80074fe:	4a20      	ldr	r2, [pc, #128]	; (8007580 <sin+0x90>)
 8007500:	4293      	cmp	r3, r2
 8007502:	d905      	bls.n	8007510 <sin+0x20>
 8007504:	4602      	mov	r2, r0
 8007506:	460b      	mov	r3, r1
 8007508:	f7f8 fe06 	bl	8000118 <__aeabi_dsub>
 800750c:	b007      	add	sp, #28
 800750e:	bd30      	pop	{r4, r5, pc}
 8007510:	aa02      	add	r2, sp, #8
 8007512:	f000 fbd1 	bl	8007cb8 <__ieee754_rem_pio2>
 8007516:	f000 0003 	and.w	r0, r0, #3
 800751a:	2801      	cmp	r0, #1
 800751c:	d014      	beq.n	8007548 <sin+0x58>
 800751e:	2802      	cmp	r0, #2
 8007520:	d022      	beq.n	8007568 <sin+0x78>
 8007522:	b1c0      	cbz	r0, 8007556 <sin+0x66>
 8007524:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007528:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800752c:	f000 f918 	bl	8007760 <__kernel_cos>
 8007530:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8007534:	b007      	add	sp, #28
 8007536:	bd30      	pop	{r4, r5, pc}
 8007538:	2400      	movs	r4, #0
 800753a:	2200      	movs	r2, #0
 800753c:	2300      	movs	r3, #0
 800753e:	9400      	str	r4, [sp, #0]
 8007540:	f000 fa36 	bl	80079b0 <__kernel_sin>
 8007544:	b007      	add	sp, #28
 8007546:	bd30      	pop	{r4, r5, pc}
 8007548:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800754c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007550:	f000 f906 	bl	8007760 <__kernel_cos>
 8007554:	e7da      	b.n	800750c <sin+0x1c>
 8007556:	2401      	movs	r4, #1
 8007558:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800755c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007560:	9400      	str	r4, [sp, #0]
 8007562:	f000 fa25 	bl	80079b0 <__kernel_sin>
 8007566:	e7d1      	b.n	800750c <sin+0x1c>
 8007568:	2401      	movs	r4, #1
 800756a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800756e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007572:	9400      	str	r4, [sp, #0]
 8007574:	f000 fa1c 	bl	80079b0 <__kernel_sin>
 8007578:	e7da      	b.n	8007530 <sin+0x40>
 800757a:	bf00      	nop
 800757c:	3fe921fb 	.word	0x3fe921fb
 8007580:	7fefffff 	.word	0x7fefffff

08007584 <__ieee754_sqrt>:
 8007584:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007588:	4f72      	ldr	r7, [pc, #456]	; (8007754 <__ieee754_sqrt+0x1d0>)
 800758a:	4604      	mov	r4, r0
 800758c:	438f      	bics	r7, r1
 800758e:	460d      	mov	r5, r1
 8007590:	f000 80b2 	beq.w	80076f8 <__ieee754_sqrt+0x174>
 8007594:	2900      	cmp	r1, #0
 8007596:	460b      	mov	r3, r1
 8007598:	4606      	mov	r6, r0
 800759a:	4602      	mov	r2, r0
 800759c:	dd55      	ble.n	800764a <__ieee754_sqrt+0xc6>
 800759e:	1508      	asrs	r0, r1, #20
 80075a0:	f000 809b 	beq.w	80076da <__ieee754_sqrt+0x156>
 80075a4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80075a8:	07c1      	lsls	r1, r0, #31
 80075aa:	f2a0 37ff 	subw	r7, r0, #1023	; 0x3ff
 80075ae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80075b2:	d403      	bmi.n	80075bc <__ieee754_sqrt+0x38>
 80075b4:	0fd1      	lsrs	r1, r2, #31
 80075b6:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 80075ba:	0052      	lsls	r2, r2, #1
 80075bc:	2600      	movs	r6, #0
 80075be:	2416      	movs	r4, #22
 80075c0:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80075c4:	46b4      	mov	ip, r6
 80075c6:	005b      	lsls	r3, r3, #1
 80075c8:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 80075cc:	107f      	asrs	r7, r7, #1
 80075ce:	0052      	lsls	r2, r2, #1
 80075d0:	eb0c 0001 	add.w	r0, ip, r1
 80075d4:	4298      	cmp	r0, r3
 80075d6:	dc03      	bgt.n	80075e0 <__ieee754_sqrt+0x5c>
 80075d8:	1a1b      	subs	r3, r3, r0
 80075da:	eb01 0c00 	add.w	ip, r1, r0
 80075de:	440e      	add	r6, r1
 80075e0:	005b      	lsls	r3, r3, #1
 80075e2:	3c01      	subs	r4, #1
 80075e4:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 80075e8:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80075ec:	ea4f 0242 	mov.w	r2, r2, lsl #1
 80075f0:	d1ee      	bne.n	80075d0 <__ieee754_sqrt+0x4c>
 80075f2:	2520      	movs	r5, #32
 80075f4:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 80075f8:	46a0      	mov	r8, r4
 80075fa:	e00a      	b.n	8007612 <__ieee754_sqrt+0x8e>
 80075fc:	d039      	beq.n	8007672 <__ieee754_sqrt+0xee>
 80075fe:	0059      	lsls	r1, r3, #1
 8007600:	eb01 71d2 	add.w	r1, r1, r2, lsr #31
 8007604:	3d01      	subs	r5, #1
 8007606:	460b      	mov	r3, r1
 8007608:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800760c:	ea4f 0050 	mov.w	r0, r0, lsr #1
 8007610:	d03b      	beq.n	800768a <__ieee754_sqrt+0x106>
 8007612:	459c      	cmp	ip, r3
 8007614:	eb08 0e00 	add.w	lr, r8, r0
 8007618:	daf0      	bge.n	80075fc <__ieee754_sqrt+0x78>
 800761a:	f1be 0f00 	cmp.w	lr, #0
 800761e:	eb0e 0800 	add.w	r8, lr, r0
 8007622:	db0c      	blt.n	800763e <__ieee754_sqrt+0xba>
 8007624:	46e1      	mov	r9, ip
 8007626:	eba3 010c 	sub.w	r1, r3, ip
 800762a:	46cc      	mov	ip, r9
 800762c:	4596      	cmp	lr, r2
 800762e:	bf88      	it	hi
 8007630:	f101 31ff 	addhi.w	r1, r1, #4294967295	; 0xffffffff
 8007634:	0049      	lsls	r1, r1, #1
 8007636:	eba2 020e 	sub.w	r2, r2, lr
 800763a:	4404      	add	r4, r0
 800763c:	e7e0      	b.n	8007600 <__ieee754_sqrt+0x7c>
 800763e:	f1b8 0f00 	cmp.w	r8, #0
 8007642:	dbef      	blt.n	8007624 <__ieee754_sqrt+0xa0>
 8007644:	f10c 0901 	add.w	r9, ip, #1
 8007648:	e7ed      	b.n	8007626 <__ieee754_sqrt+0xa2>
 800764a:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 800764e:	4307      	orrs	r7, r0
 8007650:	d03d      	beq.n	80076ce <__ieee754_sqrt+0x14a>
 8007652:	2900      	cmp	r1, #0
 8007654:	d173      	bne.n	800773e <__ieee754_sqrt+0x1ba>
 8007656:	0ad1      	lsrs	r1, r2, #11
 8007658:	3b15      	subs	r3, #21
 800765a:	0552      	lsls	r2, r2, #21
 800765c:	2900      	cmp	r1, #0
 800765e:	d0fa      	beq.n	8007656 <__ieee754_sqrt+0xd2>
 8007660:	02cd      	lsls	r5, r1, #11
 8007662:	4618      	mov	r0, r3
 8007664:	4616      	mov	r6, r2
 8007666:	460b      	mov	r3, r1
 8007668:	d537      	bpl.n	80076da <__ieee754_sqrt+0x156>
 800766a:	2420      	movs	r4, #32
 800766c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8007670:	e03e      	b.n	80076f0 <__ieee754_sqrt+0x16c>
 8007672:	4596      	cmp	lr, r2
 8007674:	d902      	bls.n	800767c <__ieee754_sqrt+0xf8>
 8007676:	ea4f 014c 	mov.w	r1, ip, lsl #1
 800767a:	e7c1      	b.n	8007600 <__ieee754_sqrt+0x7c>
 800767c:	f1be 0f00 	cmp.w	lr, #0
 8007680:	eb0e 0800 	add.w	r8, lr, r0
 8007684:	db25      	blt.n	80076d2 <__ieee754_sqrt+0x14e>
 8007686:	2100      	movs	r1, #0
 8007688:	e7d5      	b.n	8007636 <__ieee754_sqrt+0xb2>
 800768a:	4311      	orrs	r1, r2
 800768c:	d012      	beq.n	80076b4 <__ieee754_sqrt+0x130>
 800768e:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007758 <__ieee754_sqrt+0x1d4>
 8007692:	f8df b0c8 	ldr.w	fp, [pc, #200]	; 800775c <__ieee754_sqrt+0x1d8>
 8007696:	e9da 0100 	ldrd	r0, r1, [sl]
 800769a:	e9db 2300 	ldrd	r2, r3, [fp]
 800769e:	f7f8 fd3b 	bl	8000118 <__aeabi_dsub>
 80076a2:	e9da 8900 	ldrd	r8, r9, [sl]
 80076a6:	4602      	mov	r2, r0
 80076a8:	460b      	mov	r3, r1
 80076aa:	4640      	mov	r0, r8
 80076ac:	4649      	mov	r1, r9
 80076ae:	f7f9 f967 	bl	8000980 <__aeabi_dcmple>
 80076b2:	bb58      	cbnz	r0, 800770c <__ieee754_sqrt+0x188>
 80076b4:	0865      	lsrs	r5, r4, #1
 80076b6:	07f2      	lsls	r2, r6, #31
 80076b8:	bf48      	it	mi
 80076ba:	f045 4500 	orrmi.w	r5, r5, #2147483648	; 0x80000000
 80076be:	4628      	mov	r0, r5
 80076c0:	1073      	asrs	r3, r6, #1
 80076c2:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80076c6:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80076ca:	eb03 5107 	add.w	r1, r3, r7, lsl #20
 80076ce:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076d2:	f1b8 0f00 	cmp.w	r8, #0
 80076d6:	dab5      	bge.n	8007644 <__ieee754_sqrt+0xc0>
 80076d8:	e7d5      	b.n	8007686 <__ieee754_sqrt+0x102>
 80076da:	2200      	movs	r2, #0
 80076dc:	005b      	lsls	r3, r3, #1
 80076de:	02dc      	lsls	r4, r3, #11
 80076e0:	4611      	mov	r1, r2
 80076e2:	f102 0201 	add.w	r2, r2, #1
 80076e6:	d5f9      	bpl.n	80076dc <__ieee754_sqrt+0x158>
 80076e8:	f1c2 0420 	rsb	r4, r2, #32
 80076ec:	fa06 f202 	lsl.w	r2, r6, r2
 80076f0:	40e6      	lsrs	r6, r4
 80076f2:	1a40      	subs	r0, r0, r1
 80076f4:	4333      	orrs	r3, r6
 80076f6:	e755      	b.n	80075a4 <__ieee754_sqrt+0x20>
 80076f8:	4602      	mov	r2, r0
 80076fa:	460b      	mov	r3, r1
 80076fc:	f7f8 fec4 	bl	8000488 <__aeabi_dmul>
 8007700:	4622      	mov	r2, r4
 8007702:	462b      	mov	r3, r5
 8007704:	f7f8 fd0a 	bl	800011c <__adddf3>
 8007708:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800770c:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 8007710:	e9da 0100 	ldrd	r0, r1, [sl]
 8007714:	e9db 2300 	ldrd	r2, r3, [fp]
 8007718:	d018      	beq.n	800774c <__ieee754_sqrt+0x1c8>
 800771a:	e9da 8900 	ldrd	r8, r9, [sl]
 800771e:	f7f8 fcfd 	bl	800011c <__adddf3>
 8007722:	4602      	mov	r2, r0
 8007724:	460b      	mov	r3, r1
 8007726:	4640      	mov	r0, r8
 8007728:	4649      	mov	r1, r9
 800772a:	f7f9 f91f 	bl	800096c <__aeabi_dcmplt>
 800772e:	b178      	cbz	r0, 8007750 <__ieee754_sqrt+0x1cc>
 8007730:	1ca1      	adds	r1, r4, #2
 8007732:	f104 0502 	add.w	r5, r4, #2
 8007736:	bf08      	it	eq
 8007738:	3601      	addeq	r6, #1
 800773a:	086d      	lsrs	r5, r5, #1
 800773c:	e7bb      	b.n	80076b6 <__ieee754_sqrt+0x132>
 800773e:	f7f8 fceb 	bl	8000118 <__aeabi_dsub>
 8007742:	4602      	mov	r2, r0
 8007744:	460b      	mov	r3, r1
 8007746:	f7f8 ffc9 	bl	80006dc <__aeabi_ddiv>
 800774a:	e7c0      	b.n	80076ce <__ieee754_sqrt+0x14a>
 800774c:	3601      	adds	r6, #1
 800774e:	e7b2      	b.n	80076b6 <__ieee754_sqrt+0x132>
 8007750:	3401      	adds	r4, #1
 8007752:	e7af      	b.n	80076b4 <__ieee754_sqrt+0x130>
 8007754:	7ff00000 	.word	0x7ff00000
 8007758:	200001d8 	.word	0x200001d8
 800775c:	200001d0 	.word	0x200001d0

08007760 <__kernel_cos>:
 8007760:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007764:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
 8007768:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800776c:	4606      	mov	r6, r0
 800776e:	460f      	mov	r7, r1
 8007770:	4692      	mov	sl, r2
 8007772:	469b      	mov	fp, r3
 8007774:	b085      	sub	sp, #20
 8007776:	d26d      	bcs.n	8007854 <__kernel_cos+0xf4>
 8007778:	f7f9 f936 	bl	80009e8 <__aeabi_d2iz>
 800777c:	2800      	cmp	r0, #0
 800777e:	f000 80ed 	beq.w	800795c <__kernel_cos+0x1fc>
 8007782:	4632      	mov	r2, r6
 8007784:	463b      	mov	r3, r7
 8007786:	4630      	mov	r0, r6
 8007788:	4639      	mov	r1, r7
 800778a:	f7f8 fe7d 	bl	8000488 <__aeabi_dmul>
 800778e:	a376      	add	r3, pc, #472	; (adr r3, 8007968 <__kernel_cos+0x208>)
 8007790:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007794:	4604      	mov	r4, r0
 8007796:	460d      	mov	r5, r1
 8007798:	f7f8 fe76 	bl	8000488 <__aeabi_dmul>
 800779c:	a374      	add	r3, pc, #464	; (adr r3, 8007970 <__kernel_cos+0x210>)
 800779e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077a2:	f7f8 fcbb 	bl	800011c <__adddf3>
 80077a6:	4622      	mov	r2, r4
 80077a8:	462b      	mov	r3, r5
 80077aa:	f7f8 fe6d 	bl	8000488 <__aeabi_dmul>
 80077ae:	a372      	add	r3, pc, #456	; (adr r3, 8007978 <__kernel_cos+0x218>)
 80077b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077b4:	f7f8 fcb0 	bl	8000118 <__aeabi_dsub>
 80077b8:	4622      	mov	r2, r4
 80077ba:	462b      	mov	r3, r5
 80077bc:	f7f8 fe64 	bl	8000488 <__aeabi_dmul>
 80077c0:	a36f      	add	r3, pc, #444	; (adr r3, 8007980 <__kernel_cos+0x220>)
 80077c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077c6:	f7f8 fca9 	bl	800011c <__adddf3>
 80077ca:	4622      	mov	r2, r4
 80077cc:	462b      	mov	r3, r5
 80077ce:	f7f8 fe5b 	bl	8000488 <__aeabi_dmul>
 80077d2:	a36d      	add	r3, pc, #436	; (adr r3, 8007988 <__kernel_cos+0x228>)
 80077d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077d8:	f7f8 fc9e 	bl	8000118 <__aeabi_dsub>
 80077dc:	4622      	mov	r2, r4
 80077de:	462b      	mov	r3, r5
 80077e0:	f7f8 fe52 	bl	8000488 <__aeabi_dmul>
 80077e4:	a36a      	add	r3, pc, #424	; (adr r3, 8007990 <__kernel_cos+0x230>)
 80077e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077ea:	f7f8 fc97 	bl	800011c <__adddf3>
 80077ee:	4622      	mov	r2, r4
 80077f0:	462b      	mov	r3, r5
 80077f2:	f7f8 fe49 	bl	8000488 <__aeabi_dmul>
 80077f6:	e9cd 0100 	strd	r0, r1, [sp]
 80077fa:	2200      	movs	r2, #0
 80077fc:	4620      	mov	r0, r4
 80077fe:	4629      	mov	r1, r5
 8007800:	4b65      	ldr	r3, [pc, #404]	; (8007998 <__kernel_cos+0x238>)
 8007802:	f7f8 fe41 	bl	8000488 <__aeabi_dmul>
 8007806:	e9dd 2300 	ldrd	r2, r3, [sp]
 800780a:	4680      	mov	r8, r0
 800780c:	4689      	mov	r9, r1
 800780e:	4620      	mov	r0, r4
 8007810:	4629      	mov	r1, r5
 8007812:	f7f8 fe39 	bl	8000488 <__aeabi_dmul>
 8007816:	4644      	mov	r4, r8
 8007818:	464d      	mov	r5, r9
 800781a:	4680      	mov	r8, r0
 800781c:	4689      	mov	r9, r1
 800781e:	4652      	mov	r2, sl
 8007820:	465b      	mov	r3, fp
 8007822:	4630      	mov	r0, r6
 8007824:	4639      	mov	r1, r7
 8007826:	f7f8 fe2f 	bl	8000488 <__aeabi_dmul>
 800782a:	4602      	mov	r2, r0
 800782c:	460b      	mov	r3, r1
 800782e:	4640      	mov	r0, r8
 8007830:	4649      	mov	r1, r9
 8007832:	f7f8 fc71 	bl	8000118 <__aeabi_dsub>
 8007836:	4602      	mov	r2, r0
 8007838:	460b      	mov	r3, r1
 800783a:	4620      	mov	r0, r4
 800783c:	4629      	mov	r1, r5
 800783e:	f7f8 fc6b 	bl	8000118 <__aeabi_dsub>
 8007842:	4602      	mov	r2, r0
 8007844:	460b      	mov	r3, r1
 8007846:	2000      	movs	r0, #0
 8007848:	4954      	ldr	r1, [pc, #336]	; (800799c <__kernel_cos+0x23c>)
 800784a:	f7f8 fc65 	bl	8000118 <__aeabi_dsub>
 800784e:	b005      	add	sp, #20
 8007850:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007854:	4602      	mov	r2, r0
 8007856:	460b      	mov	r3, r1
 8007858:	f7f8 fe16 	bl	8000488 <__aeabi_dmul>
 800785c:	a342      	add	r3, pc, #264	; (adr r3, 8007968 <__kernel_cos+0x208>)
 800785e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007862:	4604      	mov	r4, r0
 8007864:	460d      	mov	r5, r1
 8007866:	f7f8 fe0f 	bl	8000488 <__aeabi_dmul>
 800786a:	a341      	add	r3, pc, #260	; (adr r3, 8007970 <__kernel_cos+0x210>)
 800786c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007870:	f7f8 fc54 	bl	800011c <__adddf3>
 8007874:	4622      	mov	r2, r4
 8007876:	462b      	mov	r3, r5
 8007878:	f7f8 fe06 	bl	8000488 <__aeabi_dmul>
 800787c:	a33e      	add	r3, pc, #248	; (adr r3, 8007978 <__kernel_cos+0x218>)
 800787e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007882:	f7f8 fc49 	bl	8000118 <__aeabi_dsub>
 8007886:	4622      	mov	r2, r4
 8007888:	462b      	mov	r3, r5
 800788a:	f7f8 fdfd 	bl	8000488 <__aeabi_dmul>
 800788e:	a33c      	add	r3, pc, #240	; (adr r3, 8007980 <__kernel_cos+0x220>)
 8007890:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007894:	f7f8 fc42 	bl	800011c <__adddf3>
 8007898:	4622      	mov	r2, r4
 800789a:	462b      	mov	r3, r5
 800789c:	f7f8 fdf4 	bl	8000488 <__aeabi_dmul>
 80078a0:	a339      	add	r3, pc, #228	; (adr r3, 8007988 <__kernel_cos+0x228>)
 80078a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078a6:	f7f8 fc37 	bl	8000118 <__aeabi_dsub>
 80078aa:	4622      	mov	r2, r4
 80078ac:	462b      	mov	r3, r5
 80078ae:	f7f8 fdeb 	bl	8000488 <__aeabi_dmul>
 80078b2:	a337      	add	r3, pc, #220	; (adr r3, 8007990 <__kernel_cos+0x230>)
 80078b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078b8:	f7f8 fc30 	bl	800011c <__adddf3>
 80078bc:	462b      	mov	r3, r5
 80078be:	4622      	mov	r2, r4
 80078c0:	f7f8 fde2 	bl	8000488 <__aeabi_dmul>
 80078c4:	4b36      	ldr	r3, [pc, #216]	; (80079a0 <__kernel_cos+0x240>)
 80078c6:	e9cd 0100 	strd	r0, r1, [sp]
 80078ca:	4598      	cmp	r8, r3
 80078cc:	d995      	bls.n	80077fa <__kernel_cos+0x9a>
 80078ce:	4b35      	ldr	r3, [pc, #212]	; (80079a4 <__kernel_cos+0x244>)
 80078d0:	2200      	movs	r2, #0
 80078d2:	4598      	cmp	r8, r3
 80078d4:	d83a      	bhi.n	800794c <__kernel_cos+0x1ec>
 80078d6:	f5a8 1300 	sub.w	r3, r8, #2097152	; 0x200000
 80078da:	2000      	movs	r0, #0
 80078dc:	492f      	ldr	r1, [pc, #188]	; (800799c <__kernel_cos+0x23c>)
 80078de:	4690      	mov	r8, r2
 80078e0:	4699      	mov	r9, r3
 80078e2:	f7f8 fc19 	bl	8000118 <__aeabi_dsub>
 80078e6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80078ea:	2200      	movs	r2, #0
 80078ec:	4620      	mov	r0, r4
 80078ee:	4629      	mov	r1, r5
 80078f0:	4b29      	ldr	r3, [pc, #164]	; (8007998 <__kernel_cos+0x238>)
 80078f2:	f7f8 fdc9 	bl	8000488 <__aeabi_dmul>
 80078f6:	4642      	mov	r2, r8
 80078f8:	464b      	mov	r3, r9
 80078fa:	f7f8 fc0d 	bl	8000118 <__aeabi_dsub>
 80078fe:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007902:	4680      	mov	r8, r0
 8007904:	4689      	mov	r9, r1
 8007906:	4620      	mov	r0, r4
 8007908:	4629      	mov	r1, r5
 800790a:	f7f8 fdbd 	bl	8000488 <__aeabi_dmul>
 800790e:	4644      	mov	r4, r8
 8007910:	464d      	mov	r5, r9
 8007912:	4680      	mov	r8, r0
 8007914:	4689      	mov	r9, r1
 8007916:	4652      	mov	r2, sl
 8007918:	465b      	mov	r3, fp
 800791a:	4630      	mov	r0, r6
 800791c:	4639      	mov	r1, r7
 800791e:	f7f8 fdb3 	bl	8000488 <__aeabi_dmul>
 8007922:	4602      	mov	r2, r0
 8007924:	460b      	mov	r3, r1
 8007926:	4640      	mov	r0, r8
 8007928:	4649      	mov	r1, r9
 800792a:	f7f8 fbf5 	bl	8000118 <__aeabi_dsub>
 800792e:	4602      	mov	r2, r0
 8007930:	460b      	mov	r3, r1
 8007932:	4620      	mov	r0, r4
 8007934:	4629      	mov	r1, r5
 8007936:	f7f8 fbef 	bl	8000118 <__aeabi_dsub>
 800793a:	4602      	mov	r2, r0
 800793c:	460b      	mov	r3, r1
 800793e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007942:	f7f8 fbe9 	bl	8000118 <__aeabi_dsub>
 8007946:	b005      	add	sp, #20
 8007948:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800794c:	4b16      	ldr	r3, [pc, #88]	; (80079a8 <__kernel_cos+0x248>)
 800794e:	f04f 0800 	mov.w	r8, #0
 8007952:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007956:	f8df 9054 	ldr.w	r9, [pc, #84]	; 80079ac <__kernel_cos+0x24c>
 800795a:	e7c6      	b.n	80078ea <__kernel_cos+0x18a>
 800795c:	2000      	movs	r0, #0
 800795e:	490f      	ldr	r1, [pc, #60]	; (800799c <__kernel_cos+0x23c>)
 8007960:	b005      	add	sp, #20
 8007962:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007966:	bf00      	nop
 8007968:	be8838d4 	.word	0xbe8838d4
 800796c:	bda8fae9 	.word	0xbda8fae9
 8007970:	bdb4b1c4 	.word	0xbdb4b1c4
 8007974:	3e21ee9e 	.word	0x3e21ee9e
 8007978:	809c52ad 	.word	0x809c52ad
 800797c:	3e927e4f 	.word	0x3e927e4f
 8007980:	19cb1590 	.word	0x19cb1590
 8007984:	3efa01a0 	.word	0x3efa01a0
 8007988:	16c15177 	.word	0x16c15177
 800798c:	3f56c16c 	.word	0x3f56c16c
 8007990:	5555554c 	.word	0x5555554c
 8007994:	3fa55555 	.word	0x3fa55555
 8007998:	3fe00000 	.word	0x3fe00000
 800799c:	3ff00000 	.word	0x3ff00000
 80079a0:	3fd33332 	.word	0x3fd33332
 80079a4:	3fe90000 	.word	0x3fe90000
 80079a8:	3fe70000 	.word	0x3fe70000
 80079ac:	3fd20000 	.word	0x3fd20000

080079b0 <__kernel_sin>:
 80079b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079b4:	b083      	sub	sp, #12
 80079b6:	e9cd 2300 	strd	r2, r3, [sp]
 80079ba:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80079be:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 80079c2:	4604      	mov	r4, r0
 80079c4:	460d      	mov	r5, r1
 80079c6:	d204      	bcs.n	80079d2 <__kernel_sin+0x22>
 80079c8:	f7f9 f80e 	bl	80009e8 <__aeabi_d2iz>
 80079cc:	2800      	cmp	r0, #0
 80079ce:	f000 8085 	beq.w	8007adc <__kernel_sin+0x12c>
 80079d2:	4622      	mov	r2, r4
 80079d4:	462b      	mov	r3, r5
 80079d6:	4620      	mov	r0, r4
 80079d8:	4629      	mov	r1, r5
 80079da:	f7f8 fd55 	bl	8000488 <__aeabi_dmul>
 80079de:	4606      	mov	r6, r0
 80079e0:	460f      	mov	r7, r1
 80079e2:	4632      	mov	r2, r6
 80079e4:	463b      	mov	r3, r7
 80079e6:	4620      	mov	r0, r4
 80079e8:	4629      	mov	r1, r5
 80079ea:	f7f8 fd4d 	bl	8000488 <__aeabi_dmul>
 80079ee:	a33e      	add	r3, pc, #248	; (adr r3, 8007ae8 <__kernel_sin+0x138>)
 80079f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079f4:	4682      	mov	sl, r0
 80079f6:	468b      	mov	fp, r1
 80079f8:	4630      	mov	r0, r6
 80079fa:	4639      	mov	r1, r7
 80079fc:	f7f8 fd44 	bl	8000488 <__aeabi_dmul>
 8007a00:	a33b      	add	r3, pc, #236	; (adr r3, 8007af0 <__kernel_sin+0x140>)
 8007a02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a06:	f7f8 fb87 	bl	8000118 <__aeabi_dsub>
 8007a0a:	4632      	mov	r2, r6
 8007a0c:	463b      	mov	r3, r7
 8007a0e:	f7f8 fd3b 	bl	8000488 <__aeabi_dmul>
 8007a12:	a339      	add	r3, pc, #228	; (adr r3, 8007af8 <__kernel_sin+0x148>)
 8007a14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a18:	f7f8 fb80 	bl	800011c <__adddf3>
 8007a1c:	4632      	mov	r2, r6
 8007a1e:	463b      	mov	r3, r7
 8007a20:	f7f8 fd32 	bl	8000488 <__aeabi_dmul>
 8007a24:	a336      	add	r3, pc, #216	; (adr r3, 8007b00 <__kernel_sin+0x150>)
 8007a26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a2a:	f7f8 fb75 	bl	8000118 <__aeabi_dsub>
 8007a2e:	4632      	mov	r2, r6
 8007a30:	463b      	mov	r3, r7
 8007a32:	f7f8 fd29 	bl	8000488 <__aeabi_dmul>
 8007a36:	a334      	add	r3, pc, #208	; (adr r3, 8007b08 <__kernel_sin+0x158>)
 8007a38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a3c:	f7f8 fb6e 	bl	800011c <__adddf3>
 8007a40:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007a42:	4680      	mov	r8, r0
 8007a44:	4689      	mov	r9, r1
 8007a46:	b39b      	cbz	r3, 8007ab0 <__kernel_sin+0x100>
 8007a48:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007a4c:	2200      	movs	r2, #0
 8007a4e:	4b32      	ldr	r3, [pc, #200]	; (8007b18 <__kernel_sin+0x168>)
 8007a50:	f7f8 fd1a 	bl	8000488 <__aeabi_dmul>
 8007a54:	4642      	mov	r2, r8
 8007a56:	464b      	mov	r3, r9
 8007a58:	4680      	mov	r8, r0
 8007a5a:	4689      	mov	r9, r1
 8007a5c:	4650      	mov	r0, sl
 8007a5e:	4659      	mov	r1, fp
 8007a60:	f7f8 fd12 	bl	8000488 <__aeabi_dmul>
 8007a64:	4602      	mov	r2, r0
 8007a66:	460b      	mov	r3, r1
 8007a68:	4640      	mov	r0, r8
 8007a6a:	4649      	mov	r1, r9
 8007a6c:	f7f8 fb54 	bl	8000118 <__aeabi_dsub>
 8007a70:	4632      	mov	r2, r6
 8007a72:	463b      	mov	r3, r7
 8007a74:	f7f8 fd08 	bl	8000488 <__aeabi_dmul>
 8007a78:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007a7c:	f7f8 fb4c 	bl	8000118 <__aeabi_dsub>
 8007a80:	a323      	add	r3, pc, #140	; (adr r3, 8007b10 <__kernel_sin+0x160>)
 8007a82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a86:	4606      	mov	r6, r0
 8007a88:	460f      	mov	r7, r1
 8007a8a:	4650      	mov	r0, sl
 8007a8c:	4659      	mov	r1, fp
 8007a8e:	f7f8 fcfb 	bl	8000488 <__aeabi_dmul>
 8007a92:	4602      	mov	r2, r0
 8007a94:	460b      	mov	r3, r1
 8007a96:	4630      	mov	r0, r6
 8007a98:	4639      	mov	r1, r7
 8007a9a:	f7f8 fb3f 	bl	800011c <__adddf3>
 8007a9e:	4602      	mov	r2, r0
 8007aa0:	460b      	mov	r3, r1
 8007aa2:	4620      	mov	r0, r4
 8007aa4:	4629      	mov	r1, r5
 8007aa6:	f7f8 fb37 	bl	8000118 <__aeabi_dsub>
 8007aaa:	b003      	add	sp, #12
 8007aac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ab0:	4602      	mov	r2, r0
 8007ab2:	460b      	mov	r3, r1
 8007ab4:	4630      	mov	r0, r6
 8007ab6:	4639      	mov	r1, r7
 8007ab8:	f7f8 fce6 	bl	8000488 <__aeabi_dmul>
 8007abc:	a314      	add	r3, pc, #80	; (adr r3, 8007b10 <__kernel_sin+0x160>)
 8007abe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ac2:	f7f8 fb29 	bl	8000118 <__aeabi_dsub>
 8007ac6:	4652      	mov	r2, sl
 8007ac8:	465b      	mov	r3, fp
 8007aca:	f7f8 fcdd 	bl	8000488 <__aeabi_dmul>
 8007ace:	4622      	mov	r2, r4
 8007ad0:	462b      	mov	r3, r5
 8007ad2:	f7f8 fb23 	bl	800011c <__adddf3>
 8007ad6:	b003      	add	sp, #12
 8007ad8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007adc:	4620      	mov	r0, r4
 8007ade:	4629      	mov	r1, r5
 8007ae0:	b003      	add	sp, #12
 8007ae2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ae6:	bf00      	nop
 8007ae8:	5acfd57c 	.word	0x5acfd57c
 8007aec:	3de5d93a 	.word	0x3de5d93a
 8007af0:	8a2b9ceb 	.word	0x8a2b9ceb
 8007af4:	3e5ae5e6 	.word	0x3e5ae5e6
 8007af8:	57b1fe7d 	.word	0x57b1fe7d
 8007afc:	3ec71de3 	.word	0x3ec71de3
 8007b00:	19c161d5 	.word	0x19c161d5
 8007b04:	3f2a01a0 	.word	0x3f2a01a0
 8007b08:	1110f8a6 	.word	0x1110f8a6
 8007b0c:	3f811111 	.word	0x3f811111
 8007b10:	55555549 	.word	0x55555549
 8007b14:	3fc55555 	.word	0x3fc55555
 8007b18:	3fe00000 	.word	0x3fe00000
 8007b1c:	00000000 	.word	0x00000000

08007b20 <__ieee754_atan2>:
 8007b20:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b24:	4699      	mov	r9, r3
 8007b26:	4253      	negs	r3, r2
 8007b28:	4f5f      	ldr	r7, [pc, #380]	; (8007ca8 <__ieee754_atan2+0x188>)
 8007b2a:	4313      	orrs	r3, r2
 8007b2c:	f029 4e00 	bic.w	lr, r9, #2147483648	; 0x80000000
 8007b30:	ea4e 73d3 	orr.w	r3, lr, r3, lsr #31
 8007b34:	42bb      	cmp	r3, r7
 8007b36:	4604      	mov	r4, r0
 8007b38:	460d      	mov	r5, r1
 8007b3a:	4690      	mov	r8, r2
 8007b3c:	d83d      	bhi.n	8007bba <__ieee754_atan2+0x9a>
 8007b3e:	4246      	negs	r6, r0
 8007b40:	4306      	orrs	r6, r0
 8007b42:	f021 4a00 	bic.w	sl, r1, #2147483648	; 0x80000000
 8007b46:	ea4a 76d6 	orr.w	r6, sl, r6, lsr #31
 8007b4a:	42be      	cmp	r6, r7
 8007b4c:	4603      	mov	r3, r0
 8007b4e:	468b      	mov	fp, r1
 8007b50:	d833      	bhi.n	8007bba <__ieee754_atan2+0x9a>
 8007b52:	f109 4640 	add.w	r6, r9, #3221225472	; 0xc0000000
 8007b56:	f506 1680 	add.w	r6, r6, #1048576	; 0x100000
 8007b5a:	4316      	orrs	r6, r2
 8007b5c:	d03d      	beq.n	8007bda <__ieee754_atan2+0xba>
 8007b5e:	ea4f 76a9 	mov.w	r6, r9, asr #30
 8007b62:	f006 0602 	and.w	r6, r6, #2
 8007b66:	ea5a 0303 	orrs.w	r3, sl, r3
 8007b6a:	ea46 76d1 	orr.w	r6, r6, r1, lsr #31
 8007b6e:	d02c      	beq.n	8007bca <__ieee754_atan2+0xaa>
 8007b70:	ea5e 0202 	orrs.w	r2, lr, r2
 8007b74:	d035      	beq.n	8007be2 <__ieee754_atan2+0xc2>
 8007b76:	45be      	cmp	lr, r7
 8007b78:	d046      	beq.n	8007c08 <__ieee754_atan2+0xe8>
 8007b7a:	45ba      	cmp	sl, r7
 8007b7c:	d031      	beq.n	8007be2 <__ieee754_atan2+0xc2>
 8007b7e:	ebaa 0a0e 	sub.w	sl, sl, lr
 8007b82:	f1ba 7f74 	cmp.w	sl, #63963136	; 0x3d00000
 8007b86:	ea4f 532a 	mov.w	r3, sl, asr #20
 8007b8a:	da39      	bge.n	8007c00 <__ieee754_atan2+0xe0>
 8007b8c:	f1b9 0f00 	cmp.w	r9, #0
 8007b90:	da46      	bge.n	8007c20 <__ieee754_atan2+0x100>
 8007b92:	333c      	adds	r3, #60	; 0x3c
 8007b94:	da44      	bge.n	8007c20 <__ieee754_atan2+0x100>
 8007b96:	2000      	movs	r0, #0
 8007b98:	2100      	movs	r1, #0
 8007b9a:	2e01      	cmp	r6, #1
 8007b9c:	d058      	beq.n	8007c50 <__ieee754_atan2+0x130>
 8007b9e:	2e02      	cmp	r6, #2
 8007ba0:	d049      	beq.n	8007c36 <__ieee754_atan2+0x116>
 8007ba2:	b186      	cbz	r6, 8007bc6 <__ieee754_atan2+0xa6>
 8007ba4:	a334      	add	r3, pc, #208	; (adr r3, 8007c78 <__ieee754_atan2+0x158>)
 8007ba6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007baa:	f7f8 fab5 	bl	8000118 <__aeabi_dsub>
 8007bae:	a334      	add	r3, pc, #208	; (adr r3, 8007c80 <__ieee754_atan2+0x160>)
 8007bb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bb4:	f7f8 fab0 	bl	8000118 <__aeabi_dsub>
 8007bb8:	e005      	b.n	8007bc6 <__ieee754_atan2+0xa6>
 8007bba:	4622      	mov	r2, r4
 8007bbc:	462b      	mov	r3, r5
 8007bbe:	4640      	mov	r0, r8
 8007bc0:	4649      	mov	r1, r9
 8007bc2:	f7f8 faab 	bl	800011c <__adddf3>
 8007bc6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007bca:	2e02      	cmp	r6, #2
 8007bcc:	d010      	beq.n	8007bf0 <__ieee754_atan2+0xd0>
 8007bce:	2e03      	cmp	r6, #3
 8007bd0:	d1f9      	bne.n	8007bc6 <__ieee754_atan2+0xa6>
 8007bd2:	a12d      	add	r1, pc, #180	; (adr r1, 8007c88 <__ieee754_atan2+0x168>)
 8007bd4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007bd8:	e7f5      	b.n	8007bc6 <__ieee754_atan2+0xa6>
 8007bda:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007bde:	f7ff baff 	b.w	80071e0 <atan>
 8007be2:	f1bb 0f00 	cmp.w	fp, #0
 8007be6:	db07      	blt.n	8007bf8 <__ieee754_atan2+0xd8>
 8007be8:	a129      	add	r1, pc, #164	; (adr r1, 8007c90 <__ieee754_atan2+0x170>)
 8007bea:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007bee:	e7ea      	b.n	8007bc6 <__ieee754_atan2+0xa6>
 8007bf0:	a123      	add	r1, pc, #140	; (adr r1, 8007c80 <__ieee754_atan2+0x160>)
 8007bf2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007bf6:	e7e6      	b.n	8007bc6 <__ieee754_atan2+0xa6>
 8007bf8:	a127      	add	r1, pc, #156	; (adr r1, 8007c98 <__ieee754_atan2+0x178>)
 8007bfa:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007bfe:	e7e2      	b.n	8007bc6 <__ieee754_atan2+0xa6>
 8007c00:	a123      	add	r1, pc, #140	; (adr r1, 8007c90 <__ieee754_atan2+0x170>)
 8007c02:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007c06:	e7c8      	b.n	8007b9a <__ieee754_atan2+0x7a>
 8007c08:	45f2      	cmp	sl, lr
 8007c0a:	f106 36ff 	add.w	r6, r6, #4294967295	; 0xffffffff
 8007c0e:	d023      	beq.n	8007c58 <__ieee754_atan2+0x138>
 8007c10:	2e02      	cmp	r6, #2
 8007c12:	d829      	bhi.n	8007c68 <__ieee754_atan2+0x148>
 8007c14:	4b25      	ldr	r3, [pc, #148]	; (8007cac <__ieee754_atan2+0x18c>)
 8007c16:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007c1a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007c1e:	e7d2      	b.n	8007bc6 <__ieee754_atan2+0xa6>
 8007c20:	4642      	mov	r2, r8
 8007c22:	464b      	mov	r3, r9
 8007c24:	4620      	mov	r0, r4
 8007c26:	4629      	mov	r1, r5
 8007c28:	f7f8 fd58 	bl	80006dc <__aeabi_ddiv>
 8007c2c:	f7ff fc5c 	bl	80074e8 <fabs>
 8007c30:	f7ff fad6 	bl	80071e0 <atan>
 8007c34:	e7b1      	b.n	8007b9a <__ieee754_atan2+0x7a>
 8007c36:	a310      	add	r3, pc, #64	; (adr r3, 8007c78 <__ieee754_atan2+0x158>)
 8007c38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c3c:	f7f8 fa6c 	bl	8000118 <__aeabi_dsub>
 8007c40:	4602      	mov	r2, r0
 8007c42:	460b      	mov	r3, r1
 8007c44:	a10e      	add	r1, pc, #56	; (adr r1, 8007c80 <__ieee754_atan2+0x160>)
 8007c46:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007c4a:	f7f8 fa65 	bl	8000118 <__aeabi_dsub>
 8007c4e:	e7ba      	b.n	8007bc6 <__ieee754_atan2+0xa6>
 8007c50:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007c54:	4619      	mov	r1, r3
 8007c56:	e7b6      	b.n	8007bc6 <__ieee754_atan2+0xa6>
 8007c58:	2e02      	cmp	r6, #2
 8007c5a:	d808      	bhi.n	8007c6e <__ieee754_atan2+0x14e>
 8007c5c:	4b14      	ldr	r3, [pc, #80]	; (8007cb0 <__ieee754_atan2+0x190>)
 8007c5e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007c62:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007c66:	e7ae      	b.n	8007bc6 <__ieee754_atan2+0xa6>
 8007c68:	2000      	movs	r0, #0
 8007c6a:	2100      	movs	r1, #0
 8007c6c:	e7ab      	b.n	8007bc6 <__ieee754_atan2+0xa6>
 8007c6e:	a10c      	add	r1, pc, #48	; (adr r1, 8007ca0 <__ieee754_atan2+0x180>)
 8007c70:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007c74:	e7a7      	b.n	8007bc6 <__ieee754_atan2+0xa6>
 8007c76:	bf00      	nop
 8007c78:	33145c07 	.word	0x33145c07
 8007c7c:	3ca1a626 	.word	0x3ca1a626
 8007c80:	54442d18 	.word	0x54442d18
 8007c84:	400921fb 	.word	0x400921fb
 8007c88:	54442d18 	.word	0x54442d18
 8007c8c:	c00921fb 	.word	0xc00921fb
 8007c90:	54442d18 	.word	0x54442d18
 8007c94:	3ff921fb 	.word	0x3ff921fb
 8007c98:	54442d18 	.word	0x54442d18
 8007c9c:	bff921fb 	.word	0xbff921fb
 8007ca0:	54442d18 	.word	0x54442d18
 8007ca4:	3fe921fb 	.word	0x3fe921fb
 8007ca8:	7ff00000 	.word	0x7ff00000
 8007cac:	08008e20 	.word	0x08008e20
 8007cb0:	08008e38 	.word	0x08008e38
 8007cb4:	00000000 	.word	0x00000000

08007cb8 <__ieee754_rem_pio2>:
 8007cb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cbc:	4b88      	ldr	r3, [pc, #544]	; (8007ee0 <__ieee754_rem_pio2+0x228>)
 8007cbe:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 8007cc2:	429f      	cmp	r7, r3
 8007cc4:	4604      	mov	r4, r0
 8007cc6:	460d      	mov	r5, r1
 8007cc8:	4693      	mov	fp, r2
 8007cca:	b08f      	sub	sp, #60	; 0x3c
 8007ccc:	f240 8091 	bls.w	8007df2 <__ieee754_rem_pio2+0x13a>
 8007cd0:	4b84      	ldr	r3, [pc, #528]	; (8007ee4 <__ieee754_rem_pio2+0x22c>)
 8007cd2:	4688      	mov	r8, r1
 8007cd4:	429f      	cmp	r7, r3
 8007cd6:	d828      	bhi.n	8007d2a <__ieee754_rem_pio2+0x72>
 8007cd8:	a377      	add	r3, pc, #476	; (adr r3, 8007eb8 <__ieee754_rem_pio2+0x200>)
 8007cda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cde:	2900      	cmp	r1, #0
 8007ce0:	f340 81a6 	ble.w	8008030 <__ieee754_rem_pio2+0x378>
 8007ce4:	f7f8 fa18 	bl	8000118 <__aeabi_dsub>
 8007ce8:	4b7f      	ldr	r3, [pc, #508]	; (8007ee8 <__ieee754_rem_pio2+0x230>)
 8007cea:	4604      	mov	r4, r0
 8007cec:	429f      	cmp	r7, r3
 8007cee:	460d      	mov	r5, r1
 8007cf0:	f000 8090 	beq.w	8007e14 <__ieee754_rem_pio2+0x15c>
 8007cf4:	a372      	add	r3, pc, #456	; (adr r3, 8007ec0 <__ieee754_rem_pio2+0x208>)
 8007cf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cfa:	f7f8 fa0d 	bl	8000118 <__aeabi_dsub>
 8007cfe:	4602      	mov	r2, r0
 8007d00:	460b      	mov	r3, r1
 8007d02:	4620      	mov	r0, r4
 8007d04:	4629      	mov	r1, r5
 8007d06:	4614      	mov	r4, r2
 8007d08:	461d      	mov	r5, r3
 8007d0a:	f7f8 fa05 	bl	8000118 <__aeabi_dsub>
 8007d0e:	a36c      	add	r3, pc, #432	; (adr r3, 8007ec0 <__ieee754_rem_pio2+0x208>)
 8007d10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d14:	f7f8 fa00 	bl	8000118 <__aeabi_dsub>
 8007d18:	2601      	movs	r6, #1
 8007d1a:	e9cb 4500 	strd	r4, r5, [fp]
 8007d1e:	e9cb 0102 	strd	r0, r1, [fp, #8]
 8007d22:	4630      	mov	r0, r6
 8007d24:	b00f      	add	sp, #60	; 0x3c
 8007d26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d2a:	4b70      	ldr	r3, [pc, #448]	; (8007eec <__ieee754_rem_pio2+0x234>)
 8007d2c:	429f      	cmp	r7, r3
 8007d2e:	f240 808b 	bls.w	8007e48 <__ieee754_rem_pio2+0x190>
 8007d32:	4b6f      	ldr	r3, [pc, #444]	; (8007ef0 <__ieee754_rem_pio2+0x238>)
 8007d34:	429f      	cmp	r7, r3
 8007d36:	d864      	bhi.n	8007e02 <__ieee754_rem_pio2+0x14a>
 8007d38:	ea4f 5a27 	mov.w	sl, r7, asr #20
 8007d3c:	f2aa 4616 	subw	r6, sl, #1046	; 0x416
 8007d40:	eba7 5106 	sub.w	r1, r7, r6, lsl #20
 8007d44:	460f      	mov	r7, r1
 8007d46:	9602      	str	r6, [sp, #8]
 8007d48:	4606      	mov	r6, r0
 8007d4a:	f7f8 fe4d 	bl	80009e8 <__aeabi_d2iz>
 8007d4e:	f7f8 fb31 	bl	80003b4 <__aeabi_i2d>
 8007d52:	4602      	mov	r2, r0
 8007d54:	460b      	mov	r3, r1
 8007d56:	4630      	mov	r0, r6
 8007d58:	4639      	mov	r1, r7
 8007d5a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8007d5e:	f7f8 f9db 	bl	8000118 <__aeabi_dsub>
 8007d62:	2200      	movs	r2, #0
 8007d64:	4b63      	ldr	r3, [pc, #396]	; (8007ef4 <__ieee754_rem_pio2+0x23c>)
 8007d66:	f7f8 fb8f 	bl	8000488 <__aeabi_dmul>
 8007d6a:	460f      	mov	r7, r1
 8007d6c:	4606      	mov	r6, r0
 8007d6e:	f7f8 fe3b 	bl	80009e8 <__aeabi_d2iz>
 8007d72:	f7f8 fb1f 	bl	80003b4 <__aeabi_i2d>
 8007d76:	4602      	mov	r2, r0
 8007d78:	460b      	mov	r3, r1
 8007d7a:	4630      	mov	r0, r6
 8007d7c:	4639      	mov	r1, r7
 8007d7e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8007d82:	f7f8 f9c9 	bl	8000118 <__aeabi_dsub>
 8007d86:	2200      	movs	r2, #0
 8007d88:	4b5a      	ldr	r3, [pc, #360]	; (8007ef4 <__ieee754_rem_pio2+0x23c>)
 8007d8a:	f7f8 fb7d 	bl	8000488 <__aeabi_dmul>
 8007d8e:	2403      	movs	r4, #3
 8007d90:	f04f 0900 	mov.w	r9, #0
 8007d94:	f04f 0a00 	mov.w	sl, #0
 8007d98:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8007d9c:	ad0e      	add	r5, sp, #56	; 0x38
 8007d9e:	464a      	mov	r2, r9
 8007da0:	e975 0102 	ldrd	r0, r1, [r5, #-8]!
 8007da4:	4653      	mov	r3, sl
 8007da6:	4626      	mov	r6, r4
 8007da8:	3c01      	subs	r4, #1
 8007daa:	f7f8 fdd5 	bl	8000958 <__aeabi_dcmpeq>
 8007dae:	2800      	cmp	r0, #0
 8007db0:	d1f5      	bne.n	8007d9e <__ieee754_rem_pio2+0xe6>
 8007db2:	2402      	movs	r4, #2
 8007db4:	4950      	ldr	r1, [pc, #320]	; (8007ef8 <__ieee754_rem_pio2+0x240>)
 8007db6:	4633      	mov	r3, r6
 8007db8:	9101      	str	r1, [sp, #4]
 8007dba:	9a02      	ldr	r2, [sp, #8]
 8007dbc:	4659      	mov	r1, fp
 8007dbe:	a808      	add	r0, sp, #32
 8007dc0:	9400      	str	r4, [sp, #0]
 8007dc2:	f000 fa0b 	bl	80081dc <__kernel_rem_pio2>
 8007dc6:	f1b8 0f00 	cmp.w	r8, #0
 8007dca:	4606      	mov	r6, r0
 8007dcc:	daa9      	bge.n	8007d22 <__ieee754_rem_pio2+0x6a>
 8007dce:	f8db 0004 	ldr.w	r0, [fp, #4]
 8007dd2:	f8db 2000 	ldr.w	r2, [fp]
 8007dd6:	f8db 100c 	ldr.w	r1, [fp, #12]
 8007dda:	f100 4300 	add.w	r3, r0, #2147483648	; 0x80000000
 8007dde:	e9cb 2300 	strd	r2, r3, [fp]
 8007de2:	f8db 2008 	ldr.w	r2, [fp, #8]
 8007de6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007dea:	e9cb 2302 	strd	r2, r3, [fp, #8]
 8007dee:	4276      	negs	r6, r6
 8007df0:	e797      	b.n	8007d22 <__ieee754_rem_pio2+0x6a>
 8007df2:	2200      	movs	r2, #0
 8007df4:	2300      	movs	r3, #0
 8007df6:	e9cb 4500 	strd	r4, r5, [fp]
 8007dfa:	e9cb 2302 	strd	r2, r3, [fp, #8]
 8007dfe:	2600      	movs	r6, #0
 8007e00:	e78f      	b.n	8007d22 <__ieee754_rem_pio2+0x6a>
 8007e02:	4602      	mov	r2, r0
 8007e04:	460b      	mov	r3, r1
 8007e06:	f7f8 f987 	bl	8000118 <__aeabi_dsub>
 8007e0a:	e9cb 0102 	strd	r0, r1, [fp, #8]
 8007e0e:	e9cb 0100 	strd	r0, r1, [fp]
 8007e12:	e7f4      	b.n	8007dfe <__ieee754_rem_pio2+0x146>
 8007e14:	a32c      	add	r3, pc, #176	; (adr r3, 8007ec8 <__ieee754_rem_pio2+0x210>)
 8007e16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e1a:	f7f8 f97d 	bl	8000118 <__aeabi_dsub>
 8007e1e:	a32c      	add	r3, pc, #176	; (adr r3, 8007ed0 <__ieee754_rem_pio2+0x218>)
 8007e20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e24:	4606      	mov	r6, r0
 8007e26:	460f      	mov	r7, r1
 8007e28:	f7f8 f976 	bl	8000118 <__aeabi_dsub>
 8007e2c:	4604      	mov	r4, r0
 8007e2e:	460d      	mov	r5, r1
 8007e30:	4622      	mov	r2, r4
 8007e32:	462b      	mov	r3, r5
 8007e34:	4630      	mov	r0, r6
 8007e36:	4639      	mov	r1, r7
 8007e38:	f7f8 f96e 	bl	8000118 <__aeabi_dsub>
 8007e3c:	a324      	add	r3, pc, #144	; (adr r3, 8007ed0 <__ieee754_rem_pio2+0x218>)
 8007e3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e42:	f7f8 f969 	bl	8000118 <__aeabi_dsub>
 8007e46:	e767      	b.n	8007d18 <__ieee754_rem_pio2+0x60>
 8007e48:	f7ff fb4e 	bl	80074e8 <fabs>
 8007e4c:	a322      	add	r3, pc, #136	; (adr r3, 8007ed8 <__ieee754_rem_pio2+0x220>)
 8007e4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e52:	4604      	mov	r4, r0
 8007e54:	460d      	mov	r5, r1
 8007e56:	f7f8 fb17 	bl	8000488 <__aeabi_dmul>
 8007e5a:	2200      	movs	r2, #0
 8007e5c:	4b27      	ldr	r3, [pc, #156]	; (8007efc <__ieee754_rem_pio2+0x244>)
 8007e5e:	f7f8 f95d 	bl	800011c <__adddf3>
 8007e62:	f7f8 fdc1 	bl	80009e8 <__aeabi_d2iz>
 8007e66:	4606      	mov	r6, r0
 8007e68:	f7f8 faa4 	bl	80003b4 <__aeabi_i2d>
 8007e6c:	4602      	mov	r2, r0
 8007e6e:	460b      	mov	r3, r1
 8007e70:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007e74:	a310      	add	r3, pc, #64	; (adr r3, 8007eb8 <__ieee754_rem_pio2+0x200>)
 8007e76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e7a:	f7f8 fb05 	bl	8000488 <__aeabi_dmul>
 8007e7e:	4602      	mov	r2, r0
 8007e80:	460b      	mov	r3, r1
 8007e82:	4620      	mov	r0, r4
 8007e84:	4629      	mov	r1, r5
 8007e86:	f7f8 f947 	bl	8000118 <__aeabi_dsub>
 8007e8a:	a30d      	add	r3, pc, #52	; (adr r3, 8007ec0 <__ieee754_rem_pio2+0x208>)
 8007e8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e90:	4681      	mov	r9, r0
 8007e92:	468a      	mov	sl, r1
 8007e94:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007e98:	f7f8 faf6 	bl	8000488 <__aeabi_dmul>
 8007e9c:	2e1f      	cmp	r6, #31
 8007e9e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007ea2:	dc2f      	bgt.n	8007f04 <__ieee754_rem_pio2+0x24c>
 8007ea4:	4b16      	ldr	r3, [pc, #88]	; (8007f00 <__ieee754_rem_pio2+0x248>)
 8007ea6:	1e72      	subs	r2, r6, #1
 8007ea8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007eac:	42bb      	cmp	r3, r7
 8007eae:	d029      	beq.n	8007f04 <__ieee754_rem_pio2+0x24c>
 8007eb0:	4602      	mov	r2, r0
 8007eb2:	460b      	mov	r3, r1
 8007eb4:	e09a      	b.n	8007fec <__ieee754_rem_pio2+0x334>
 8007eb6:	bf00      	nop
 8007eb8:	54400000 	.word	0x54400000
 8007ebc:	3ff921fb 	.word	0x3ff921fb
 8007ec0:	1a626331 	.word	0x1a626331
 8007ec4:	3dd0b461 	.word	0x3dd0b461
 8007ec8:	1a600000 	.word	0x1a600000
 8007ecc:	3dd0b461 	.word	0x3dd0b461
 8007ed0:	2e037073 	.word	0x2e037073
 8007ed4:	3ba3198a 	.word	0x3ba3198a
 8007ed8:	6dc9c883 	.word	0x6dc9c883
 8007edc:	3fe45f30 	.word	0x3fe45f30
 8007ee0:	3fe921fb 	.word	0x3fe921fb
 8007ee4:	4002d97b 	.word	0x4002d97b
 8007ee8:	3ff921fb 	.word	0x3ff921fb
 8007eec:	413921fb 	.word	0x413921fb
 8007ef0:	7fefffff 	.word	0x7fefffff
 8007ef4:	41700000 	.word	0x41700000
 8007ef8:	08008ed0 	.word	0x08008ed0
 8007efc:	3fe00000 	.word	0x3fe00000
 8007f00:	08008e50 	.word	0x08008e50
 8007f04:	153b      	asrs	r3, r7, #20
 8007f06:	9307      	str	r3, [sp, #28]
 8007f08:	4648      	mov	r0, r9
 8007f0a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007f0e:	4651      	mov	r1, sl
 8007f10:	f7f8 f902 	bl	8000118 <__aeabi_dsub>
 8007f14:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8007f18:	ebc3 5317 	rsb	r3, r3, r7, lsr #20
 8007f1c:	2b10      	cmp	r3, #16
 8007f1e:	4604      	mov	r4, r0
 8007f20:	460d      	mov	r5, r1
 8007f22:	dd69      	ble.n	8007ff8 <__ieee754_rem_pio2+0x340>
 8007f24:	a360      	add	r3, pc, #384	; (adr r3, 80080a8 <__ieee754_rem_pio2+0x3f0>)
 8007f26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f2a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007f2e:	f7f8 faab 	bl	8000488 <__aeabi_dmul>
 8007f32:	4604      	mov	r4, r0
 8007f34:	460d      	mov	r5, r1
 8007f36:	4622      	mov	r2, r4
 8007f38:	462b      	mov	r3, r5
 8007f3a:	4648      	mov	r0, r9
 8007f3c:	4651      	mov	r1, sl
 8007f3e:	f7f8 f8eb 	bl	8000118 <__aeabi_dsub>
 8007f42:	4602      	mov	r2, r0
 8007f44:	460b      	mov	r3, r1
 8007f46:	4648      	mov	r0, r9
 8007f48:	4651      	mov	r1, sl
 8007f4a:	4691      	mov	r9, r2
 8007f4c:	469a      	mov	sl, r3
 8007f4e:	f7f8 f8e3 	bl	8000118 <__aeabi_dsub>
 8007f52:	4622      	mov	r2, r4
 8007f54:	462b      	mov	r3, r5
 8007f56:	f7f8 f8df 	bl	8000118 <__aeabi_dsub>
 8007f5a:	a355      	add	r3, pc, #340	; (adr r3, 80080b0 <__ieee754_rem_pio2+0x3f8>)
 8007f5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f60:	4604      	mov	r4, r0
 8007f62:	460d      	mov	r5, r1
 8007f64:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007f68:	f7f8 fa8e 	bl	8000488 <__aeabi_dmul>
 8007f6c:	4622      	mov	r2, r4
 8007f6e:	462b      	mov	r3, r5
 8007f70:	f7f8 f8d2 	bl	8000118 <__aeabi_dsub>
 8007f74:	4602      	mov	r2, r0
 8007f76:	460b      	mov	r3, r1
 8007f78:	4648      	mov	r0, r9
 8007f7a:	4651      	mov	r1, sl
 8007f7c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007f80:	f7f8 f8ca 	bl	8000118 <__aeabi_dsub>
 8007f84:	9a07      	ldr	r2, [sp, #28]
 8007f86:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8007f8a:	1ad3      	subs	r3, r2, r3
 8007f8c:	2b31      	cmp	r3, #49	; 0x31
 8007f8e:	4604      	mov	r4, r0
 8007f90:	460d      	mov	r5, r1
 8007f92:	dd31      	ble.n	8007ff8 <__ieee754_rem_pio2+0x340>
 8007f94:	a348      	add	r3, pc, #288	; (adr r3, 80080b8 <__ieee754_rem_pio2+0x400>)
 8007f96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f9a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007f9e:	f7f8 fa73 	bl	8000488 <__aeabi_dmul>
 8007fa2:	4604      	mov	r4, r0
 8007fa4:	460d      	mov	r5, r1
 8007fa6:	4622      	mov	r2, r4
 8007fa8:	462b      	mov	r3, r5
 8007faa:	4648      	mov	r0, r9
 8007fac:	4651      	mov	r1, sl
 8007fae:	f7f8 f8b3 	bl	8000118 <__aeabi_dsub>
 8007fb2:	4602      	mov	r2, r0
 8007fb4:	460b      	mov	r3, r1
 8007fb6:	4648      	mov	r0, r9
 8007fb8:	4651      	mov	r1, sl
 8007fba:	4691      	mov	r9, r2
 8007fbc:	469a      	mov	sl, r3
 8007fbe:	f7f8 f8ab 	bl	8000118 <__aeabi_dsub>
 8007fc2:	4622      	mov	r2, r4
 8007fc4:	462b      	mov	r3, r5
 8007fc6:	f7f8 f8a7 	bl	8000118 <__aeabi_dsub>
 8007fca:	a33d      	add	r3, pc, #244	; (adr r3, 80080c0 <__ieee754_rem_pio2+0x408>)
 8007fcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fd0:	4604      	mov	r4, r0
 8007fd2:	460d      	mov	r5, r1
 8007fd4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007fd8:	f7f8 fa56 	bl	8000488 <__aeabi_dmul>
 8007fdc:	4622      	mov	r2, r4
 8007fde:	462b      	mov	r3, r5
 8007fe0:	f7f8 f89a 	bl	8000118 <__aeabi_dsub>
 8007fe4:	4602      	mov	r2, r0
 8007fe6:	460b      	mov	r3, r1
 8007fe8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007fec:	4648      	mov	r0, r9
 8007fee:	4651      	mov	r1, sl
 8007ff0:	f7f8 f892 	bl	8000118 <__aeabi_dsub>
 8007ff4:	4604      	mov	r4, r0
 8007ff6:	460d      	mov	r5, r1
 8007ff8:	4622      	mov	r2, r4
 8007ffa:	462b      	mov	r3, r5
 8007ffc:	4648      	mov	r0, r9
 8007ffe:	4651      	mov	r1, sl
 8008000:	e9cb 4500 	strd	r4, r5, [fp]
 8008004:	f7f8 f888 	bl	8000118 <__aeabi_dsub>
 8008008:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800800c:	f7f8 f884 	bl	8000118 <__aeabi_dsub>
 8008010:	f1b8 0f00 	cmp.w	r8, #0
 8008014:	e9cb 0102 	strd	r0, r1, [fp, #8]
 8008018:	f6bf ae83 	bge.w	8007d22 <__ieee754_rem_pio2+0x6a>
 800801c:	f105 4200 	add.w	r2, r5, #2147483648	; 0x80000000
 8008020:	e9cb 4200 	strd	r4, r2, [fp]
 8008024:	f101 4200 	add.w	r2, r1, #2147483648	; 0x80000000
 8008028:	e9cb 0202 	strd	r0, r2, [fp, #8]
 800802c:	4276      	negs	r6, r6
 800802e:	e678      	b.n	8007d22 <__ieee754_rem_pio2+0x6a>
 8008030:	f7f8 f874 	bl	800011c <__adddf3>
 8008034:	4b26      	ldr	r3, [pc, #152]	; (80080d0 <__ieee754_rem_pio2+0x418>)
 8008036:	4604      	mov	r4, r0
 8008038:	429f      	cmp	r7, r3
 800803a:	460d      	mov	r5, r1
 800803c:	d018      	beq.n	8008070 <__ieee754_rem_pio2+0x3b8>
 800803e:	a322      	add	r3, pc, #136	; (adr r3, 80080c8 <__ieee754_rem_pio2+0x410>)
 8008040:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008044:	f7f8 f86a 	bl	800011c <__adddf3>
 8008048:	4602      	mov	r2, r0
 800804a:	460b      	mov	r3, r1
 800804c:	4620      	mov	r0, r4
 800804e:	4629      	mov	r1, r5
 8008050:	4614      	mov	r4, r2
 8008052:	461d      	mov	r5, r3
 8008054:	f7f8 f860 	bl	8000118 <__aeabi_dsub>
 8008058:	a31b      	add	r3, pc, #108	; (adr r3, 80080c8 <__ieee754_rem_pio2+0x410>)
 800805a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800805e:	f7f8 f85d 	bl	800011c <__adddf3>
 8008062:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8008066:	e9cb 4500 	strd	r4, r5, [fp]
 800806a:	e9cb 0102 	strd	r0, r1, [fp, #8]
 800806e:	e658      	b.n	8007d22 <__ieee754_rem_pio2+0x6a>
 8008070:	a30d      	add	r3, pc, #52	; (adr r3, 80080a8 <__ieee754_rem_pio2+0x3f0>)
 8008072:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008076:	f7f8 f851 	bl	800011c <__adddf3>
 800807a:	a30d      	add	r3, pc, #52	; (adr r3, 80080b0 <__ieee754_rem_pio2+0x3f8>)
 800807c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008080:	4606      	mov	r6, r0
 8008082:	460f      	mov	r7, r1
 8008084:	f7f8 f84a 	bl	800011c <__adddf3>
 8008088:	4604      	mov	r4, r0
 800808a:	460d      	mov	r5, r1
 800808c:	4622      	mov	r2, r4
 800808e:	462b      	mov	r3, r5
 8008090:	4630      	mov	r0, r6
 8008092:	4639      	mov	r1, r7
 8008094:	f7f8 f840 	bl	8000118 <__aeabi_dsub>
 8008098:	a305      	add	r3, pc, #20	; (adr r3, 80080b0 <__ieee754_rem_pio2+0x3f8>)
 800809a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800809e:	f7f8 f83d 	bl	800011c <__adddf3>
 80080a2:	e7de      	b.n	8008062 <__ieee754_rem_pio2+0x3aa>
 80080a4:	f3af 8000 	nop.w
 80080a8:	1a600000 	.word	0x1a600000
 80080ac:	3dd0b461 	.word	0x3dd0b461
 80080b0:	2e037073 	.word	0x2e037073
 80080b4:	3ba3198a 	.word	0x3ba3198a
 80080b8:	2e000000 	.word	0x2e000000
 80080bc:	3ba3198a 	.word	0x3ba3198a
 80080c0:	252049c1 	.word	0x252049c1
 80080c4:	397b839a 	.word	0x397b839a
 80080c8:	1a626331 	.word	0x1a626331
 80080cc:	3dd0b461 	.word	0x3dd0b461
 80080d0:	3ff921fb 	.word	0x3ff921fb
 80080d4:	00000000 	.word	0x00000000

080080d8 <scalbn>:
 80080d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80080dc:	4616      	mov	r6, r2
 80080de:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80080e2:	4607      	mov	r7, r0
 80080e4:	4688      	mov	r8, r1
 80080e6:	460b      	mov	r3, r1
 80080e8:	bb6a      	cbnz	r2, 8008146 <scalbn+0x6e>
 80080ea:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80080ee:	4303      	orrs	r3, r0
 80080f0:	d027      	beq.n	8008142 <scalbn+0x6a>
 80080f2:	4b35      	ldr	r3, [pc, #212]	; (80081c8 <scalbn+0xf0>)
 80080f4:	2200      	movs	r2, #0
 80080f6:	f7f8 f9c7 	bl	8000488 <__aeabi_dmul>
 80080fa:	4b34      	ldr	r3, [pc, #208]	; (80081cc <scalbn+0xf4>)
 80080fc:	4607      	mov	r7, r0
 80080fe:	429e      	cmp	r6, r3
 8008100:	4688      	mov	r8, r1
 8008102:	db40      	blt.n	8008186 <scalbn+0xae>
 8008104:	460b      	mov	r3, r1
 8008106:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800810a:	3a36      	subs	r2, #54	; 0x36
 800810c:	f24c 3150 	movw	r1, #50000	; 0xc350
 8008110:	428e      	cmp	r6, r1
 8008112:	dc21      	bgt.n	8008158 <scalbn+0x80>
 8008114:	4416      	add	r6, r2
 8008116:	f240 72fe 	movw	r2, #2046	; 0x7fe
 800811a:	4296      	cmp	r6, r2
 800811c:	dc1c      	bgt.n	8008158 <scalbn+0x80>
 800811e:	2e00      	cmp	r6, #0
 8008120:	dc28      	bgt.n	8008174 <scalbn+0x9c>
 8008122:	f116 0f35 	cmn.w	r6, #53	; 0x35
 8008126:	db35      	blt.n	8008194 <scalbn+0xbc>
 8008128:	f023 41ff 	bic.w	r1, r3, #2139095040	; 0x7f800000
 800812c:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
 8008130:	3636      	adds	r6, #54	; 0x36
 8008132:	ea41 5506 	orr.w	r5, r1, r6, lsl #20
 8008136:	2200      	movs	r2, #0
 8008138:	4638      	mov	r0, r7
 800813a:	4629      	mov	r1, r5
 800813c:	4b24      	ldr	r3, [pc, #144]	; (80081d0 <scalbn+0xf8>)
 800813e:	f7f8 f9a3 	bl	8000488 <__aeabi_dmul>
 8008142:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008146:	f240 7cff 	movw	ip, #2047	; 0x7ff
 800814a:	4562      	cmp	r2, ip
 800814c:	d1de      	bne.n	800810c <scalbn+0x34>
 800814e:	4602      	mov	r2, r0
 8008150:	f7f7 ffe4 	bl	800011c <__adddf3>
 8008154:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008158:	a317      	add	r3, pc, #92	; (adr r3, 80081b8 <scalbn+0xe0>)
 800815a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800815e:	461c      	mov	r4, r3
 8008160:	ea4f 75d8 	mov.w	r5, r8, lsr #31
 8008164:	f365 74df 	bfi	r4, r5, #31, #1
 8008168:	4621      	mov	r1, r4
 800816a:	481a      	ldr	r0, [pc, #104]	; (80081d4 <scalbn+0xfc>)
 800816c:	f7f8 f98c 	bl	8000488 <__aeabi_dmul>
 8008170:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008174:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8008178:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800817c:	4638      	mov	r0, r7
 800817e:	ea43 5106 	orr.w	r1, r3, r6, lsl #20
 8008182:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008186:	a30e      	add	r3, pc, #56	; (adr r3, 80081c0 <scalbn+0xe8>)
 8008188:	e9d3 2300 	ldrd	r2, r3, [r3]
 800818c:	f7f8 f97c 	bl	8000488 <__aeabi_dmul>
 8008190:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008194:	f008 4400 	and.w	r4, r8, #2147483648	; 0x80000000
 8008198:	f044 71d2 	orr.w	r1, r4, #27525120	; 0x1a40000
 800819c:	f441 31b7 	orr.w	r1, r1, #93696	; 0x16e00
 80081a0:	a307      	add	r3, pc, #28	; (adr r3, 80081c0 <scalbn+0xe8>)
 80081a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081a6:	480c      	ldr	r0, [pc, #48]	; (80081d8 <scalbn+0x100>)
 80081a8:	f041 011f 	orr.w	r1, r1, #31
 80081ac:	f7f8 f96c 	bl	8000488 <__aeabi_dmul>
 80081b0:	e7c7      	b.n	8008142 <scalbn+0x6a>
 80081b2:	bf00      	nop
 80081b4:	f3af 8000 	nop.w
 80081b8:	8800759c 	.word	0x8800759c
 80081bc:	7e37e43c 	.word	0x7e37e43c
 80081c0:	c2f8f359 	.word	0xc2f8f359
 80081c4:	01a56e1f 	.word	0x01a56e1f
 80081c8:	43500000 	.word	0x43500000
 80081cc:	ffff3cb0 	.word	0xffff3cb0
 80081d0:	3c900000 	.word	0x3c900000
 80081d4:	8800759c 	.word	0x8800759c
 80081d8:	c2f8f359 	.word	0xc2f8f359

080081dc <__kernel_rem_pio2>:
 80081dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081e0:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 80081e4:	4cba      	ldr	r4, [pc, #744]	; (80084d0 <__kernel_rem_pio2+0x2f4>)
 80081e6:	9da4      	ldr	r5, [sp, #656]	; 0x290
 80081e8:	469e      	mov	lr, r3
 80081ea:	f854 4025 	ldr.w	r4, [r4, r5, lsl #2]
 80081ee:	3b01      	subs	r3, #1
 80081f0:	f112 0f14 	cmn.w	r2, #20
 80081f4:	4682      	mov	sl, r0
 80081f6:	9405      	str	r4, [sp, #20]
 80081f8:	910c      	str	r1, [sp, #48]	; 0x30
 80081fa:	9303      	str	r3, [sp, #12]
 80081fc:	f2c0 8333 	blt.w	8008866 <__kernel_rem_pio2+0x68a>
 8008200:	49b4      	ldr	r1, [pc, #720]	; (80084d4 <__kernel_rem_pio2+0x2f8>)
 8008202:	1ed3      	subs	r3, r2, #3
 8008204:	fb81 0103 	smull	r0, r1, r1, r3
 8008208:	17db      	asrs	r3, r3, #31
 800820a:	ebc3 03a1 	rsb	r3, r3, r1, asr #2
 800820e:	9307      	str	r3, [sp, #28]
 8008210:	3301      	adds	r3, #1
 8008212:	eba3 0383 	sub.w	r3, r3, r3, lsl #2
 8008216:	00db      	lsls	r3, r3, #3
 8008218:	18d3      	adds	r3, r2, r3
 800821a:	9a07      	ldr	r2, [sp, #28]
 800821c:	930d      	str	r3, [sp, #52]	; 0x34
 800821e:	f10e 33ff 	add.w	r3, lr, #4294967295	; 0xffffffff
 8008222:	1ad7      	subs	r7, r2, r3
 8008224:	9a05      	ldr	r2, [sp, #20]
 8008226:	eb12 0903 	adds.w	r9, r2, r3
 800822a:	d41c      	bmi.n	8008266 <__kernel_rem_pio2+0x8a>
 800822c:	f109 0901 	add.w	r9, r9, #1
 8008230:	2400      	movs	r4, #0
 8008232:	2500      	movs	r5, #0
 8008234:	46f3      	mov	fp, lr
 8008236:	9ea5      	ldr	r6, [sp, #660]	; 0x294
 8008238:	44b9      	add	r9, r7
 800823a:	f10d 0888 	add.w	r8, sp, #136	; 0x88
 800823e:	e008      	b.n	8008252 <__kernel_rem_pio2+0x76>
 8008240:	f856 0027 	ldr.w	r0, [r6, r7, lsl #2]
 8008244:	f7f8 f8b6 	bl	80003b4 <__aeabi_i2d>
 8008248:	3701      	adds	r7, #1
 800824a:	454f      	cmp	r7, r9
 800824c:	e8e8 0102 	strd	r0, r1, [r8], #8
 8008250:	d008      	beq.n	8008264 <__kernel_rem_pio2+0x88>
 8008252:	2f00      	cmp	r7, #0
 8008254:	daf4      	bge.n	8008240 <__kernel_rem_pio2+0x64>
 8008256:	4620      	mov	r0, r4
 8008258:	4629      	mov	r1, r5
 800825a:	3701      	adds	r7, #1
 800825c:	454f      	cmp	r7, r9
 800825e:	e8e8 0102 	strd	r0, r1, [r8], #8
 8008262:	d1f6      	bne.n	8008252 <__kernel_rem_pio2+0x76>
 8008264:	46de      	mov	lr, fp
 8008266:	9b05      	ldr	r3, [sp, #20]
 8008268:	2b00      	cmp	r3, #0
 800826a:	f1aa 0308 	sub.w	r3, sl, #8
 800826e:	9304      	str	r3, [sp, #16]
 8008270:	bfb8      	it	lt
 8008272:	ea4f 06ce 	movlt.w	r6, lr, lsl #3
 8008276:	db37      	blt.n	80082e8 <__kernel_rem_pio2+0x10c>
 8008278:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800827c:	eb03 08ce 	add.w	r8, r3, lr, lsl #3
 8008280:	464b      	mov	r3, r9
 8008282:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 8008286:	46d9      	mov	r9, fp
 8008288:	469b      	mov	fp, r3
 800828a:	aa22      	add	r2, sp, #136	; 0x88
 800828c:	eb02 0ace 	add.w	sl, r2, lr, lsl #3
 8008290:	9a05      	ldr	r2, [sp, #20]
 8008292:	ea4f 06ce 	mov.w	r6, lr, lsl #3
 8008296:	4472      	add	r2, lr
 8008298:	9201      	str	r2, [sp, #4]
 800829a:	f8cd e008 	str.w	lr, [sp, #8]
 800829e:	9606      	str	r6, [sp, #24]
 80082a0:	9b03      	ldr	r3, [sp, #12]
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	f2c0 81a1 	blt.w	80085ea <__kernel_rem_pio2+0x40e>
 80082a8:	4657      	mov	r7, sl
 80082aa:	2400      	movs	r4, #0
 80082ac:	2500      	movs	r5, #0
 80082ae:	9e04      	ldr	r6, [sp, #16]
 80082b0:	e977 2302 	ldrd	r2, r3, [r7, #-8]!
 80082b4:	e9f6 0102 	ldrd	r0, r1, [r6, #8]!
 80082b8:	f7f8 f8e6 	bl	8000488 <__aeabi_dmul>
 80082bc:	4602      	mov	r2, r0
 80082be:	460b      	mov	r3, r1
 80082c0:	4620      	mov	r0, r4
 80082c2:	4629      	mov	r1, r5
 80082c4:	f7f7 ff2a 	bl	800011c <__adddf3>
 80082c8:	4546      	cmp	r6, r8
 80082ca:	4604      	mov	r4, r0
 80082cc:	460d      	mov	r5, r1
 80082ce:	d1ef      	bne.n	80082b0 <__kernel_rem_pio2+0xd4>
 80082d0:	9b01      	ldr	r3, [sp, #4]
 80082d2:	f10b 0b01 	add.w	fp, fp, #1
 80082d6:	459b      	cmp	fp, r3
 80082d8:	e8e9 4502 	strd	r4, r5, [r9], #8
 80082dc:	f10a 0a08 	add.w	sl, sl, #8
 80082e0:	d1de      	bne.n	80082a0 <__kernel_rem_pio2+0xc4>
 80082e2:	f8dd e008 	ldr.w	lr, [sp, #8]
 80082e6:	9e06      	ldr	r6, [sp, #24]
 80082e8:	9a05      	ldr	r2, [sp, #20]
 80082ea:	9b04      	ldr	r3, [sp, #16]
 80082ec:	4693      	mov	fp, r2
 80082ee:	4433      	add	r3, r6
 80082f0:	9308      	str	r3, [sp, #32]
 80082f2:	ab0e      	add	r3, sp, #56	; 0x38
 80082f4:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 80082f8:	3b04      	subs	r3, #4
 80082fa:	9309      	str	r3, [sp, #36]	; 0x24
 80082fc:	ab0e      	add	r3, sp, #56	; 0x38
 80082fe:	eb03 0682 	add.w	r6, r3, r2, lsl #2
 8008302:	e9cd 6e0a 	strd	r6, lr, [sp, #40]	; 0x28
 8008306:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8008308:	ab9a      	add	r3, sp, #616	; 0x268
 800830a:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800830e:	f1bb 0f00 	cmp.w	fp, #0
 8008312:	e953 4528 	ldrd	r4, r5, [r3, #-160]	; 0xa0
 8008316:	dd2b      	ble.n	8008370 <__kernel_rem_pio2+0x194>
 8008318:	f50d 7ae4 	add.w	sl, sp, #456	; 0x1c8
 800831c:	f10d 0938 	add.w	r9, sp, #56	; 0x38
 8008320:	eb0a 08cb 	add.w	r8, sl, fp, lsl #3
 8008324:	9701      	str	r7, [sp, #4]
 8008326:	2200      	movs	r2, #0
 8008328:	4b6b      	ldr	r3, [pc, #428]	; (80084d8 <__kernel_rem_pio2+0x2fc>)
 800832a:	4620      	mov	r0, r4
 800832c:	4629      	mov	r1, r5
 800832e:	f7f8 f8ab 	bl	8000488 <__aeabi_dmul>
 8008332:	f7f8 fb59 	bl	80009e8 <__aeabi_d2iz>
 8008336:	f7f8 f83d 	bl	80003b4 <__aeabi_i2d>
 800833a:	2200      	movs	r2, #0
 800833c:	4b67      	ldr	r3, [pc, #412]	; (80084dc <__kernel_rem_pio2+0x300>)
 800833e:	4606      	mov	r6, r0
 8008340:	460f      	mov	r7, r1
 8008342:	f7f8 f8a1 	bl	8000488 <__aeabi_dmul>
 8008346:	4602      	mov	r2, r0
 8008348:	460b      	mov	r3, r1
 800834a:	4620      	mov	r0, r4
 800834c:	4629      	mov	r1, r5
 800834e:	f7f7 fee3 	bl	8000118 <__aeabi_dsub>
 8008352:	f7f8 fb49 	bl	80009e8 <__aeabi_d2iz>
 8008356:	e978 2302 	ldrd	r2, r3, [r8, #-8]!
 800835a:	f849 0b04 	str.w	r0, [r9], #4
 800835e:	4639      	mov	r1, r7
 8008360:	4630      	mov	r0, r6
 8008362:	f7f7 fedb 	bl	800011c <__adddf3>
 8008366:	45d0      	cmp	r8, sl
 8008368:	4604      	mov	r4, r0
 800836a:	460d      	mov	r5, r1
 800836c:	d1db      	bne.n	8008326 <__kernel_rem_pio2+0x14a>
 800836e:	9f01      	ldr	r7, [sp, #4]
 8008370:	4620      	mov	r0, r4
 8008372:	4629      	mov	r1, r5
 8008374:	463a      	mov	r2, r7
 8008376:	f7ff feaf 	bl	80080d8 <scalbn>
 800837a:	2200      	movs	r2, #0
 800837c:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8008380:	4604      	mov	r4, r0
 8008382:	460d      	mov	r5, r1
 8008384:	f7f8 f880 	bl	8000488 <__aeabi_dmul>
 8008388:	f000 fb36 	bl	80089f8 <floor>
 800838c:	2200      	movs	r2, #0
 800838e:	4b54      	ldr	r3, [pc, #336]	; (80084e0 <__kernel_rem_pio2+0x304>)
 8008390:	f7f8 f87a 	bl	8000488 <__aeabi_dmul>
 8008394:	4602      	mov	r2, r0
 8008396:	460b      	mov	r3, r1
 8008398:	4620      	mov	r0, r4
 800839a:	4629      	mov	r1, r5
 800839c:	f7f7 febc 	bl	8000118 <__aeabi_dsub>
 80083a0:	460d      	mov	r5, r1
 80083a2:	4604      	mov	r4, r0
 80083a4:	f7f8 fb20 	bl	80009e8 <__aeabi_d2iz>
 80083a8:	4606      	mov	r6, r0
 80083aa:	f7f8 f803 	bl	80003b4 <__aeabi_i2d>
 80083ae:	4602      	mov	r2, r0
 80083b0:	460b      	mov	r3, r1
 80083b2:	4620      	mov	r0, r4
 80083b4:	4629      	mov	r1, r5
 80083b6:	f7f7 feaf 	bl	8000118 <__aeabi_dsub>
 80083ba:	2f00      	cmp	r7, #0
 80083bc:	4680      	mov	r8, r0
 80083be:	4689      	mov	r9, r1
 80083c0:	f340 8090 	ble.w	80084e4 <__kernel_rem_pio2+0x308>
 80083c4:	f10b 30ff 	add.w	r0, fp, #4294967295	; 0xffffffff
 80083c8:	ab0e      	add	r3, sp, #56	; 0x38
 80083ca:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80083ce:	f1c7 0218 	rsb	r2, r7, #24
 80083d2:	fa43 f102 	asr.w	r1, r3, r2
 80083d6:	fa01 f202 	lsl.w	r2, r1, r2
 80083da:	1a9b      	subs	r3, r3, r2
 80083dc:	aa0e      	add	r2, sp, #56	; 0x38
 80083de:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 80083e2:	f1c7 0217 	rsb	r2, r7, #23
 80083e6:	fa43 f502 	asr.w	r5, r3, r2
 80083ea:	2d00      	cmp	r5, #0
 80083ec:	440e      	add	r6, r1
 80083ee:	f300 80e4 	bgt.w	80085ba <__kernel_rem_pio2+0x3de>
 80083f2:	2200      	movs	r2, #0
 80083f4:	2300      	movs	r3, #0
 80083f6:	4640      	mov	r0, r8
 80083f8:	4649      	mov	r1, r9
 80083fa:	f7f8 faad 	bl	8000958 <__aeabi_dcmpeq>
 80083fe:	2800      	cmp	r0, #0
 8008400:	f000 8241 	beq.w	8008886 <__kernel_rem_pio2+0x6aa>
 8008404:	9b05      	ldr	r3, [sp, #20]
 8008406:	459b      	cmp	fp, r3
 8008408:	dd0d      	ble.n	8008426 <__kernel_rem_pio2+0x24a>
 800840a:	2200      	movs	r2, #0
 800840c:	ab0e      	add	r3, sp, #56	; 0x38
 800840e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8008410:	eb03 038b 	add.w	r3, r3, fp, lsl #2
 8008414:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008418:	4283      	cmp	r3, r0
 800841a:	ea42 0201 	orr.w	r2, r2, r1
 800841e:	d1f9      	bne.n	8008414 <__kernel_rem_pio2+0x238>
 8008420:	2a00      	cmp	r2, #0
 8008422:	f040 80e8 	bne.w	80085f6 <__kernel_rem_pio2+0x41a>
 8008426:	9b05      	ldr	r3, [sp, #20]
 8008428:	aa0e      	add	r2, sp, #56	; 0x38
 800842a:	3b01      	subs	r3, #1
 800842c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008430:	2b00      	cmp	r3, #0
 8008432:	f040 80d6 	bne.w	80085e2 <__kernel_rem_pio2+0x406>
 8008436:	2301      	movs	r3, #1
 8008438:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800843a:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800843e:	3301      	adds	r3, #1
 8008440:	2900      	cmp	r1, #0
 8008442:	d0fa      	beq.n	800843a <__kernel_rem_pio2+0x25e>
 8008444:	445b      	add	r3, fp
 8008446:	f10b 0801 	add.w	r8, fp, #1
 800844a:	9a07      	ldr	r2, [sp, #28]
 800844c:	a922      	add	r1, sp, #136	; 0x88
 800844e:	eb02 0a08 	add.w	sl, r2, r8
 8008452:	f10a 4a80 	add.w	sl, sl, #1073741824	; 0x40000000
 8008456:	9aa5      	ldr	r2, [sp, #660]	; 0x294
 8008458:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800845c:	eb02 068a 	add.w	r6, r2, sl, lsl #2
 8008460:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008462:	f8dd a020 	ldr.w	sl, [sp, #32]
 8008466:	445a      	add	r2, fp
 8008468:	eb01 09c2 	add.w	r9, r1, r2, lsl #3
 800846c:	aa72      	add	r2, sp, #456	; 0x1c8
 800846e:	eb02 0bcb 	add.w	fp, r2, fp, lsl #3
 8008472:	9706      	str	r7, [sp, #24]
 8008474:	9302      	str	r3, [sp, #8]
 8008476:	9601      	str	r6, [sp, #4]
 8008478:	9b01      	ldr	r3, [sp, #4]
 800847a:	f853 0f04 	ldr.w	r0, [r3, #4]!
 800847e:	9301      	str	r3, [sp, #4]
 8008480:	f7f7 ff98 	bl	80003b4 <__aeabi_i2d>
 8008484:	9b03      	ldr	r3, [sp, #12]
 8008486:	e8e9 0102 	strd	r0, r1, [r9], #8
 800848a:	2b00      	cmp	r3, #0
 800848c:	db1d      	blt.n	80084ca <__kernel_rem_pio2+0x2ee>
 800848e:	464f      	mov	r7, r9
 8008490:	2400      	movs	r4, #0
 8008492:	2500      	movs	r5, #0
 8008494:	9e04      	ldr	r6, [sp, #16]
 8008496:	e977 2302 	ldrd	r2, r3, [r7, #-8]!
 800849a:	e9f6 0102 	ldrd	r0, r1, [r6, #8]!
 800849e:	f7f7 fff3 	bl	8000488 <__aeabi_dmul>
 80084a2:	4602      	mov	r2, r0
 80084a4:	460b      	mov	r3, r1
 80084a6:	4620      	mov	r0, r4
 80084a8:	4629      	mov	r1, r5
 80084aa:	f7f7 fe37 	bl	800011c <__adddf3>
 80084ae:	4556      	cmp	r6, sl
 80084b0:	4604      	mov	r4, r0
 80084b2:	460d      	mov	r5, r1
 80084b4:	d1ef      	bne.n	8008496 <__kernel_rem_pio2+0x2ba>
 80084b6:	9b02      	ldr	r3, [sp, #8]
 80084b8:	f108 0801 	add.w	r8, r8, #1
 80084bc:	4598      	cmp	r8, r3
 80084be:	e9eb 4502 	strd	r4, r5, [fp, #8]!
 80084c2:	ddd9      	ble.n	8008478 <__kernel_rem_pio2+0x29c>
 80084c4:	469b      	mov	fp, r3
 80084c6:	9f06      	ldr	r7, [sp, #24]
 80084c8:	e71e      	b.n	8008308 <__kernel_rem_pio2+0x12c>
 80084ca:	2400      	movs	r4, #0
 80084cc:	2500      	movs	r5, #0
 80084ce:	e7f2      	b.n	80084b6 <__kernel_rem_pio2+0x2da>
 80084d0:	08009018 	.word	0x08009018
 80084d4:	2aaaaaab 	.word	0x2aaaaaab
 80084d8:	3e700000 	.word	0x3e700000
 80084dc:	41700000 	.word	0x41700000
 80084e0:	40200000 	.word	0x40200000
 80084e4:	d160      	bne.n	80085a8 <__kernel_rem_pio2+0x3cc>
 80084e6:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
 80084ea:	aa0e      	add	r2, sp, #56	; 0x38
 80084ec:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
 80084f0:	15ed      	asrs	r5, r5, #23
 80084f2:	2d00      	cmp	r5, #0
 80084f4:	f77f af7d 	ble.w	80083f2 <__kernel_rem_pio2+0x216>
 80084f8:	f1bb 0f00 	cmp.w	fp, #0
 80084fc:	f106 0601 	add.w	r6, r6, #1
 8008500:	f340 824a 	ble.w	8008998 <__kernel_rem_pio2+0x7bc>
 8008504:	2100      	movs	r1, #0
 8008506:	f06f 4c7f 	mvn.w	ip, #4278190080	; 0xff000000
 800850a:	460c      	mov	r4, r1
 800850c:	46ae      	mov	lr, r5
 800850e:	a80e      	add	r0, sp, #56	; 0x38
 8008510:	e00f      	b.n	8008532 <__kernel_rem_pio2+0x356>
 8008512:	3101      	adds	r1, #1
 8008514:	458b      	cmp	fp, r1
 8008516:	f842 5c04 	str.w	r5, [r2, #-4]
 800851a:	dd69      	ble.n	80085f0 <__kernel_rem_pio2+0x414>
 800851c:	6813      	ldr	r3, [r2, #0]
 800851e:	3008      	adds	r0, #8
 8008520:	3101      	adds	r1, #1
 8008522:	ebac 0303 	sub.w	r3, ip, r3
 8008526:	458b      	cmp	fp, r1
 8008528:	f04f 0401 	mov.w	r4, #1
 800852c:	f840 3c04 	str.w	r3, [r0, #-4]
 8008530:	dd0b      	ble.n	800854a <__kernel_rem_pio2+0x36e>
 8008532:	4602      	mov	r2, r0
 8008534:	f852 3b04 	ldr.w	r3, [r2], #4
 8008538:	bba4      	cbnz	r4, 80085a4 <__kernel_rem_pio2+0x3c8>
 800853a:	f1c3 7580 	rsb	r5, r3, #16777216	; 0x1000000
 800853e:	2b00      	cmp	r3, #0
 8008540:	d1e7      	bne.n	8008512 <__kernel_rem_pio2+0x336>
 8008542:	3101      	adds	r1, #1
 8008544:	458b      	cmp	fp, r1
 8008546:	4610      	mov	r0, r2
 8008548:	dcf3      	bgt.n	8008532 <__kernel_rem_pio2+0x356>
 800854a:	4675      	mov	r5, lr
 800854c:	2f00      	cmp	r7, #0
 800854e:	dd0d      	ble.n	800856c <__kernel_rem_pio2+0x390>
 8008550:	2f01      	cmp	r7, #1
 8008552:	d03b      	beq.n	80085cc <__kernel_rem_pio2+0x3f0>
 8008554:	2f02      	cmp	r7, #2
 8008556:	d109      	bne.n	800856c <__kernel_rem_pio2+0x390>
 8008558:	f10b 32ff 	add.w	r2, fp, #4294967295	; 0xffffffff
 800855c:	ab0e      	add	r3, sp, #56	; 0x38
 800855e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008562:	a90e      	add	r1, sp, #56	; 0x38
 8008564:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8008568:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800856c:	2d02      	cmp	r5, #2
 800856e:	f47f af40 	bne.w	80083f2 <__kernel_rem_pio2+0x216>
 8008572:	4642      	mov	r2, r8
 8008574:	464b      	mov	r3, r9
 8008576:	2000      	movs	r0, #0
 8008578:	49bd      	ldr	r1, [pc, #756]	; (8008870 <__kernel_rem_pio2+0x694>)
 800857a:	f7f7 fdcd 	bl	8000118 <__aeabi_dsub>
 800857e:	4680      	mov	r8, r0
 8008580:	4689      	mov	r9, r1
 8008582:	2c00      	cmp	r4, #0
 8008584:	f43f af35 	beq.w	80083f2 <__kernel_rem_pio2+0x216>
 8008588:	463a      	mov	r2, r7
 800858a:	2000      	movs	r0, #0
 800858c:	49b8      	ldr	r1, [pc, #736]	; (8008870 <__kernel_rem_pio2+0x694>)
 800858e:	f7ff fda3 	bl	80080d8 <scalbn>
 8008592:	4602      	mov	r2, r0
 8008594:	460b      	mov	r3, r1
 8008596:	4640      	mov	r0, r8
 8008598:	4649      	mov	r1, r9
 800859a:	f7f7 fdbd 	bl	8000118 <__aeabi_dsub>
 800859e:	4680      	mov	r8, r0
 80085a0:	4689      	mov	r9, r1
 80085a2:	e726      	b.n	80083f2 <__kernel_rem_pio2+0x216>
 80085a4:	4610      	mov	r0, r2
 80085a6:	e7bb      	b.n	8008520 <__kernel_rem_pio2+0x344>
 80085a8:	2200      	movs	r2, #0
 80085aa:	4bb2      	ldr	r3, [pc, #712]	; (8008874 <__kernel_rem_pio2+0x698>)
 80085ac:	f7f8 f9f2 	bl	8000994 <__aeabi_dcmpge>
 80085b0:	2800      	cmp	r0, #0
 80085b2:	f040 8146 	bne.w	8008842 <__kernel_rem_pio2+0x666>
 80085b6:	4605      	mov	r5, r0
 80085b8:	e71b      	b.n	80083f2 <__kernel_rem_pio2+0x216>
 80085ba:	f1bb 0f00 	cmp.w	fp, #0
 80085be:	bfd8      	it	le
 80085c0:	2400      	movle	r4, #0
 80085c2:	f106 0601 	add.w	r6, r6, #1
 80085c6:	dc9d      	bgt.n	8008504 <__kernel_rem_pio2+0x328>
 80085c8:	2f01      	cmp	r7, #1
 80085ca:	d1c3      	bne.n	8008554 <__kernel_rem_pio2+0x378>
 80085cc:	f10b 32ff 	add.w	r2, fp, #4294967295	; 0xffffffff
 80085d0:	ab0e      	add	r3, sp, #56	; 0x38
 80085d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80085d6:	a90e      	add	r1, sp, #56	; 0x38
 80085d8:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80085dc:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80085e0:	e7c4      	b.n	800856c <__kernel_rem_pio2+0x390>
 80085e2:	f10b 0801 	add.w	r8, fp, #1
 80085e6:	4643      	mov	r3, r8
 80085e8:	e72f      	b.n	800844a <__kernel_rem_pio2+0x26e>
 80085ea:	2400      	movs	r4, #0
 80085ec:	2500      	movs	r5, #0
 80085ee:	e66f      	b.n	80082d0 <__kernel_rem_pio2+0xf4>
 80085f0:	4675      	mov	r5, lr
 80085f2:	2401      	movs	r4, #1
 80085f4:	e7aa      	b.n	800854c <__kernel_rem_pio2+0x370>
 80085f6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80085f8:	f10b 34ff 	add.w	r4, fp, #4294967295	; 0xffffffff
 80085fc:	f1a3 0218 	sub.w	r2, r3, #24
 8008600:	ab0e      	add	r3, sp, #56	; 0x38
 8008602:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8008606:	e9cd 5603 	strd	r5, r6, [sp, #12]
 800860a:	920d      	str	r2, [sp, #52]	; 0x34
 800860c:	b963      	cbnz	r3, 8008628 <__kernel_rem_pio2+0x44c>
 800860e:	f10b 4380 	add.w	r3, fp, #1073741824	; 0x40000000
 8008612:	3b01      	subs	r3, #1
 8008614:	a90e      	add	r1, sp, #56	; 0x38
 8008616:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800861a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800861e:	3c01      	subs	r4, #1
 8008620:	3a18      	subs	r2, #24
 8008622:	2900      	cmp	r1, #0
 8008624:	d0f9      	beq.n	800861a <__kernel_rem_pio2+0x43e>
 8008626:	920d      	str	r2, [sp, #52]	; 0x34
 8008628:	2000      	movs	r0, #0
 800862a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800862c:	4990      	ldr	r1, [pc, #576]	; (8008870 <__kernel_rem_pio2+0x694>)
 800862e:	f7ff fd53 	bl	80080d8 <scalbn>
 8008632:	2c00      	cmp	r4, #0
 8008634:	4680      	mov	r8, r0
 8008636:	4689      	mov	r9, r1
 8008638:	f2c0 81b4 	blt.w	80089a4 <__kernel_rem_pio2+0x7c8>
 800863c:	f104 0a01 	add.w	sl, r4, #1
 8008640:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008644:	2600      	movs	r6, #0
 8008646:	4693      	mov	fp, r2
 8008648:	ab0e      	add	r3, sp, #56	; 0x38
 800864a:	eb03 058a 	add.w	r5, r3, sl, lsl #2
 800864e:	4f8a      	ldr	r7, [pc, #552]	; (8008878 <__kernel_rem_pio2+0x69c>)
 8008650:	ab72      	add	r3, sp, #456	; 0x1c8
 8008652:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 8008656:	f855 0d04 	ldr.w	r0, [r5, #-4]!
 800865a:	f7f7 feab 	bl	80003b4 <__aeabi_i2d>
 800865e:	4642      	mov	r2, r8
 8008660:	464b      	mov	r3, r9
 8008662:	f7f7 ff11 	bl	8000488 <__aeabi_dmul>
 8008666:	463b      	mov	r3, r7
 8008668:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 800866c:	4632      	mov	r2, r6
 800866e:	4640      	mov	r0, r8
 8008670:	4649      	mov	r1, r9
 8008672:	f7f7 ff09 	bl	8000488 <__aeabi_dmul>
 8008676:	ab0e      	add	r3, sp, #56	; 0x38
 8008678:	429d      	cmp	r5, r3
 800867a:	4680      	mov	r8, r0
 800867c:	4689      	mov	r9, r1
 800867e:	d1ea      	bne.n	8008656 <__kernel_rem_pio2+0x47a>
 8008680:	465a      	mov	r2, fp
 8008682:	f1ab 0308 	sub.w	r3, fp, #8
 8008686:	f04f 0900 	mov.w	r9, #0
 800868a:	af4a      	add	r7, sp, #296	; 0x128
 800868c:	a972      	add	r1, sp, #456	; 0x1c8
 800868e:	eb01 0a03 	add.w	sl, r1, r3
 8008692:	46a3      	mov	fp, r4
 8008694:	463b      	mov	r3, r7
 8008696:	e9cd 4206 	strd	r4, r2, [sp, #24]
 800869a:	4652      	mov	r2, sl
 800869c:	46ca      	mov	sl, r9
 800869e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 80086a2:	9705      	str	r7, [sp, #20]
 80086a4:	f1b9 0f00 	cmp.w	r9, #0
 80086a8:	f2c0 80ea 	blt.w	8008880 <__kernel_rem_pio2+0x6a4>
 80086ac:	e9cd 3b01 	strd	r3, fp, [sp, #4]
 80086b0:	4690      	mov	r8, r2
 80086b2:	2600      	movs	r6, #0
 80086b4:	2400      	movs	r4, #0
 80086b6:	2500      	movs	r5, #0
 80086b8:	4693      	mov	fp, r2
 80086ba:	4f70      	ldr	r7, [pc, #448]	; (800887c <__kernel_rem_pio2+0x6a0>)
 80086bc:	e001      	b.n	80086c2 <__kernel_rem_pio2+0x4e6>
 80086be:	4556      	cmp	r6, sl
 80086c0:	dc10      	bgt.n	80086e4 <__kernel_rem_pio2+0x508>
 80086c2:	e9f7 2302 	ldrd	r2, r3, [r7, #8]!
 80086c6:	e8f8 0102 	ldrd	r0, r1, [r8], #8
 80086ca:	f7f7 fedd 	bl	8000488 <__aeabi_dmul>
 80086ce:	4602      	mov	r2, r0
 80086d0:	460b      	mov	r3, r1
 80086d2:	4620      	mov	r0, r4
 80086d4:	4629      	mov	r1, r5
 80086d6:	f7f7 fd21 	bl	800011c <__adddf3>
 80086da:	3601      	adds	r6, #1
 80086dc:	45b1      	cmp	r9, r6
 80086de:	4604      	mov	r4, r0
 80086e0:	460d      	mov	r5, r1
 80086e2:	daec      	bge.n	80086be <__kernel_rem_pio2+0x4e2>
 80086e4:	465a      	mov	r2, fp
 80086e6:	9b01      	ldr	r3, [sp, #4]
 80086e8:	f8dd b008 	ldr.w	fp, [sp, #8]
 80086ec:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 80086f0:	f1bb 3fff 	cmp.w	fp, #4294967295	; 0xffffffff
 80086f4:	e8e3 4502 	strd	r4, r5, [r3], #8
 80086f8:	f10a 0a01 	add.w	sl, sl, #1
 80086fc:	f1a2 0208 	sub.w	r2, r2, #8
 8008700:	d1d0      	bne.n	80086a4 <__kernel_rem_pio2+0x4c8>
 8008702:	e9dd 4206 	ldrd	r4, r2, [sp, #24]
 8008706:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8008708:	9f05      	ldr	r7, [sp, #20]
 800870a:	2b02      	cmp	r3, #2
 800870c:	dc1b      	bgt.n	8008746 <__kernel_rem_pio2+0x56a>
 800870e:	2b00      	cmp	r3, #0
 8008710:	f300 80ea 	bgt.w	80088e8 <__kernel_rem_pio2+0x70c>
 8008714:	d110      	bne.n	8008738 <__kernel_rem_pio2+0x55c>
 8008716:	2000      	movs	r0, #0
 8008718:	2100      	movs	r1, #0
 800871a:	18bc      	adds	r4, r7, r2
 800871c:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8008720:	f7f7 fcfc 	bl	800011c <__adddf3>
 8008724:	42a7      	cmp	r7, r4
 8008726:	d1f9      	bne.n	800871c <__kernel_rem_pio2+0x540>
 8008728:	9b03      	ldr	r3, [sp, #12]
 800872a:	b113      	cbz	r3, 8008732 <__kernel_rem_pio2+0x556>
 800872c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008730:	4619      	mov	r1, r3
 8008732:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008734:	e9c3 0100 	strd	r0, r1, [r3]
 8008738:	9b04      	ldr	r3, [sp, #16]
 800873a:	f003 0007 	and.w	r0, r3, #7
 800873e:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8008742:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008746:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8008748:	2b03      	cmp	r3, #3
 800874a:	d1f5      	bne.n	8008738 <__kernel_rem_pio2+0x55c>
 800874c:	2c00      	cmp	r4, #0
 800874e:	f000 8138 	beq.w	80089c2 <__kernel_rem_pio2+0x7e6>
 8008752:	eb07 05c4 	add.w	r5, r7, r4, lsl #3
 8008756:	00e6      	lsls	r6, r4, #3
 8008758:	e9cd 5401 	strd	r5, r4, [sp, #4]
 800875c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008760:	46a8      	mov	r8, r5
 8008762:	e9cd 6505 	strd	r6, r5, [sp, #20]
 8008766:	4614      	mov	r4, r2
 8008768:	461d      	mov	r5, r3
 800876a:	46b9      	mov	r9, r7
 800876c:	e958 6702 	ldrd	r6, r7, [r8, #-8]
 8008770:	4620      	mov	r0, r4
 8008772:	4629      	mov	r1, r5
 8008774:	4632      	mov	r2, r6
 8008776:	463b      	mov	r3, r7
 8008778:	f7f7 fcd0 	bl	800011c <__adddf3>
 800877c:	46a2      	mov	sl, r4
 800877e:	46ab      	mov	fp, r5
 8008780:	4604      	mov	r4, r0
 8008782:	460d      	mov	r5, r1
 8008784:	4622      	mov	r2, r4
 8008786:	462b      	mov	r3, r5
 8008788:	4630      	mov	r0, r6
 800878a:	4639      	mov	r1, r7
 800878c:	f7f7 fcc4 	bl	8000118 <__aeabi_dsub>
 8008790:	4652      	mov	r2, sl
 8008792:	465b      	mov	r3, fp
 8008794:	f7f7 fcc2 	bl	800011c <__adddf3>
 8008798:	e9c8 0100 	strd	r0, r1, [r8]
 800879c:	e968 4502 	strd	r4, r5, [r8, #-8]!
 80087a0:	45c8      	cmp	r8, r9
 80087a2:	d1e3      	bne.n	800876c <__kernel_rem_pio2+0x590>
 80087a4:	e9dd a401 	ldrd	sl, r4, [sp, #4]
 80087a8:	e9dd 6505 	ldrd	r6, r5, [sp, #20]
 80087ac:	2c01      	cmp	r4, #1
 80087ae:	464f      	mov	r7, r9
 80087b0:	f000 8107 	beq.w	80089c2 <__kernel_rem_pio2+0x7e6>
 80087b4:	e9d5 4500 	ldrd	r4, r5, [r5]
 80087b8:	e9cd 6901 	strd	r6, r9, [sp, #4]
 80087bc:	f109 0b08 	add.w	fp, r9, #8
 80087c0:	e95a 8902 	ldrd	r8, r9, [sl, #-8]
 80087c4:	4620      	mov	r0, r4
 80087c6:	4629      	mov	r1, r5
 80087c8:	4642      	mov	r2, r8
 80087ca:	464b      	mov	r3, r9
 80087cc:	f7f7 fca6 	bl	800011c <__adddf3>
 80087d0:	4626      	mov	r6, r4
 80087d2:	462f      	mov	r7, r5
 80087d4:	4604      	mov	r4, r0
 80087d6:	460d      	mov	r5, r1
 80087d8:	4622      	mov	r2, r4
 80087da:	462b      	mov	r3, r5
 80087dc:	4640      	mov	r0, r8
 80087de:	4649      	mov	r1, r9
 80087e0:	f7f7 fc9a 	bl	8000118 <__aeabi_dsub>
 80087e4:	4632      	mov	r2, r6
 80087e6:	463b      	mov	r3, r7
 80087e8:	f7f7 fc98 	bl	800011c <__adddf3>
 80087ec:	e9ca 0100 	strd	r0, r1, [sl]
 80087f0:	e96a 4502 	strd	r4, r5, [sl, #-8]!
 80087f4:	45d3      	cmp	fp, sl
 80087f6:	d1e3      	bne.n	80087c0 <__kernel_rem_pio2+0x5e4>
 80087f8:	e9dd 6701 	ldrd	r6, r7, [sp, #4]
 80087fc:	2000      	movs	r0, #0
 80087fe:	2100      	movs	r1, #0
 8008800:	f106 0408 	add.w	r4, r6, #8
 8008804:	443c      	add	r4, r7
 8008806:	f107 0510 	add.w	r5, r7, #16
 800880a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800880e:	f7f7 fc85 	bl	800011c <__adddf3>
 8008812:	42a5      	cmp	r5, r4
 8008814:	d1f9      	bne.n	800880a <__kernel_rem_pio2+0x62e>
 8008816:	e9d7 7802 	ldrd	r7, r8, [r7, #8]
 800881a:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 800881e:	9b03      	ldr	r3, [sp, #12]
 8008820:	2b00      	cmp	r3, #0
 8008822:	f040 8082 	bne.w	800892a <__kernel_rem_pio2+0x74e>
 8008826:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008828:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800882c:	e9c3 5600 	strd	r5, r6, [r3]
 8008830:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8008834:	9b04      	ldr	r3, [sp, #16]
 8008836:	f003 0007 	and.w	r0, r3, #7
 800883a:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 800883e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008842:	f1bb 0f00 	cmp.w	fp, #0
 8008846:	bfc8      	it	gt
 8008848:	2502      	movgt	r5, #2
 800884a:	f106 0601 	add.w	r6, r6, #1
 800884e:	f73f ae59 	bgt.w	8008504 <__kernel_rem_pio2+0x328>
 8008852:	4642      	mov	r2, r8
 8008854:	464b      	mov	r3, r9
 8008856:	2502      	movs	r5, #2
 8008858:	2000      	movs	r0, #0
 800885a:	4905      	ldr	r1, [pc, #20]	; (8008870 <__kernel_rem_pio2+0x694>)
 800885c:	f7f7 fc5c 	bl	8000118 <__aeabi_dsub>
 8008860:	4680      	mov	r8, r0
 8008862:	4689      	mov	r9, r1
 8008864:	e5c5      	b.n	80083f2 <__kernel_rem_pio2+0x216>
 8008866:	2100      	movs	r1, #0
 8008868:	f06f 0317 	mvn.w	r3, #23
 800886c:	9107      	str	r1, [sp, #28]
 800886e:	e4d3      	b.n	8008218 <__kernel_rem_pio2+0x3c>
 8008870:	3ff00000 	.word	0x3ff00000
 8008874:	3fe00000 	.word	0x3fe00000
 8008878:	3e700000 	.word	0x3e700000
 800887c:	08008fd0 	.word	0x08008fd0
 8008880:	2400      	movs	r4, #0
 8008882:	2500      	movs	r5, #0
 8008884:	e732      	b.n	80086ec <__kernel_rem_pio2+0x510>
 8008886:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8008888:	4640      	mov	r0, r8
 800888a:	4649      	mov	r1, r9
 800888c:	4262      	negs	r2, r4
 800888e:	e9cd 5603 	strd	r5, r6, [sp, #12]
 8008892:	f7ff fc21 	bl	80080d8 <scalbn>
 8008896:	2200      	movs	r2, #0
 8008898:	4b55      	ldr	r3, [pc, #340]	; (80089f0 <__kernel_rem_pio2+0x814>)
 800889a:	4680      	mov	r8, r0
 800889c:	4689      	mov	r9, r1
 800889e:	f7f8 f879 	bl	8000994 <__aeabi_dcmpge>
 80088a2:	2800      	cmp	r0, #0
 80088a4:	d038      	beq.n	8008918 <__kernel_rem_pio2+0x73c>
 80088a6:	2200      	movs	r2, #0
 80088a8:	4b52      	ldr	r3, [pc, #328]	; (80089f4 <__kernel_rem_pio2+0x818>)
 80088aa:	3418      	adds	r4, #24
 80088ac:	4640      	mov	r0, r8
 80088ae:	4649      	mov	r1, r9
 80088b0:	940d      	str	r4, [sp, #52]	; 0x34
 80088b2:	f7f7 fde9 	bl	8000488 <__aeabi_dmul>
 80088b6:	f7f8 f897 	bl	80009e8 <__aeabi_d2iz>
 80088ba:	4605      	mov	r5, r0
 80088bc:	f7f7 fd7a 	bl	80003b4 <__aeabi_i2d>
 80088c0:	2200      	movs	r2, #0
 80088c2:	4b4b      	ldr	r3, [pc, #300]	; (80089f0 <__kernel_rem_pio2+0x814>)
 80088c4:	f7f7 fde0 	bl	8000488 <__aeabi_dmul>
 80088c8:	460b      	mov	r3, r1
 80088ca:	4602      	mov	r2, r0
 80088cc:	4649      	mov	r1, r9
 80088ce:	4640      	mov	r0, r8
 80088d0:	f7f7 fc22 	bl	8000118 <__aeabi_dsub>
 80088d4:	f7f8 f888 	bl	80009e8 <__aeabi_d2iz>
 80088d8:	f10b 0401 	add.w	r4, fp, #1
 80088dc:	ab0e      	add	r3, sp, #56	; 0x38
 80088de:	f843 002b 	str.w	r0, [r3, fp, lsl #2]
 80088e2:	f843 5024 	str.w	r5, [r3, r4, lsl #2]
 80088e6:	e69f      	b.n	8008628 <__kernel_rem_pio2+0x44c>
 80088e8:	2000      	movs	r0, #0
 80088ea:	2100      	movs	r1, #0
 80088ec:	18bd      	adds	r5, r7, r2
 80088ee:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 80088f2:	f7f7 fc13 	bl	800011c <__adddf3>
 80088f6:	42af      	cmp	r7, r5
 80088f8:	d1f9      	bne.n	80088ee <__kernel_rem_pio2+0x712>
 80088fa:	9b03      	ldr	r3, [sp, #12]
 80088fc:	b35b      	cbz	r3, 8008956 <__kernel_rem_pio2+0x77a>
 80088fe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008900:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008904:	6010      	str	r0, [r2, #0]
 8008906:	6053      	str	r3, [r2, #4]
 8008908:	4602      	mov	r2, r0
 800890a:	460b      	mov	r3, r1
 800890c:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8008910:	f7f7 fc02 	bl	8000118 <__aeabi_dsub>
 8008914:	bb4c      	cbnz	r4, 800896a <__kernel_rem_pio2+0x78e>
 8008916:	e032      	b.n	800897e <__kernel_rem_pio2+0x7a2>
 8008918:	4640      	mov	r0, r8
 800891a:	4649      	mov	r1, r9
 800891c:	f7f8 f864 	bl	80009e8 <__aeabi_d2iz>
 8008920:	ab0e      	add	r3, sp, #56	; 0x38
 8008922:	465c      	mov	r4, fp
 8008924:	f843 002b 	str.w	r0, [r3, fp, lsl #2]
 8008928:	e67e      	b.n	8008628 <__kernel_rem_pio2+0x44c>
 800892a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800892c:	462c      	mov	r4, r5
 800892e:	f106 4500 	add.w	r5, r6, #2147483648	; 0x80000000
 8008932:	605d      	str	r5, [r3, #4]
 8008934:	461d      	mov	r5, r3
 8008936:	601c      	str	r4, [r3, #0]
 8008938:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 800893c:	e9c5 7302 	strd	r7, r3, [r5, #8]
 8008940:	9b04      	ldr	r3, [sp, #16]
 8008942:	f101 4200 	add.w	r2, r1, #2147483648	; 0x80000000
 8008946:	e9c5 0204 	strd	r0, r2, [r5, #16]
 800894a:	f003 0007 	and.w	r0, r3, #7
 800894e:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8008952:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008956:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008958:	4602      	mov	r2, r0
 800895a:	e9c3 0100 	strd	r0, r1, [r3]
 800895e:	460b      	mov	r3, r1
 8008960:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8008964:	f7f7 fbd8 	bl	8000118 <__aeabi_dsub>
 8008968:	b164      	cbz	r4, 8008984 <__kernel_rem_pio2+0x7a8>
 800896a:	2501      	movs	r5, #1
 800896c:	e9f7 2302 	ldrd	r2, r3, [r7, #8]!
 8008970:	3501      	adds	r5, #1
 8008972:	f7f7 fbd3 	bl	800011c <__adddf3>
 8008976:	42ac      	cmp	r4, r5
 8008978:	daf8      	bge.n	800896c <__kernel_rem_pio2+0x790>
 800897a:	9b03      	ldr	r3, [sp, #12]
 800897c:	b113      	cbz	r3, 8008984 <__kernel_rem_pio2+0x7a8>
 800897e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008982:	4619      	mov	r1, r3
 8008984:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008986:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800898a:	9b04      	ldr	r3, [sp, #16]
 800898c:	f003 0007 	and.w	r0, r3, #7
 8008990:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8008994:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008998:	2d02      	cmp	r5, #2
 800899a:	f47f ad2a 	bne.w	80083f2 <__kernel_rem_pio2+0x216>
 800899e:	4602      	mov	r2, r0
 80089a0:	460b      	mov	r3, r1
 80089a2:	e759      	b.n	8008858 <__kernel_rem_pio2+0x67c>
 80089a4:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 80089a6:	2b02      	cmp	r3, #2
 80089a8:	dc06      	bgt.n	80089b8 <__kernel_rem_pio2+0x7dc>
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	dc0c      	bgt.n	80089c8 <__kernel_rem_pio2+0x7ec>
 80089ae:	f47f aec3 	bne.w	8008738 <__kernel_rem_pio2+0x55c>
 80089b2:	2000      	movs	r0, #0
 80089b4:	2100      	movs	r1, #0
 80089b6:	e6b7      	b.n	8008728 <__kernel_rem_pio2+0x54c>
 80089b8:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 80089ba:	2b03      	cmp	r3, #3
 80089bc:	f47f aebc 	bne.w	8008738 <__kernel_rem_pio2+0x55c>
 80089c0:	af4a      	add	r7, sp, #296	; 0x128
 80089c2:	2000      	movs	r0, #0
 80089c4:	2100      	movs	r1, #0
 80089c6:	e726      	b.n	8008816 <__kernel_rem_pio2+0x63a>
 80089c8:	9b03      	ldr	r3, [sp, #12]
 80089ca:	b143      	cbz	r3, 80089de <__kernel_rem_pio2+0x802>
 80089cc:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 80089d0:	2200      	movs	r2, #0
 80089d2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80089d6:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80089d8:	e9c4 2300 	strd	r2, r3, [r4]
 80089dc:	e7cf      	b.n	800897e <__kernel_rem_pio2+0x7a2>
 80089de:	2200      	movs	r2, #0
 80089e0:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 80089e4:	2300      	movs	r3, #0
 80089e6:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80089e8:	e9c4 2300 	strd	r2, r3, [r4]
 80089ec:	e7ca      	b.n	8008984 <__kernel_rem_pio2+0x7a8>
 80089ee:	bf00      	nop
 80089f0:	41700000 	.word	0x41700000
 80089f4:	3e700000 	.word	0x3e700000

080089f8 <floor>:
 80089f8:	f3c1 5c0a 	ubfx	ip, r1, #20, #11
 80089fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a00:	f2ac 35ff 	subw	r5, ip, #1023	; 0x3ff
 8008a04:	2d13      	cmp	r5, #19
 8008a06:	4602      	mov	r2, r0
 8008a08:	460b      	mov	r3, r1
 8008a0a:	460c      	mov	r4, r1
 8008a0c:	4606      	mov	r6, r0
 8008a0e:	dc32      	bgt.n	8008a76 <floor+0x7e>
 8008a10:	2d00      	cmp	r5, #0
 8008a12:	db20      	blt.n	8008a56 <floor+0x5e>
 8008a14:	f8df 80e0 	ldr.w	r8, [pc, #224]	; 8008af8 <floor+0x100>
 8008a18:	460f      	mov	r7, r1
 8008a1a:	fa48 f805 	asr.w	r8, r8, r5
 8008a1e:	ea01 0c08 	and.w	ip, r1, r8
 8008a22:	ea5c 0c00 	orrs.w	ip, ip, r0
 8008a26:	d02b      	beq.n	8008a80 <floor+0x88>
 8008a28:	a331      	add	r3, pc, #196	; (adr r3, 8008af0 <floor+0xf8>)
 8008a2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a2e:	f7f7 fb75 	bl	800011c <__adddf3>
 8008a32:	2200      	movs	r2, #0
 8008a34:	2300      	movs	r3, #0
 8008a36:	f7f7 ffb7 	bl	80009a8 <__aeabi_dcmpgt>
 8008a3a:	b140      	cbz	r0, 8008a4e <floor+0x56>
 8008a3c:	2c00      	cmp	r4, #0
 8008a3e:	da03      	bge.n	8008a48 <floor+0x50>
 8008a40:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008a44:	412b      	asrs	r3, r5
 8008a46:	441f      	add	r7, r3
 8008a48:	2600      	movs	r6, #0
 8008a4a:	ea27 0408 	bic.w	r4, r7, r8
 8008a4e:	4621      	mov	r1, r4
 8008a50:	4630      	mov	r0, r6
 8008a52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008a56:	a326      	add	r3, pc, #152	; (adr r3, 8008af0 <floor+0xf8>)
 8008a58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a5c:	f7f7 fb5e 	bl	800011c <__adddf3>
 8008a60:	2200      	movs	r2, #0
 8008a62:	2300      	movs	r3, #0
 8008a64:	f7f7 ffa0 	bl	80009a8 <__aeabi_dcmpgt>
 8008a68:	2800      	cmp	r0, #0
 8008a6a:	d0f0      	beq.n	8008a4e <floor+0x56>
 8008a6c:	2c00      	cmp	r4, #0
 8008a6e:	db27      	blt.n	8008ac0 <floor+0xc8>
 8008a70:	2600      	movs	r6, #0
 8008a72:	4634      	mov	r4, r6
 8008a74:	e7eb      	b.n	8008a4e <floor+0x56>
 8008a76:	2d33      	cmp	r5, #51	; 0x33
 8008a78:	dd06      	ble.n	8008a88 <floor+0x90>
 8008a7a:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 8008a7e:	d01c      	beq.n	8008aba <floor+0xc2>
 8008a80:	4610      	mov	r0, r2
 8008a82:	4619      	mov	r1, r3
 8008a84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008a88:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8008a8c:	f2ac 4c13 	subw	ip, ip, #1043	; 0x413
 8008a90:	fa27 f70c 	lsr.w	r7, r7, ip
 8008a94:	4207      	tst	r7, r0
 8008a96:	d0f3      	beq.n	8008a80 <floor+0x88>
 8008a98:	a315      	add	r3, pc, #84	; (adr r3, 8008af0 <floor+0xf8>)
 8008a9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a9e:	f7f7 fb3d 	bl	800011c <__adddf3>
 8008aa2:	2200      	movs	r2, #0
 8008aa4:	2300      	movs	r3, #0
 8008aa6:	f7f7 ff7f 	bl	80009a8 <__aeabi_dcmpgt>
 8008aaa:	2800      	cmp	r0, #0
 8008aac:	d0cf      	beq.n	8008a4e <floor+0x56>
 8008aae:	2c00      	cmp	r4, #0
 8008ab0:	4633      	mov	r3, r6
 8008ab2:	db0c      	blt.n	8008ace <floor+0xd6>
 8008ab4:	ea23 0607 	bic.w	r6, r3, r7
 8008ab8:	e7c9      	b.n	8008a4e <floor+0x56>
 8008aba:	f7f7 fb2f 	bl	800011c <__adddf3>
 8008abe:	e7e1      	b.n	8008a84 <floor+0x8c>
 8008ac0:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 8008ac4:	4326      	orrs	r6, r4
 8008ac6:	d10d      	bne.n	8008ae4 <floor+0xec>
 8008ac8:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8008acc:	e7bf      	b.n	8008a4e <floor+0x56>
 8008ace:	2d14      	cmp	r5, #20
 8008ad0:	d006      	beq.n	8008ae0 <floor+0xe8>
 8008ad2:	2201      	movs	r2, #1
 8008ad4:	f1c5 0534 	rsb	r5, r5, #52	; 0x34
 8008ad8:	40aa      	lsls	r2, r5
 8008ada:	4413      	add	r3, r2
 8008adc:	42b3      	cmp	r3, r6
 8008ade:	d2e9      	bcs.n	8008ab4 <floor+0xbc>
 8008ae0:	3401      	adds	r4, #1
 8008ae2:	e7e7      	b.n	8008ab4 <floor+0xbc>
 8008ae4:	2600      	movs	r6, #0
 8008ae6:	4c05      	ldr	r4, [pc, #20]	; (8008afc <floor+0x104>)
 8008ae8:	e7b1      	b.n	8008a4e <floor+0x56>
 8008aea:	bf00      	nop
 8008aec:	f3af 8000 	nop.w
 8008af0:	8800759c 	.word	0x8800759c
 8008af4:	7e37e43c 	.word	0x7e37e43c
 8008af8:	000fffff 	.word	0x000fffff
 8008afc:	bff00000 	.word	0xbff00000

08008b00 <__udivmoddi4>:
 8008b00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008b04:	4686      	mov	lr, r0
 8008b06:	468c      	mov	ip, r1
 8008b08:	4608      	mov	r0, r1
 8008b0a:	4615      	mov	r5, r2
 8008b0c:	4674      	mov	r4, lr
 8008b0e:	4619      	mov	r1, r3
 8008b10:	9e08      	ldr	r6, [sp, #32]
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	f040 80c2 	bne.w	8008c9c <__udivmoddi4+0x19c>
 8008b18:	4285      	cmp	r5, r0
 8008b1a:	fab2 f282 	clz	r2, r2
 8008b1e:	d945      	bls.n	8008bac <__udivmoddi4+0xac>
 8008b20:	b14a      	cbz	r2, 8008b36 <__udivmoddi4+0x36>
 8008b22:	f1c2 0320 	rsb	r3, r2, #32
 8008b26:	fa00 fc02 	lsl.w	ip, r0, r2
 8008b2a:	fa2e f303 	lsr.w	r3, lr, r3
 8008b2e:	4095      	lsls	r5, r2
 8008b30:	ea43 0c0c 	orr.w	ip, r3, ip
 8008b34:	4094      	lsls	r4, r2
 8008b36:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8008b3a:	fbbc f8fe 	udiv	r8, ip, lr
 8008b3e:	b2a8      	uxth	r0, r5
 8008b40:	fb0e cc18 	mls	ip, lr, r8, ip
 8008b44:	fb08 f900 	mul.w	r9, r8, r0
 8008b48:	0c23      	lsrs	r3, r4, #16
 8008b4a:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
 8008b4e:	4599      	cmp	r9, r3
 8008b50:	d928      	bls.n	8008ba4 <__udivmoddi4+0xa4>
 8008b52:	18eb      	adds	r3, r5, r3
 8008b54:	f108 37ff 	add.w	r7, r8, #4294967295	; 0xffffffff
 8008b58:	d204      	bcs.n	8008b64 <__udivmoddi4+0x64>
 8008b5a:	4599      	cmp	r9, r3
 8008b5c:	d902      	bls.n	8008b64 <__udivmoddi4+0x64>
 8008b5e:	f1a8 0702 	sub.w	r7, r8, #2
 8008b62:	442b      	add	r3, r5
 8008b64:	eba3 0309 	sub.w	r3, r3, r9
 8008b68:	fbb3 fcfe 	udiv	ip, r3, lr
 8008b6c:	fb0e 331c 	mls	r3, lr, ip, r3
 8008b70:	fb0c f000 	mul.w	r0, ip, r0
 8008b74:	b2a4      	uxth	r4, r4
 8008b76:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8008b7a:	42a0      	cmp	r0, r4
 8008b7c:	d914      	bls.n	8008ba8 <__udivmoddi4+0xa8>
 8008b7e:	192c      	adds	r4, r5, r4
 8008b80:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
 8008b84:	d204      	bcs.n	8008b90 <__udivmoddi4+0x90>
 8008b86:	42a0      	cmp	r0, r4
 8008b88:	d902      	bls.n	8008b90 <__udivmoddi4+0x90>
 8008b8a:	f1ac 0302 	sub.w	r3, ip, #2
 8008b8e:	442c      	add	r4, r5
 8008b90:	1a24      	subs	r4, r4, r0
 8008b92:	ea43 4007 	orr.w	r0, r3, r7, lsl #16
 8008b96:	b11e      	cbz	r6, 8008ba0 <__udivmoddi4+0xa0>
 8008b98:	2300      	movs	r3, #0
 8008b9a:	40d4      	lsrs	r4, r2
 8008b9c:	6034      	str	r4, [r6, #0]
 8008b9e:	6073      	str	r3, [r6, #4]
 8008ba0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ba4:	4647      	mov	r7, r8
 8008ba6:	e7dd      	b.n	8008b64 <__udivmoddi4+0x64>
 8008ba8:	4663      	mov	r3, ip
 8008baa:	e7f1      	b.n	8008b90 <__udivmoddi4+0x90>
 8008bac:	bb92      	cbnz	r2, 8008c14 <__udivmoddi4+0x114>
 8008bae:	2101      	movs	r1, #1
 8008bb0:	1b43      	subs	r3, r0, r5
 8008bb2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8008bb6:	fbb3 fcfe 	udiv	ip, r3, lr
 8008bba:	b2af      	uxth	r7, r5
 8008bbc:	fb0e 331c 	mls	r3, lr, ip, r3
 8008bc0:	fb0c f807 	mul.w	r8, ip, r7
 8008bc4:	0c20      	lsrs	r0, r4, #16
 8008bc6:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8008bca:	4598      	cmp	r8, r3
 8008bcc:	d962      	bls.n	8008c94 <__udivmoddi4+0x194>
 8008bce:	18eb      	adds	r3, r5, r3
 8008bd0:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8008bd4:	d204      	bcs.n	8008be0 <__udivmoddi4+0xe0>
 8008bd6:	4598      	cmp	r8, r3
 8008bd8:	d902      	bls.n	8008be0 <__udivmoddi4+0xe0>
 8008bda:	f1ac 0002 	sub.w	r0, ip, #2
 8008bde:	442b      	add	r3, r5
 8008be0:	eba3 0308 	sub.w	r3, r3, r8
 8008be4:	fbb3 fcfe 	udiv	ip, r3, lr
 8008be8:	fb0e 331c 	mls	r3, lr, ip, r3
 8008bec:	fb0c f707 	mul.w	r7, ip, r7
 8008bf0:	b2a4      	uxth	r4, r4
 8008bf2:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8008bf6:	42a7      	cmp	r7, r4
 8008bf8:	d94e      	bls.n	8008c98 <__udivmoddi4+0x198>
 8008bfa:	192c      	adds	r4, r5, r4
 8008bfc:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
 8008c00:	d204      	bcs.n	8008c0c <__udivmoddi4+0x10c>
 8008c02:	42a7      	cmp	r7, r4
 8008c04:	d902      	bls.n	8008c0c <__udivmoddi4+0x10c>
 8008c06:	f1ac 0302 	sub.w	r3, ip, #2
 8008c0a:	442c      	add	r4, r5
 8008c0c:	1be4      	subs	r4, r4, r7
 8008c0e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8008c12:	e7c0      	b.n	8008b96 <__udivmoddi4+0x96>
 8008c14:	f1c2 0320 	rsb	r3, r2, #32
 8008c18:	4095      	lsls	r5, r2
 8008c1a:	fa20 f103 	lsr.w	r1, r0, r3
 8008c1e:	fa2e f303 	lsr.w	r3, lr, r3
 8008c22:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8008c26:	fbb1 fcfe 	udiv	ip, r1, lr
 8008c2a:	4090      	lsls	r0, r2
 8008c2c:	4303      	orrs	r3, r0
 8008c2e:	b2af      	uxth	r7, r5
 8008c30:	fb0e 101c 	mls	r0, lr, ip, r1
 8008c34:	fb0c f807 	mul.w	r8, ip, r7
 8008c38:	0c19      	lsrs	r1, r3, #16
 8008c3a:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008c3e:	4588      	cmp	r8, r1
 8008c40:	fa04 f402 	lsl.w	r4, r4, r2
 8008c44:	d922      	bls.n	8008c8c <__udivmoddi4+0x18c>
 8008c46:	1869      	adds	r1, r5, r1
 8008c48:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8008c4c:	d204      	bcs.n	8008c58 <__udivmoddi4+0x158>
 8008c4e:	4588      	cmp	r8, r1
 8008c50:	d902      	bls.n	8008c58 <__udivmoddi4+0x158>
 8008c52:	f1ac 0002 	sub.w	r0, ip, #2
 8008c56:	4429      	add	r1, r5
 8008c58:	eba1 0108 	sub.w	r1, r1, r8
 8008c5c:	fbb1 fcfe 	udiv	ip, r1, lr
 8008c60:	fb0e 111c 	mls	r1, lr, ip, r1
 8008c64:	fb0c f707 	mul.w	r7, ip, r7
 8008c68:	b29b      	uxth	r3, r3
 8008c6a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8008c6e:	429f      	cmp	r7, r3
 8008c70:	d90e      	bls.n	8008c90 <__udivmoddi4+0x190>
 8008c72:	18eb      	adds	r3, r5, r3
 8008c74:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
 8008c78:	d204      	bcs.n	8008c84 <__udivmoddi4+0x184>
 8008c7a:	429f      	cmp	r7, r3
 8008c7c:	d902      	bls.n	8008c84 <__udivmoddi4+0x184>
 8008c7e:	f1ac 0102 	sub.w	r1, ip, #2
 8008c82:	442b      	add	r3, r5
 8008c84:	1bdb      	subs	r3, r3, r7
 8008c86:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008c8a:	e792      	b.n	8008bb2 <__udivmoddi4+0xb2>
 8008c8c:	4660      	mov	r0, ip
 8008c8e:	e7e3      	b.n	8008c58 <__udivmoddi4+0x158>
 8008c90:	4661      	mov	r1, ip
 8008c92:	e7f7      	b.n	8008c84 <__udivmoddi4+0x184>
 8008c94:	4660      	mov	r0, ip
 8008c96:	e7a3      	b.n	8008be0 <__udivmoddi4+0xe0>
 8008c98:	4663      	mov	r3, ip
 8008c9a:	e7b7      	b.n	8008c0c <__udivmoddi4+0x10c>
 8008c9c:	4283      	cmp	r3, r0
 8008c9e:	d906      	bls.n	8008cae <__udivmoddi4+0x1ae>
 8008ca0:	b916      	cbnz	r6, 8008ca8 <__udivmoddi4+0x1a8>
 8008ca2:	2100      	movs	r1, #0
 8008ca4:	4608      	mov	r0, r1
 8008ca6:	e77b      	b.n	8008ba0 <__udivmoddi4+0xa0>
 8008ca8:	e9c6 e000 	strd	lr, r0, [r6]
 8008cac:	e7f9      	b.n	8008ca2 <__udivmoddi4+0x1a2>
 8008cae:	fab3 f783 	clz	r7, r3
 8008cb2:	b98f      	cbnz	r7, 8008cd8 <__udivmoddi4+0x1d8>
 8008cb4:	4283      	cmp	r3, r0
 8008cb6:	d301      	bcc.n	8008cbc <__udivmoddi4+0x1bc>
 8008cb8:	4572      	cmp	r2, lr
 8008cba:	d808      	bhi.n	8008cce <__udivmoddi4+0x1ce>
 8008cbc:	ebbe 0402 	subs.w	r4, lr, r2
 8008cc0:	eb60 0303 	sbc.w	r3, r0, r3
 8008cc4:	2001      	movs	r0, #1
 8008cc6:	469c      	mov	ip, r3
 8008cc8:	b91e      	cbnz	r6, 8008cd2 <__udivmoddi4+0x1d2>
 8008cca:	2100      	movs	r1, #0
 8008ccc:	e768      	b.n	8008ba0 <__udivmoddi4+0xa0>
 8008cce:	4638      	mov	r0, r7
 8008cd0:	e7fa      	b.n	8008cc8 <__udivmoddi4+0x1c8>
 8008cd2:	e9c6 4c00 	strd	r4, ip, [r6]
 8008cd6:	e7f8      	b.n	8008cca <__udivmoddi4+0x1ca>
 8008cd8:	f1c7 0c20 	rsb	ip, r7, #32
 8008cdc:	40bb      	lsls	r3, r7
 8008cde:	fa22 f40c 	lsr.w	r4, r2, ip
 8008ce2:	431c      	orrs	r4, r3
 8008ce4:	ea4f 4914 	mov.w	r9, r4, lsr #16
 8008ce8:	fa20 f30c 	lsr.w	r3, r0, ip
 8008cec:	fbb3 f8f9 	udiv	r8, r3, r9
 8008cf0:	40b8      	lsls	r0, r7
 8008cf2:	fa2e f10c 	lsr.w	r1, lr, ip
 8008cf6:	4301      	orrs	r1, r0
 8008cf8:	fa0e f507 	lsl.w	r5, lr, r7
 8008cfc:	fb09 3018 	mls	r0, r9, r8, r3
 8008d00:	fa1f fe84 	uxth.w	lr, r4
 8008d04:	fb08 fa0e 	mul.w	sl, r8, lr
 8008d08:	0c0b      	lsrs	r3, r1, #16
 8008d0a:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8008d0e:	459a      	cmp	sl, r3
 8008d10:	fa02 f207 	lsl.w	r2, r2, r7
 8008d14:	d940      	bls.n	8008d98 <__udivmoddi4+0x298>
 8008d16:	18e3      	adds	r3, r4, r3
 8008d18:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
 8008d1c:	d204      	bcs.n	8008d28 <__udivmoddi4+0x228>
 8008d1e:	459a      	cmp	sl, r3
 8008d20:	d902      	bls.n	8008d28 <__udivmoddi4+0x228>
 8008d22:	f1a8 0002 	sub.w	r0, r8, #2
 8008d26:	4423      	add	r3, r4
 8008d28:	eba3 030a 	sub.w	r3, r3, sl
 8008d2c:	fbb3 f8f9 	udiv	r8, r3, r9
 8008d30:	fb09 3318 	mls	r3, r9, r8, r3
 8008d34:	fb08 fe0e 	mul.w	lr, r8, lr
 8008d38:	b289      	uxth	r1, r1
 8008d3a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8008d3e:	458e      	cmp	lr, r1
 8008d40:	d92c      	bls.n	8008d9c <__udivmoddi4+0x29c>
 8008d42:	1861      	adds	r1, r4, r1
 8008d44:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
 8008d48:	d204      	bcs.n	8008d54 <__udivmoddi4+0x254>
 8008d4a:	458e      	cmp	lr, r1
 8008d4c:	d902      	bls.n	8008d54 <__udivmoddi4+0x254>
 8008d4e:	f1a8 0302 	sub.w	r3, r8, #2
 8008d52:	4421      	add	r1, r4
 8008d54:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8008d58:	fba0 9802 	umull	r9, r8, r0, r2
 8008d5c:	eba1 010e 	sub.w	r1, r1, lr
 8008d60:	4541      	cmp	r1, r8
 8008d62:	46ce      	mov	lr, r9
 8008d64:	4643      	mov	r3, r8
 8008d66:	d302      	bcc.n	8008d6e <__udivmoddi4+0x26e>
 8008d68:	d106      	bne.n	8008d78 <__udivmoddi4+0x278>
 8008d6a:	454d      	cmp	r5, r9
 8008d6c:	d204      	bcs.n	8008d78 <__udivmoddi4+0x278>
 8008d6e:	ebb9 0e02 	subs.w	lr, r9, r2
 8008d72:	eb68 0304 	sbc.w	r3, r8, r4
 8008d76:	3801      	subs	r0, #1
 8008d78:	2e00      	cmp	r6, #0
 8008d7a:	d0a6      	beq.n	8008cca <__udivmoddi4+0x1ca>
 8008d7c:	ebb5 020e 	subs.w	r2, r5, lr
 8008d80:	eb61 0103 	sbc.w	r1, r1, r3
 8008d84:	fa01 fc0c 	lsl.w	ip, r1, ip
 8008d88:	fa22 f307 	lsr.w	r3, r2, r7
 8008d8c:	ea4c 0303 	orr.w	r3, ip, r3
 8008d90:	40f9      	lsrs	r1, r7
 8008d92:	e9c6 3100 	strd	r3, r1, [r6]
 8008d96:	e798      	b.n	8008cca <__udivmoddi4+0x1ca>
 8008d98:	4640      	mov	r0, r8
 8008d9a:	e7c5      	b.n	8008d28 <__udivmoddi4+0x228>
 8008d9c:	4643      	mov	r3, r8
 8008d9e:	e7d9      	b.n	8008d54 <__udivmoddi4+0x254>

08008da0 <_init>:
 8008da0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008da2:	bf00      	nop
 8008da4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008da6:	bc08      	pop	{r3}
 8008da8:	469e      	mov	lr, r3
 8008daa:	4770      	bx	lr

08008dac <_fini>:
 8008dac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008dae:	bf00      	nop
 8008db0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008db2:	bc08      	pop	{r3}
 8008db4:	469e      	mov	lr, r3
 8008db6:	4770      	bx	lr

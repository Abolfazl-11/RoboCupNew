
RoboCupNew1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009a50  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000270  08009b60  08009b60  00019b60  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009dd0  08009dd0  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  08009dd0  08009dd0  00019dd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009dd8  08009dd8  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009dd8  08009dd8  00019dd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009ddc  08009ddc  00019ddc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08009de0  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000440  200001e0  08009fc0  000201e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000620  08009fc0  00020620  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012649  00000000  00000000  00020209  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000036a3  00000000  00000000  00032852  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001220  00000000  00000000  00035ef8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001072  00000000  00000000  00037118  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018f4a  00000000  00000000  0003818a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012017  00000000  00000000  000510d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008d694  00000000  00000000  000630eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      0000001e  00000000  00000000  000f077f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004998  00000000  00000000  000f07a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000100  00000000  00000000  000f5138  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loclists 00003924  00000000  00000000  000f5238  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__aeabi_drsub>:
 8000110:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000114:	e002      	b.n	800011c <__adddf3>
 8000116:	bf00      	nop

08000118 <__aeabi_dsub>:
 8000118:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800011c <__adddf3>:
 800011c:	b530      	push	{r4, r5, lr}
 800011e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000122:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000126:	ea94 0f05 	teq	r4, r5
 800012a:	bf08      	it	eq
 800012c:	ea90 0f02 	teqeq	r0, r2
 8000130:	bf1f      	itttt	ne
 8000132:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000136:	ea55 0c02 	orrsne.w	ip, r5, r2
 800013a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800013e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000142:	f000 80e2 	beq.w	800030a <__adddf3+0x1ee>
 8000146:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800014a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800014e:	bfb8      	it	lt
 8000150:	426d      	neglt	r5, r5
 8000152:	dd0c      	ble.n	800016e <__adddf3+0x52>
 8000154:	442c      	add	r4, r5
 8000156:	ea80 0202 	eor.w	r2, r0, r2
 800015a:	ea81 0303 	eor.w	r3, r1, r3
 800015e:	ea82 0000 	eor.w	r0, r2, r0
 8000162:	ea83 0101 	eor.w	r1, r3, r1
 8000166:	ea80 0202 	eor.w	r2, r0, r2
 800016a:	ea81 0303 	eor.w	r3, r1, r3
 800016e:	2d36      	cmp	r5, #54	; 0x36
 8000170:	bf88      	it	hi
 8000172:	bd30      	pophi	{r4, r5, pc}
 8000174:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000178:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800017c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000180:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000184:	d002      	beq.n	800018c <__adddf3+0x70>
 8000186:	4240      	negs	r0, r0
 8000188:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800018c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000190:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000194:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000198:	d002      	beq.n	80001a0 <__adddf3+0x84>
 800019a:	4252      	negs	r2, r2
 800019c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001a0:	ea94 0f05 	teq	r4, r5
 80001a4:	f000 80a7 	beq.w	80002f6 <__adddf3+0x1da>
 80001a8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ac:	f1d5 0e20 	rsbs	lr, r5, #32
 80001b0:	db0d      	blt.n	80001ce <__adddf3+0xb2>
 80001b2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001b6:	fa22 f205 	lsr.w	r2, r2, r5
 80001ba:	1880      	adds	r0, r0, r2
 80001bc:	f141 0100 	adc.w	r1, r1, #0
 80001c0:	fa03 f20e 	lsl.w	r2, r3, lr
 80001c4:	1880      	adds	r0, r0, r2
 80001c6:	fa43 f305 	asr.w	r3, r3, r5
 80001ca:	4159      	adcs	r1, r3
 80001cc:	e00e      	b.n	80001ec <__adddf3+0xd0>
 80001ce:	f1a5 0520 	sub.w	r5, r5, #32
 80001d2:	f10e 0e20 	add.w	lr, lr, #32
 80001d6:	2a01      	cmp	r2, #1
 80001d8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80001dc:	bf28      	it	cs
 80001de:	f04c 0c02 	orrcs.w	ip, ip, #2
 80001e2:	fa43 f305 	asr.w	r3, r3, r5
 80001e6:	18c0      	adds	r0, r0, r3
 80001e8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80001ec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80001f0:	d507      	bpl.n	8000202 <__adddf3+0xe6>
 80001f2:	f04f 0e00 	mov.w	lr, #0
 80001f6:	f1dc 0c00 	rsbs	ip, ip, #0
 80001fa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80001fe:	eb6e 0101 	sbc.w	r1, lr, r1
 8000202:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000206:	d31b      	bcc.n	8000240 <__adddf3+0x124>
 8000208:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800020c:	d30c      	bcc.n	8000228 <__adddf3+0x10c>
 800020e:	0849      	lsrs	r1, r1, #1
 8000210:	ea5f 0030 	movs.w	r0, r0, rrx
 8000214:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000218:	f104 0401 	add.w	r4, r4, #1
 800021c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000220:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000224:	f080 809a 	bcs.w	800035c <__adddf3+0x240>
 8000228:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800022c:	bf08      	it	eq
 800022e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000232:	f150 0000 	adcs.w	r0, r0, #0
 8000236:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800023a:	ea41 0105 	orr.w	r1, r1, r5
 800023e:	bd30      	pop	{r4, r5, pc}
 8000240:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000244:	4140      	adcs	r0, r0
 8000246:	eb41 0101 	adc.w	r1, r1, r1
 800024a:	3c01      	subs	r4, #1
 800024c:	bf28      	it	cs
 800024e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000252:	d2e9      	bcs.n	8000228 <__adddf3+0x10c>
 8000254:	f091 0f00 	teq	r1, #0
 8000258:	bf04      	itt	eq
 800025a:	4601      	moveq	r1, r0
 800025c:	2000      	moveq	r0, #0
 800025e:	fab1 f381 	clz	r3, r1
 8000262:	bf08      	it	eq
 8000264:	3320      	addeq	r3, #32
 8000266:	f1a3 030b 	sub.w	r3, r3, #11
 800026a:	f1b3 0220 	subs.w	r2, r3, #32
 800026e:	da0c      	bge.n	800028a <__adddf3+0x16e>
 8000270:	320c      	adds	r2, #12
 8000272:	dd08      	ble.n	8000286 <__adddf3+0x16a>
 8000274:	f102 0c14 	add.w	ip, r2, #20
 8000278:	f1c2 020c 	rsb	r2, r2, #12
 800027c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000280:	fa21 f102 	lsr.w	r1, r1, r2
 8000284:	e00c      	b.n	80002a0 <__adddf3+0x184>
 8000286:	f102 0214 	add.w	r2, r2, #20
 800028a:	bfd8      	it	le
 800028c:	f1c2 0c20 	rsble	ip, r2, #32
 8000290:	fa01 f102 	lsl.w	r1, r1, r2
 8000294:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000298:	bfdc      	itt	le
 800029a:	ea41 010c 	orrle.w	r1, r1, ip
 800029e:	4090      	lslle	r0, r2
 80002a0:	1ae4      	subs	r4, r4, r3
 80002a2:	bfa2      	ittt	ge
 80002a4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002a8:	4329      	orrge	r1, r5
 80002aa:	bd30      	popge	{r4, r5, pc}
 80002ac:	ea6f 0404 	mvn.w	r4, r4
 80002b0:	3c1f      	subs	r4, #31
 80002b2:	da1c      	bge.n	80002ee <__adddf3+0x1d2>
 80002b4:	340c      	adds	r4, #12
 80002b6:	dc0e      	bgt.n	80002d6 <__adddf3+0x1ba>
 80002b8:	f104 0414 	add.w	r4, r4, #20
 80002bc:	f1c4 0220 	rsb	r2, r4, #32
 80002c0:	fa20 f004 	lsr.w	r0, r0, r4
 80002c4:	fa01 f302 	lsl.w	r3, r1, r2
 80002c8:	ea40 0003 	orr.w	r0, r0, r3
 80002cc:	fa21 f304 	lsr.w	r3, r1, r4
 80002d0:	ea45 0103 	orr.w	r1, r5, r3
 80002d4:	bd30      	pop	{r4, r5, pc}
 80002d6:	f1c4 040c 	rsb	r4, r4, #12
 80002da:	f1c4 0220 	rsb	r2, r4, #32
 80002de:	fa20 f002 	lsr.w	r0, r0, r2
 80002e2:	fa01 f304 	lsl.w	r3, r1, r4
 80002e6:	ea40 0003 	orr.w	r0, r0, r3
 80002ea:	4629      	mov	r1, r5
 80002ec:	bd30      	pop	{r4, r5, pc}
 80002ee:	fa21 f004 	lsr.w	r0, r1, r4
 80002f2:	4629      	mov	r1, r5
 80002f4:	bd30      	pop	{r4, r5, pc}
 80002f6:	f094 0f00 	teq	r4, #0
 80002fa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80002fe:	bf06      	itte	eq
 8000300:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000304:	3401      	addeq	r4, #1
 8000306:	3d01      	subne	r5, #1
 8000308:	e74e      	b.n	80001a8 <__adddf3+0x8c>
 800030a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800030e:	bf18      	it	ne
 8000310:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000314:	d029      	beq.n	800036a <__adddf3+0x24e>
 8000316:	ea94 0f05 	teq	r4, r5
 800031a:	bf08      	it	eq
 800031c:	ea90 0f02 	teqeq	r0, r2
 8000320:	d005      	beq.n	800032e <__adddf3+0x212>
 8000322:	ea54 0c00 	orrs.w	ip, r4, r0
 8000326:	bf04      	itt	eq
 8000328:	4619      	moveq	r1, r3
 800032a:	4610      	moveq	r0, r2
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	ea91 0f03 	teq	r1, r3
 8000332:	bf1e      	ittt	ne
 8000334:	2100      	movne	r1, #0
 8000336:	2000      	movne	r0, #0
 8000338:	bd30      	popne	{r4, r5, pc}
 800033a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800033e:	d105      	bne.n	800034c <__adddf3+0x230>
 8000340:	0040      	lsls	r0, r0, #1
 8000342:	4149      	adcs	r1, r1
 8000344:	bf28      	it	cs
 8000346:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800034a:	bd30      	pop	{r4, r5, pc}
 800034c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000350:	bf3c      	itt	cc
 8000352:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000356:	bd30      	popcc	{r4, r5, pc}
 8000358:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800035c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000360:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000364:	f04f 0000 	mov.w	r0, #0
 8000368:	bd30      	pop	{r4, r5, pc}
 800036a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800036e:	bf1a      	itte	ne
 8000370:	4619      	movne	r1, r3
 8000372:	4610      	movne	r0, r2
 8000374:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000378:	bf1c      	itt	ne
 800037a:	460b      	movne	r3, r1
 800037c:	4602      	movne	r2, r0
 800037e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000382:	bf06      	itte	eq
 8000384:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000388:	ea91 0f03 	teqeq	r1, r3
 800038c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000390:	bd30      	pop	{r4, r5, pc}
 8000392:	bf00      	nop

08000394 <__aeabi_ui2d>:
 8000394:	f090 0f00 	teq	r0, #0
 8000398:	bf04      	itt	eq
 800039a:	2100      	moveq	r1, #0
 800039c:	4770      	bxeq	lr
 800039e:	b530      	push	{r4, r5, lr}
 80003a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003a8:	f04f 0500 	mov.w	r5, #0
 80003ac:	f04f 0100 	mov.w	r1, #0
 80003b0:	e750      	b.n	8000254 <__adddf3+0x138>
 80003b2:	bf00      	nop

080003b4 <__aeabi_i2d>:
 80003b4:	f090 0f00 	teq	r0, #0
 80003b8:	bf04      	itt	eq
 80003ba:	2100      	moveq	r1, #0
 80003bc:	4770      	bxeq	lr
 80003be:	b530      	push	{r4, r5, lr}
 80003c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003c8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80003cc:	bf48      	it	mi
 80003ce:	4240      	negmi	r0, r0
 80003d0:	f04f 0100 	mov.w	r1, #0
 80003d4:	e73e      	b.n	8000254 <__adddf3+0x138>
 80003d6:	bf00      	nop

080003d8 <__aeabi_f2d>:
 80003d8:	0042      	lsls	r2, r0, #1
 80003da:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80003de:	ea4f 0131 	mov.w	r1, r1, rrx
 80003e2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80003e6:	bf1f      	itttt	ne
 80003e8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80003ec:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80003f0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80003f4:	4770      	bxne	lr
 80003f6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80003fa:	bf08      	it	eq
 80003fc:	4770      	bxeq	lr
 80003fe:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000402:	bf04      	itt	eq
 8000404:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000408:	4770      	bxeq	lr
 800040a:	b530      	push	{r4, r5, lr}
 800040c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000418:	e71c      	b.n	8000254 <__adddf3+0x138>
 800041a:	bf00      	nop

0800041c <__aeabi_ul2d>:
 800041c:	ea50 0201 	orrs.w	r2, r0, r1
 8000420:	bf08      	it	eq
 8000422:	4770      	bxeq	lr
 8000424:	b530      	push	{r4, r5, lr}
 8000426:	f04f 0500 	mov.w	r5, #0
 800042a:	e00a      	b.n	8000442 <__aeabi_l2d+0x16>

0800042c <__aeabi_l2d>:
 800042c:	ea50 0201 	orrs.w	r2, r0, r1
 8000430:	bf08      	it	eq
 8000432:	4770      	bxeq	lr
 8000434:	b530      	push	{r4, r5, lr}
 8000436:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800043a:	d502      	bpl.n	8000442 <__aeabi_l2d+0x16>
 800043c:	4240      	negs	r0, r0
 800043e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000442:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000446:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800044a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800044e:	f43f aed8 	beq.w	8000202 <__adddf3+0xe6>
 8000452:	f04f 0203 	mov.w	r2, #3
 8000456:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800045a:	bf18      	it	ne
 800045c:	3203      	addne	r2, #3
 800045e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000462:	bf18      	it	ne
 8000464:	3203      	addne	r2, #3
 8000466:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800046a:	f1c2 0320 	rsb	r3, r2, #32
 800046e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000472:	fa20 f002 	lsr.w	r0, r0, r2
 8000476:	fa01 fe03 	lsl.w	lr, r1, r3
 800047a:	ea40 000e 	orr.w	r0, r0, lr
 800047e:	fa21 f102 	lsr.w	r1, r1, r2
 8000482:	4414      	add	r4, r2
 8000484:	e6bd      	b.n	8000202 <__adddf3+0xe6>
 8000486:	bf00      	nop

08000488 <__aeabi_dmul>:
 8000488:	b570      	push	{r4, r5, r6, lr}
 800048a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800048e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000492:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000496:	bf1d      	ittte	ne
 8000498:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800049c:	ea94 0f0c 	teqne	r4, ip
 80004a0:	ea95 0f0c 	teqne	r5, ip
 80004a4:	f000 f8de 	bleq	8000664 <__aeabi_dmul+0x1dc>
 80004a8:	442c      	add	r4, r5
 80004aa:	ea81 0603 	eor.w	r6, r1, r3
 80004ae:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004b2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004b6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004ba:	bf18      	it	ne
 80004bc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80004c0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80004c4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80004c8:	d038      	beq.n	800053c <__aeabi_dmul+0xb4>
 80004ca:	fba0 ce02 	umull	ip, lr, r0, r2
 80004ce:	f04f 0500 	mov.w	r5, #0
 80004d2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80004d6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80004da:	fbe0 e503 	umlal	lr, r5, r0, r3
 80004de:	f04f 0600 	mov.w	r6, #0
 80004e2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80004e6:	f09c 0f00 	teq	ip, #0
 80004ea:	bf18      	it	ne
 80004ec:	f04e 0e01 	orrne.w	lr, lr, #1
 80004f0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80004f4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80004f8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80004fc:	d204      	bcs.n	8000508 <__aeabi_dmul+0x80>
 80004fe:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000502:	416d      	adcs	r5, r5
 8000504:	eb46 0606 	adc.w	r6, r6, r6
 8000508:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800050c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000510:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000514:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000518:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800051c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000520:	bf88      	it	hi
 8000522:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000526:	d81e      	bhi.n	8000566 <__aeabi_dmul+0xde>
 8000528:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800052c:	bf08      	it	eq
 800052e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000532:	f150 0000 	adcs.w	r0, r0, #0
 8000536:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800053a:	bd70      	pop	{r4, r5, r6, pc}
 800053c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000540:	ea46 0101 	orr.w	r1, r6, r1
 8000544:	ea40 0002 	orr.w	r0, r0, r2
 8000548:	ea81 0103 	eor.w	r1, r1, r3
 800054c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000550:	bfc2      	ittt	gt
 8000552:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000556:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800055a:	bd70      	popgt	{r4, r5, r6, pc}
 800055c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000560:	f04f 0e00 	mov.w	lr, #0
 8000564:	3c01      	subs	r4, #1
 8000566:	f300 80ab 	bgt.w	80006c0 <__aeabi_dmul+0x238>
 800056a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800056e:	bfde      	ittt	le
 8000570:	2000      	movle	r0, #0
 8000572:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000576:	bd70      	pople	{r4, r5, r6, pc}
 8000578:	f1c4 0400 	rsb	r4, r4, #0
 800057c:	3c20      	subs	r4, #32
 800057e:	da35      	bge.n	80005ec <__aeabi_dmul+0x164>
 8000580:	340c      	adds	r4, #12
 8000582:	dc1b      	bgt.n	80005bc <__aeabi_dmul+0x134>
 8000584:	f104 0414 	add.w	r4, r4, #20
 8000588:	f1c4 0520 	rsb	r5, r4, #32
 800058c:	fa00 f305 	lsl.w	r3, r0, r5
 8000590:	fa20 f004 	lsr.w	r0, r0, r4
 8000594:	fa01 f205 	lsl.w	r2, r1, r5
 8000598:	ea40 0002 	orr.w	r0, r0, r2
 800059c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005a0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005a8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ac:	eb42 0106 	adc.w	r1, r2, r6
 80005b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005b4:	bf08      	it	eq
 80005b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005ba:	bd70      	pop	{r4, r5, r6, pc}
 80005bc:	f1c4 040c 	rsb	r4, r4, #12
 80005c0:	f1c4 0520 	rsb	r5, r4, #32
 80005c4:	fa00 f304 	lsl.w	r3, r0, r4
 80005c8:	fa20 f005 	lsr.w	r0, r0, r5
 80005cc:	fa01 f204 	lsl.w	r2, r1, r4
 80005d0:	ea40 0002 	orr.w	r0, r0, r2
 80005d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005dc:	f141 0100 	adc.w	r1, r1, #0
 80005e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005e4:	bf08      	it	eq
 80005e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005ea:	bd70      	pop	{r4, r5, r6, pc}
 80005ec:	f1c4 0520 	rsb	r5, r4, #32
 80005f0:	fa00 f205 	lsl.w	r2, r0, r5
 80005f4:	ea4e 0e02 	orr.w	lr, lr, r2
 80005f8:	fa20 f304 	lsr.w	r3, r0, r4
 80005fc:	fa01 f205 	lsl.w	r2, r1, r5
 8000600:	ea43 0302 	orr.w	r3, r3, r2
 8000604:	fa21 f004 	lsr.w	r0, r1, r4
 8000608:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800060c:	fa21 f204 	lsr.w	r2, r1, r4
 8000610:	ea20 0002 	bic.w	r0, r0, r2
 8000614:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000618:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800061c:	bf08      	it	eq
 800061e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000622:	bd70      	pop	{r4, r5, r6, pc}
 8000624:	f094 0f00 	teq	r4, #0
 8000628:	d10f      	bne.n	800064a <__aeabi_dmul+0x1c2>
 800062a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800062e:	0040      	lsls	r0, r0, #1
 8000630:	eb41 0101 	adc.w	r1, r1, r1
 8000634:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000638:	bf08      	it	eq
 800063a:	3c01      	subeq	r4, #1
 800063c:	d0f7      	beq.n	800062e <__aeabi_dmul+0x1a6>
 800063e:	ea41 0106 	orr.w	r1, r1, r6
 8000642:	f095 0f00 	teq	r5, #0
 8000646:	bf18      	it	ne
 8000648:	4770      	bxne	lr
 800064a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800064e:	0052      	lsls	r2, r2, #1
 8000650:	eb43 0303 	adc.w	r3, r3, r3
 8000654:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000658:	bf08      	it	eq
 800065a:	3d01      	subeq	r5, #1
 800065c:	d0f7      	beq.n	800064e <__aeabi_dmul+0x1c6>
 800065e:	ea43 0306 	orr.w	r3, r3, r6
 8000662:	4770      	bx	lr
 8000664:	ea94 0f0c 	teq	r4, ip
 8000668:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800066c:	bf18      	it	ne
 800066e:	ea95 0f0c 	teqne	r5, ip
 8000672:	d00c      	beq.n	800068e <__aeabi_dmul+0x206>
 8000674:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000678:	bf18      	it	ne
 800067a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800067e:	d1d1      	bne.n	8000624 <__aeabi_dmul+0x19c>
 8000680:	ea81 0103 	eor.w	r1, r1, r3
 8000684:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000688:	f04f 0000 	mov.w	r0, #0
 800068c:	bd70      	pop	{r4, r5, r6, pc}
 800068e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000692:	bf06      	itte	eq
 8000694:	4610      	moveq	r0, r2
 8000696:	4619      	moveq	r1, r3
 8000698:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800069c:	d019      	beq.n	80006d2 <__aeabi_dmul+0x24a>
 800069e:	ea94 0f0c 	teq	r4, ip
 80006a2:	d102      	bne.n	80006aa <__aeabi_dmul+0x222>
 80006a4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006a8:	d113      	bne.n	80006d2 <__aeabi_dmul+0x24a>
 80006aa:	ea95 0f0c 	teq	r5, ip
 80006ae:	d105      	bne.n	80006bc <__aeabi_dmul+0x234>
 80006b0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006b4:	bf1c      	itt	ne
 80006b6:	4610      	movne	r0, r2
 80006b8:	4619      	movne	r1, r3
 80006ba:	d10a      	bne.n	80006d2 <__aeabi_dmul+0x24a>
 80006bc:	ea81 0103 	eor.w	r1, r1, r3
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80006c8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80006cc:	f04f 0000 	mov.w	r0, #0
 80006d0:	bd70      	pop	{r4, r5, r6, pc}
 80006d2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80006d6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80006da:	bd70      	pop	{r4, r5, r6, pc}

080006dc <__aeabi_ddiv>:
 80006dc:	b570      	push	{r4, r5, r6, lr}
 80006de:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80006e2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80006e6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80006ea:	bf1d      	ittte	ne
 80006ec:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80006f0:	ea94 0f0c 	teqne	r4, ip
 80006f4:	ea95 0f0c 	teqne	r5, ip
 80006f8:	f000 f8a7 	bleq	800084a <__aeabi_ddiv+0x16e>
 80006fc:	eba4 0405 	sub.w	r4, r4, r5
 8000700:	ea81 0e03 	eor.w	lr, r1, r3
 8000704:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000708:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800070c:	f000 8088 	beq.w	8000820 <__aeabi_ddiv+0x144>
 8000710:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000714:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000718:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800071c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000720:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000724:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000728:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800072c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000730:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000734:	429d      	cmp	r5, r3
 8000736:	bf08      	it	eq
 8000738:	4296      	cmpeq	r6, r2
 800073a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800073e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000742:	d202      	bcs.n	800074a <__aeabi_ddiv+0x6e>
 8000744:	085b      	lsrs	r3, r3, #1
 8000746:	ea4f 0232 	mov.w	r2, r2, rrx
 800074a:	1ab6      	subs	r6, r6, r2
 800074c:	eb65 0503 	sbc.w	r5, r5, r3
 8000750:	085b      	lsrs	r3, r3, #1
 8000752:	ea4f 0232 	mov.w	r2, r2, rrx
 8000756:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800075a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800075e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000762:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000766:	bf22      	ittt	cs
 8000768:	1ab6      	subcs	r6, r6, r2
 800076a:	4675      	movcs	r5, lr
 800076c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000770:	085b      	lsrs	r3, r3, #1
 8000772:	ea4f 0232 	mov.w	r2, r2, rrx
 8000776:	ebb6 0e02 	subs.w	lr, r6, r2
 800077a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800077e:	bf22      	ittt	cs
 8000780:	1ab6      	subcs	r6, r6, r2
 8000782:	4675      	movcs	r5, lr
 8000784:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000788:	085b      	lsrs	r3, r3, #1
 800078a:	ea4f 0232 	mov.w	r2, r2, rrx
 800078e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000792:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000796:	bf22      	ittt	cs
 8000798:	1ab6      	subcs	r6, r6, r2
 800079a:	4675      	movcs	r5, lr
 800079c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ae:	bf22      	ittt	cs
 80007b0:	1ab6      	subcs	r6, r6, r2
 80007b2:	4675      	movcs	r5, lr
 80007b4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007b8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007bc:	d018      	beq.n	80007f0 <__aeabi_ddiv+0x114>
 80007be:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80007c2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80007c6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80007ca:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80007ce:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80007d2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80007d6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80007da:	d1c0      	bne.n	800075e <__aeabi_ddiv+0x82>
 80007dc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e0:	d10b      	bne.n	80007fa <__aeabi_ddiv+0x11e>
 80007e2:	ea41 0100 	orr.w	r1, r1, r0
 80007e6:	f04f 0000 	mov.w	r0, #0
 80007ea:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80007ee:	e7b6      	b.n	800075e <__aeabi_ddiv+0x82>
 80007f0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f4:	bf04      	itt	eq
 80007f6:	4301      	orreq	r1, r0
 80007f8:	2000      	moveq	r0, #0
 80007fa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80007fe:	bf88      	it	hi
 8000800:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000804:	f63f aeaf 	bhi.w	8000566 <__aeabi_dmul+0xde>
 8000808:	ebb5 0c03 	subs.w	ip, r5, r3
 800080c:	bf04      	itt	eq
 800080e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000812:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000816:	f150 0000 	adcs.w	r0, r0, #0
 800081a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800081e:	bd70      	pop	{r4, r5, r6, pc}
 8000820:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000824:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000828:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800082c:	bfc2      	ittt	gt
 800082e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000832:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000836:	bd70      	popgt	{r4, r5, r6, pc}
 8000838:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800083c:	f04f 0e00 	mov.w	lr, #0
 8000840:	3c01      	subs	r4, #1
 8000842:	e690      	b.n	8000566 <__aeabi_dmul+0xde>
 8000844:	ea45 0e06 	orr.w	lr, r5, r6
 8000848:	e68d      	b.n	8000566 <__aeabi_dmul+0xde>
 800084a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	bf08      	it	eq
 8000854:	ea95 0f0c 	teqeq	r5, ip
 8000858:	f43f af3b 	beq.w	80006d2 <__aeabi_dmul+0x24a>
 800085c:	ea94 0f0c 	teq	r4, ip
 8000860:	d10a      	bne.n	8000878 <__aeabi_ddiv+0x19c>
 8000862:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000866:	f47f af34 	bne.w	80006d2 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	f47f af25 	bne.w	80006bc <__aeabi_dmul+0x234>
 8000872:	4610      	mov	r0, r2
 8000874:	4619      	mov	r1, r3
 8000876:	e72c      	b.n	80006d2 <__aeabi_dmul+0x24a>
 8000878:	ea95 0f0c 	teq	r5, ip
 800087c:	d106      	bne.n	800088c <__aeabi_ddiv+0x1b0>
 800087e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000882:	f43f aefd 	beq.w	8000680 <__aeabi_dmul+0x1f8>
 8000886:	4610      	mov	r0, r2
 8000888:	4619      	mov	r1, r3
 800088a:	e722      	b.n	80006d2 <__aeabi_dmul+0x24a>
 800088c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000890:	bf18      	it	ne
 8000892:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000896:	f47f aec5 	bne.w	8000624 <__aeabi_dmul+0x19c>
 800089a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800089e:	f47f af0d 	bne.w	80006bc <__aeabi_dmul+0x234>
 80008a2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008a6:	f47f aeeb 	bne.w	8000680 <__aeabi_dmul+0x1f8>
 80008aa:	e712      	b.n	80006d2 <__aeabi_dmul+0x24a>

080008ac <__gedf2>:
 80008ac:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80008b0:	e006      	b.n	80008c0 <__cmpdf2+0x4>
 80008b2:	bf00      	nop

080008b4 <__ledf2>:
 80008b4:	f04f 0c01 	mov.w	ip, #1
 80008b8:	e002      	b.n	80008c0 <__cmpdf2+0x4>
 80008ba:	bf00      	nop

080008bc <__cmpdf2>:
 80008bc:	f04f 0c01 	mov.w	ip, #1
 80008c0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80008c4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80008c8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80008cc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80008d6:	d01b      	beq.n	8000910 <__cmpdf2+0x54>
 80008d8:	b001      	add	sp, #4
 80008da:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80008de:	bf0c      	ite	eq
 80008e0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80008e4:	ea91 0f03 	teqne	r1, r3
 80008e8:	bf02      	ittt	eq
 80008ea:	ea90 0f02 	teqeq	r0, r2
 80008ee:	2000      	moveq	r0, #0
 80008f0:	4770      	bxeq	lr
 80008f2:	f110 0f00 	cmn.w	r0, #0
 80008f6:	ea91 0f03 	teq	r1, r3
 80008fa:	bf58      	it	pl
 80008fc:	4299      	cmppl	r1, r3
 80008fe:	bf08      	it	eq
 8000900:	4290      	cmpeq	r0, r2
 8000902:	bf2c      	ite	cs
 8000904:	17d8      	asrcs	r0, r3, #31
 8000906:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800090a:	f040 0001 	orr.w	r0, r0, #1
 800090e:	4770      	bx	lr
 8000910:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000914:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000918:	d102      	bne.n	8000920 <__cmpdf2+0x64>
 800091a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800091e:	d107      	bne.n	8000930 <__cmpdf2+0x74>
 8000920:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000924:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000928:	d1d6      	bne.n	80008d8 <__cmpdf2+0x1c>
 800092a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800092e:	d0d3      	beq.n	80008d8 <__cmpdf2+0x1c>
 8000930:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000934:	4770      	bx	lr
 8000936:	bf00      	nop

08000938 <__aeabi_cdrcmple>:
 8000938:	4684      	mov	ip, r0
 800093a:	4610      	mov	r0, r2
 800093c:	4662      	mov	r2, ip
 800093e:	468c      	mov	ip, r1
 8000940:	4619      	mov	r1, r3
 8000942:	4663      	mov	r3, ip
 8000944:	e000      	b.n	8000948 <__aeabi_cdcmpeq>
 8000946:	bf00      	nop

08000948 <__aeabi_cdcmpeq>:
 8000948:	b501      	push	{r0, lr}
 800094a:	f7ff ffb7 	bl	80008bc <__cmpdf2>
 800094e:	2800      	cmp	r0, #0
 8000950:	bf48      	it	mi
 8000952:	f110 0f00 	cmnmi.w	r0, #0
 8000956:	bd01      	pop	{r0, pc}

08000958 <__aeabi_dcmpeq>:
 8000958:	f84d ed08 	str.w	lr, [sp, #-8]!
 800095c:	f7ff fff4 	bl	8000948 <__aeabi_cdcmpeq>
 8000960:	bf0c      	ite	eq
 8000962:	2001      	moveq	r0, #1
 8000964:	2000      	movne	r0, #0
 8000966:	f85d fb08 	ldr.w	pc, [sp], #8
 800096a:	bf00      	nop

0800096c <__aeabi_dcmplt>:
 800096c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000970:	f7ff ffea 	bl	8000948 <__aeabi_cdcmpeq>
 8000974:	bf34      	ite	cc
 8000976:	2001      	movcc	r0, #1
 8000978:	2000      	movcs	r0, #0
 800097a:	f85d fb08 	ldr.w	pc, [sp], #8
 800097e:	bf00      	nop

08000980 <__aeabi_dcmple>:
 8000980:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000984:	f7ff ffe0 	bl	8000948 <__aeabi_cdcmpeq>
 8000988:	bf94      	ite	ls
 800098a:	2001      	movls	r0, #1
 800098c:	2000      	movhi	r0, #0
 800098e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000992:	bf00      	nop

08000994 <__aeabi_dcmpge>:
 8000994:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000998:	f7ff ffce 	bl	8000938 <__aeabi_cdrcmple>
 800099c:	bf94      	ite	ls
 800099e:	2001      	movls	r0, #1
 80009a0:	2000      	movhi	r0, #0
 80009a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009a6:	bf00      	nop

080009a8 <__aeabi_dcmpgt>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff ffc4 	bl	8000938 <__aeabi_cdrcmple>
 80009b0:	bf34      	ite	cc
 80009b2:	2001      	movcc	r0, #1
 80009b4:	2000      	movcs	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmpun>:
 80009bc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009c0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009c4:	d102      	bne.n	80009cc <__aeabi_dcmpun+0x10>
 80009c6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009ca:	d10a      	bne.n	80009e2 <__aeabi_dcmpun+0x26>
 80009cc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d4:	d102      	bne.n	80009dc <__aeabi_dcmpun+0x20>
 80009d6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009da:	d102      	bne.n	80009e2 <__aeabi_dcmpun+0x26>
 80009dc:	f04f 0000 	mov.w	r0, #0
 80009e0:	4770      	bx	lr
 80009e2:	f04f 0001 	mov.w	r0, #1
 80009e6:	4770      	bx	lr

080009e8 <__aeabi_d2iz>:
 80009e8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009ec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80009f0:	d215      	bcs.n	8000a1e <__aeabi_d2iz+0x36>
 80009f2:	d511      	bpl.n	8000a18 <__aeabi_d2iz+0x30>
 80009f4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80009f8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009fc:	d912      	bls.n	8000a24 <__aeabi_d2iz+0x3c>
 80009fe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a0a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a0e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a12:	bf18      	it	ne
 8000a14:	4240      	negne	r0, r0
 8000a16:	4770      	bx	lr
 8000a18:	f04f 0000 	mov.w	r0, #0
 8000a1c:	4770      	bx	lr
 8000a1e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a22:	d105      	bne.n	8000a30 <__aeabi_d2iz+0x48>
 8000a24:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a28:	bf08      	it	eq
 8000a2a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a2e:	4770      	bx	lr
 8000a30:	f04f 0000 	mov.w	r0, #0
 8000a34:	4770      	bx	lr
 8000a36:	bf00      	nop

08000a38 <__aeabi_d2uiz>:
 8000a38:	004a      	lsls	r2, r1, #1
 8000a3a:	d211      	bcs.n	8000a60 <__aeabi_d2uiz+0x28>
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d211      	bcs.n	8000a66 <__aeabi_d2uiz+0x2e>
 8000a42:	d50d      	bpl.n	8000a60 <__aeabi_d2uiz+0x28>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d40e      	bmi.n	8000a6c <__aeabi_d2uiz+0x34>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a5e:	4770      	bx	lr
 8000a60:	f04f 0000 	mov.w	r0, #0
 8000a64:	4770      	bx	lr
 8000a66:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a6a:	d102      	bne.n	8000a72 <__aeabi_d2uiz+0x3a>
 8000a6c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000a70:	4770      	bx	lr
 8000a72:	f04f 0000 	mov.w	r0, #0
 8000a76:	4770      	bx	lr

08000a78 <__aeabi_d2f>:
 8000a78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a7c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a80:	bf24      	itt	cs
 8000a82:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a86:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a8a:	d90d      	bls.n	8000aa8 <__aeabi_d2f+0x30>
 8000a8c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a90:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a94:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a98:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a9c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000aa0:	bf08      	it	eq
 8000aa2:	f020 0001 	biceq.w	r0, r0, #1
 8000aa6:	4770      	bx	lr
 8000aa8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000aac:	d121      	bne.n	8000af2 <__aeabi_d2f+0x7a>
 8000aae:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ab2:	bfbc      	itt	lt
 8000ab4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ab8:	4770      	bxlt	lr
 8000aba:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000abe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ac2:	f1c2 0218 	rsb	r2, r2, #24
 8000ac6:	f1c2 0c20 	rsb	ip, r2, #32
 8000aca:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ace:	fa20 f002 	lsr.w	r0, r0, r2
 8000ad2:	bf18      	it	ne
 8000ad4:	f040 0001 	orrne.w	r0, r0, #1
 8000ad8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000adc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ae0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ae4:	ea40 000c 	orr.w	r0, r0, ip
 8000ae8:	fa23 f302 	lsr.w	r3, r3, r2
 8000aec:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000af0:	e7cc      	b.n	8000a8c <__aeabi_d2f+0x14>
 8000af2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000af6:	d107      	bne.n	8000b08 <__aeabi_d2f+0x90>
 8000af8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000afc:	bf1e      	ittt	ne
 8000afe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b02:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b06:	4770      	bxne	lr
 8000b08:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b0c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b10:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop

08000b18 <__aeabi_frsub>:
 8000b18:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b1c:	e002      	b.n	8000b24 <__addsf3>
 8000b1e:	bf00      	nop

08000b20 <__aeabi_fsub>:
 8000b20:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b24 <__addsf3>:
 8000b24:	0042      	lsls	r2, r0, #1
 8000b26:	bf1f      	itttt	ne
 8000b28:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b2c:	ea92 0f03 	teqne	r2, r3
 8000b30:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b34:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b38:	d06a      	beq.n	8000c10 <__addsf3+0xec>
 8000b3a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b3e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b42:	bfc1      	itttt	gt
 8000b44:	18d2      	addgt	r2, r2, r3
 8000b46:	4041      	eorgt	r1, r0
 8000b48:	4048      	eorgt	r0, r1
 8000b4a:	4041      	eorgt	r1, r0
 8000b4c:	bfb8      	it	lt
 8000b4e:	425b      	neglt	r3, r3
 8000b50:	2b19      	cmp	r3, #25
 8000b52:	bf88      	it	hi
 8000b54:	4770      	bxhi	lr
 8000b56:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b5a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b5e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b62:	bf18      	it	ne
 8000b64:	4240      	negne	r0, r0
 8000b66:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b6a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b6e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4249      	negne	r1, r1
 8000b76:	ea92 0f03 	teq	r2, r3
 8000b7a:	d03f      	beq.n	8000bfc <__addsf3+0xd8>
 8000b7c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b80:	fa41 fc03 	asr.w	ip, r1, r3
 8000b84:	eb10 000c 	adds.w	r0, r0, ip
 8000b88:	f1c3 0320 	rsb	r3, r3, #32
 8000b8c:	fa01 f103 	lsl.w	r1, r1, r3
 8000b90:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b94:	d502      	bpl.n	8000b9c <__addsf3+0x78>
 8000b96:	4249      	negs	r1, r1
 8000b98:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b9c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000ba0:	d313      	bcc.n	8000bca <__addsf3+0xa6>
 8000ba2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000ba6:	d306      	bcc.n	8000bb6 <__addsf3+0x92>
 8000ba8:	0840      	lsrs	r0, r0, #1
 8000baa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bae:	f102 0201 	add.w	r2, r2, #1
 8000bb2:	2afe      	cmp	r2, #254	; 0xfe
 8000bb4:	d251      	bcs.n	8000c5a <__addsf3+0x136>
 8000bb6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bba:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bbe:	bf08      	it	eq
 8000bc0:	f020 0001 	biceq.w	r0, r0, #1
 8000bc4:	ea40 0003 	orr.w	r0, r0, r3
 8000bc8:	4770      	bx	lr
 8000bca:	0049      	lsls	r1, r1, #1
 8000bcc:	eb40 0000 	adc.w	r0, r0, r0
 8000bd0:	3a01      	subs	r2, #1
 8000bd2:	bf28      	it	cs
 8000bd4:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000bd8:	d2ed      	bcs.n	8000bb6 <__addsf3+0x92>
 8000bda:	fab0 fc80 	clz	ip, r0
 8000bde:	f1ac 0c08 	sub.w	ip, ip, #8
 8000be2:	ebb2 020c 	subs.w	r2, r2, ip
 8000be6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bea:	bfaa      	itet	ge
 8000bec:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000bf0:	4252      	neglt	r2, r2
 8000bf2:	4318      	orrge	r0, r3
 8000bf4:	bfbc      	itt	lt
 8000bf6:	40d0      	lsrlt	r0, r2
 8000bf8:	4318      	orrlt	r0, r3
 8000bfa:	4770      	bx	lr
 8000bfc:	f092 0f00 	teq	r2, #0
 8000c00:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c04:	bf06      	itte	eq
 8000c06:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c0a:	3201      	addeq	r2, #1
 8000c0c:	3b01      	subne	r3, #1
 8000c0e:	e7b5      	b.n	8000b7c <__addsf3+0x58>
 8000c10:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c14:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c18:	bf18      	it	ne
 8000c1a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c1e:	d021      	beq.n	8000c64 <__addsf3+0x140>
 8000c20:	ea92 0f03 	teq	r2, r3
 8000c24:	d004      	beq.n	8000c30 <__addsf3+0x10c>
 8000c26:	f092 0f00 	teq	r2, #0
 8000c2a:	bf08      	it	eq
 8000c2c:	4608      	moveq	r0, r1
 8000c2e:	4770      	bx	lr
 8000c30:	ea90 0f01 	teq	r0, r1
 8000c34:	bf1c      	itt	ne
 8000c36:	2000      	movne	r0, #0
 8000c38:	4770      	bxne	lr
 8000c3a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c3e:	d104      	bne.n	8000c4a <__addsf3+0x126>
 8000c40:	0040      	lsls	r0, r0, #1
 8000c42:	bf28      	it	cs
 8000c44:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c48:	4770      	bx	lr
 8000c4a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c4e:	bf3c      	itt	cc
 8000c50:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bxcc	lr
 8000c56:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c5a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c5e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c62:	4770      	bx	lr
 8000c64:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c68:	bf16      	itet	ne
 8000c6a:	4608      	movne	r0, r1
 8000c6c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c70:	4601      	movne	r1, r0
 8000c72:	0242      	lsls	r2, r0, #9
 8000c74:	bf06      	itte	eq
 8000c76:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c7a:	ea90 0f01 	teqeq	r0, r1
 8000c7e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c82:	4770      	bx	lr

08000c84 <__aeabi_ui2f>:
 8000c84:	f04f 0300 	mov.w	r3, #0
 8000c88:	e004      	b.n	8000c94 <__aeabi_i2f+0x8>
 8000c8a:	bf00      	nop

08000c8c <__aeabi_i2f>:
 8000c8c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c90:	bf48      	it	mi
 8000c92:	4240      	negmi	r0, r0
 8000c94:	ea5f 0c00 	movs.w	ip, r0
 8000c98:	bf08      	it	eq
 8000c9a:	4770      	bxeq	lr
 8000c9c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000ca0:	4601      	mov	r1, r0
 8000ca2:	f04f 0000 	mov.w	r0, #0
 8000ca6:	e01c      	b.n	8000ce2 <__aeabi_l2f+0x2a>

08000ca8 <__aeabi_ul2f>:
 8000ca8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cac:	bf08      	it	eq
 8000cae:	4770      	bxeq	lr
 8000cb0:	f04f 0300 	mov.w	r3, #0
 8000cb4:	e00a      	b.n	8000ccc <__aeabi_l2f+0x14>
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_l2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cc4:	d502      	bpl.n	8000ccc <__aeabi_l2f+0x14>
 8000cc6:	4240      	negs	r0, r0
 8000cc8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ccc:	ea5f 0c01 	movs.w	ip, r1
 8000cd0:	bf02      	ittt	eq
 8000cd2:	4684      	moveq	ip, r0
 8000cd4:	4601      	moveq	r1, r0
 8000cd6:	2000      	moveq	r0, #0
 8000cd8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cdc:	bf08      	it	eq
 8000cde:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000ce2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000ce6:	fabc f28c 	clz	r2, ip
 8000cea:	3a08      	subs	r2, #8
 8000cec:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000cf0:	db10      	blt.n	8000d14 <__aeabi_l2f+0x5c>
 8000cf2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cf6:	4463      	add	r3, ip
 8000cf8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cfc:	f1c2 0220 	rsb	r2, r2, #32
 8000d00:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d04:	fa20 f202 	lsr.w	r2, r0, r2
 8000d08:	eb43 0002 	adc.w	r0, r3, r2
 8000d0c:	bf08      	it	eq
 8000d0e:	f020 0001 	biceq.w	r0, r0, #1
 8000d12:	4770      	bx	lr
 8000d14:	f102 0220 	add.w	r2, r2, #32
 8000d18:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d1c:	f1c2 0220 	rsb	r2, r2, #32
 8000d20:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d24:	fa21 f202 	lsr.w	r2, r1, r2
 8000d28:	eb43 0002 	adc.w	r0, r3, r2
 8000d2c:	bf08      	it	eq
 8000d2e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d32:	4770      	bx	lr

08000d34 <__aeabi_fmul>:
 8000d34:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d38:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d3c:	bf1e      	ittt	ne
 8000d3e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d42:	ea92 0f0c 	teqne	r2, ip
 8000d46:	ea93 0f0c 	teqne	r3, ip
 8000d4a:	d06f      	beq.n	8000e2c <__aeabi_fmul+0xf8>
 8000d4c:	441a      	add	r2, r3
 8000d4e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d52:	0240      	lsls	r0, r0, #9
 8000d54:	bf18      	it	ne
 8000d56:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d5a:	d01e      	beq.n	8000d9a <__aeabi_fmul+0x66>
 8000d5c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d60:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d64:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d68:	fba0 3101 	umull	r3, r1, r0, r1
 8000d6c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d70:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d74:	bf3e      	ittt	cc
 8000d76:	0049      	lslcc	r1, r1, #1
 8000d78:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d7c:	005b      	lslcc	r3, r3, #1
 8000d7e:	ea40 0001 	orr.w	r0, r0, r1
 8000d82:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d86:	2afd      	cmp	r2, #253	; 0xfd
 8000d88:	d81d      	bhi.n	8000dc6 <__aeabi_fmul+0x92>
 8000d8a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d8e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d92:	bf08      	it	eq
 8000d94:	f020 0001 	biceq.w	r0, r0, #1
 8000d98:	4770      	bx	lr
 8000d9a:	f090 0f00 	teq	r0, #0
 8000d9e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000da2:	bf08      	it	eq
 8000da4:	0249      	lsleq	r1, r1, #9
 8000da6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000daa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dae:	3a7f      	subs	r2, #127	; 0x7f
 8000db0:	bfc2      	ittt	gt
 8000db2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000db6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dba:	4770      	bxgt	lr
 8000dbc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dc0:	f04f 0300 	mov.w	r3, #0
 8000dc4:	3a01      	subs	r2, #1
 8000dc6:	dc5d      	bgt.n	8000e84 <__aeabi_fmul+0x150>
 8000dc8:	f112 0f19 	cmn.w	r2, #25
 8000dcc:	bfdc      	itt	le
 8000dce:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000dd2:	4770      	bxle	lr
 8000dd4:	f1c2 0200 	rsb	r2, r2, #0
 8000dd8:	0041      	lsls	r1, r0, #1
 8000dda:	fa21 f102 	lsr.w	r1, r1, r2
 8000dde:	f1c2 0220 	rsb	r2, r2, #32
 8000de2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000de6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dea:	f140 0000 	adc.w	r0, r0, #0
 8000dee:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000df2:	bf08      	it	eq
 8000df4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000df8:	4770      	bx	lr
 8000dfa:	f092 0f00 	teq	r2, #0
 8000dfe:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e02:	bf02      	ittt	eq
 8000e04:	0040      	lsleq	r0, r0, #1
 8000e06:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e0a:	3a01      	subeq	r2, #1
 8000e0c:	d0f9      	beq.n	8000e02 <__aeabi_fmul+0xce>
 8000e0e:	ea40 000c 	orr.w	r0, r0, ip
 8000e12:	f093 0f00 	teq	r3, #0
 8000e16:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e1a:	bf02      	ittt	eq
 8000e1c:	0049      	lsleq	r1, r1, #1
 8000e1e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e22:	3b01      	subeq	r3, #1
 8000e24:	d0f9      	beq.n	8000e1a <__aeabi_fmul+0xe6>
 8000e26:	ea41 010c 	orr.w	r1, r1, ip
 8000e2a:	e78f      	b.n	8000d4c <__aeabi_fmul+0x18>
 8000e2c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e30:	ea92 0f0c 	teq	r2, ip
 8000e34:	bf18      	it	ne
 8000e36:	ea93 0f0c 	teqne	r3, ip
 8000e3a:	d00a      	beq.n	8000e52 <__aeabi_fmul+0x11e>
 8000e3c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e40:	bf18      	it	ne
 8000e42:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e46:	d1d8      	bne.n	8000dfa <__aeabi_fmul+0xc6>
 8000e48:	ea80 0001 	eor.w	r0, r0, r1
 8000e4c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e50:	4770      	bx	lr
 8000e52:	f090 0f00 	teq	r0, #0
 8000e56:	bf17      	itett	ne
 8000e58:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e5c:	4608      	moveq	r0, r1
 8000e5e:	f091 0f00 	teqne	r1, #0
 8000e62:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e66:	d014      	beq.n	8000e92 <__aeabi_fmul+0x15e>
 8000e68:	ea92 0f0c 	teq	r2, ip
 8000e6c:	d101      	bne.n	8000e72 <__aeabi_fmul+0x13e>
 8000e6e:	0242      	lsls	r2, r0, #9
 8000e70:	d10f      	bne.n	8000e92 <__aeabi_fmul+0x15e>
 8000e72:	ea93 0f0c 	teq	r3, ip
 8000e76:	d103      	bne.n	8000e80 <__aeabi_fmul+0x14c>
 8000e78:	024b      	lsls	r3, r1, #9
 8000e7a:	bf18      	it	ne
 8000e7c:	4608      	movne	r0, r1
 8000e7e:	d108      	bne.n	8000e92 <__aeabi_fmul+0x15e>
 8000e80:	ea80 0001 	eor.w	r0, r0, r1
 8000e84:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e88:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e8c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e90:	4770      	bx	lr
 8000e92:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e96:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e9a:	4770      	bx	lr

08000e9c <__aeabi_fdiv>:
 8000e9c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ea0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ea4:	bf1e      	ittt	ne
 8000ea6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eaa:	ea92 0f0c 	teqne	r2, ip
 8000eae:	ea93 0f0c 	teqne	r3, ip
 8000eb2:	d069      	beq.n	8000f88 <__aeabi_fdiv+0xec>
 8000eb4:	eba2 0203 	sub.w	r2, r2, r3
 8000eb8:	ea80 0c01 	eor.w	ip, r0, r1
 8000ebc:	0249      	lsls	r1, r1, #9
 8000ebe:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ec2:	d037      	beq.n	8000f34 <__aeabi_fdiv+0x98>
 8000ec4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ec8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000ecc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ed0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ed4:	428b      	cmp	r3, r1
 8000ed6:	bf38      	it	cc
 8000ed8:	005b      	lslcc	r3, r3, #1
 8000eda:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000ede:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000ee2:	428b      	cmp	r3, r1
 8000ee4:	bf24      	itt	cs
 8000ee6:	1a5b      	subcs	r3, r3, r1
 8000ee8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000eec:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000ef0:	bf24      	itt	cs
 8000ef2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000ef6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000efa:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000efe:	bf24      	itt	cs
 8000f00:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f04:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f08:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f0c:	bf24      	itt	cs
 8000f0e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f12:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f16:	011b      	lsls	r3, r3, #4
 8000f18:	bf18      	it	ne
 8000f1a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f1e:	d1e0      	bne.n	8000ee2 <__aeabi_fdiv+0x46>
 8000f20:	2afd      	cmp	r2, #253	; 0xfd
 8000f22:	f63f af50 	bhi.w	8000dc6 <__aeabi_fmul+0x92>
 8000f26:	428b      	cmp	r3, r1
 8000f28:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f2c:	bf08      	it	eq
 8000f2e:	f020 0001 	biceq.w	r0, r0, #1
 8000f32:	4770      	bx	lr
 8000f34:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f38:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f3c:	327f      	adds	r2, #127	; 0x7f
 8000f3e:	bfc2      	ittt	gt
 8000f40:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f44:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f48:	4770      	bxgt	lr
 8000f4a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f4e:	f04f 0300 	mov.w	r3, #0
 8000f52:	3a01      	subs	r2, #1
 8000f54:	e737      	b.n	8000dc6 <__aeabi_fmul+0x92>
 8000f56:	f092 0f00 	teq	r2, #0
 8000f5a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f5e:	bf02      	ittt	eq
 8000f60:	0040      	lsleq	r0, r0, #1
 8000f62:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f66:	3a01      	subeq	r2, #1
 8000f68:	d0f9      	beq.n	8000f5e <__aeabi_fdiv+0xc2>
 8000f6a:	ea40 000c 	orr.w	r0, r0, ip
 8000f6e:	f093 0f00 	teq	r3, #0
 8000f72:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f76:	bf02      	ittt	eq
 8000f78:	0049      	lsleq	r1, r1, #1
 8000f7a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f7e:	3b01      	subeq	r3, #1
 8000f80:	d0f9      	beq.n	8000f76 <__aeabi_fdiv+0xda>
 8000f82:	ea41 010c 	orr.w	r1, r1, ip
 8000f86:	e795      	b.n	8000eb4 <__aeabi_fdiv+0x18>
 8000f88:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f8c:	ea92 0f0c 	teq	r2, ip
 8000f90:	d108      	bne.n	8000fa4 <__aeabi_fdiv+0x108>
 8000f92:	0242      	lsls	r2, r0, #9
 8000f94:	f47f af7d 	bne.w	8000e92 <__aeabi_fmul+0x15e>
 8000f98:	ea93 0f0c 	teq	r3, ip
 8000f9c:	f47f af70 	bne.w	8000e80 <__aeabi_fmul+0x14c>
 8000fa0:	4608      	mov	r0, r1
 8000fa2:	e776      	b.n	8000e92 <__aeabi_fmul+0x15e>
 8000fa4:	ea93 0f0c 	teq	r3, ip
 8000fa8:	d104      	bne.n	8000fb4 <__aeabi_fdiv+0x118>
 8000faa:	024b      	lsls	r3, r1, #9
 8000fac:	f43f af4c 	beq.w	8000e48 <__aeabi_fmul+0x114>
 8000fb0:	4608      	mov	r0, r1
 8000fb2:	e76e      	b.n	8000e92 <__aeabi_fmul+0x15e>
 8000fb4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fb8:	bf18      	it	ne
 8000fba:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fbe:	d1ca      	bne.n	8000f56 <__aeabi_fdiv+0xba>
 8000fc0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fc4:	f47f af5c 	bne.w	8000e80 <__aeabi_fmul+0x14c>
 8000fc8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fcc:	f47f af3c 	bne.w	8000e48 <__aeabi_fmul+0x114>
 8000fd0:	e75f      	b.n	8000e92 <__aeabi_fmul+0x15e>
 8000fd2:	bf00      	nop

08000fd4 <__aeabi_f2iz>:
 8000fd4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000fd8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000fdc:	d30f      	bcc.n	8000ffe <__aeabi_f2iz+0x2a>
 8000fde:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000fe2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000fe6:	d90d      	bls.n	8001004 <__aeabi_f2iz+0x30>
 8000fe8:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000fec:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ff0:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000ff4:	fa23 f002 	lsr.w	r0, r3, r2
 8000ff8:	bf18      	it	ne
 8000ffa:	4240      	negne	r0, r0
 8000ffc:	4770      	bx	lr
 8000ffe:	f04f 0000 	mov.w	r0, #0
 8001002:	4770      	bx	lr
 8001004:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001008:	d101      	bne.n	800100e <__aeabi_f2iz+0x3a>
 800100a:	0242      	lsls	r2, r0, #9
 800100c:	d105      	bne.n	800101a <__aeabi_f2iz+0x46>
 800100e:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8001012:	bf08      	it	eq
 8001014:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001018:	4770      	bx	lr
 800101a:	f04f 0000 	mov.w	r0, #0
 800101e:	4770      	bx	lr

08001020 <__aeabi_uldivmod>:
 8001020:	b953      	cbnz	r3, 8001038 <__aeabi_uldivmod+0x18>
 8001022:	b94a      	cbnz	r2, 8001038 <__aeabi_uldivmod+0x18>
 8001024:	2900      	cmp	r1, #0
 8001026:	bf08      	it	eq
 8001028:	2800      	cmpeq	r0, #0
 800102a:	bf1c      	itt	ne
 800102c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8001030:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8001034:	f000 b80c 	b.w	8001050 <__aeabi_idiv0>
 8001038:	f1ad 0c08 	sub.w	ip, sp, #8
 800103c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8001040:	f008 fc32 	bl	80098a8 <__udivmoddi4>
 8001044:	f8dd e004 	ldr.w	lr, [sp, #4]
 8001048:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800104c:	b004      	add	sp, #16
 800104e:	4770      	bx	lr

08001050 <__aeabi_idiv0>:
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop

08001054 <__do_global_dtors_aux>:
 8001054:	b510      	push	{r4, lr}
 8001056:	4c05      	ldr	r4, [pc, #20]	; (800106c <__do_global_dtors_aux+0x18>)
 8001058:	7823      	ldrb	r3, [r4, #0]
 800105a:	b933      	cbnz	r3, 800106a <__do_global_dtors_aux+0x16>
 800105c:	4b04      	ldr	r3, [pc, #16]	; (8001070 <__do_global_dtors_aux+0x1c>)
 800105e:	b113      	cbz	r3, 8001066 <__do_global_dtors_aux+0x12>
 8001060:	4804      	ldr	r0, [pc, #16]	; (8001074 <__do_global_dtors_aux+0x20>)
 8001062:	f3af 8000 	nop.w
 8001066:	2301      	movs	r3, #1
 8001068:	7023      	strb	r3, [r4, #0]
 800106a:	bd10      	pop	{r4, pc}
 800106c:	200001e0 	.word	0x200001e0
 8001070:	00000000 	.word	0x00000000
 8001074:	08009b48 	.word	0x08009b48

08001078 <frame_dummy>:
 8001078:	b508      	push	{r3, lr}
 800107a:	4b03      	ldr	r3, [pc, #12]	; (8001088 <frame_dummy+0x10>)
 800107c:	b11b      	cbz	r3, 8001086 <frame_dummy+0xe>
 800107e:	4903      	ldr	r1, [pc, #12]	; (800108c <frame_dummy+0x14>)
 8001080:	4803      	ldr	r0, [pc, #12]	; (8001090 <frame_dummy+0x18>)
 8001082:	f3af 8000 	nop.w
 8001086:	bd08      	pop	{r3, pc}
 8001088:	00000000 	.word	0x00000000
 800108c:	200001e4 	.word	0x200001e4
 8001090:	08009b48 	.word	0x08009b48
 8001094:	00000000 	.word	0x00000000

08001098 <setPWM>:
 *      Author: dalvi
 */

#include "Motors.h"

void setPWM(MotorDef_t *Motor, uint32_t pwm, int en, Motors_t *Motors) {
 8001098:	b5b0      	push	{r4, r5, r7, lr}
 800109a:	b084      	sub	sp, #16
 800109c:	af00      	add	r7, sp, #0
 800109e:	60f8      	str	r0, [r7, #12]
 80010a0:	60b9      	str	r1, [r7, #8]
 80010a2:	607a      	str	r2, [r7, #4]
 80010a4:	603b      	str	r3, [r7, #0]
	switch(Motor->timer) {
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	881b      	ldrh	r3, [r3, #0]
 80010aa:	2b01      	cmp	r3, #1
 80010ac:	d003      	beq.n	80010b6 <setPWM+0x1e>
 80010ae:	2b02      	cmp	r3, #2
 80010b0:	f000 80ab 	beq.w	800120a <setPWM+0x172>
 80010b4:	e0cc      	b.n	8001250 <setPWM+0x1b8>
		case(1):
			switch(Motor->channel){
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	885b      	ldrh	r3, [r3, #2]
 80010ba:	2b04      	cmp	r3, #4
 80010bc:	f000 808a 	beq.w	80011d4 <setPWM+0x13c>
 80010c0:	2b04      	cmp	r3, #4
 80010c2:	f300 80c2 	bgt.w	800124a <setPWM+0x1b2>
 80010c6:	2b02      	cmp	r3, #2
 80010c8:	d002      	beq.n	80010d0 <setPWM+0x38>
 80010ca:	2b03      	cmp	r3, #3
 80010cc:	d041      	beq.n	8001152 <setPWM+0xba>
						TIM1->CCR4 = en * (100 - pwm) + !en * pwm;
						Motors->pwm4 = pwm;
						Motors->e4 = en;
						break;
			}
			break;
 80010ce:	e0bc      	b.n	800124a <setPWM+0x1b2>
						TIM1->CCR2 = en * (100 - (pwm *1.1)) + !en * pwm;
 80010d0:	6878      	ldr	r0, [r7, #4]
 80010d2:	f7ff f96f 	bl	80003b4 <__aeabi_i2d>
 80010d6:	4604      	mov	r4, r0
 80010d8:	460d      	mov	r5, r1
 80010da:	68b8      	ldr	r0, [r7, #8]
 80010dc:	f7ff f95a 	bl	8000394 <__aeabi_ui2d>
 80010e0:	a361      	add	r3, pc, #388	; (adr r3, 8001268 <setPWM+0x1d0>)
 80010e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010e6:	f7ff f9cf 	bl	8000488 <__aeabi_dmul>
 80010ea:	4602      	mov	r2, r0
 80010ec:	460b      	mov	r3, r1
 80010ee:	f04f 0000 	mov.w	r0, #0
 80010f2:	495f      	ldr	r1, [pc, #380]	; (8001270 <setPWM+0x1d8>)
 80010f4:	f7ff f810 	bl	8000118 <__aeabi_dsub>
 80010f8:	4602      	mov	r2, r0
 80010fa:	460b      	mov	r3, r1
 80010fc:	4620      	mov	r0, r4
 80010fe:	4629      	mov	r1, r5
 8001100:	f7ff f9c2 	bl	8000488 <__aeabi_dmul>
 8001104:	4602      	mov	r2, r0
 8001106:	460b      	mov	r3, r1
 8001108:	4614      	mov	r4, r2
 800110a:	461d      	mov	r5, r3
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	2b00      	cmp	r3, #0
 8001110:	bf0c      	ite	eq
 8001112:	2301      	moveq	r3, #1
 8001114:	2300      	movne	r3, #0
 8001116:	b2db      	uxtb	r3, r3
 8001118:	461a      	mov	r2, r3
 800111a:	68bb      	ldr	r3, [r7, #8]
 800111c:	fb02 f303 	mul.w	r3, r2, r3
 8001120:	4618      	mov	r0, r3
 8001122:	f7ff f937 	bl	8000394 <__aeabi_ui2d>
 8001126:	4602      	mov	r2, r0
 8001128:	460b      	mov	r3, r1
 800112a:	4620      	mov	r0, r4
 800112c:	4629      	mov	r1, r5
 800112e:	f7fe fff5 	bl	800011c <__adddf3>
 8001132:	4602      	mov	r2, r0
 8001134:	460b      	mov	r3, r1
 8001136:	4c4f      	ldr	r4, [pc, #316]	; (8001274 <setPWM+0x1dc>)
 8001138:	4610      	mov	r0, r2
 800113a:	4619      	mov	r1, r3
 800113c:	f7ff fc7c 	bl	8000a38 <__aeabi_d2uiz>
 8001140:	4603      	mov	r3, r0
 8001142:	63a3      	str	r3, [r4, #56]	; 0x38
						Motors->pwm1 = pwm;
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	68ba      	ldr	r2, [r7, #8]
 8001148:	601a      	str	r2, [r3, #0]
						Motors->e1 = en;
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	687a      	ldr	r2, [r7, #4]
 800114e:	605a      	str	r2, [r3, #4]
						break;
 8001150:	e05a      	b.n	8001208 <setPWM+0x170>
						TIM1->CCR3 = en * (100 - (pwm * 1.1)) + !en * pwm;
 8001152:	6878      	ldr	r0, [r7, #4]
 8001154:	f7ff f92e 	bl	80003b4 <__aeabi_i2d>
 8001158:	4604      	mov	r4, r0
 800115a:	460d      	mov	r5, r1
 800115c:	68b8      	ldr	r0, [r7, #8]
 800115e:	f7ff f919 	bl	8000394 <__aeabi_ui2d>
 8001162:	a341      	add	r3, pc, #260	; (adr r3, 8001268 <setPWM+0x1d0>)
 8001164:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001168:	f7ff f98e 	bl	8000488 <__aeabi_dmul>
 800116c:	4602      	mov	r2, r0
 800116e:	460b      	mov	r3, r1
 8001170:	f04f 0000 	mov.w	r0, #0
 8001174:	493e      	ldr	r1, [pc, #248]	; (8001270 <setPWM+0x1d8>)
 8001176:	f7fe ffcf 	bl	8000118 <__aeabi_dsub>
 800117a:	4602      	mov	r2, r0
 800117c:	460b      	mov	r3, r1
 800117e:	4620      	mov	r0, r4
 8001180:	4629      	mov	r1, r5
 8001182:	f7ff f981 	bl	8000488 <__aeabi_dmul>
 8001186:	4602      	mov	r2, r0
 8001188:	460b      	mov	r3, r1
 800118a:	4614      	mov	r4, r2
 800118c:	461d      	mov	r5, r3
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	2b00      	cmp	r3, #0
 8001192:	bf0c      	ite	eq
 8001194:	2301      	moveq	r3, #1
 8001196:	2300      	movne	r3, #0
 8001198:	b2db      	uxtb	r3, r3
 800119a:	461a      	mov	r2, r3
 800119c:	68bb      	ldr	r3, [r7, #8]
 800119e:	fb02 f303 	mul.w	r3, r2, r3
 80011a2:	4618      	mov	r0, r3
 80011a4:	f7ff f8f6 	bl	8000394 <__aeabi_ui2d>
 80011a8:	4602      	mov	r2, r0
 80011aa:	460b      	mov	r3, r1
 80011ac:	4620      	mov	r0, r4
 80011ae:	4629      	mov	r1, r5
 80011b0:	f7fe ffb4 	bl	800011c <__adddf3>
 80011b4:	4602      	mov	r2, r0
 80011b6:	460b      	mov	r3, r1
 80011b8:	4c2e      	ldr	r4, [pc, #184]	; (8001274 <setPWM+0x1dc>)
 80011ba:	4610      	mov	r0, r2
 80011bc:	4619      	mov	r1, r3
 80011be:	f7ff fc3b 	bl	8000a38 <__aeabi_d2uiz>
 80011c2:	4603      	mov	r3, r0
 80011c4:	63e3      	str	r3, [r4, #60]	; 0x3c
						Motors->pwm2 = pwm;
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	68ba      	ldr	r2, [r7, #8]
 80011ca:	609a      	str	r2, [r3, #8]
						Motors->e2 = en;
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	687a      	ldr	r2, [r7, #4]
 80011d0:	60da      	str	r2, [r3, #12]
						break;
 80011d2:	e019      	b.n	8001208 <setPWM+0x170>
						TIM1->CCR4 = en * (100 - pwm) + !en * pwm;
 80011d4:	68bb      	ldr	r3, [r7, #8]
 80011d6:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 80011da:	687a      	ldr	r2, [r7, #4]
 80011dc:	fb03 f202 	mul.w	r2, r3, r2
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	bf0c      	ite	eq
 80011e6:	2301      	moveq	r3, #1
 80011e8:	2300      	movne	r3, #0
 80011ea:	b2db      	uxtb	r3, r3
 80011ec:	4619      	mov	r1, r3
 80011ee:	68bb      	ldr	r3, [r7, #8]
 80011f0:	fb01 f303 	mul.w	r3, r1, r3
 80011f4:	491f      	ldr	r1, [pc, #124]	; (8001274 <setPWM+0x1dc>)
 80011f6:	4413      	add	r3, r2
 80011f8:	640b      	str	r3, [r1, #64]	; 0x40
						Motors->pwm4 = pwm;
 80011fa:	683b      	ldr	r3, [r7, #0]
 80011fc:	68ba      	ldr	r2, [r7, #8]
 80011fe:	619a      	str	r2, [r3, #24]
						Motors->e4 = en;
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	687a      	ldr	r2, [r7, #4]
 8001204:	61da      	str	r2, [r3, #28]
						break;
 8001206:	bf00      	nop
			break;
 8001208:	e01f      	b.n	800124a <setPWM+0x1b2>
		case(2):
			switch(Motor->channel) {
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	885b      	ldrh	r3, [r3, #2]
 800120e:	2b04      	cmp	r3, #4
 8001210:	d11d      	bne.n	800124e <setPWM+0x1b6>
				case(4):
					TIM2->CCR4 = en * (100 - pwm) + !en * pwm;
 8001212:	68bb      	ldr	r3, [r7, #8]
 8001214:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 8001218:	687a      	ldr	r2, [r7, #4]
 800121a:	fb03 f202 	mul.w	r2, r3, r2
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	2b00      	cmp	r3, #0
 8001222:	bf0c      	ite	eq
 8001224:	2301      	moveq	r3, #1
 8001226:	2300      	movne	r3, #0
 8001228:	b2db      	uxtb	r3, r3
 800122a:	4619      	mov	r1, r3
 800122c:	68bb      	ldr	r3, [r7, #8]
 800122e:	fb01 f303 	mul.w	r3, r1, r3
 8001232:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001236:	4413      	add	r3, r2
 8001238:	640b      	str	r3, [r1, #64]	; 0x40
					Motors->pwm3 = pwm;
 800123a:	683b      	ldr	r3, [r7, #0]
 800123c:	68ba      	ldr	r2, [r7, #8]
 800123e:	611a      	str	r2, [r3, #16]
					Motors->e3 = en;
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	687a      	ldr	r2, [r7, #4]
 8001244:	615a      	str	r2, [r3, #20]
					break;
 8001246:	bf00      	nop
			}
			break;
 8001248:	e001      	b.n	800124e <setPWM+0x1b6>
			break;
 800124a:	bf00      	nop
 800124c:	e000      	b.n	8001250 <setPWM+0x1b8>
			break;
 800124e:	bf00      	nop
	}
	HAL_GPIO_WritePin(GPIOA, Motor->in1, en);
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	889b      	ldrh	r3, [r3, #4]
 8001254:	687a      	ldr	r2, [r7, #4]
 8001256:	b2d2      	uxtb	r2, r2
 8001258:	4619      	mov	r1, r3
 800125a:	4807      	ldr	r0, [pc, #28]	; (8001278 <setPWM+0x1e0>)
 800125c:	f002 fe47 	bl	8003eee <HAL_GPIO_WritePin>
}
 8001260:	bf00      	nop
 8001262:	3710      	adds	r7, #16
 8001264:	46bd      	mov	sp, r7
 8001266:	bdb0      	pop	{r4, r5, r7, pc}
 8001268:	9999999a 	.word	0x9999999a
 800126c:	3ff19999 	.word	0x3ff19999
 8001270:	40590000 	.word	0x40590000
 8001274:	40012c00 	.word	0x40012c00
 8001278:	40010800 	.word	0x40010800
 800127c:	00000000 	.word	0x00000000

08001280 <GotoPoint>:

// offset angle of each motor
int offsets[] = {-45, -135, 135, 45};

void GotoPoint(double teta, uint32_t speed, Motors_t *Motors, Motor_Defs *MotorDefs) {
 8001280:	b5b0      	push	{r4, r5, r7, lr}
 8001282:	b08c      	sub	sp, #48	; 0x30
 8001284:	af00      	add	r7, sp, #0
 8001286:	e9c7 0102 	strd	r0, r1, [r7, #8]
 800128a:	607a      	str	r2, [r7, #4]
 800128c:	603b      	str	r3, [r7, #0]
	for (int i = 0; i < 4; ++i) {
 800128e:	2300      	movs	r3, #0
 8001290:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001292:	e10c      	b.n	80014ae <GotoPoint+0x22e>
		double t = teta + offsets[i];
 8001294:	4a8c      	ldr	r2, [pc, #560]	; (80014c8 <GotoPoint+0x248>)
 8001296:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001298:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800129c:	4618      	mov	r0, r3
 800129e:	f7ff f889 	bl	80003b4 <__aeabi_i2d>
 80012a2:	4602      	mov	r2, r0
 80012a4:	460b      	mov	r3, r1
 80012a6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80012aa:	f7fe ff37 	bl	800011c <__adddf3>
 80012ae:	4602      	mov	r2, r0
 80012b0:	460b      	mov	r3, r1
 80012b2:	e9c7 2306 	strd	r2, r3, [r7, #24]
		double s = sin(t * DEG_TO_RAD) * speed;
 80012b6:	a382      	add	r3, pc, #520	; (adr r3, 80014c0 <GotoPoint+0x240>)
 80012b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012bc:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80012c0:	f7ff f8e2 	bl	8000488 <__aeabi_dmul>
 80012c4:	4602      	mov	r2, r0
 80012c6:	460b      	mov	r3, r1
 80012c8:	4610      	mov	r0, r2
 80012ca:	4619      	mov	r1, r3
 80012cc:	f04f 0200 	mov.w	r2, #0
 80012d0:	4b7e      	ldr	r3, [pc, #504]	; (80014cc <GotoPoint+0x24c>)
 80012d2:	f7ff fa03 	bl	80006dc <__aeabi_ddiv>
 80012d6:	4602      	mov	r2, r0
 80012d8:	460b      	mov	r3, r1
 80012da:	4610      	mov	r0, r2
 80012dc:	4619      	mov	r1, r3
 80012de:	f006 f9ff 	bl	80076e0 <sin>
 80012e2:	4604      	mov	r4, r0
 80012e4:	460d      	mov	r5, r1
 80012e6:	6878      	ldr	r0, [r7, #4]
 80012e8:	f7ff f854 	bl	8000394 <__aeabi_ui2d>
 80012ec:	4602      	mov	r2, r0
 80012ee:	460b      	mov	r3, r1
 80012f0:	4620      	mov	r0, r4
 80012f2:	4629      	mov	r1, r5
 80012f4:	f7ff f8c8 	bl	8000488 <__aeabi_dmul>
 80012f8:	4602      	mov	r2, r0
 80012fa:	460b      	mov	r3, r1
 80012fc:	e9c7 2308 	strd	r2, r3, [r7, #32]
		if (s > MAXSPEED) s = MAXSPEED;
 8001300:	f04f 0200 	mov.w	r2, #0
 8001304:	4b72      	ldr	r3, [pc, #456]	; (80014d0 <GotoPoint+0x250>)
 8001306:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800130a:	f7ff fb4d 	bl	80009a8 <__aeabi_dcmpgt>
 800130e:	4603      	mov	r3, r0
 8001310:	2b00      	cmp	r3, #0
 8001312:	d004      	beq.n	800131e <GotoPoint+0x9e>
 8001314:	f04f 0200 	mov.w	r2, #0
 8001318:	4b6d      	ldr	r3, [pc, #436]	; (80014d0 <GotoPoint+0x250>)
 800131a:	e9c7 2308 	strd	r2, r3, [r7, #32]
		int en = s >= 0 ? 1 : 0;
 800131e:	2301      	movs	r3, #1
 8001320:	461c      	mov	r4, r3
 8001322:	f04f 0200 	mov.w	r2, #0
 8001326:	f04f 0300 	mov.w	r3, #0
 800132a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800132e:	f7ff fb31 	bl	8000994 <__aeabi_dcmpge>
 8001332:	4603      	mov	r3, r0
 8001334:	2b00      	cmp	r3, #0
 8001336:	d101      	bne.n	800133c <GotoPoint+0xbc>
 8001338:	2300      	movs	r3, #0
 800133a:	461c      	mov	r4, r3
 800133c:	b2e3      	uxtb	r3, r4
 800133e:	617b      	str	r3, [r7, #20]
		s = abs(s);
 8001340:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001344:	f7ff fb50 	bl	80009e8 <__aeabi_d2iz>
 8001348:	4603      	mov	r3, r0
 800134a:	2b00      	cmp	r3, #0
 800134c:	bfb8      	it	lt
 800134e:	425b      	neglt	r3, r3
 8001350:	4618      	mov	r0, r3
 8001352:	f7ff f82f 	bl	80003b4 <__aeabi_i2d>
 8001356:	4602      	mov	r2, r0
 8001358:	460b      	mov	r3, r1
 800135a:	e9c7 2308 	strd	r2, r3, [r7, #32]
		if (en == 0) {
 800135e:	697b      	ldr	r3, [r7, #20]
 8001360:	2b00      	cmp	r3, #0
 8001362:	d14f      	bne.n	8001404 <GotoPoint+0x184>
			switch(i) {
 8001364:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001366:	2b03      	cmp	r3, #3
 8001368:	f200 809e 	bhi.w	80014a8 <GotoPoint+0x228>
 800136c:	a201      	add	r2, pc, #4	; (adr r2, 8001374 <GotoPoint+0xf4>)
 800136e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001372:	bf00      	nop
 8001374:	08001385 	.word	0x08001385
 8001378:	0800139f 	.word	0x0800139f
 800137c:	080013c5 	.word	0x080013c5
 8001380:	080013df 	.word	0x080013df
			case 0:
				setPWM(MotorDefs->Motor_1, s, en, Motors);
 8001384:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001386:	681c      	ldr	r4, [r3, #0]
 8001388:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800138c:	f7ff fb54 	bl	8000a38 <__aeabi_d2uiz>
 8001390:	4601      	mov	r1, r0
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	697a      	ldr	r2, [r7, #20]
 8001396:	4620      	mov	r0, r4
 8001398:	f7ff fe7e 	bl	8001098 <setPWM>
				break;
 800139c:	e084      	b.n	80014a8 <GotoPoint+0x228>
			case 1:
				setPWM(MotorDefs->Motor_2, s, !en, Motors);
 800139e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80013a0:	685c      	ldr	r4, [r3, #4]
 80013a2:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80013a6:	f7ff fb47 	bl	8000a38 <__aeabi_d2uiz>
 80013aa:	4601      	mov	r1, r0
 80013ac:	697b      	ldr	r3, [r7, #20]
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	bf0c      	ite	eq
 80013b2:	2301      	moveq	r3, #1
 80013b4:	2300      	movne	r3, #0
 80013b6:	b2db      	uxtb	r3, r3
 80013b8:	461a      	mov	r2, r3
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	4620      	mov	r0, r4
 80013be:	f7ff fe6b 	bl	8001098 <setPWM>
				break;
 80013c2:	e071      	b.n	80014a8 <GotoPoint+0x228>
			case 2:
				setPWM(MotorDefs->Motor_3, s, en, Motors);
 80013c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80013c6:	689c      	ldr	r4, [r3, #8]
 80013c8:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80013cc:	f7ff fb34 	bl	8000a38 <__aeabi_d2uiz>
 80013d0:	4601      	mov	r1, r0
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	697a      	ldr	r2, [r7, #20]
 80013d6:	4620      	mov	r0, r4
 80013d8:	f7ff fe5e 	bl	8001098 <setPWM>
				break;
 80013dc:	e064      	b.n	80014a8 <GotoPoint+0x228>
			case 3:
				setPWM(MotorDefs->Motor_4, s, !en, Motors);
 80013de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80013e0:	68dc      	ldr	r4, [r3, #12]
 80013e2:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80013e6:	f7ff fb27 	bl	8000a38 <__aeabi_d2uiz>
 80013ea:	4601      	mov	r1, r0
 80013ec:	697b      	ldr	r3, [r7, #20]
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	bf0c      	ite	eq
 80013f2:	2301      	moveq	r3, #1
 80013f4:	2300      	movne	r3, #0
 80013f6:	b2db      	uxtb	r3, r3
 80013f8:	461a      	mov	r2, r3
 80013fa:	683b      	ldr	r3, [r7, #0]
 80013fc:	4620      	mov	r0, r4
 80013fe:	f7ff fe4b 	bl	8001098 <setPWM>
				break;
 8001402:	e051      	b.n	80014a8 <GotoPoint+0x228>
			}
		}
		else if (en == 1) {
 8001404:	697b      	ldr	r3, [r7, #20]
 8001406:	2b01      	cmp	r3, #1
 8001408:	d14e      	bne.n	80014a8 <GotoPoint+0x228>
			switch(i) {
 800140a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800140c:	2b03      	cmp	r3, #3
 800140e:	d84b      	bhi.n	80014a8 <GotoPoint+0x228>
 8001410:	a201      	add	r2, pc, #4	; (adr r2, 8001418 <GotoPoint+0x198>)
 8001412:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001416:	bf00      	nop
 8001418:	08001429 	.word	0x08001429
 800141c:	08001443 	.word	0x08001443
 8001420:	08001469 	.word	0x08001469
 8001424:	08001483 	.word	0x08001483
				case 0:
					setPWM(MotorDefs->Motor_1, s, en, Motors);
 8001428:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800142a:	681c      	ldr	r4, [r3, #0]
 800142c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001430:	f7ff fb02 	bl	8000a38 <__aeabi_d2uiz>
 8001434:	4601      	mov	r1, r0
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	697a      	ldr	r2, [r7, #20]
 800143a:	4620      	mov	r0, r4
 800143c:	f7ff fe2c 	bl	8001098 <setPWM>
					break;
 8001440:	e032      	b.n	80014a8 <GotoPoint+0x228>
				case 1:
					setPWM(MotorDefs->Motor_2, s, !en, Motors);
 8001442:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001444:	685c      	ldr	r4, [r3, #4]
 8001446:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800144a:	f7ff faf5 	bl	8000a38 <__aeabi_d2uiz>
 800144e:	4601      	mov	r1, r0
 8001450:	697b      	ldr	r3, [r7, #20]
 8001452:	2b00      	cmp	r3, #0
 8001454:	bf0c      	ite	eq
 8001456:	2301      	moveq	r3, #1
 8001458:	2300      	movne	r3, #0
 800145a:	b2db      	uxtb	r3, r3
 800145c:	461a      	mov	r2, r3
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	4620      	mov	r0, r4
 8001462:	f7ff fe19 	bl	8001098 <setPWM>
					break;
 8001466:	e01f      	b.n	80014a8 <GotoPoint+0x228>
				case 2:
					setPWM(MotorDefs->Motor_3, s, en, Motors);
 8001468:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800146a:	689c      	ldr	r4, [r3, #8]
 800146c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001470:	f7ff fae2 	bl	8000a38 <__aeabi_d2uiz>
 8001474:	4601      	mov	r1, r0
 8001476:	683b      	ldr	r3, [r7, #0]
 8001478:	697a      	ldr	r2, [r7, #20]
 800147a:	4620      	mov	r0, r4
 800147c:	f7ff fe0c 	bl	8001098 <setPWM>
					break;
 8001480:	e012      	b.n	80014a8 <GotoPoint+0x228>
				case 3:
					setPWM(MotorDefs->Motor_4, s, !en, Motors);
 8001482:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001484:	68dc      	ldr	r4, [r3, #12]
 8001486:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800148a:	f7ff fad5 	bl	8000a38 <__aeabi_d2uiz>
 800148e:	4601      	mov	r1, r0
 8001490:	697b      	ldr	r3, [r7, #20]
 8001492:	2b00      	cmp	r3, #0
 8001494:	bf0c      	ite	eq
 8001496:	2301      	moveq	r3, #1
 8001498:	2300      	movne	r3, #0
 800149a:	b2db      	uxtb	r3, r3
 800149c:	461a      	mov	r2, r3
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	4620      	mov	r0, r4
 80014a2:	f7ff fdf9 	bl	8001098 <setPWM>
					break;
 80014a6:	bf00      	nop
	for (int i = 0; i < 4; ++i) {
 80014a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014aa:	3301      	adds	r3, #1
 80014ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80014ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014b0:	2b03      	cmp	r3, #3
 80014b2:	f77f aeef 	ble.w	8001294 <GotoPoint+0x14>
//	en = s > 0 ? 1 : 0;
//	s = abs(s);
//	s = s > MAXSPEED ? MAXSPEED : s;
//	setPWM(&Motor_1, s, en, Motors);
//	setPWM(&Motor_3, s, en, Motors);
}
 80014b6:	bf00      	nop
 80014b8:	bf00      	nop
 80014ba:	3730      	adds	r7, #48	; 0x30
 80014bc:	46bd      	mov	sp, r7
 80014be:	bdb0      	pop	{r4, r5, r7, pc}
 80014c0:	53c8d4f1 	.word	0x53c8d4f1
 80014c4:	400921fb 	.word	0x400921fb
 80014c8:	20000000 	.word	0x20000000
 80014cc:	40668000 	.word	0x40668000
 80014d0:	40418000 	.word	0x40418000

080014d4 <AllMotorsZero>:

void AllMotorsZero(Motor_Defs *MotorDefs, Motors_t *Motors) {
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b082      	sub	sp, #8
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
 80014dc:	6039      	str	r1, [r7, #0]
	setPWM(MotorDefs->Motor_1, 0, 0, Motors);
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	6818      	ldr	r0, [r3, #0]
 80014e2:	683b      	ldr	r3, [r7, #0]
 80014e4:	2200      	movs	r2, #0
 80014e6:	2100      	movs	r1, #0
 80014e8:	f7ff fdd6 	bl	8001098 <setPWM>
	setPWM(MotorDefs->Motor_2, 0, 1, Motors);
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	6858      	ldr	r0, [r3, #4]
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	2201      	movs	r2, #1
 80014f4:	2100      	movs	r1, #0
 80014f6:	f7ff fdcf 	bl	8001098 <setPWM>
	setPWM(MotorDefs->Motor_3, 0, 1, Motors);
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	6898      	ldr	r0, [r3, #8]
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	2201      	movs	r2, #1
 8001502:	2100      	movs	r1, #0
 8001504:	f7ff fdc8 	bl	8001098 <setPWM>
	setPWM(MotorDefs->Motor_4, 0, 0, Motors);
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	68d8      	ldr	r0, [r3, #12]
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	2200      	movs	r2, #0
 8001510:	2100      	movs	r1, #0
 8001512:	f7ff fdc1 	bl	8001098 <setPWM>
}
 8001516:	bf00      	nop
 8001518:	3708      	adds	r7, #8
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}
	...

08001520 <RotateToZero>:
 *      Author: dalvi
 */

#include "Movement.h"

void RotateToZero(double e, double *pve, Motors_t *Motors, Motor_Defs *MotorDefs) {
 8001520:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001524:	b089      	sub	sp, #36	; 0x24
 8001526:	af00      	add	r7, sp, #0
 8001528:	e9c7 0102 	strd	r0, r1, [r7, #8]
 800152c:	607a      	str	r2, [r7, #4]
 800152e:	603b      	str	r3, [r7, #0]
	// PID Speed
	uint32_t u = abs((int)(Kp * abs(e) + Ki * (abs(e) * TIME) + Kd * (abs(e) - abs(*pve))));
 8001530:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001534:	f7ff fa58 	bl	80009e8 <__aeabi_d2iz>
 8001538:	4603      	mov	r3, r0
 800153a:	2b00      	cmp	r3, #0
 800153c:	bfb8      	it	lt
 800153e:	425b      	neglt	r3, r3
 8001540:	4618      	mov	r0, r3
 8001542:	f7fe ff37 	bl	80003b4 <__aeabi_i2d>
 8001546:	a3aa      	add	r3, pc, #680	; (adr r3, 80017f0 <RotateToZero+0x2d0>)
 8001548:	e9d3 2300 	ldrd	r2, r3, [r3]
 800154c:	f7fe ff9c 	bl	8000488 <__aeabi_dmul>
 8001550:	4602      	mov	r2, r0
 8001552:	460b      	mov	r3, r1
 8001554:	4614      	mov	r4, r2
 8001556:	461d      	mov	r5, r3
 8001558:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800155c:	f7ff fa44 	bl	80009e8 <__aeabi_d2iz>
 8001560:	4603      	mov	r3, r0
 8001562:	2b00      	cmp	r3, #0
 8001564:	bfb8      	it	lt
 8001566:	425b      	neglt	r3, r3
 8001568:	4618      	mov	r0, r3
 800156a:	f7fe ff23 	bl	80003b4 <__aeabi_i2d>
 800156e:	a3a2      	add	r3, pc, #648	; (adr r3, 80017f8 <RotateToZero+0x2d8>)
 8001570:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001574:	f7fe ff88 	bl	8000488 <__aeabi_dmul>
 8001578:	4602      	mov	r2, r0
 800157a:	460b      	mov	r3, r1
 800157c:	4610      	mov	r0, r2
 800157e:	4619      	mov	r1, r3
 8001580:	f04f 0200 	mov.w	r2, #0
 8001584:	4ba0      	ldr	r3, [pc, #640]	; (8001808 <RotateToZero+0x2e8>)
 8001586:	f7fe ff7f 	bl	8000488 <__aeabi_dmul>
 800158a:	4602      	mov	r2, r0
 800158c:	460b      	mov	r3, r1
 800158e:	4620      	mov	r0, r4
 8001590:	4629      	mov	r1, r5
 8001592:	f7fe fdc3 	bl	800011c <__adddf3>
 8001596:	4602      	mov	r2, r0
 8001598:	460b      	mov	r3, r1
 800159a:	4690      	mov	r8, r2
 800159c:	4699      	mov	r9, r3
 800159e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80015a2:	f7ff fa21 	bl	80009e8 <__aeabi_d2iz>
 80015a6:	4603      	mov	r3, r0
 80015a8:	ea83 74e3 	eor.w	r4, r3, r3, asr #31
 80015ac:	eba4 74e3 	sub.w	r4, r4, r3, asr #31
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015b6:	4610      	mov	r0, r2
 80015b8:	4619      	mov	r1, r3
 80015ba:	f7ff fa15 	bl	80009e8 <__aeabi_d2iz>
 80015be:	4603      	mov	r3, r0
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	bfb8      	it	lt
 80015c4:	425b      	neglt	r3, r3
 80015c6:	1ae3      	subs	r3, r4, r3
 80015c8:	4618      	mov	r0, r3
 80015ca:	f7fe fef3 	bl	80003b4 <__aeabi_i2d>
 80015ce:	a38c      	add	r3, pc, #560	; (adr r3, 8001800 <RotateToZero+0x2e0>)
 80015d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015d4:	f7fe ff58 	bl	8000488 <__aeabi_dmul>
 80015d8:	4602      	mov	r2, r0
 80015da:	460b      	mov	r3, r1
 80015dc:	4640      	mov	r0, r8
 80015de:	4649      	mov	r1, r9
 80015e0:	f7fe fd9c 	bl	800011c <__adddf3>
 80015e4:	4602      	mov	r2, r0
 80015e6:	460b      	mov	r3, r1
 80015e8:	4610      	mov	r0, r2
 80015ea:	4619      	mov	r1, r3
 80015ec:	f7ff f9fc 	bl	80009e8 <__aeabi_d2iz>
 80015f0:	4603      	mov	r3, r0
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	bfb8      	it	lt
 80015f6:	425b      	neglt	r3, r3
 80015f8:	61fb      	str	r3, [r7, #28]

	if (u > MAXROTATESPEED) u = MAXROTATESPEED;
 80015fa:	69fb      	ldr	r3, [r7, #28]
 80015fc:	2b14      	cmp	r3, #20
 80015fe:	d901      	bls.n	8001604 <RotateToZero+0xe4>
 8001600:	2314      	movs	r3, #20
 8001602:	61fb      	str	r3, [r7, #28]

	uint32_t stmp = 0;
 8001604:	2300      	movs	r3, #0
 8001606:	61bb      	str	r3, [r7, #24]
	int en = e > 0 ? 1 : 0;
 8001608:	2301      	movs	r3, #1
 800160a:	461c      	mov	r4, r3
 800160c:	f04f 0200 	mov.w	r2, #0
 8001610:	f04f 0300 	mov.w	r3, #0
 8001614:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001618:	f7ff f9c6 	bl	80009a8 <__aeabi_dcmpgt>
 800161c:	4603      	mov	r3, r0
 800161e:	2b00      	cmp	r3, #0
 8001620:	d101      	bne.n	8001626 <RotateToZero+0x106>
 8001622:	2300      	movs	r3, #0
 8001624:	461c      	mov	r4, r3
 8001626:	b2e3      	uxtb	r3, r4
 8001628:	617b      	str	r3, [r7, #20]

	// adding PID speed each motor speed individually and storing the first speed in the "stmp"
	// and setting it to "Motors" struct so we don't loose the actual speed of each motor
	if(en) {
 800162a:	697b      	ldr	r3, [r7, #20]
 800162c:	2b00      	cmp	r3, #0
 800162e:	f000 8154 	beq.w	80018da <RotateToZero+0x3ba>

		// Setting Motor_1 speed
		if(u > Motors->pwm1) {
 8001632:	683b      	ldr	r3, [r7, #0]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	69fa      	ldr	r2, [r7, #28]
 8001638:	429a      	cmp	r2, r3
 800163a:	d921      	bls.n	8001680 <RotateToZero+0x160>
			stmp = Motors->pwm1;
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	61bb      	str	r3, [r7, #24]
			setPWM(MotorDefs->Motor_1, u - Motors->pwm1, !Motors->e1, Motors);
 8001642:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001644:	6818      	ldr	r0, [r3, #0]
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	69fa      	ldr	r2, [r7, #28]
 800164c:	1ad1      	subs	r1, r2, r3
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	685b      	ldr	r3, [r3, #4]
 8001652:	2b00      	cmp	r3, #0
 8001654:	bf0c      	ite	eq
 8001656:	2301      	moveq	r3, #1
 8001658:	2300      	movne	r3, #0
 800165a:	b2db      	uxtb	r3, r3
 800165c:	461a      	mov	r2, r3
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	f7ff fd1a 	bl	8001098 <setPWM>
			Motors->pwm1 = stmp;
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	69ba      	ldr	r2, [r7, #24]
 8001668:	601a      	str	r2, [r3, #0]
			Motors->e1 = !Motors->e1;
 800166a:	683b      	ldr	r3, [r7, #0]
 800166c:	685b      	ldr	r3, [r3, #4]
 800166e:	2b00      	cmp	r3, #0
 8001670:	bf0c      	ite	eq
 8001672:	2301      	moveq	r3, #1
 8001674:	2300      	movne	r3, #0
 8001676:	b2db      	uxtb	r3, r3
 8001678:	461a      	mov	r2, r3
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	605a      	str	r2, [r3, #4]
 800167e:	e03d      	b.n	80016fc <RotateToZero+0x1dc>
		}
		else if (u < Motors->pwm1) {
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	69fa      	ldr	r2, [r7, #28]
 8001686:	429a      	cmp	r2, r3
 8001688:	d238      	bcs.n	80016fc <RotateToZero+0x1dc>
			stmp = Motors->pwm1;
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	61bb      	str	r3, [r7, #24]
			setPWM(MotorDefs->Motor_1, Motors->pwm1 - (pow(-1, Motors->e1) * u), Motors->e1, Motors);
 8001690:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001692:	681e      	ldr	r6, [r3, #0]
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	4618      	mov	r0, r3
 800169a:	f7fe fe7b 	bl	8000394 <__aeabi_ui2d>
 800169e:	4604      	mov	r4, r0
 80016a0:	460d      	mov	r5, r1
 80016a2:	683b      	ldr	r3, [r7, #0]
 80016a4:	685b      	ldr	r3, [r3, #4]
 80016a6:	4618      	mov	r0, r3
 80016a8:	f7fe fe84 	bl	80003b4 <__aeabi_i2d>
 80016ac:	4602      	mov	r2, r0
 80016ae:	460b      	mov	r3, r1
 80016b0:	f04f 0000 	mov.w	r0, #0
 80016b4:	4955      	ldr	r1, [pc, #340]	; (800180c <RotateToZero+0x2ec>)
 80016b6:	f005 fdf5 	bl	80072a4 <pow>
 80016ba:	4680      	mov	r8, r0
 80016bc:	4689      	mov	r9, r1
 80016be:	69f8      	ldr	r0, [r7, #28]
 80016c0:	f7fe fe68 	bl	8000394 <__aeabi_ui2d>
 80016c4:	4602      	mov	r2, r0
 80016c6:	460b      	mov	r3, r1
 80016c8:	4640      	mov	r0, r8
 80016ca:	4649      	mov	r1, r9
 80016cc:	f7fe fedc 	bl	8000488 <__aeabi_dmul>
 80016d0:	4602      	mov	r2, r0
 80016d2:	460b      	mov	r3, r1
 80016d4:	4620      	mov	r0, r4
 80016d6:	4629      	mov	r1, r5
 80016d8:	f7fe fd1e 	bl	8000118 <__aeabi_dsub>
 80016dc:	4602      	mov	r2, r0
 80016de:	460b      	mov	r3, r1
 80016e0:	4610      	mov	r0, r2
 80016e2:	4619      	mov	r1, r3
 80016e4:	f7ff f9a8 	bl	8000a38 <__aeabi_d2uiz>
 80016e8:	4601      	mov	r1, r0
 80016ea:	683b      	ldr	r3, [r7, #0]
 80016ec:	685a      	ldr	r2, [r3, #4]
 80016ee:	683b      	ldr	r3, [r7, #0]
 80016f0:	4630      	mov	r0, r6
 80016f2:	f7ff fcd1 	bl	8001098 <setPWM>
			Motors->pwm1 = stmp;
 80016f6:	683b      	ldr	r3, [r7, #0]
 80016f8:	69ba      	ldr	r2, [r7, #24]
 80016fa:	601a      	str	r2, [r3, #0]
		}

		// Setting Motor_2 speed
		if(u > Motors->pwm2) {
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	689b      	ldr	r3, [r3, #8]
 8001700:	69fa      	ldr	r2, [r7, #28]
 8001702:	429a      	cmp	r2, r3
 8001704:	d921      	bls.n	800174a <RotateToZero+0x22a>
			stmp = Motors->pwm2;
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	689b      	ldr	r3, [r3, #8]
 800170a:	61bb      	str	r3, [r7, #24]
			setPWM(MotorDefs->Motor_2, u - Motors->pwm2, !Motors->e2, Motors);
 800170c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800170e:	6858      	ldr	r0, [r3, #4]
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	689b      	ldr	r3, [r3, #8]
 8001714:	69fa      	ldr	r2, [r7, #28]
 8001716:	1ad1      	subs	r1, r2, r3
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	68db      	ldr	r3, [r3, #12]
 800171c:	2b00      	cmp	r3, #0
 800171e:	bf0c      	ite	eq
 8001720:	2301      	moveq	r3, #1
 8001722:	2300      	movne	r3, #0
 8001724:	b2db      	uxtb	r3, r3
 8001726:	461a      	mov	r2, r3
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	f7ff fcb5 	bl	8001098 <setPWM>
			Motors->pwm2 = stmp;
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	69ba      	ldr	r2, [r7, #24]
 8001732:	609a      	str	r2, [r3, #8]
			Motors->e2 = !Motors->e2;
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	68db      	ldr	r3, [r3, #12]
 8001738:	2b00      	cmp	r3, #0
 800173a:	bf0c      	ite	eq
 800173c:	2301      	moveq	r3, #1
 800173e:	2300      	movne	r3, #0
 8001740:	b2db      	uxtb	r3, r3
 8001742:	461a      	mov	r2, r3
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	60da      	str	r2, [r3, #12]
 8001748:	e03d      	b.n	80017c6 <RotateToZero+0x2a6>
		}
		else if (u < Motors->pwm2) {
 800174a:	683b      	ldr	r3, [r7, #0]
 800174c:	689b      	ldr	r3, [r3, #8]
 800174e:	69fa      	ldr	r2, [r7, #28]
 8001750:	429a      	cmp	r2, r3
 8001752:	d238      	bcs.n	80017c6 <RotateToZero+0x2a6>
			stmp = Motors->pwm2;
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	689b      	ldr	r3, [r3, #8]
 8001758:	61bb      	str	r3, [r7, #24]
			setPWM(MotorDefs->Motor_2, Motors->pwm2 - (pow(-1, Motors->e2) * u), Motors->e2, Motors);
 800175a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800175c:	685e      	ldr	r6, [r3, #4]
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	689b      	ldr	r3, [r3, #8]
 8001762:	4618      	mov	r0, r3
 8001764:	f7fe fe16 	bl	8000394 <__aeabi_ui2d>
 8001768:	4604      	mov	r4, r0
 800176a:	460d      	mov	r5, r1
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	68db      	ldr	r3, [r3, #12]
 8001770:	4618      	mov	r0, r3
 8001772:	f7fe fe1f 	bl	80003b4 <__aeabi_i2d>
 8001776:	4602      	mov	r2, r0
 8001778:	460b      	mov	r3, r1
 800177a:	f04f 0000 	mov.w	r0, #0
 800177e:	4923      	ldr	r1, [pc, #140]	; (800180c <RotateToZero+0x2ec>)
 8001780:	f005 fd90 	bl	80072a4 <pow>
 8001784:	4680      	mov	r8, r0
 8001786:	4689      	mov	r9, r1
 8001788:	69f8      	ldr	r0, [r7, #28]
 800178a:	f7fe fe03 	bl	8000394 <__aeabi_ui2d>
 800178e:	4602      	mov	r2, r0
 8001790:	460b      	mov	r3, r1
 8001792:	4640      	mov	r0, r8
 8001794:	4649      	mov	r1, r9
 8001796:	f7fe fe77 	bl	8000488 <__aeabi_dmul>
 800179a:	4602      	mov	r2, r0
 800179c:	460b      	mov	r3, r1
 800179e:	4620      	mov	r0, r4
 80017a0:	4629      	mov	r1, r5
 80017a2:	f7fe fcb9 	bl	8000118 <__aeabi_dsub>
 80017a6:	4602      	mov	r2, r0
 80017a8:	460b      	mov	r3, r1
 80017aa:	4610      	mov	r0, r2
 80017ac:	4619      	mov	r1, r3
 80017ae:	f7ff f943 	bl	8000a38 <__aeabi_d2uiz>
 80017b2:	4601      	mov	r1, r0
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	68da      	ldr	r2, [r3, #12]
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	4630      	mov	r0, r6
 80017bc:	f7ff fc6c 	bl	8001098 <setPWM>
			Motors->pwm2 = stmp;
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	69ba      	ldr	r2, [r7, #24]
 80017c4:	609a      	str	r2, [r3, #8]
		}

		// Setting Motor_3 speed
		stmp = Motors->pwm3;
 80017c6:	683b      	ldr	r3, [r7, #0]
 80017c8:	691b      	ldr	r3, [r3, #16]
 80017ca:	61bb      	str	r3, [r7, #24]
		setPWM(MotorDefs->Motor_3, Motors->pwm3 + (pow(-1, !Motors->e3) * u), Motors->e3, Motors);
 80017cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80017ce:	689e      	ldr	r6, [r3, #8]
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	691b      	ldr	r3, [r3, #16]
 80017d4:	4618      	mov	r0, r3
 80017d6:	f7fe fddd 	bl	8000394 <__aeabi_ui2d>
 80017da:	4604      	mov	r4, r0
 80017dc:	460d      	mov	r5, r1
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	695b      	ldr	r3, [r3, #20]
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d116      	bne.n	8001814 <RotateToZero+0x2f4>
 80017e6:	f04f 0200 	mov.w	r2, #0
 80017ea:	4b09      	ldr	r3, [pc, #36]	; (8001810 <RotateToZero+0x2f0>)
 80017ec:	e016      	b.n	800181c <RotateToZero+0x2fc>
 80017ee:	bf00      	nop
 80017f0:	cccccccd 	.word	0xcccccccd
 80017f4:	4000cccc 	.word	0x4000cccc
 80017f8:	7110e454 	.word	0x7110e454
 80017fc:	3f092a73 	.word	0x3f092a73
 8001800:	9999999a 	.word	0x9999999a
 8001804:	3ff99999 	.word	0x3ff99999
 8001808:	3ff80000 	.word	0x3ff80000
 800180c:	bff00000 	.word	0xbff00000
 8001810:	3ff00000 	.word	0x3ff00000
 8001814:	f04f 0200 	mov.w	r2, #0
 8001818:	f04f 0300 	mov.w	r3, #0
 800181c:	f04f 0000 	mov.w	r0, #0
 8001820:	4976      	ldr	r1, [pc, #472]	; (80019fc <RotateToZero+0x4dc>)
 8001822:	f005 fd3f 	bl	80072a4 <pow>
 8001826:	4680      	mov	r8, r0
 8001828:	4689      	mov	r9, r1
 800182a:	69f8      	ldr	r0, [r7, #28]
 800182c:	f7fe fdb2 	bl	8000394 <__aeabi_ui2d>
 8001830:	4602      	mov	r2, r0
 8001832:	460b      	mov	r3, r1
 8001834:	4640      	mov	r0, r8
 8001836:	4649      	mov	r1, r9
 8001838:	f7fe fe26 	bl	8000488 <__aeabi_dmul>
 800183c:	4602      	mov	r2, r0
 800183e:	460b      	mov	r3, r1
 8001840:	4620      	mov	r0, r4
 8001842:	4629      	mov	r1, r5
 8001844:	f7fe fc6a 	bl	800011c <__adddf3>
 8001848:	4602      	mov	r2, r0
 800184a:	460b      	mov	r3, r1
 800184c:	4610      	mov	r0, r2
 800184e:	4619      	mov	r1, r3
 8001850:	f7ff f8f2 	bl	8000a38 <__aeabi_d2uiz>
 8001854:	4601      	mov	r1, r0
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	695a      	ldr	r2, [r3, #20]
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	4630      	mov	r0, r6
 800185e:	f7ff fc1b 	bl	8001098 <setPWM>
		Motors->pwm3 = stmp;
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	69ba      	ldr	r2, [r7, #24]
 8001866:	611a      	str	r2, [r3, #16]

		// Setting Motor_4 speed
		stmp = Motors->pwm4;
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	699b      	ldr	r3, [r3, #24]
 800186c:	61bb      	str	r3, [r7, #24]
		setPWM(MotorDefs->Motor_4, Motors->pwm4 + (pow(-1, Motors->e4) * u), Motors->e4, Motors);
 800186e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001870:	68de      	ldr	r6, [r3, #12]
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	699b      	ldr	r3, [r3, #24]
 8001876:	4618      	mov	r0, r3
 8001878:	f7fe fd8c 	bl	8000394 <__aeabi_ui2d>
 800187c:	4604      	mov	r4, r0
 800187e:	460d      	mov	r5, r1
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	69db      	ldr	r3, [r3, #28]
 8001884:	4618      	mov	r0, r3
 8001886:	f7fe fd95 	bl	80003b4 <__aeabi_i2d>
 800188a:	4602      	mov	r2, r0
 800188c:	460b      	mov	r3, r1
 800188e:	f04f 0000 	mov.w	r0, #0
 8001892:	495a      	ldr	r1, [pc, #360]	; (80019fc <RotateToZero+0x4dc>)
 8001894:	f005 fd06 	bl	80072a4 <pow>
 8001898:	4680      	mov	r8, r0
 800189a:	4689      	mov	r9, r1
 800189c:	69f8      	ldr	r0, [r7, #28]
 800189e:	f7fe fd79 	bl	8000394 <__aeabi_ui2d>
 80018a2:	4602      	mov	r2, r0
 80018a4:	460b      	mov	r3, r1
 80018a6:	4640      	mov	r0, r8
 80018a8:	4649      	mov	r1, r9
 80018aa:	f7fe fded 	bl	8000488 <__aeabi_dmul>
 80018ae:	4602      	mov	r2, r0
 80018b0:	460b      	mov	r3, r1
 80018b2:	4620      	mov	r0, r4
 80018b4:	4629      	mov	r1, r5
 80018b6:	f7fe fc31 	bl	800011c <__adddf3>
 80018ba:	4602      	mov	r2, r0
 80018bc:	460b      	mov	r3, r1
 80018be:	4610      	mov	r0, r2
 80018c0:	4619      	mov	r1, r3
 80018c2:	f7ff f8b9 	bl	8000a38 <__aeabi_d2uiz>
 80018c6:	4601      	mov	r1, r0
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	69da      	ldr	r2, [r3, #28]
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	4630      	mov	r0, r6
 80018d0:	f7ff fbe2 	bl	8001098 <setPWM>
		Motors->pwm4 = stmp;
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	69ba      	ldr	r2, [r7, #24]
 80018d8:	619a      	str	r2, [r3, #24]
	}
	if(!en) {
 80018da:	697b      	ldr	r3, [r7, #20]
 80018dc:	2b00      	cmp	r3, #0
 80018de:	f040 8144 	bne.w	8001b6a <RotateToZero+0x64a>
		// Setting Motor_3 speed
		if(u > Motors->pwm3) {
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	691b      	ldr	r3, [r3, #16]
 80018e6:	69fa      	ldr	r2, [r7, #28]
 80018e8:	429a      	cmp	r2, r3
 80018ea:	d921      	bls.n	8001930 <RotateToZero+0x410>
			stmp = Motors->pwm3;
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	691b      	ldr	r3, [r3, #16]
 80018f0:	61bb      	str	r3, [r7, #24]
			setPWM(MotorDefs->Motor_3, u - Motors->pwm3, !Motors->e3, Motors);
 80018f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80018f4:	6898      	ldr	r0, [r3, #8]
 80018f6:	683b      	ldr	r3, [r7, #0]
 80018f8:	691b      	ldr	r3, [r3, #16]
 80018fa:	69fa      	ldr	r2, [r7, #28]
 80018fc:	1ad1      	subs	r1, r2, r3
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	695b      	ldr	r3, [r3, #20]
 8001902:	2b00      	cmp	r3, #0
 8001904:	bf0c      	ite	eq
 8001906:	2301      	moveq	r3, #1
 8001908:	2300      	movne	r3, #0
 800190a:	b2db      	uxtb	r3, r3
 800190c:	461a      	mov	r2, r3
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	f7ff fbc2 	bl	8001098 <setPWM>
			Motors->pwm3 = stmp;
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	69ba      	ldr	r2, [r7, #24]
 8001918:	611a      	str	r2, [r3, #16]
			Motors->e3 = !Motors->e3;
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	695b      	ldr	r3, [r3, #20]
 800191e:	2b00      	cmp	r3, #0
 8001920:	bf0c      	ite	eq
 8001922:	2301      	moveq	r3, #1
 8001924:	2300      	movne	r3, #0
 8001926:	b2db      	uxtb	r3, r3
 8001928:	461a      	mov	r2, r3
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	615a      	str	r2, [r3, #20]
 800192e:	e03d      	b.n	80019ac <RotateToZero+0x48c>
		}
		else if (u < Motors->pwm3) {
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	691b      	ldr	r3, [r3, #16]
 8001934:	69fa      	ldr	r2, [r7, #28]
 8001936:	429a      	cmp	r2, r3
 8001938:	d238      	bcs.n	80019ac <RotateToZero+0x48c>
			stmp = Motors->pwm3;
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	691b      	ldr	r3, [r3, #16]
 800193e:	61bb      	str	r3, [r7, #24]
			setPWM(MotorDefs->Motor_3, Motors->pwm1 - (pow(-1, Motors->e3) * u), Motors->e3, Motors);
 8001940:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001942:	689e      	ldr	r6, [r3, #8]
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4618      	mov	r0, r3
 800194a:	f7fe fd23 	bl	8000394 <__aeabi_ui2d>
 800194e:	4604      	mov	r4, r0
 8001950:	460d      	mov	r5, r1
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	695b      	ldr	r3, [r3, #20]
 8001956:	4618      	mov	r0, r3
 8001958:	f7fe fd2c 	bl	80003b4 <__aeabi_i2d>
 800195c:	4602      	mov	r2, r0
 800195e:	460b      	mov	r3, r1
 8001960:	f04f 0000 	mov.w	r0, #0
 8001964:	4925      	ldr	r1, [pc, #148]	; (80019fc <RotateToZero+0x4dc>)
 8001966:	f005 fc9d 	bl	80072a4 <pow>
 800196a:	4680      	mov	r8, r0
 800196c:	4689      	mov	r9, r1
 800196e:	69f8      	ldr	r0, [r7, #28]
 8001970:	f7fe fd10 	bl	8000394 <__aeabi_ui2d>
 8001974:	4602      	mov	r2, r0
 8001976:	460b      	mov	r3, r1
 8001978:	4640      	mov	r0, r8
 800197a:	4649      	mov	r1, r9
 800197c:	f7fe fd84 	bl	8000488 <__aeabi_dmul>
 8001980:	4602      	mov	r2, r0
 8001982:	460b      	mov	r3, r1
 8001984:	4620      	mov	r0, r4
 8001986:	4629      	mov	r1, r5
 8001988:	f7fe fbc6 	bl	8000118 <__aeabi_dsub>
 800198c:	4602      	mov	r2, r0
 800198e:	460b      	mov	r3, r1
 8001990:	4610      	mov	r0, r2
 8001992:	4619      	mov	r1, r3
 8001994:	f7ff f850 	bl	8000a38 <__aeabi_d2uiz>
 8001998:	4601      	mov	r1, r0
 800199a:	683b      	ldr	r3, [r7, #0]
 800199c:	695a      	ldr	r2, [r3, #20]
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	4630      	mov	r0, r6
 80019a2:	f7ff fb79 	bl	8001098 <setPWM>
			Motors->pwm3 = stmp;
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	69ba      	ldr	r2, [r7, #24]
 80019aa:	611a      	str	r2, [r3, #16]
		}

		// Setting Motor_4 speed
		if(u > Motors->pwm4) {
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	699b      	ldr	r3, [r3, #24]
 80019b0:	69fa      	ldr	r2, [r7, #28]
 80019b2:	429a      	cmp	r2, r3
 80019b4:	d924      	bls.n	8001a00 <RotateToZero+0x4e0>
			stmp = Motors->pwm4;
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	699b      	ldr	r3, [r3, #24]
 80019ba:	61bb      	str	r3, [r7, #24]
			setPWM(MotorDefs->Motor_4, u - Motors->pwm4, !Motors->e4, Motors);
 80019bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80019be:	68d8      	ldr	r0, [r3, #12]
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	699b      	ldr	r3, [r3, #24]
 80019c4:	69fa      	ldr	r2, [r7, #28]
 80019c6:	1ad1      	subs	r1, r2, r3
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	69db      	ldr	r3, [r3, #28]
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	bf0c      	ite	eq
 80019d0:	2301      	moveq	r3, #1
 80019d2:	2300      	movne	r3, #0
 80019d4:	b2db      	uxtb	r3, r3
 80019d6:	461a      	mov	r2, r3
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	f7ff fb5d 	bl	8001098 <setPWM>
			Motors->pwm4 = stmp;
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	69ba      	ldr	r2, [r7, #24]
 80019e2:	619a      	str	r2, [r3, #24]
			Motors->e4 = !Motors->e4;
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	69db      	ldr	r3, [r3, #28]
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	bf0c      	ite	eq
 80019ec:	2301      	moveq	r3, #1
 80019ee:	2300      	movne	r3, #0
 80019f0:	b2db      	uxtb	r3, r3
 80019f2:	461a      	mov	r2, r3
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	61da      	str	r2, [r3, #28]
 80019f8:	e040      	b.n	8001a7c <RotateToZero+0x55c>
 80019fa:	bf00      	nop
 80019fc:	bff00000 	.word	0xbff00000
		}
		else if (u <= Motors->pwm4) {
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	699b      	ldr	r3, [r3, #24]
 8001a04:	69fa      	ldr	r2, [r7, #28]
 8001a06:	429a      	cmp	r2, r3
 8001a08:	d838      	bhi.n	8001a7c <RotateToZero+0x55c>
			stmp = Motors->pwm4;
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	699b      	ldr	r3, [r3, #24]
 8001a0e:	61bb      	str	r3, [r7, #24]
			setPWM(MotorDefs->Motor_4, Motors->pwm4 - (pow(-1, Motors->e4) * u), Motors->e4, Motors);
 8001a10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001a12:	68de      	ldr	r6, [r3, #12]
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	699b      	ldr	r3, [r3, #24]
 8001a18:	4618      	mov	r0, r3
 8001a1a:	f7fe fcbb 	bl	8000394 <__aeabi_ui2d>
 8001a1e:	4604      	mov	r4, r0
 8001a20:	460d      	mov	r5, r1
 8001a22:	683b      	ldr	r3, [r7, #0]
 8001a24:	69db      	ldr	r3, [r3, #28]
 8001a26:	4618      	mov	r0, r3
 8001a28:	f7fe fcc4 	bl	80003b4 <__aeabi_i2d>
 8001a2c:	4602      	mov	r2, r0
 8001a2e:	460b      	mov	r3, r1
 8001a30:	f04f 0000 	mov.w	r0, #0
 8001a34:	4952      	ldr	r1, [pc, #328]	; (8001b80 <RotateToZero+0x660>)
 8001a36:	f005 fc35 	bl	80072a4 <pow>
 8001a3a:	4680      	mov	r8, r0
 8001a3c:	4689      	mov	r9, r1
 8001a3e:	69f8      	ldr	r0, [r7, #28]
 8001a40:	f7fe fca8 	bl	8000394 <__aeabi_ui2d>
 8001a44:	4602      	mov	r2, r0
 8001a46:	460b      	mov	r3, r1
 8001a48:	4640      	mov	r0, r8
 8001a4a:	4649      	mov	r1, r9
 8001a4c:	f7fe fd1c 	bl	8000488 <__aeabi_dmul>
 8001a50:	4602      	mov	r2, r0
 8001a52:	460b      	mov	r3, r1
 8001a54:	4620      	mov	r0, r4
 8001a56:	4629      	mov	r1, r5
 8001a58:	f7fe fb5e 	bl	8000118 <__aeabi_dsub>
 8001a5c:	4602      	mov	r2, r0
 8001a5e:	460b      	mov	r3, r1
 8001a60:	4610      	mov	r0, r2
 8001a62:	4619      	mov	r1, r3
 8001a64:	f7fe ffe8 	bl	8000a38 <__aeabi_d2uiz>
 8001a68:	4601      	mov	r1, r0
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	69da      	ldr	r2, [r3, #28]
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	4630      	mov	r0, r6
 8001a72:	f7ff fb11 	bl	8001098 <setPWM>
			Motors->pwm4 = stmp;
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	69ba      	ldr	r2, [r7, #24]
 8001a7a:	619a      	str	r2, [r3, #24]
		}

		// Setting Motor_1 speed
		stmp = Motors->pwm1;
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	61bb      	str	r3, [r7, #24]
		setPWM(MotorDefs->Motor_1, Motors->pwm1 + (pow(-1, Motors->e1) * u), Motors->e1, Motors);
 8001a82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001a84:	681e      	ldr	r6, [r3, #0]
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f7fe fc82 	bl	8000394 <__aeabi_ui2d>
 8001a90:	4604      	mov	r4, r0
 8001a92:	460d      	mov	r5, r1
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	685b      	ldr	r3, [r3, #4]
 8001a98:	4618      	mov	r0, r3
 8001a9a:	f7fe fc8b 	bl	80003b4 <__aeabi_i2d>
 8001a9e:	4602      	mov	r2, r0
 8001aa0:	460b      	mov	r3, r1
 8001aa2:	f04f 0000 	mov.w	r0, #0
 8001aa6:	4936      	ldr	r1, [pc, #216]	; (8001b80 <RotateToZero+0x660>)
 8001aa8:	f005 fbfc 	bl	80072a4 <pow>
 8001aac:	4680      	mov	r8, r0
 8001aae:	4689      	mov	r9, r1
 8001ab0:	69f8      	ldr	r0, [r7, #28]
 8001ab2:	f7fe fc6f 	bl	8000394 <__aeabi_ui2d>
 8001ab6:	4602      	mov	r2, r0
 8001ab8:	460b      	mov	r3, r1
 8001aba:	4640      	mov	r0, r8
 8001abc:	4649      	mov	r1, r9
 8001abe:	f7fe fce3 	bl	8000488 <__aeabi_dmul>
 8001ac2:	4602      	mov	r2, r0
 8001ac4:	460b      	mov	r3, r1
 8001ac6:	4620      	mov	r0, r4
 8001ac8:	4629      	mov	r1, r5
 8001aca:	f7fe fb27 	bl	800011c <__adddf3>
 8001ace:	4602      	mov	r2, r0
 8001ad0:	460b      	mov	r3, r1
 8001ad2:	4610      	mov	r0, r2
 8001ad4:	4619      	mov	r1, r3
 8001ad6:	f7fe ffaf 	bl	8000a38 <__aeabi_d2uiz>
 8001ada:	4601      	mov	r1, r0
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	685a      	ldr	r2, [r3, #4]
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	4630      	mov	r0, r6
 8001ae4:	f7ff fad8 	bl	8001098 <setPWM>
		Motors->pwm1 = stmp;
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	69ba      	ldr	r2, [r7, #24]
 8001aec:	601a      	str	r2, [r3, #0]

		// Setting Motor_2 speed
		stmp = Motors->pwm2;
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	689b      	ldr	r3, [r3, #8]
 8001af2:	61bb      	str	r3, [r7, #24]
		setPWM(MotorDefs->Motor_2, Motors->pwm2 + (pow(-1, !Motors->e2) * u), Motors->e2, Motors);
 8001af4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001af6:	685e      	ldr	r6, [r3, #4]
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	689b      	ldr	r3, [r3, #8]
 8001afc:	4618      	mov	r0, r3
 8001afe:	f7fe fc49 	bl	8000394 <__aeabi_ui2d>
 8001b02:	4604      	mov	r4, r0
 8001b04:	460d      	mov	r5, r1
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	68db      	ldr	r3, [r3, #12]
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d103      	bne.n	8001b16 <RotateToZero+0x5f6>
 8001b0e:	f04f 0200 	mov.w	r2, #0
 8001b12:	4b1c      	ldr	r3, [pc, #112]	; (8001b84 <RotateToZero+0x664>)
 8001b14:	e003      	b.n	8001b1e <RotateToZero+0x5fe>
 8001b16:	f04f 0200 	mov.w	r2, #0
 8001b1a:	f04f 0300 	mov.w	r3, #0
 8001b1e:	f04f 0000 	mov.w	r0, #0
 8001b22:	4917      	ldr	r1, [pc, #92]	; (8001b80 <RotateToZero+0x660>)
 8001b24:	f005 fbbe 	bl	80072a4 <pow>
 8001b28:	4680      	mov	r8, r0
 8001b2a:	4689      	mov	r9, r1
 8001b2c:	69f8      	ldr	r0, [r7, #28]
 8001b2e:	f7fe fc31 	bl	8000394 <__aeabi_ui2d>
 8001b32:	4602      	mov	r2, r0
 8001b34:	460b      	mov	r3, r1
 8001b36:	4640      	mov	r0, r8
 8001b38:	4649      	mov	r1, r9
 8001b3a:	f7fe fca5 	bl	8000488 <__aeabi_dmul>
 8001b3e:	4602      	mov	r2, r0
 8001b40:	460b      	mov	r3, r1
 8001b42:	4620      	mov	r0, r4
 8001b44:	4629      	mov	r1, r5
 8001b46:	f7fe fae9 	bl	800011c <__adddf3>
 8001b4a:	4602      	mov	r2, r0
 8001b4c:	460b      	mov	r3, r1
 8001b4e:	4610      	mov	r0, r2
 8001b50:	4619      	mov	r1, r3
 8001b52:	f7fe ff71 	bl	8000a38 <__aeabi_d2uiz>
 8001b56:	4601      	mov	r1, r0
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	68da      	ldr	r2, [r3, #12]
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	4630      	mov	r0, r6
 8001b60:	f7ff fa9a 	bl	8001098 <setPWM>
		Motors->pwm2 = stmp;
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	69ba      	ldr	r2, [r7, #24]
 8001b68:	609a      	str	r2, [r3, #8]
	}

	*pve = e;
 8001b6a:	6879      	ldr	r1, [r7, #4]
 8001b6c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001b70:	e9c1 2300 	strd	r2, r3, [r1]
}
 8001b74:	bf00      	nop
 8001b76:	3724      	adds	r7, #36	; 0x24
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001b7e:	bf00      	nop
 8001b80:	bff00000 	.word	0xbff00000
 8001b84:	3ff00000 	.word	0x3ff00000

08001b88 <GetBall>:

// this function gets the X and Y coordinate of the ball and
// converts them into polar coordinates then checks and sets the current zone
// and sets the motors with "GotoPoint" function from the "Motors.h" header
void GetBall(int x, int y, uint32_t speed, enum Zones *zone, Motors_t *Motors, Motor_Defs *MotorDefs, int *GoalCheck, SRDatas_t *SRDatas) {
 8001b88:	b5b0      	push	{r4, r5, r7, lr}
 8001b8a:	b08a      	sub	sp, #40	; 0x28
 8001b8c:	af02      	add	r7, sp, #8
 8001b8e:	60f8      	str	r0, [r7, #12]
 8001b90:	60b9      	str	r1, [r7, #8]
 8001b92:	607a      	str	r2, [r7, #4]
 8001b94:	603b      	str	r3, [r7, #0]
	double teta;
	double r;

	if (x >= 0) teta = -(atan((double)y / x) * RAD_TO_DEG - 90);
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	db32      	blt.n	8001c02 <GetBall+0x7a>
 8001b9c:	68b8      	ldr	r0, [r7, #8]
 8001b9e:	f7fe fc09 	bl	80003b4 <__aeabi_i2d>
 8001ba2:	4604      	mov	r4, r0
 8001ba4:	460d      	mov	r5, r1
 8001ba6:	68f8      	ldr	r0, [r7, #12]
 8001ba8:	f7fe fc04 	bl	80003b4 <__aeabi_i2d>
 8001bac:	4602      	mov	r2, r0
 8001bae:	460b      	mov	r3, r1
 8001bb0:	4620      	mov	r0, r4
 8001bb2:	4629      	mov	r1, r5
 8001bb4:	f7fe fd92 	bl	80006dc <__aeabi_ddiv>
 8001bb8:	4602      	mov	r2, r0
 8001bba:	460b      	mov	r3, r1
 8001bbc:	4610      	mov	r0, r2
 8001bbe:	4619      	mov	r1, r3
 8001bc0:	f005 fc06 	bl	80073d0 <atan>
 8001bc4:	f04f 0200 	mov.w	r2, #0
 8001bc8:	4b81      	ldr	r3, [pc, #516]	; (8001dd0 <GetBall+0x248>)
 8001bca:	f7fe fc5d 	bl	8000488 <__aeabi_dmul>
 8001bce:	4602      	mov	r2, r0
 8001bd0:	460b      	mov	r3, r1
 8001bd2:	4610      	mov	r0, r2
 8001bd4:	4619      	mov	r1, r3
 8001bd6:	a37c      	add	r3, pc, #496	; (adr r3, 8001dc8 <GetBall+0x240>)
 8001bd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bdc:	f7fe fd7e 	bl	80006dc <__aeabi_ddiv>
 8001be0:	4602      	mov	r2, r0
 8001be2:	460b      	mov	r3, r1
 8001be4:	4610      	mov	r0, r2
 8001be6:	4619      	mov	r1, r3
 8001be8:	f04f 0200 	mov.w	r2, #0
 8001bec:	4b79      	ldr	r3, [pc, #484]	; (8001dd4 <GetBall+0x24c>)
 8001bee:	f7fe fa93 	bl	8000118 <__aeabi_dsub>
 8001bf2:	4602      	mov	r2, r0
 8001bf4:	460b      	mov	r3, r1
 8001bf6:	4611      	mov	r1, r2
 8001bf8:	61b9      	str	r1, [r7, #24]
 8001bfa:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001bfe:	61fb      	str	r3, [r7, #28]
 8001c00:	e03d      	b.n	8001c7e <GetBall+0xf6>
	else if (x < 0) teta = -((atan((double)y/ x) + PI)* RAD_TO_DEG - 90);
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	da3a      	bge.n	8001c7e <GetBall+0xf6>
 8001c08:	68b8      	ldr	r0, [r7, #8]
 8001c0a:	f7fe fbd3 	bl	80003b4 <__aeabi_i2d>
 8001c0e:	4604      	mov	r4, r0
 8001c10:	460d      	mov	r5, r1
 8001c12:	68f8      	ldr	r0, [r7, #12]
 8001c14:	f7fe fbce 	bl	80003b4 <__aeabi_i2d>
 8001c18:	4602      	mov	r2, r0
 8001c1a:	460b      	mov	r3, r1
 8001c1c:	4620      	mov	r0, r4
 8001c1e:	4629      	mov	r1, r5
 8001c20:	f7fe fd5c 	bl	80006dc <__aeabi_ddiv>
 8001c24:	4602      	mov	r2, r0
 8001c26:	460b      	mov	r3, r1
 8001c28:	4610      	mov	r0, r2
 8001c2a:	4619      	mov	r1, r3
 8001c2c:	f005 fbd0 	bl	80073d0 <atan>
 8001c30:	a365      	add	r3, pc, #404	; (adr r3, 8001dc8 <GetBall+0x240>)
 8001c32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c36:	f7fe fa71 	bl	800011c <__adddf3>
 8001c3a:	4602      	mov	r2, r0
 8001c3c:	460b      	mov	r3, r1
 8001c3e:	4610      	mov	r0, r2
 8001c40:	4619      	mov	r1, r3
 8001c42:	f04f 0200 	mov.w	r2, #0
 8001c46:	4b62      	ldr	r3, [pc, #392]	; (8001dd0 <GetBall+0x248>)
 8001c48:	f7fe fc1e 	bl	8000488 <__aeabi_dmul>
 8001c4c:	4602      	mov	r2, r0
 8001c4e:	460b      	mov	r3, r1
 8001c50:	4610      	mov	r0, r2
 8001c52:	4619      	mov	r1, r3
 8001c54:	a35c      	add	r3, pc, #368	; (adr r3, 8001dc8 <GetBall+0x240>)
 8001c56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c5a:	f7fe fd3f 	bl	80006dc <__aeabi_ddiv>
 8001c5e:	4602      	mov	r2, r0
 8001c60:	460b      	mov	r3, r1
 8001c62:	4610      	mov	r0, r2
 8001c64:	4619      	mov	r1, r3
 8001c66:	f04f 0200 	mov.w	r2, #0
 8001c6a:	4b5a      	ldr	r3, [pc, #360]	; (8001dd4 <GetBall+0x24c>)
 8001c6c:	f7fe fa54 	bl	8000118 <__aeabi_dsub>
 8001c70:	4602      	mov	r2, r0
 8001c72:	460b      	mov	r3, r1
 8001c74:	4611      	mov	r1, r2
 8001c76:	61b9      	str	r1, [r7, #24]
 8001c78:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001c7c:	61fb      	str	r3, [r7, #28]
	r = sqrt(x * x + y * y);
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	fb03 f203 	mul.w	r2, r3, r3
 8001c84:	68bb      	ldr	r3, [r7, #8]
 8001c86:	fb03 f303 	mul.w	r3, r3, r3
 8001c8a:	4413      	add	r3, r2
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	f7fe fb91 	bl	80003b4 <__aeabi_i2d>
 8001c92:	4602      	mov	r2, r0
 8001c94:	460b      	mov	r3, r1
 8001c96:	4610      	mov	r0, r2
 8001c98:	4619      	mov	r1, r3
 8001c9a:	f005 fb71 	bl	8007380 <sqrt>
 8001c9e:	e9c7 0104 	strd	r0, r1, [r7, #16]

	if (r >= ZONEDIS_TH) {
 8001ca2:	f04f 0200 	mov.w	r2, #0
 8001ca6:	4b4c      	ldr	r3, [pc, #304]	; (8001dd8 <GetBall+0x250>)
 8001ca8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001cac:	f7fe fe72 	bl	8000994 <__aeabi_dcmpge>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d006      	beq.n	8001cc4 <GetBall+0x13c>
		*zone = FAR;
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	2201      	movs	r2, #1
 8001cba:	701a      	strb	r2, [r3, #0]
		*GoalCheck = 0;
 8001cbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	601a      	str	r2, [r3, #0]
 8001cc2:	e021      	b.n	8001d08 <GetBall+0x180>
	}
	else if (r < ZONEDIS_TH) {
 8001cc4:	f04f 0200 	mov.w	r2, #0
 8001cc8:	4b43      	ldr	r3, [pc, #268]	; (8001dd8 <GetBall+0x250>)
 8001cca:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001cce:	f7fe fe4d 	bl	800096c <__aeabi_dcmplt>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d014      	beq.n	8001d02 <GetBall+0x17a>
		*GoalCheck = 0;
 8001cd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001cda:	2200      	movs	r2, #0
 8001cdc:	601a      	str	r2, [r3, #0]
		if (abs(teta) > GETBALLANGLE_TH) {
 8001cde:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001ce2:	f7fe fe81 	bl	80009e8 <__aeabi_d2iz>
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	bfb8      	it	lt
 8001cec:	425b      	neglt	r3, r3
 8001cee:	2b0b      	cmp	r3, #11
 8001cf0:	dd03      	ble.n	8001cfa <GetBall+0x172>
			*zone = CLOSE;
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	2202      	movs	r2, #2
 8001cf6:	701a      	strb	r2, [r3, #0]
 8001cf8:	e006      	b.n	8001d08 <GetBall+0x180>
		}
		else {
			*zone = BALLIN;
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	2203      	movs	r2, #3
 8001cfe:	701a      	strb	r2, [r3, #0]
 8001d00:	e002      	b.n	8001d08 <GetBall+0x180>
		}
	}
	else {
		*zone = NA;
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	2200      	movs	r2, #0
 8001d06:	701a      	strb	r2, [r3, #0]
	}

	switch (*zone) {
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	781b      	ldrb	r3, [r3, #0]
 8001d0c:	2b03      	cmp	r3, #3
 8001d0e:	d854      	bhi.n	8001dba <GetBall+0x232>
 8001d10:	a201      	add	r2, pc, #4	; (adr r2, 8001d18 <GetBall+0x190>)
 8001d12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d16:	bf00      	nop
 8001d18:	08001db1 	.word	0x08001db1
 8001d1c:	08001d29 	.word	0x08001d29
 8001d20:	08001d3b 	.word	0x08001d3b
 8001d24:	08001d99 	.word	0x08001d99
	case FAR:
		GotoPoint(teta, speed, Motors, MotorDefs);
 8001d28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d2a:	9300      	str	r3, [sp, #0]
 8001d2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d2e:	687a      	ldr	r2, [r7, #4]
 8001d30:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001d34:	f7ff faa4 	bl	8001280 <GotoPoint>
		break;
 8001d38:	e03f      	b.n	8001dba <GetBall+0x232>
	case CLOSE:
		if (teta >= 0) {
 8001d3a:	f04f 0200 	mov.w	r2, #0
 8001d3e:	f04f 0300 	mov.w	r3, #0
 8001d42:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001d46:	f7fe fe25 	bl	8000994 <__aeabi_dcmpge>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d011      	beq.n	8001d74 <GetBall+0x1ec>
			GotoPoint(teta + 30, speed, Motors, MotorDefs);
 8001d50:	f04f 0200 	mov.w	r2, #0
 8001d54:	4b21      	ldr	r3, [pc, #132]	; (8001ddc <GetBall+0x254>)
 8001d56:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001d5a:	f7fe f9df 	bl	800011c <__adddf3>
 8001d5e:	4602      	mov	r2, r0
 8001d60:	460b      	mov	r3, r1
 8001d62:	4610      	mov	r0, r2
 8001d64:	4619      	mov	r1, r3
 8001d66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d68:	9300      	str	r3, [sp, #0]
 8001d6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d6c:	687a      	ldr	r2, [r7, #4]
 8001d6e:	f7ff fa87 	bl	8001280 <GotoPoint>
		}
		else {
			GotoPoint(teta - 30, speed, Motors, MotorDefs);
		}
		break;
 8001d72:	e022      	b.n	8001dba <GetBall+0x232>
			GotoPoint(teta - 30, speed, Motors, MotorDefs);
 8001d74:	f04f 0200 	mov.w	r2, #0
 8001d78:	4b18      	ldr	r3, [pc, #96]	; (8001ddc <GetBall+0x254>)
 8001d7a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001d7e:	f7fe f9cb 	bl	8000118 <__aeabi_dsub>
 8001d82:	4602      	mov	r2, r0
 8001d84:	460b      	mov	r3, r1
 8001d86:	4610      	mov	r0, r2
 8001d88:	4619      	mov	r1, r3
 8001d8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d8c:	9300      	str	r3, [sp, #0]
 8001d8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d90:	687a      	ldr	r2, [r7, #4]
 8001d92:	f7ff fa75 	bl	8001280 <GotoPoint>
		break;
 8001d96:	e010      	b.n	8001dba <GetBall+0x232>
	case BALLIN:
		GotoPoint(0, speed + 5, Motors, MotorDefs);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	1d5a      	adds	r2, r3, #5
 8001d9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d9e:	9300      	str	r3, [sp, #0]
 8001da0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001da2:	f04f 0000 	mov.w	r0, #0
 8001da6:	f04f 0100 	mov.w	r1, #0
 8001daa:	f7ff fa69 	bl	8001280 <GotoPoint>
		break;
 8001dae:	e004      	b.n	8001dba <GetBall+0x232>
	case NA:
		AllMotorsZero(MotorDefs, Motors);
 8001db0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001db2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001db4:	f7ff fb8e 	bl	80014d4 <AllMotorsZero>
		break;
 8001db8:	bf00      	nop
	}
}
 8001dba:	bf00      	nop
 8001dbc:	3720      	adds	r7, #32
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bdb0      	pop	{r4, r5, r7, pc}
 8001dc2:	bf00      	nop
 8001dc4:	f3af 8000 	nop.w
 8001dc8:	53c8d4f1 	.word	0x53c8d4f1
 8001dcc:	400921fb 	.word	0x400921fb
 8001dd0:	40668000 	.word	0x40668000
 8001dd4:	40568000 	.word	0x40568000
 8001dd8:	40490000 	.word	0x40490000
 8001ddc:	403e0000 	.word	0x403e0000

08001de0 <delay_us>:
 *      Author: dalvi
 */

#include <SR04.h>

void delay_us(int us) {
 8001de0:	b480      	push	{r7}
 8001de2:	b083      	sub	sp, #12
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COUNTER(&htim3, 0);
 8001de8:	4b08      	ldr	r3, [pc, #32]	; (8001e0c <delay_us+0x2c>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	2200      	movs	r2, #0
 8001dee:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim3) < us);
 8001df0:	bf00      	nop
 8001df2:	4b06      	ldr	r3, [pc, #24]	; (8001e0c <delay_us+0x2c>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	429a      	cmp	r2, r3
 8001dfc:	d3f9      	bcc.n	8001df2 <delay_us+0x12>
}
 8001dfe:	bf00      	nop
 8001e00:	bf00      	nop
 8001e02:	370c      	adds	r7, #12
 8001e04:	46bd      	mov	sp, r7
 8001e06:	bc80      	pop	{r7}
 8001e08:	4770      	bx	lr
 8001e0a:	bf00      	nop
 8001e0c:	20000454 	.word	0x20000454

08001e10 <ReadSR>:

void ReadSR(SRDef_t *sr, SRDatas_t *Datas) {
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b082      	sub	sp, #8
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
 8001e18:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(sr->trig_port, sr->trig_pin, GPIO_PIN_RESET);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	6858      	ldr	r0, [r3, #4]
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	881b      	ldrh	r3, [r3, #0]
 8001e22:	2200      	movs	r2, #0
 8001e24:	4619      	mov	r1, r3
 8001e26:	f002 f862 	bl	8003eee <HAL_GPIO_WritePin>
	delay_us(2);
 8001e2a:	2002      	movs	r0, #2
 8001e2c:	f7ff ffd8 	bl	8001de0 <delay_us>
	HAL_GPIO_WritePin(sr->trig_port, sr->trig_pin, GPIO_PIN_SET);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	6858      	ldr	r0, [r3, #4]
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	881b      	ldrh	r3, [r3, #0]
 8001e38:	2201      	movs	r2, #1
 8001e3a:	4619      	mov	r1, r3
 8001e3c:	f002 f857 	bl	8003eee <HAL_GPIO_WritePin>
	delay_us(10);
 8001e40:	200a      	movs	r0, #10
 8001e42:	f7ff ffcd 	bl	8001de0 <delay_us>
    HAL_GPIO_WritePin(sr->trig_port, sr->trig_pin, GPIO_PIN_RESET);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	6858      	ldr	r0, [r3, #4]
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	881b      	ldrh	r3, [r3, #0]
 8001e4e:	2200      	movs	r2, #0
 8001e50:	4619      	mov	r1, r3
 8001e52:	f002 f84c 	bl	8003eee <HAL_GPIO_WritePin>

    while(HAL_GPIO_ReadPin(sr->echo_port, sr->echo_pin) != GPIO_PIN_SET);
 8001e56:	bf00      	nop
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	68da      	ldr	r2, [r3, #12]
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	891b      	ldrh	r3, [r3, #8]
 8001e60:	4619      	mov	r1, r3
 8001e62:	4610      	mov	r0, r2
 8001e64:	f002 f82c 	bl	8003ec0 <HAL_GPIO_ReadPin>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	2b01      	cmp	r3, #1
 8001e6c:	d1f4      	bne.n	8001e58 <ReadSR+0x48>

    __HAL_TIM_SET_COUNTER(&htim4, 0);
 8001e6e:	4b40      	ldr	r3, [pc, #256]	; (8001f70 <ReadSR+0x160>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	2200      	movs	r2, #0
 8001e74:	625a      	str	r2, [r3, #36]	; 0x24
    while(HAL_GPIO_ReadPin(sr->echo_port, sr->echo_pin) == GPIO_PIN_SET) {
 8001e76:	e006      	b.n	8001e86 <ReadSR+0x76>
   	if(__HAL_TIM_GET_COUNTER(&htim4) > 3000) break;
 8001e78:	4b3d      	ldr	r3, [pc, #244]	; (8001f70 <ReadSR+0x160>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e7e:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d80b      	bhi.n	8001e9e <ReadSR+0x8e>
    while(HAL_GPIO_ReadPin(sr->echo_port, sr->echo_pin) == GPIO_PIN_SET) {
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	68da      	ldr	r2, [r3, #12]
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	891b      	ldrh	r3, [r3, #8]
 8001e8e:	4619      	mov	r1, r3
 8001e90:	4610      	mov	r0, r2
 8001e92:	f002 f815 	bl	8003ec0 <HAL_GPIO_ReadPin>
 8001e96:	4603      	mov	r3, r0
 8001e98:	2b01      	cmp	r3, #1
 8001e9a:	d0ed      	beq.n	8001e78 <ReadSR+0x68>
 8001e9c:	e000      	b.n	8001ea0 <ReadSR+0x90>
   	if(__HAL_TIM_GET_COUNTER(&htim4) > 3000) break;
 8001e9e:	bf00      	nop
    }

    switch(sr->num) {
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	691b      	ldr	r3, [r3, #16]
 8001ea4:	2b03      	cmp	r3, #3
 8001ea6:	d85f      	bhi.n	8001f68 <ReadSR+0x158>
 8001ea8:	a201      	add	r2, pc, #4	; (adr r2, 8001eb0 <ReadSR+0xa0>)
 8001eaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001eae:	bf00      	nop
 8001eb0:	08001ec1 	.word	0x08001ec1
 8001eb4:	08001eeb 	.word	0x08001eeb
 8001eb8:	08001f15 	.word	0x08001f15
 8001ebc:	08001f3f 	.word	0x08001f3f
    case 0:
    	Datas->SR_f = (double)(__HAL_TIM_GET_COUNTER(&htim4)*340)/2000;
 8001ec0:	4b2b      	ldr	r3, [pc, #172]	; (8001f70 <ReadSR+0x160>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ec6:	f44f 72aa 	mov.w	r2, #340	; 0x154
 8001eca:	fb02 f303 	mul.w	r3, r2, r3
 8001ece:	4618      	mov	r0, r3
 8001ed0:	f7fe fa60 	bl	8000394 <__aeabi_ui2d>
 8001ed4:	f04f 0200 	mov.w	r2, #0
 8001ed8:	4b26      	ldr	r3, [pc, #152]	; (8001f74 <ReadSR+0x164>)
 8001eda:	f7fe fbff 	bl	80006dc <__aeabi_ddiv>
 8001ede:	4602      	mov	r2, r0
 8001ee0:	460b      	mov	r3, r1
 8001ee2:	6839      	ldr	r1, [r7, #0]
 8001ee4:	e9c1 2300 	strd	r2, r3, [r1]
    	break;
 8001ee8:	e03e      	b.n	8001f68 <ReadSR+0x158>
    case 1:
    	Datas->SR_b = (double)(__HAL_TIM_GET_COUNTER(&htim4)*340)/2000;
 8001eea:	4b21      	ldr	r3, [pc, #132]	; (8001f70 <ReadSR+0x160>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ef0:	f44f 72aa 	mov.w	r2, #340	; 0x154
 8001ef4:	fb02 f303 	mul.w	r3, r2, r3
 8001ef8:	4618      	mov	r0, r3
 8001efa:	f7fe fa4b 	bl	8000394 <__aeabi_ui2d>
 8001efe:	f04f 0200 	mov.w	r2, #0
 8001f02:	4b1c      	ldr	r3, [pc, #112]	; (8001f74 <ReadSR+0x164>)
 8001f04:	f7fe fbea 	bl	80006dc <__aeabi_ddiv>
 8001f08:	4602      	mov	r2, r0
 8001f0a:	460b      	mov	r3, r1
 8001f0c:	6839      	ldr	r1, [r7, #0]
 8001f0e:	e9c1 2302 	strd	r2, r3, [r1, #8]
    	break;
 8001f12:	e029      	b.n	8001f68 <ReadSR+0x158>
    case 2:
    	Datas->SR_l = (double)(__HAL_TIM_GET_COUNTER(&htim4)*340)/2000;
 8001f14:	4b16      	ldr	r3, [pc, #88]	; (8001f70 <ReadSR+0x160>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f1a:	f44f 72aa 	mov.w	r2, #340	; 0x154
 8001f1e:	fb02 f303 	mul.w	r3, r2, r3
 8001f22:	4618      	mov	r0, r3
 8001f24:	f7fe fa36 	bl	8000394 <__aeabi_ui2d>
 8001f28:	f04f 0200 	mov.w	r2, #0
 8001f2c:	4b11      	ldr	r3, [pc, #68]	; (8001f74 <ReadSR+0x164>)
 8001f2e:	f7fe fbd5 	bl	80006dc <__aeabi_ddiv>
 8001f32:	4602      	mov	r2, r0
 8001f34:	460b      	mov	r3, r1
 8001f36:	6839      	ldr	r1, [r7, #0]
 8001f38:	e9c1 2304 	strd	r2, r3, [r1, #16]
    	break;
 8001f3c:	e014      	b.n	8001f68 <ReadSR+0x158>
    case 3:
    	Datas->SR_r = (double)(__HAL_TIM_GET_COUNTER(&htim4)*340)/2000;
 8001f3e:	4b0c      	ldr	r3, [pc, #48]	; (8001f70 <ReadSR+0x160>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f44:	f44f 72aa 	mov.w	r2, #340	; 0x154
 8001f48:	fb02 f303 	mul.w	r3, r2, r3
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	f7fe fa21 	bl	8000394 <__aeabi_ui2d>
 8001f52:	f04f 0200 	mov.w	r2, #0
 8001f56:	4b07      	ldr	r3, [pc, #28]	; (8001f74 <ReadSR+0x164>)
 8001f58:	f7fe fbc0 	bl	80006dc <__aeabi_ddiv>
 8001f5c:	4602      	mov	r2, r0
 8001f5e:	460b      	mov	r3, r1
 8001f60:	6839      	ldr	r1, [r7, #0]
 8001f62:	e9c1 2306 	strd	r2, r3, [r1, #24]
    	break;
 8001f66:	bf00      	nop
    }
}
 8001f68:	bf00      	nop
 8001f6a:	3708      	adds	r7, #8
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	bd80      	pop	{r7, pc}
 8001f70:	2000049c 	.word	0x2000049c
 8001f74:	409f4000 	.word	0x409f4000

08001f78 <ReadAllSRs>:


void ReadAllSRs(SRDef_t *Srs[4], int c, SRDatas_t *Datas) {
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b086      	sub	sp, #24
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	60f8      	str	r0, [r7, #12]
 8001f80:	60b9      	str	r1, [r7, #8]
 8001f82:	607a      	str	r2, [r7, #4]
	for(int i = 0; i < c; i++) {
 8001f84:	2300      	movs	r3, #0
 8001f86:	617b      	str	r3, [r7, #20]
 8001f88:	e00b      	b.n	8001fa2 <ReadAllSRs+0x2a>
		ReadSR(Srs[i], Datas);
 8001f8a:	697b      	ldr	r3, [r7, #20]
 8001f8c:	009b      	lsls	r3, r3, #2
 8001f8e:	68fa      	ldr	r2, [r7, #12]
 8001f90:	4413      	add	r3, r2
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	6879      	ldr	r1, [r7, #4]
 8001f96:	4618      	mov	r0, r3
 8001f98:	f7ff ff3a 	bl	8001e10 <ReadSR>
	for(int i = 0; i < c; i++) {
 8001f9c:	697b      	ldr	r3, [r7, #20]
 8001f9e:	3301      	adds	r3, #1
 8001fa0:	617b      	str	r3, [r7, #20]
 8001fa2:	697a      	ldr	r2, [r7, #20]
 8001fa4:	68bb      	ldr	r3, [r7, #8]
 8001fa6:	429a      	cmp	r2, r3
 8001fa8:	dbef      	blt.n	8001f8a <ReadAllSRs+0x12>
	}
}
 8001faa:	bf00      	nop
 8001fac:	bf00      	nop
 8001fae:	3718      	adds	r7, #24
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	bd80      	pop	{r7, pc}

08001fb4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b088      	sub	sp, #32
 8001fb8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fba:	f107 0310 	add.w	r3, r7, #16
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	601a      	str	r2, [r3, #0]
 8001fc2:	605a      	str	r2, [r3, #4]
 8001fc4:	609a      	str	r2, [r3, #8]
 8001fc6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fc8:	4b62      	ldr	r3, [pc, #392]	; (8002154 <MX_GPIO_Init+0x1a0>)
 8001fca:	699b      	ldr	r3, [r3, #24]
 8001fcc:	4a61      	ldr	r2, [pc, #388]	; (8002154 <MX_GPIO_Init+0x1a0>)
 8001fce:	f043 0310 	orr.w	r3, r3, #16
 8001fd2:	6193      	str	r3, [r2, #24]
 8001fd4:	4b5f      	ldr	r3, [pc, #380]	; (8002154 <MX_GPIO_Init+0x1a0>)
 8001fd6:	699b      	ldr	r3, [r3, #24]
 8001fd8:	f003 0310 	and.w	r3, r3, #16
 8001fdc:	60fb      	str	r3, [r7, #12]
 8001fde:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fe0:	4b5c      	ldr	r3, [pc, #368]	; (8002154 <MX_GPIO_Init+0x1a0>)
 8001fe2:	699b      	ldr	r3, [r3, #24]
 8001fe4:	4a5b      	ldr	r2, [pc, #364]	; (8002154 <MX_GPIO_Init+0x1a0>)
 8001fe6:	f043 0304 	orr.w	r3, r3, #4
 8001fea:	6193      	str	r3, [r2, #24]
 8001fec:	4b59      	ldr	r3, [pc, #356]	; (8002154 <MX_GPIO_Init+0x1a0>)
 8001fee:	699b      	ldr	r3, [r3, #24]
 8001ff0:	f003 0304 	and.w	r3, r3, #4
 8001ff4:	60bb      	str	r3, [r7, #8]
 8001ff6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ff8:	4b56      	ldr	r3, [pc, #344]	; (8002154 <MX_GPIO_Init+0x1a0>)
 8001ffa:	699b      	ldr	r3, [r3, #24]
 8001ffc:	4a55      	ldr	r2, [pc, #340]	; (8002154 <MX_GPIO_Init+0x1a0>)
 8001ffe:	f043 0308 	orr.w	r3, r3, #8
 8002002:	6193      	str	r3, [r2, #24]
 8002004:	4b53      	ldr	r3, [pc, #332]	; (8002154 <MX_GPIO_Init+0x1a0>)
 8002006:	699b      	ldr	r3, [r3, #24]
 8002008:	f003 0308 	and.w	r3, r3, #8
 800200c:	607b      	str	r3, [r7, #4]
 800200e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8002010:	2200      	movs	r2, #0
 8002012:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002016:	4850      	ldr	r0, [pc, #320]	; (8002158 <MX_GPIO_Init+0x1a4>)
 8002018:	f001 ff69 	bl	8003eee <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SR4TRIG_Pin|SR2TRIG_Pin|GPIO_PIN_4|GPIO_PIN_6
 800201c:	2200      	movs	r2, #0
 800201e:	f241 1153 	movw	r1, #4435	; 0x1153
 8002022:	484e      	ldr	r0, [pc, #312]	; (800215c <MX_GPIO_Init+0x1a8>)
 8002024:	f001 ff63 	bl	8003eee <HAL_GPIO_WritePin>
                          |GPIO_PIN_8|GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SR3TRIG_Pin|SR1TRIG_Pin, GPIO_PIN_RESET);
 8002028:	2200      	movs	r2, #0
 800202a:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 800202e:	484c      	ldr	r0, [pc, #304]	; (8002160 <MX_GPIO_Init+0x1ac>)
 8002030:	f001 ff5d 	bl	8003eee <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002034:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002038:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800203a:	2301      	movs	r3, #1
 800203c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800203e:	2300      	movs	r3, #0
 8002040:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002042:	2302      	movs	r3, #2
 8002044:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002046:	f107 0310 	add.w	r3, r7, #16
 800204a:	4619      	mov	r1, r3
 800204c:	4842      	ldr	r0, [pc, #264]	; (8002158 <MX_GPIO_Init+0x1a4>)
 800204e:	f001 fdb3 	bl	8003bb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SR4ECHO_Pin;
 8002052:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002056:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002058:	2300      	movs	r3, #0
 800205a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800205c:	2300      	movs	r3, #0
 800205e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SR4ECHO_GPIO_Port, &GPIO_InitStruct);
 8002060:	f107 0310 	add.w	r3, r7, #16
 8002064:	4619      	mov	r1, r3
 8002066:	483c      	ldr	r0, [pc, #240]	; (8002158 <MX_GPIO_Init+0x1a4>)
 8002068:	f001 fda6 	bl	8003bb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 800206c:	2308      	movs	r3, #8
 800206e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002070:	4b3c      	ldr	r3, [pc, #240]	; (8002164 <MX_GPIO_Init+0x1b0>)
 8002072:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002074:	2300      	movs	r3, #0
 8002076:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002078:	f107 0310 	add.w	r3, r7, #16
 800207c:	4619      	mov	r1, r3
 800207e:	4836      	ldr	r0, [pc, #216]	; (8002158 <MX_GPIO_Init+0x1a4>)
 8002080:	f001 fd9a 	bl	8003bb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PA4 PA6
                           PA8 PA12 */
  GPIO_InitStruct.Pin = SR4TRIG_Pin|SR2TRIG_Pin|GPIO_PIN_4|GPIO_PIN_6
 8002084:	f241 1353 	movw	r3, #4435	; 0x1153
 8002088:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_8|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800208a:	2301      	movs	r3, #1
 800208c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800208e:	2300      	movs	r3, #0
 8002090:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002092:	2302      	movs	r3, #2
 8002094:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002096:	f107 0310 	add.w	r3, r7, #16
 800209a:	4619      	mov	r1, r3
 800209c:	482f      	ldr	r0, [pc, #188]	; (800215c <MX_GPIO_Init+0x1a8>)
 800209e:	f001 fd8b 	bl	8003bb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SR2ECHO_Pin;
 80020a2:	2304      	movs	r3, #4
 80020a4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80020a6:	2300      	movs	r3, #0
 80020a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020aa:	2300      	movs	r3, #0
 80020ac:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SR2ECHO_GPIO_Port, &GPIO_InitStruct);
 80020ae:	f107 0310 	add.w	r3, r7, #16
 80020b2:	4619      	mov	r1, r3
 80020b4:	4829      	ldr	r0, [pc, #164]	; (800215c <MX_GPIO_Init+0x1a8>)
 80020b6:	f001 fd7f 	bl	8003bb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 80020ba:	2307      	movs	r3, #7
 80020bc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80020be:	4b29      	ldr	r3, [pc, #164]	; (8002164 <MX_GPIO_Init+0x1b0>)
 80020c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020c2:	2300      	movs	r3, #0
 80020c4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020c6:	f107 0310 	add.w	r3, r7, #16
 80020ca:	4619      	mov	r1, r3
 80020cc:	4824      	ldr	r0, [pc, #144]	; (8002160 <MX_GPIO_Init+0x1ac>)
 80020ce:	f001 fd73 	bl	8003bb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = SR3ECHO_Pin|SR1ECHO_Pin;
 80020d2:	f44f 4310 	mov.w	r3, #36864	; 0x9000
 80020d6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80020d8:	2300      	movs	r3, #0
 80020da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020dc:	2300      	movs	r3, #0
 80020de:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020e0:	f107 0310 	add.w	r3, r7, #16
 80020e4:	4619      	mov	r1, r3
 80020e6:	481e      	ldr	r0, [pc, #120]	; (8002160 <MX_GPIO_Init+0x1ac>)
 80020e8:	f001 fd66 	bl	8003bb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = SR3TRIG_Pin|SR1TRIG_Pin;
 80020ec:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80020f0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020f2:	2301      	movs	r3, #1
 80020f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020f6:	2300      	movs	r3, #0
 80020f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020fa:	2302      	movs	r3, #2
 80020fc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020fe:	f107 0310 	add.w	r3, r7, #16
 8002102:	4619      	mov	r1, r3
 8002104:	4816      	ldr	r0, [pc, #88]	; (8002160 <MX_GPIO_Init+0x1ac>)
 8002106:	f001 fd57 	bl	8003bb8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 1, 0);
 800210a:	2200      	movs	r2, #0
 800210c:	2101      	movs	r1, #1
 800210e:	2006      	movs	r0, #6
 8002110:	f001 fd1b 	bl	8003b4a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8002114:	2006      	movs	r0, #6
 8002116:	f001 fd34 	bl	8003b82 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 1, 0);
 800211a:	2200      	movs	r2, #0
 800211c:	2101      	movs	r1, #1
 800211e:	2007      	movs	r0, #7
 8002120:	f001 fd13 	bl	8003b4a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8002124:	2007      	movs	r0, #7
 8002126:	f001 fd2c 	bl	8003b82 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 1, 0);
 800212a:	2200      	movs	r2, #0
 800212c:	2101      	movs	r1, #1
 800212e:	2008      	movs	r0, #8
 8002130:	f001 fd0b 	bl	8003b4a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8002134:	2008      	movs	r0, #8
 8002136:	f001 fd24 	bl	8003b82 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 1, 0);
 800213a:	2200      	movs	r2, #0
 800213c:	2101      	movs	r1, #1
 800213e:	2009      	movs	r0, #9
 8002140:	f001 fd03 	bl	8003b4a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8002144:	2009      	movs	r0, #9
 8002146:	f001 fd1c 	bl	8003b82 <HAL_NVIC_EnableIRQ>

}
 800214a:	bf00      	nop
 800214c:	3720      	adds	r7, #32
 800214e:	46bd      	mov	sp, r7
 8002150:	bd80      	pop	{r7, pc}
 8002152:	bf00      	nop
 8002154:	40021000 	.word	0x40021000
 8002158:	40011000 	.word	0x40011000
 800215c:	40010800 	.word	0x40010800
 8002160:	40010c00 	.word	0x40010c00
 8002164:	10110000 	.word	0x10110000

08002168 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800216c:	4b12      	ldr	r3, [pc, #72]	; (80021b8 <MX_I2C2_Init+0x50>)
 800216e:	4a13      	ldr	r2, [pc, #76]	; (80021bc <MX_I2C2_Init+0x54>)
 8002170:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 8002172:	4b11      	ldr	r3, [pc, #68]	; (80021b8 <MX_I2C2_Init+0x50>)
 8002174:	4a12      	ldr	r2, [pc, #72]	; (80021c0 <MX_I2C2_Init+0x58>)
 8002176:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002178:	4b0f      	ldr	r3, [pc, #60]	; (80021b8 <MX_I2C2_Init+0x50>)
 800217a:	2200      	movs	r2, #0
 800217c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800217e:	4b0e      	ldr	r3, [pc, #56]	; (80021b8 <MX_I2C2_Init+0x50>)
 8002180:	2200      	movs	r2, #0
 8002182:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002184:	4b0c      	ldr	r3, [pc, #48]	; (80021b8 <MX_I2C2_Init+0x50>)
 8002186:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800218a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800218c:	4b0a      	ldr	r3, [pc, #40]	; (80021b8 <MX_I2C2_Init+0x50>)
 800218e:	2200      	movs	r2, #0
 8002190:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8002192:	4b09      	ldr	r3, [pc, #36]	; (80021b8 <MX_I2C2_Init+0x50>)
 8002194:	2200      	movs	r2, #0
 8002196:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002198:	4b07      	ldr	r3, [pc, #28]	; (80021b8 <MX_I2C2_Init+0x50>)
 800219a:	2200      	movs	r2, #0
 800219c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800219e:	4b06      	ldr	r3, [pc, #24]	; (80021b8 <MX_I2C2_Init+0x50>)
 80021a0:	2200      	movs	r2, #0
 80021a2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80021a4:	4804      	ldr	r0, [pc, #16]	; (80021b8 <MX_I2C2_Init+0x50>)
 80021a6:	f001 fedd 	bl	8003f64 <HAL_I2C_Init>
 80021aa:	4603      	mov	r3, r0
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d001      	beq.n	80021b4 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80021b0:	f000 fb13 	bl	80027da <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80021b4:	bf00      	nop
 80021b6:	bd80      	pop	{r7, pc}
 80021b8:	200001fc 	.word	0x200001fc
 80021bc:	40005800 	.word	0x40005800
 80021c0:	00061a80 	.word	0x00061a80

080021c4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b088      	sub	sp, #32
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021cc:	f107 0310 	add.w	r3, r7, #16
 80021d0:	2200      	movs	r2, #0
 80021d2:	601a      	str	r2, [r3, #0]
 80021d4:	605a      	str	r2, [r3, #4]
 80021d6:	609a      	str	r2, [r3, #8]
 80021d8:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C2)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	4a16      	ldr	r2, [pc, #88]	; (8002238 <HAL_I2C_MspInit+0x74>)
 80021e0:	4293      	cmp	r3, r2
 80021e2:	d124      	bne.n	800222e <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021e4:	4b15      	ldr	r3, [pc, #84]	; (800223c <HAL_I2C_MspInit+0x78>)
 80021e6:	699b      	ldr	r3, [r3, #24]
 80021e8:	4a14      	ldr	r2, [pc, #80]	; (800223c <HAL_I2C_MspInit+0x78>)
 80021ea:	f043 0308 	orr.w	r3, r3, #8
 80021ee:	6193      	str	r3, [r2, #24]
 80021f0:	4b12      	ldr	r3, [pc, #72]	; (800223c <HAL_I2C_MspInit+0x78>)
 80021f2:	699b      	ldr	r3, [r3, #24]
 80021f4:	f003 0308 	and.w	r3, r3, #8
 80021f8:	60fb      	str	r3, [r7, #12]
 80021fa:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80021fc:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002200:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002202:	2312      	movs	r3, #18
 8002204:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002206:	2303      	movs	r3, #3
 8002208:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800220a:	f107 0310 	add.w	r3, r7, #16
 800220e:	4619      	mov	r1, r3
 8002210:	480b      	ldr	r0, [pc, #44]	; (8002240 <HAL_I2C_MspInit+0x7c>)
 8002212:	f001 fcd1 	bl	8003bb8 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002216:	4b09      	ldr	r3, [pc, #36]	; (800223c <HAL_I2C_MspInit+0x78>)
 8002218:	69db      	ldr	r3, [r3, #28]
 800221a:	4a08      	ldr	r2, [pc, #32]	; (800223c <HAL_I2C_MspInit+0x78>)
 800221c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002220:	61d3      	str	r3, [r2, #28]
 8002222:	4b06      	ldr	r3, [pc, #24]	; (800223c <HAL_I2C_MspInit+0x78>)
 8002224:	69db      	ldr	r3, [r3, #28]
 8002226:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800222a:	60bb      	str	r3, [r7, #8]
 800222c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 800222e:	bf00      	nop
 8002230:	3720      	adds	r7, #32
 8002232:	46bd      	mov	sp, r7
 8002234:	bd80      	pop	{r7, pc}
 8002236:	bf00      	nop
 8002238:	40005800 	.word	0x40005800
 800223c:	40021000 	.word	0x40021000
 8002240:	40010c00 	.word	0x40010c00

08002244 <CollibrateMPU6050>:

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */

void CollibrateMPU6050(int samples) {
 8002244:	b590      	push	{r4, r7, lr}
 8002246:	b089      	sub	sp, #36	; 0x24
 8002248:	af04      	add	r7, sp, #16
 800224a:	6078      	str	r0, [r7, #4]
	for (int RateCalibrationNumber=0; RateCalibrationNumber < samples; RateCalibrationNumber++) {
 800224c:	2300      	movs	r3, #0
 800224e:	60fb      	str	r3, [r7, #12]
 8002250:	e052      	b.n	80022f8 <CollibrateMPU6050+0xb4>
	    MPU6050_Read_All(&hi2c2, &mpu6050, 0, 0, 0);
 8002252:	f04f 0200 	mov.w	r2, #0
 8002256:	f04f 0300 	mov.w	r3, #0
 800225a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800225e:	f04f 0200 	mov.w	r2, #0
 8002262:	f04f 0300 	mov.w	r3, #0
 8002266:	e9cd 2300 	strd	r2, r3, [sp]
 800226a:	f04f 0200 	mov.w	r2, #0
 800226e:	f04f 0300 	mov.w	r3, #0
 8002272:	493c      	ldr	r1, [pc, #240]	; (8002364 <CollibrateMPU6050+0x120>)
 8002274:	483c      	ldr	r0, [pc, #240]	; (8002368 <CollibrateMPU6050+0x124>)
 8002276:	f000 fb1f 	bl	80028b8 <MPU6050_Read_All>
	    RateCalibrationRoll+=mpu6050.Gx;
 800227a:	4b3c      	ldr	r3, [pc, #240]	; (800236c <CollibrateMPU6050+0x128>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	4618      	mov	r0, r3
 8002280:	f7fe f8aa 	bl	80003d8 <__aeabi_f2d>
 8002284:	4b37      	ldr	r3, [pc, #220]	; (8002364 <CollibrateMPU6050+0x120>)
 8002286:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 800228a:	f7fd ff47 	bl	800011c <__adddf3>
 800228e:	4602      	mov	r2, r0
 8002290:	460b      	mov	r3, r1
 8002292:	4610      	mov	r0, r2
 8002294:	4619      	mov	r1, r3
 8002296:	f7fe fbef 	bl	8000a78 <__aeabi_d2f>
 800229a:	4603      	mov	r3, r0
 800229c:	4a33      	ldr	r2, [pc, #204]	; (800236c <CollibrateMPU6050+0x128>)
 800229e:	6013      	str	r3, [r2, #0]
	    RateCalibrationPitch+=mpu6050.Gy;
 80022a0:	4b33      	ldr	r3, [pc, #204]	; (8002370 <CollibrateMPU6050+0x12c>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	4618      	mov	r0, r3
 80022a6:	f7fe f897 	bl	80003d8 <__aeabi_f2d>
 80022aa:	4b2e      	ldr	r3, [pc, #184]	; (8002364 <CollibrateMPU6050+0x120>)
 80022ac:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 80022b0:	f7fd ff34 	bl	800011c <__adddf3>
 80022b4:	4602      	mov	r2, r0
 80022b6:	460b      	mov	r3, r1
 80022b8:	4610      	mov	r0, r2
 80022ba:	4619      	mov	r1, r3
 80022bc:	f7fe fbdc 	bl	8000a78 <__aeabi_d2f>
 80022c0:	4603      	mov	r3, r0
 80022c2:	4a2b      	ldr	r2, [pc, #172]	; (8002370 <CollibrateMPU6050+0x12c>)
 80022c4:	6013      	str	r3, [r2, #0]
	    RateCalibrationYaw+=mpu6050.Gz;
 80022c6:	4b2b      	ldr	r3, [pc, #172]	; (8002374 <CollibrateMPU6050+0x130>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	4618      	mov	r0, r3
 80022cc:	f7fe f884 	bl	80003d8 <__aeabi_f2d>
 80022d0:	4b24      	ldr	r3, [pc, #144]	; (8002364 <CollibrateMPU6050+0x120>)
 80022d2:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 80022d6:	f7fd ff21 	bl	800011c <__adddf3>
 80022da:	4602      	mov	r2, r0
 80022dc:	460b      	mov	r3, r1
 80022de:	4610      	mov	r0, r2
 80022e0:	4619      	mov	r1, r3
 80022e2:	f7fe fbc9 	bl	8000a78 <__aeabi_d2f>
 80022e6:	4603      	mov	r3, r0
 80022e8:	4a22      	ldr	r2, [pc, #136]	; (8002374 <CollibrateMPU6050+0x130>)
 80022ea:	6013      	str	r3, [r2, #0]
	    HAL_Delay(1);
 80022ec:	2001      	movs	r0, #1
 80022ee:	f001 fb31 	bl	8003954 <HAL_Delay>
	for (int RateCalibrationNumber=0; RateCalibrationNumber < samples; RateCalibrationNumber++) {
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	3301      	adds	r3, #1
 80022f6:	60fb      	str	r3, [r7, #12]
 80022f8:	68fa      	ldr	r2, [r7, #12]
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	429a      	cmp	r2, r3
 80022fe:	dba8      	blt.n	8002252 <CollibrateMPU6050+0xe>
	}
	RateCalibrationRoll/=samples;
 8002300:	4b1a      	ldr	r3, [pc, #104]	; (800236c <CollibrateMPU6050+0x128>)
 8002302:	681c      	ldr	r4, [r3, #0]
 8002304:	6878      	ldr	r0, [r7, #4]
 8002306:	f7fe fcc1 	bl	8000c8c <__aeabi_i2f>
 800230a:	4603      	mov	r3, r0
 800230c:	4619      	mov	r1, r3
 800230e:	4620      	mov	r0, r4
 8002310:	f7fe fdc4 	bl	8000e9c <__aeabi_fdiv>
 8002314:	4603      	mov	r3, r0
 8002316:	461a      	mov	r2, r3
 8002318:	4b14      	ldr	r3, [pc, #80]	; (800236c <CollibrateMPU6050+0x128>)
 800231a:	601a      	str	r2, [r3, #0]
	RateCalibrationPitch/=samples;
 800231c:	4b14      	ldr	r3, [pc, #80]	; (8002370 <CollibrateMPU6050+0x12c>)
 800231e:	681c      	ldr	r4, [r3, #0]
 8002320:	6878      	ldr	r0, [r7, #4]
 8002322:	f7fe fcb3 	bl	8000c8c <__aeabi_i2f>
 8002326:	4603      	mov	r3, r0
 8002328:	4619      	mov	r1, r3
 800232a:	4620      	mov	r0, r4
 800232c:	f7fe fdb6 	bl	8000e9c <__aeabi_fdiv>
 8002330:	4603      	mov	r3, r0
 8002332:	461a      	mov	r2, r3
 8002334:	4b0e      	ldr	r3, [pc, #56]	; (8002370 <CollibrateMPU6050+0x12c>)
 8002336:	601a      	str	r2, [r3, #0]
	RateCalibrationYaw/=samples;
 8002338:	4b0e      	ldr	r3, [pc, #56]	; (8002374 <CollibrateMPU6050+0x130>)
 800233a:	681c      	ldr	r4, [r3, #0]
 800233c:	6878      	ldr	r0, [r7, #4]
 800233e:	f7fe fca5 	bl	8000c8c <__aeabi_i2f>
 8002342:	4603      	mov	r3, r0
 8002344:	4619      	mov	r1, r3
 8002346:	4620      	mov	r0, r4
 8002348:	f7fe fda8 	bl	8000e9c <__aeabi_fdiv>
 800234c:	4603      	mov	r3, r0
 800234e:	461a      	mov	r2, r3
 8002350:	4b08      	ldr	r3, [pc, #32]	; (8002374 <CollibrateMPU6050+0x130>)
 8002352:	601a      	str	r2, [r3, #0]

	MPUCollibrated = 1;
 8002354:	4b08      	ldr	r3, [pc, #32]	; (8002378 <CollibrateMPU6050+0x134>)
 8002356:	2201      	movs	r2, #1
 8002358:	601a      	str	r2, [r3, #0]
}
 800235a:	bf00      	nop
 800235c:	3714      	adds	r7, #20
 800235e:	46bd      	mov	sp, r7
 8002360:	bd90      	pop	{r4, r7, pc}
 8002362:	bf00      	nop
 8002364:	20000268 	.word	0x20000268
 8002368:	200001fc 	.word	0x200001fc
 800236c:	200002e0 	.word	0x200002e0
 8002370:	200002e4 	.word	0x200002e4
 8002374:	200002e8 	.word	0x200002e8
 8002378:	20000330 	.word	0x20000330

0800237c <SetupMPU6050>:

void SetupMPU6050(int cSamples) {
 800237c:	b580      	push	{r7, lr}
 800237e:	b082      	sub	sp, #8
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
	  while (MPU6050_Init(&hi2c2) == 1);
 8002384:	bf00      	nop
 8002386:	4808      	ldr	r0, [pc, #32]	; (80023a8 <SetupMPU6050+0x2c>)
 8002388:	f000 fa2d 	bl	80027e6 <MPU6050_Init>
 800238c:	4603      	mov	r3, r0
 800238e:	2b01      	cmp	r3, #1
 8002390:	d0f9      	beq.n	8002386 <SetupMPU6050+0xa>

	  CollibrateMPU6050(cSamples);
 8002392:	6878      	ldr	r0, [r7, #4]
 8002394:	f7ff ff56 	bl	8002244 <CollibrateMPU6050>

	  HAL_Delay(500);
 8002398:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800239c:	f001 fada 	bl	8003954 <HAL_Delay>
}
 80023a0:	bf00      	nop
 80023a2:	3708      	adds	r7, #8
 80023a4:	46bd      	mov	sp, r7
 80023a6:	bd80      	pop	{r7, pc}
 80023a8:	200001fc 	.word	0x200001fc

080023ac <ReadMPU6050>:

void ReadMPU6050() {
 80023ac:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80023b0:	b084      	sub	sp, #16
 80023b2:	af04      	add	r7, sp, #16
	MPU6050_Read_All(&hi2c2, &mpu6050, RateCalibrationRoll, RateCalibrationPitch, RateCalibrationYaw);
 80023b4:	4b3c      	ldr	r3, [pc, #240]	; (80024a8 <ReadMPU6050+0xfc>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	4618      	mov	r0, r3
 80023ba:	f7fe f80d 	bl	80003d8 <__aeabi_f2d>
 80023be:	4680      	mov	r8, r0
 80023c0:	4689      	mov	r9, r1
 80023c2:	4b3a      	ldr	r3, [pc, #232]	; (80024ac <ReadMPU6050+0x100>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	4618      	mov	r0, r3
 80023c8:	f7fe f806 	bl	80003d8 <__aeabi_f2d>
 80023cc:	4604      	mov	r4, r0
 80023ce:	460d      	mov	r5, r1
 80023d0:	4b37      	ldr	r3, [pc, #220]	; (80024b0 <ReadMPU6050+0x104>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	4618      	mov	r0, r3
 80023d6:	f7fd ffff 	bl	80003d8 <__aeabi_f2d>
 80023da:	4602      	mov	r2, r0
 80023dc:	460b      	mov	r3, r1
 80023de:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80023e2:	e9cd 4500 	strd	r4, r5, [sp]
 80023e6:	4642      	mov	r2, r8
 80023e8:	464b      	mov	r3, r9
 80023ea:	4932      	ldr	r1, [pc, #200]	; (80024b4 <ReadMPU6050+0x108>)
 80023ec:	4832      	ldr	r0, [pc, #200]	; (80024b8 <ReadMPU6050+0x10c>)
 80023ee:	f000 fa63 	bl	80028b8 <MPU6050_Read_All>

	sx += mpu6050.Gx;
 80023f2:	4b32      	ldr	r3, [pc, #200]	; (80024bc <ReadMPU6050+0x110>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	4618      	mov	r0, r3
 80023f8:	f7fd ffee 	bl	80003d8 <__aeabi_f2d>
 80023fc:	4b2d      	ldr	r3, [pc, #180]	; (80024b4 <ReadMPU6050+0x108>)
 80023fe:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8002402:	f7fd fe8b 	bl	800011c <__adddf3>
 8002406:	4602      	mov	r2, r0
 8002408:	460b      	mov	r3, r1
 800240a:	4610      	mov	r0, r2
 800240c:	4619      	mov	r1, r3
 800240e:	f7fe fb33 	bl	8000a78 <__aeabi_d2f>
 8002412:	4603      	mov	r3, r0
 8002414:	4a29      	ldr	r2, [pc, #164]	; (80024bc <ReadMPU6050+0x110>)
 8002416:	6013      	str	r3, [r2, #0]
	sy += mpu6050.Gy;
 8002418:	4b29      	ldr	r3, [pc, #164]	; (80024c0 <ReadMPU6050+0x114>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	4618      	mov	r0, r3
 800241e:	f7fd ffdb 	bl	80003d8 <__aeabi_f2d>
 8002422:	4b24      	ldr	r3, [pc, #144]	; (80024b4 <ReadMPU6050+0x108>)
 8002424:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8002428:	f7fd fe78 	bl	800011c <__adddf3>
 800242c:	4602      	mov	r2, r0
 800242e:	460b      	mov	r3, r1
 8002430:	4610      	mov	r0, r2
 8002432:	4619      	mov	r1, r3
 8002434:	f7fe fb20 	bl	8000a78 <__aeabi_d2f>
 8002438:	4603      	mov	r3, r0
 800243a:	4a21      	ldr	r2, [pc, #132]	; (80024c0 <ReadMPU6050+0x114>)
 800243c:	6013      	str	r3, [r2, #0]
	sz += mpu6050.Gz;
 800243e:	4b21      	ldr	r3, [pc, #132]	; (80024c4 <ReadMPU6050+0x118>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	4618      	mov	r0, r3
 8002444:	f7fd ffc8 	bl	80003d8 <__aeabi_f2d>
 8002448:	4b1a      	ldr	r3, [pc, #104]	; (80024b4 <ReadMPU6050+0x108>)
 800244a:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800244e:	f7fd fe65 	bl	800011c <__adddf3>
 8002452:	4602      	mov	r2, r0
 8002454:	460b      	mov	r3, r1
 8002456:	4610      	mov	r0, r2
 8002458:	4619      	mov	r1, r3
 800245a:	f7fe fb0d 	bl	8000a78 <__aeabi_d2f>
 800245e:	4603      	mov	r3, r0
 8002460:	4a18      	ldr	r2, [pc, #96]	; (80024c4 <ReadMPU6050+0x118>)
 8002462:	6013      	str	r3, [r2, #0]

	Gy.x = sx / 2000;
 8002464:	4b15      	ldr	r3, [pc, #84]	; (80024bc <ReadMPU6050+0x110>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	4917      	ldr	r1, [pc, #92]	; (80024c8 <ReadMPU6050+0x11c>)
 800246a:	4618      	mov	r0, r3
 800246c:	f7fe fd16 	bl	8000e9c <__aeabi_fdiv>
 8002470:	4603      	mov	r3, r0
 8002472:	461a      	mov	r2, r3
 8002474:	4b15      	ldr	r3, [pc, #84]	; (80024cc <ReadMPU6050+0x120>)
 8002476:	601a      	str	r2, [r3, #0]
	Gy.y = sy / 2000;
 8002478:	4b11      	ldr	r3, [pc, #68]	; (80024c0 <ReadMPU6050+0x114>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4912      	ldr	r1, [pc, #72]	; (80024c8 <ReadMPU6050+0x11c>)
 800247e:	4618      	mov	r0, r3
 8002480:	f7fe fd0c 	bl	8000e9c <__aeabi_fdiv>
 8002484:	4603      	mov	r3, r0
 8002486:	461a      	mov	r2, r3
 8002488:	4b10      	ldr	r3, [pc, #64]	; (80024cc <ReadMPU6050+0x120>)
 800248a:	605a      	str	r2, [r3, #4]
	Gy.z = sz / 2000;
 800248c:	4b0d      	ldr	r3, [pc, #52]	; (80024c4 <ReadMPU6050+0x118>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	490d      	ldr	r1, [pc, #52]	; (80024c8 <ReadMPU6050+0x11c>)
 8002492:	4618      	mov	r0, r3
 8002494:	f7fe fd02 	bl	8000e9c <__aeabi_fdiv>
 8002498:	4603      	mov	r3, r0
 800249a:	461a      	mov	r2, r3
 800249c:	4b0b      	ldr	r3, [pc, #44]	; (80024cc <ReadMPU6050+0x120>)
 800249e:	609a      	str	r2, [r3, #8]
}
 80024a0:	bf00      	nop
 80024a2:	46bd      	mov	sp, r7
 80024a4:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80024a8:	200002e0 	.word	0x200002e0
 80024ac:	200002e4 	.word	0x200002e4
 80024b0:	200002e8 	.word	0x200002e8
 80024b4:	20000268 	.word	0x20000268
 80024b8:	200001fc 	.word	0x200001fc
 80024bc:	200002ec 	.word	0x200002ec
 80024c0:	200002f0 	.word	0x200002f0
 80024c4:	200002f4 	.word	0x200002f4
 80024c8:	44fa0000 	.word	0x44fa0000
 80024cc:	200002f8 	.word	0x200002f8

080024d0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80024d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80024d4:	b082      	sub	sp, #8
 80024d6:	af00      	add	r7, sp, #0
 80024d8:	6078      	str	r0, [r7, #4]
	if(timcounter % 10 == 0 && pixyChecked) {
 80024da:	4b23      	ldr	r3, [pc, #140]	; (8002568 <HAL_TIM_PeriodElapsedCallback+0x98>)
 80024dc:	e9d3 0100 	ldrd	r0, r1, [r3]
 80024e0:	f04f 020a 	mov.w	r2, #10
 80024e4:	f04f 0300 	mov.w	r3, #0
 80024e8:	f7fe fd9a 	bl	8001020 <__aeabi_uldivmod>
 80024ec:	4313      	orrs	r3, r2
 80024ee:	d107      	bne.n	8002500 <HAL_TIM_PeriodElapsedCallback+0x30>
 80024f0:	4b1e      	ldr	r3, [pc, #120]	; (800256c <HAL_TIM_PeriodElapsedCallback+0x9c>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d003      	beq.n	8002500 <HAL_TIM_PeriodElapsedCallback+0x30>
		getBallPosition(&ballTransform, &ballInView);
 80024f8:	491d      	ldr	r1, [pc, #116]	; (8002570 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 80024fa:	481e      	ldr	r0, [pc, #120]	; (8002574 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 80024fc:	f000 fd5a 	bl	8002fb4 <getBallPosition>
	}

	if(timcounter % 2 == 0 && MPUCollibrated) {
 8002500:	4b19      	ldr	r3, [pc, #100]	; (8002568 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8002502:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002506:	f002 0401 	and.w	r4, r2, #1
 800250a:	2500      	movs	r5, #0
 800250c:	ea54 0305 	orrs.w	r3, r4, r5
 8002510:	d105      	bne.n	800251e <HAL_TIM_PeriodElapsedCallback+0x4e>
 8002512:	4b19      	ldr	r3, [pc, #100]	; (8002578 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	2b00      	cmp	r3, #0
 8002518:	d001      	beq.n	800251e <HAL_TIM_PeriodElapsedCallback+0x4e>
		ReadMPU6050();
 800251a:	f7ff ff47 	bl	80023ac <ReadMPU6050>
	}

	if((timcounter + 1) % 500 == 0) {
 800251e:	4b12      	ldr	r3, [pc, #72]	; (8002568 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8002520:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002524:	f112 0a01 	adds.w	sl, r2, #1
 8002528:	f143 0b00 	adc.w	fp, r3, #0
 800252c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8002530:	f04f 0300 	mov.w	r3, #0
 8002534:	4650      	mov	r0, sl
 8002536:	4659      	mov	r1, fp
 8002538:	f7fe fd72 	bl	8001020 <__aeabi_uldivmod>
 800253c:	4313      	orrs	r3, r2
 800253e:	d104      	bne.n	800254a <HAL_TIM_PeriodElapsedCallback+0x7a>
		ReadAllSRs(Srs, 4, &SRDatas);
 8002540:	4a0e      	ldr	r2, [pc, #56]	; (800257c <HAL_TIM_PeriodElapsedCallback+0xac>)
 8002542:	2104      	movs	r1, #4
 8002544:	480e      	ldr	r0, [pc, #56]	; (8002580 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8002546:	f7ff fd17 	bl	8001f78 <ReadAllSRs>
	}

	timcounter++;
 800254a:	4b07      	ldr	r3, [pc, #28]	; (8002568 <HAL_TIM_PeriodElapsedCallback+0x98>)
 800254c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002550:	f112 0801 	adds.w	r8, r2, #1
 8002554:	f143 0900 	adc.w	r9, r3, #0
 8002558:	4b03      	ldr	r3, [pc, #12]	; (8002568 <HAL_TIM_PeriodElapsedCallback+0x98>)
 800255a:	e9c3 8900 	strd	r8, r9, [r3]
}
 800255e:	bf00      	nop
 8002560:	3708      	adds	r7, #8
 8002562:	46bd      	mov	sp, r7
 8002564:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002568:	20000340 	.word	0x20000340
 800256c:	20000264 	.word	0x20000264
 8002570:	20000260 	.word	0x20000260
 8002574:	20000250 	.word	0x20000250
 8002578:	20000330 	.word	0x20000330
 800257c:	20000310 	.word	0x20000310
 8002580:	200000c4 	.word	0x200000c4

08002584 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002584:	b5b0      	push	{r4, r5, r7, lr}
 8002586:	b084      	sub	sp, #16
 8002588:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800258a:	f001 f981 	bl	8003890 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800258e:	f000 f8e3 	bl	8002758 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002592:	f7ff fd0f 	bl	8001fb4 <MX_GPIO_Init>
  MX_I2C2_Init();
 8002596:	f7ff fde7 	bl	8002168 <MX_I2C2_Init>
  MX_TIM2_Init();
 800259a:	f000 ff91 	bl	80034c0 <MX_TIM2_Init>
  MX_TIM1_Init();
 800259e:	f000 fed7 	bl	8003350 <MX_TIM1_Init>
  MX_TIM3_Init();
 80025a2:	f001 f801 	bl	80035a8 <MX_TIM3_Init>
  MX_SPI1_Init();
 80025a6:	f000 fdb9 	bl	800311c <MX_SPI1_Init>
  MX_TIM4_Init();
 80025aa:	f001 f84b 	bl	8003644 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start(&htim1);
 80025ae:	4855      	ldr	r0, [pc, #340]	; (8002704 <main+0x180>)
 80025b0:	f003 fe9a 	bl	80062e8 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim2);
 80025b4:	4854      	ldr	r0, [pc, #336]	; (8002708 <main+0x184>)
 80025b6:	f003 fe97 	bl	80062e8 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim3);
 80025ba:	4854      	ldr	r0, [pc, #336]	; (800270c <main+0x188>)
 80025bc:	f003 fe94 	bl	80062e8 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start_IT(&htim4);
 80025c0:	4853      	ldr	r0, [pc, #332]	; (8002710 <main+0x18c>)
 80025c2:	f003 fedb 	bl	800637c <HAL_TIM_Base_Start_IT>

  // setting up PWM
  TIM1->CCR2 = 0;
 80025c6:	4b53      	ldr	r3, [pc, #332]	; (8002714 <main+0x190>)
 80025c8:	2200      	movs	r2, #0
 80025ca:	639a      	str	r2, [r3, #56]	; 0x38
  TIM1->CCR3 = 0;
 80025cc:	4b51      	ldr	r3, [pc, #324]	; (8002714 <main+0x190>)
 80025ce:	2200      	movs	r2, #0
 80025d0:	63da      	str	r2, [r3, #60]	; 0x3c
  TIM1->CCR4 = 0;
 80025d2:	4b50      	ldr	r3, [pc, #320]	; (8002714 <main+0x190>)
 80025d4:	2200      	movs	r2, #0
 80025d6:	641a      	str	r2, [r3, #64]	; 0x40
  TIM2->CCR4 = 0;
 80025d8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80025dc:	2200      	movs	r2, #0
 80025de:	641a      	str	r2, [r3, #64]	; 0x40

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80025e0:	2104      	movs	r1, #4
 80025e2:	4848      	ldr	r0, [pc, #288]	; (8002704 <main+0x180>)
 80025e4:	f003 ff74 	bl	80064d0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 80025e8:	2108      	movs	r1, #8
 80025ea:	4846      	ldr	r0, [pc, #280]	; (8002704 <main+0x180>)
 80025ec:	f003 ff70 	bl	80064d0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 80025f0:	210c      	movs	r1, #12
 80025f2:	4844      	ldr	r0, [pc, #272]	; (8002704 <main+0x180>)
 80025f4:	f003 ff6c 	bl	80064d0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 80025f8:	210c      	movs	r1, #12
 80025fa:	4843      	ldr	r0, [pc, #268]	; (8002708 <main+0x184>)
 80025fc:	f003 ff68 	bl	80064d0 <HAL_TIM_PWM_Start>

  SetupMPU6050(750);
 8002600:	f240 20ee 	movw	r0, #750	; 0x2ee
 8002604:	f7ff feba 	bl	800237c <SetupMPU6050>

  SetupPixy(&pixyChecked);
 8002608:	4843      	ldr	r0, [pc, #268]	; (8002718 <main+0x194>)
 800260a:	f000 fc9f 	bl	8002f4c <SetupPixy>

  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 800260e:	2201      	movs	r2, #1
 8002610:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002614:	4841      	ldr	r0, [pc, #260]	; (800271c <main+0x198>)
 8002616:	f001 fc6a 	bl	8003eee <HAL_GPIO_WritePin>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (abs(Gy.z) > 2) {
 800261a:	4b41      	ldr	r3, [pc, #260]	; (8002720 <main+0x19c>)
 800261c:	689b      	ldr	r3, [r3, #8]
 800261e:	4618      	mov	r0, r3
 8002620:	f7fe fcd8 	bl	8000fd4 <__aeabi_f2iz>
 8002624:	4603      	mov	r3, r0
 8002626:	2b00      	cmp	r3, #0
 8002628:	bfb8      	it	lt
 800262a:	425b      	neglt	r3, r3
 800262c:	2b02      	cmp	r3, #2
 800262e:	dd0b      	ble.n	8002648 <main+0xc4>
		  RotateToZero(Gy.z, &pve, &Motors, &MotorDefs);
 8002630:	4b3b      	ldr	r3, [pc, #236]	; (8002720 <main+0x19c>)
 8002632:	689b      	ldr	r3, [r3, #8]
 8002634:	4618      	mov	r0, r3
 8002636:	f7fd fecf 	bl	80003d8 <__aeabi_f2d>
 800263a:	4b3a      	ldr	r3, [pc, #232]	; (8002724 <main+0x1a0>)
 800263c:	9300      	str	r3, [sp, #0]
 800263e:	4b3a      	ldr	r3, [pc, #232]	; (8002728 <main+0x1a4>)
 8002640:	4a3a      	ldr	r2, [pc, #232]	; (800272c <main+0x1a8>)
 8002642:	f7fe ff6d 	bl	8001520 <RotateToZero>
 8002646:	e01f      	b.n	8002688 <main+0x104>
	  }
	  else {
		  setPWM(&Motor_1, Motors.pwm1, Motors.e1, &Motors);
 8002648:	4b37      	ldr	r3, [pc, #220]	; (8002728 <main+0x1a4>)
 800264a:	6819      	ldr	r1, [r3, #0]
 800264c:	4b36      	ldr	r3, [pc, #216]	; (8002728 <main+0x1a4>)
 800264e:	685a      	ldr	r2, [r3, #4]
 8002650:	4b35      	ldr	r3, [pc, #212]	; (8002728 <main+0x1a4>)
 8002652:	4837      	ldr	r0, [pc, #220]	; (8002730 <main+0x1ac>)
 8002654:	f7fe fd20 	bl	8001098 <setPWM>
		  setPWM(&Motor_2, Motors.pwm2, Motors.e2, &Motors);
 8002658:	4b33      	ldr	r3, [pc, #204]	; (8002728 <main+0x1a4>)
 800265a:	6899      	ldr	r1, [r3, #8]
 800265c:	4b32      	ldr	r3, [pc, #200]	; (8002728 <main+0x1a4>)
 800265e:	68da      	ldr	r2, [r3, #12]
 8002660:	4b31      	ldr	r3, [pc, #196]	; (8002728 <main+0x1a4>)
 8002662:	4834      	ldr	r0, [pc, #208]	; (8002734 <main+0x1b0>)
 8002664:	f7fe fd18 	bl	8001098 <setPWM>
		  setPWM(&Motor_3, Motors.pwm3, Motors.e3, &Motors);
 8002668:	4b2f      	ldr	r3, [pc, #188]	; (8002728 <main+0x1a4>)
 800266a:	6919      	ldr	r1, [r3, #16]
 800266c:	4b2e      	ldr	r3, [pc, #184]	; (8002728 <main+0x1a4>)
 800266e:	695a      	ldr	r2, [r3, #20]
 8002670:	4b2d      	ldr	r3, [pc, #180]	; (8002728 <main+0x1a4>)
 8002672:	4831      	ldr	r0, [pc, #196]	; (8002738 <main+0x1b4>)
 8002674:	f7fe fd10 	bl	8001098 <setPWM>
		  setPWM(&Motor_4, Motors.pwm4, Motors.e4, &Motors);
 8002678:	4b2b      	ldr	r3, [pc, #172]	; (8002728 <main+0x1a4>)
 800267a:	6999      	ldr	r1, [r3, #24]
 800267c:	4b2a      	ldr	r3, [pc, #168]	; (8002728 <main+0x1a4>)
 800267e:	69da      	ldr	r2, [r3, #28]
 8002680:	4b29      	ldr	r3, [pc, #164]	; (8002728 <main+0x1a4>)
 8002682:	482e      	ldr	r0, [pc, #184]	; (800273c <main+0x1b8>)
 8002684:	f7fe fd08 	bl	8001098 <setPWM>
	  }

//	  if (zone == BALLIN) {
//		  Attack(&Motors, &MotorDefs, &SRDatas, &attackZone, 35);
//	  }
	  if (ballInView) {
 8002688:	4b2d      	ldr	r3, [pc, #180]	; (8002740 <main+0x1bc>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	2b00      	cmp	r3, #0
 800268e:	d016      	beq.n	80026be <main+0x13a>
		  GetBall(ballTransform.ballx, ballTransform.bally, 35, &zone, &Motors, &MotorDefs, &InGoal, &SRDatas);
 8002690:	4b2c      	ldr	r3, [pc, #176]	; (8002744 <main+0x1c0>)
 8002692:	6818      	ldr	r0, [r3, #0]
 8002694:	4b2b      	ldr	r3, [pc, #172]	; (8002744 <main+0x1c0>)
 8002696:	6859      	ldr	r1, [r3, #4]
 8002698:	4b2b      	ldr	r3, [pc, #172]	; (8002748 <main+0x1c4>)
 800269a:	9303      	str	r3, [sp, #12]
 800269c:	4b2b      	ldr	r3, [pc, #172]	; (800274c <main+0x1c8>)
 800269e:	9302      	str	r3, [sp, #8]
 80026a0:	4b20      	ldr	r3, [pc, #128]	; (8002724 <main+0x1a0>)
 80026a2:	9301      	str	r3, [sp, #4]
 80026a4:	4b20      	ldr	r3, [pc, #128]	; (8002728 <main+0x1a4>)
 80026a6:	9300      	str	r3, [sp, #0]
 80026a8:	4b29      	ldr	r3, [pc, #164]	; (8002750 <main+0x1cc>)
 80026aa:	2223      	movs	r2, #35	; 0x23
 80026ac:	f7ff fa6c 	bl	8001b88 <GetBall>
		  noBallCounter = 0;
 80026b0:	4928      	ldr	r1, [pc, #160]	; (8002754 <main+0x1d0>)
 80026b2:	f04f 0200 	mov.w	r2, #0
 80026b6:	f04f 0300 	mov.w	r3, #0
 80026ba:	e9c1 2300 	strd	r2, r3, [r1]
	  }

	  if (!ballInView) {
 80026be:	4b20      	ldr	r3, [pc, #128]	; (8002740 <main+0x1bc>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d108      	bne.n	80026d8 <main+0x154>
		  noBallCounter++;
 80026c6:	4b23      	ldr	r3, [pc, #140]	; (8002754 <main+0x1d0>)
 80026c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026cc:	1c54      	adds	r4, r2, #1
 80026ce:	f143 0500 	adc.w	r5, r3, #0
 80026d2:	4b20      	ldr	r3, [pc, #128]	; (8002754 <main+0x1d0>)
 80026d4:	e9c3 4500 	strd	r4, r5, [r3]
	  }

	  if (noBallCounter >= 2250) {
 80026d8:	4b1e      	ldr	r3, [pc, #120]	; (8002754 <main+0x1d0>)
 80026da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026de:	f640 01ca 	movw	r1, #2250	; 0x8ca
 80026e2:	428a      	cmp	r2, r1
 80026e4:	f173 0300 	sbcs.w	r3, r3, #0
 80026e8:	d397      	bcc.n	800261a <main+0x96>
		  noBallCounter = 0;
 80026ea:	491a      	ldr	r1, [pc, #104]	; (8002754 <main+0x1d0>)
 80026ec:	f04f 0200 	mov.w	r2, #0
 80026f0:	f04f 0300 	mov.w	r3, #0
 80026f4:	e9c1 2300 	strd	r2, r3, [r1]
		  AllMotorsZero(&MotorDefs, &Motors);
 80026f8:	490b      	ldr	r1, [pc, #44]	; (8002728 <main+0x1a4>)
 80026fa:	480a      	ldr	r0, [pc, #40]	; (8002724 <main+0x1a0>)
 80026fc:	f7fe feea 	bl	80014d4 <AllMotorsZero>
	  if (abs(Gy.z) > 2) {
 8002700:	e78b      	b.n	800261a <main+0x96>
 8002702:	bf00      	nop
 8002704:	200003c4 	.word	0x200003c4
 8002708:	2000040c 	.word	0x2000040c
 800270c:	20000454 	.word	0x20000454
 8002710:	2000049c 	.word	0x2000049c
 8002714:	40012c00 	.word	0x40012c00
 8002718:	20000264 	.word	0x20000264
 800271c:	40011000 	.word	0x40011000
 8002720:	200002f8 	.word	0x200002f8
 8002724:	20000060 	.word	0x20000060
 8002728:	20000010 	.word	0x20000010
 800272c:	20000308 	.word	0x20000308
 8002730:	20000030 	.word	0x20000030
 8002734:	2000003c 	.word	0x2000003c
 8002738:	20000048 	.word	0x20000048
 800273c:	20000054 	.word	0x20000054
 8002740:	20000260 	.word	0x20000260
 8002744:	20000250 	.word	0x20000250
 8002748:	20000310 	.word	0x20000310
 800274c:	20000334 	.word	0x20000334
 8002750:	20000070 	.word	0x20000070
 8002754:	20000338 	.word	0x20000338

08002758 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b090      	sub	sp, #64	; 0x40
 800275c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800275e:	f107 0318 	add.w	r3, r7, #24
 8002762:	2228      	movs	r2, #40	; 0x28
 8002764:	2100      	movs	r1, #0
 8002766:	4618      	mov	r0, r3
 8002768:	f004 fd67 	bl	800723a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800276c:	1d3b      	adds	r3, r7, #4
 800276e:	2200      	movs	r2, #0
 8002770:	601a      	str	r2, [r3, #0]
 8002772:	605a      	str	r2, [r3, #4]
 8002774:	609a      	str	r2, [r3, #8]
 8002776:	60da      	str	r2, [r3, #12]
 8002778:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800277a:	2302      	movs	r3, #2
 800277c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800277e:	2301      	movs	r3, #1
 8002780:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002782:	2310      	movs	r3, #16
 8002784:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002786:	2302      	movs	r3, #2
 8002788:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 800278a:	2300      	movs	r3, #0
 800278c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 800278e:	f44f 1320 	mov.w	r3, #2621440	; 0x280000
 8002792:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002794:	f107 0318 	add.w	r3, r7, #24
 8002798:	4618      	mov	r0, r3
 800279a:	f002 fbe3 	bl	8004f64 <HAL_RCC_OscConfig>
 800279e:	4603      	mov	r3, r0
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d001      	beq.n	80027a8 <SystemClock_Config+0x50>
  {
    Error_Handler();
 80027a4:	f000 f819 	bl	80027da <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80027a8:	230f      	movs	r3, #15
 80027aa:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80027ac:	2302      	movs	r3, #2
 80027ae:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80027b0:	2300      	movs	r3, #0
 80027b2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80027b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80027b8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80027ba:	2300      	movs	r3, #0
 80027bc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80027be:	1d3b      	adds	r3, r7, #4
 80027c0:	2101      	movs	r1, #1
 80027c2:	4618      	mov	r0, r3
 80027c4:	f002 fe50 	bl	8005468 <HAL_RCC_ClockConfig>
 80027c8:	4603      	mov	r3, r0
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d001      	beq.n	80027d2 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80027ce:	f000 f804 	bl	80027da <Error_Handler>
  }
}
 80027d2:	bf00      	nop
 80027d4:	3740      	adds	r7, #64	; 0x40
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bd80      	pop	{r7, pc}

080027da <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80027da:	b480      	push	{r7}
 80027dc:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80027de:	b672      	cpsid	i
}
 80027e0:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80027e2:	bf00      	nop
 80027e4:	e7fd      	b.n	80027e2 <Error_Handler+0x8>

080027e6 <MPU6050_Init>:
    .Q_bias = 0.003f,
    .R_measure = 0.03f,
};

uint8_t MPU6050_Init(I2C_HandleTypeDef *I2Cx)
{
 80027e6:	b580      	push	{r7, lr}
 80027e8:	b088      	sub	sp, #32
 80027ea:	af04      	add	r7, sp, #16
 80027ec:	6078      	str	r0, [r7, #4]
    uint8_t check;
    uint8_t Data;

    // check device ID WHO_AM_I

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, i2c_timeout);
 80027ee:	2364      	movs	r3, #100	; 0x64
 80027f0:	9302      	str	r3, [sp, #8]
 80027f2:	2301      	movs	r3, #1
 80027f4:	9301      	str	r3, [sp, #4]
 80027f6:	f107 030f 	add.w	r3, r7, #15
 80027fa:	9300      	str	r3, [sp, #0]
 80027fc:	2301      	movs	r3, #1
 80027fe:	2275      	movs	r2, #117	; 0x75
 8002800:	21d0      	movs	r1, #208	; 0xd0
 8002802:	6878      	ldr	r0, [r7, #4]
 8002804:	f001 fdec 	bl	80043e0 <HAL_I2C_Mem_Read>

    if (check == 104) // 0x68 will be returned by the sensor if everything goes well
 8002808:	7bfb      	ldrb	r3, [r7, #15]
 800280a:	2b68      	cmp	r3, #104	; 0x68
 800280c:	d14c      	bne.n	80028a8 <MPU6050_Init+0xc2>
    {
        // power management register 0X6B we should write all 0's to wake the sensor up
        Data = 0;
 800280e:	2300      	movs	r3, #0
 8002810:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1, i2c_timeout);
 8002812:	2364      	movs	r3, #100	; 0x64
 8002814:	9302      	str	r3, [sp, #8]
 8002816:	2301      	movs	r3, #1
 8002818:	9301      	str	r3, [sp, #4]
 800281a:	f107 030e 	add.w	r3, r7, #14
 800281e:	9300      	str	r3, [sp, #0]
 8002820:	2301      	movs	r3, #1
 8002822:	226b      	movs	r2, #107	; 0x6b
 8002824:	21d0      	movs	r1, #208	; 0xd0
 8002826:	6878      	ldr	r0, [r7, #4]
 8002828:	f001 fce0 	bl	80041ec <HAL_I2C_Mem_Write>

        // Set DATA RATE of 1KHz by writing SMPLRT_DIV register
        Data = 0x07;
 800282c:	2307      	movs	r3, #7
 800282e:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, i2c_timeout);
 8002830:	2364      	movs	r3, #100	; 0x64
 8002832:	9302      	str	r3, [sp, #8]
 8002834:	2301      	movs	r3, #1
 8002836:	9301      	str	r3, [sp, #4]
 8002838:	f107 030e 	add.w	r3, r7, #14
 800283c:	9300      	str	r3, [sp, #0]
 800283e:	2301      	movs	r3, #1
 8002840:	2219      	movs	r2, #25
 8002842:	21d0      	movs	r1, #208	; 0xd0
 8002844:	6878      	ldr	r0, [r7, #4]
 8002846:	f001 fcd1 	bl	80041ec <HAL_I2C_Mem_Write>

        Data = 0x01;
 800284a:	2301      	movs	r3, #1
 800284c:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, 0x1A, 1, &Data, 1, i2c_timeout);
 800284e:	2364      	movs	r3, #100	; 0x64
 8002850:	9302      	str	r3, [sp, #8]
 8002852:	2301      	movs	r3, #1
 8002854:	9301      	str	r3, [sp, #4]
 8002856:	f107 030e 	add.w	r3, r7, #14
 800285a:	9300      	str	r3, [sp, #0]
 800285c:	2301      	movs	r3, #1
 800285e:	221a      	movs	r2, #26
 8002860:	21d0      	movs	r1, #208	; 0xd0
 8002862:	6878      	ldr	r0, [r7, #4]
 8002864:	f001 fcc2 	bl	80041ec <HAL_I2C_Mem_Write>

        // Set accelerometer configuration in ACCEL_CONFIG Register
        // XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> � 2g
        Data = 0x0;
 8002868:	2300      	movs	r3, #0
 800286a:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 800286c:	2364      	movs	r3, #100	; 0x64
 800286e:	9302      	str	r3, [sp, #8]
 8002870:	2301      	movs	r3, #1
 8002872:	9301      	str	r3, [sp, #4]
 8002874:	f107 030e 	add.w	r3, r7, #14
 8002878:	9300      	str	r3, [sp, #0]
 800287a:	2301      	movs	r3, #1
 800287c:	221c      	movs	r2, #28
 800287e:	21d0      	movs	r1, #208	; 0xd0
 8002880:	6878      	ldr	r0, [r7, #4]
 8002882:	f001 fcb3 	bl	80041ec <HAL_I2C_Mem_Write>

        // Set Gyroscopic configuration in GYRO_CONFIG Register
        // XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> � 250 �/s
        Data = 0x0;
 8002886:	2300      	movs	r3, #0
 8002888:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 800288a:	2364      	movs	r3, #100	; 0x64
 800288c:	9302      	str	r3, [sp, #8]
 800288e:	2301      	movs	r3, #1
 8002890:	9301      	str	r3, [sp, #4]
 8002892:	f107 030e 	add.w	r3, r7, #14
 8002896:	9300      	str	r3, [sp, #0]
 8002898:	2301      	movs	r3, #1
 800289a:	221b      	movs	r2, #27
 800289c:	21d0      	movs	r1, #208	; 0xd0
 800289e:	6878      	ldr	r0, [r7, #4]
 80028a0:	f001 fca4 	bl	80041ec <HAL_I2C_Mem_Write>
        return 0;
 80028a4:	2300      	movs	r3, #0
 80028a6:	e000      	b.n	80028aa <MPU6050_Init+0xc4>
    }
    return 1;
 80028a8:	2301      	movs	r3, #1
}
 80028aa:	4618      	mov	r0, r3
 80028ac:	3710      	adds	r7, #16
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bd80      	pop	{r7, pc}
 80028b2:	0000      	movs	r0, r0
 80028b4:	0000      	movs	r0, r0
	...

080028b8 <MPU6050_Read_All>:
    temp = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
    DataStruct->Temperature = (float)((int16_t)temp / (float)340.0 + (float)36.53);
}

void MPU6050_Read_All(I2C_HandleTypeDef *I2Cx, MPU6050_t *DataStruct, double RateCalibrationRoll, double RateCalibrationPitch, double RateCalibrationYaw)
{
 80028b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80028bc:	b096      	sub	sp, #88	; 0x58
 80028be:	af04      	add	r7, sp, #16
 80028c0:	60f8      	str	r0, [r7, #12]
 80028c2:	60b9      	str	r1, [r7, #8]
 80028c4:	e9c7 2300 	strd	r2, r3, [r7]
    uint8_t Rec_Data[14];
    int16_t temp;

    // Read 14 BYTES of data starting from ACCEL_XOUT_H register

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 14, i2c_timeout);
 80028c8:	2364      	movs	r3, #100	; 0x64
 80028ca:	9302      	str	r3, [sp, #8]
 80028cc:	230e      	movs	r3, #14
 80028ce:	9301      	str	r3, [sp, #4]
 80028d0:	f107 0310 	add.w	r3, r7, #16
 80028d4:	9300      	str	r3, [sp, #0]
 80028d6:	2301      	movs	r3, #1
 80028d8:	223b      	movs	r2, #59	; 0x3b
 80028da:	21d0      	movs	r1, #208	; 0xd0
 80028dc:	68f8      	ldr	r0, [r7, #12]
 80028de:	f001 fd7f 	bl	80043e0 <HAL_I2C_Mem_Read>

    DataStruct->Accel_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
 80028e2:	7c3b      	ldrb	r3, [r7, #16]
 80028e4:	021b      	lsls	r3, r3, #8
 80028e6:	b21a      	sxth	r2, r3
 80028e8:	7c7b      	ldrb	r3, [r7, #17]
 80028ea:	b21b      	sxth	r3, r3
 80028ec:	4313      	orrs	r3, r2
 80028ee:	b21a      	sxth	r2, r3
 80028f0:	68bb      	ldr	r3, [r7, #8]
 80028f2:	801a      	strh	r2, [r3, #0]
    DataStruct->Accel_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data[3]);
 80028f4:	7cbb      	ldrb	r3, [r7, #18]
 80028f6:	021b      	lsls	r3, r3, #8
 80028f8:	b21a      	sxth	r2, r3
 80028fa:	7cfb      	ldrb	r3, [r7, #19]
 80028fc:	b21b      	sxth	r3, r3
 80028fe:	4313      	orrs	r3, r2
 8002900:	b21a      	sxth	r2, r3
 8002902:	68bb      	ldr	r3, [r7, #8]
 8002904:	805a      	strh	r2, [r3, #2]
    DataStruct->Accel_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data[5]);
 8002906:	7d3b      	ldrb	r3, [r7, #20]
 8002908:	021b      	lsls	r3, r3, #8
 800290a:	b21a      	sxth	r2, r3
 800290c:	7d7b      	ldrb	r3, [r7, #21]
 800290e:	b21b      	sxth	r3, r3
 8002910:	4313      	orrs	r3, r2
 8002912:	b21a      	sxth	r2, r3
 8002914:	68bb      	ldr	r3, [r7, #8]
 8002916:	809a      	strh	r2, [r3, #4]
    temp = (int16_t)(Rec_Data[6] << 8 | Rec_Data[7]);
 8002918:	7dbb      	ldrb	r3, [r7, #22]
 800291a:	021b      	lsls	r3, r3, #8
 800291c:	b21a      	sxth	r2, r3
 800291e:	7dfb      	ldrb	r3, [r7, #23]
 8002920:	b21b      	sxth	r3, r3
 8002922:	4313      	orrs	r3, r2
 8002924:	87fb      	strh	r3, [r7, #62]	; 0x3e
    DataStruct->Gyro_X_RAW = (int16_t)(Rec_Data[8] << 8 | Rec_Data[9]);
 8002926:	7e3b      	ldrb	r3, [r7, #24]
 8002928:	021b      	lsls	r3, r3, #8
 800292a:	b21a      	sxth	r2, r3
 800292c:	7e7b      	ldrb	r3, [r7, #25]
 800292e:	b21b      	sxth	r3, r3
 8002930:	4313      	orrs	r3, r2
 8002932:	b21a      	sxth	r2, r3
 8002934:	68bb      	ldr	r3, [r7, #8]
 8002936:	841a      	strh	r2, [r3, #32]
    DataStruct->Gyro_Y_RAW = (int16_t)(Rec_Data[10] << 8 | Rec_Data[11]);
 8002938:	7ebb      	ldrb	r3, [r7, #26]
 800293a:	021b      	lsls	r3, r3, #8
 800293c:	b21a      	sxth	r2, r3
 800293e:	7efb      	ldrb	r3, [r7, #27]
 8002940:	b21b      	sxth	r3, r3
 8002942:	4313      	orrs	r3, r2
 8002944:	b21a      	sxth	r2, r3
 8002946:	68bb      	ldr	r3, [r7, #8]
 8002948:	845a      	strh	r2, [r3, #34]	; 0x22
    DataStruct->Gyro_Z_RAW = (int16_t)(Rec_Data[12] << 8 | Rec_Data[13]);
 800294a:	7f3b      	ldrb	r3, [r7, #28]
 800294c:	021b      	lsls	r3, r3, #8
 800294e:	b21a      	sxth	r2, r3
 8002950:	7f7b      	ldrb	r3, [r7, #29]
 8002952:	b21b      	sxth	r3, r3
 8002954:	4313      	orrs	r3, r2
 8002956:	b21a      	sxth	r2, r3
 8002958:	68bb      	ldr	r3, [r7, #8]
 800295a:	849a      	strh	r2, [r3, #36]	; 0x24

    DataStruct->Ax = DataStruct->Accel_X_RAW / 16384.0;
 800295c:	68bb      	ldr	r3, [r7, #8]
 800295e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002962:	4618      	mov	r0, r3
 8002964:	f7fd fd26 	bl	80003b4 <__aeabi_i2d>
 8002968:	f04f 0200 	mov.w	r2, #0
 800296c:	4ba0      	ldr	r3, [pc, #640]	; (8002bf0 <MPU6050_Read_All+0x338>)
 800296e:	f7fd feb5 	bl	80006dc <__aeabi_ddiv>
 8002972:	4602      	mov	r2, r0
 8002974:	460b      	mov	r3, r1
 8002976:	68b9      	ldr	r1, [r7, #8]
 8002978:	e9c1 2302 	strd	r2, r3, [r1, #8]
    DataStruct->Ay = DataStruct->Accel_Y_RAW / 16384.0;
 800297c:	68bb      	ldr	r3, [r7, #8]
 800297e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002982:	4618      	mov	r0, r3
 8002984:	f7fd fd16 	bl	80003b4 <__aeabi_i2d>
 8002988:	f04f 0200 	mov.w	r2, #0
 800298c:	4b98      	ldr	r3, [pc, #608]	; (8002bf0 <MPU6050_Read_All+0x338>)
 800298e:	f7fd fea5 	bl	80006dc <__aeabi_ddiv>
 8002992:	4602      	mov	r2, r0
 8002994:	460b      	mov	r3, r1
 8002996:	68b9      	ldr	r1, [r7, #8]
 8002998:	e9c1 2304 	strd	r2, r3, [r1, #16]
    DataStruct->Az = DataStruct->Accel_Z_RAW / Accel_Z_corrector;
 800299c:	68bb      	ldr	r3, [r7, #8]
 800299e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80029a2:	4618      	mov	r0, r3
 80029a4:	f7fd fd06 	bl	80003b4 <__aeabi_i2d>
 80029a8:	a38b      	add	r3, pc, #556	; (adr r3, 8002bd8 <MPU6050_Read_All+0x320>)
 80029aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029ae:	f7fd fe95 	bl	80006dc <__aeabi_ddiv>
 80029b2:	4602      	mov	r2, r0
 80029b4:	460b      	mov	r3, r1
 80029b6:	68b9      	ldr	r1, [r7, #8]
 80029b8:	e9c1 2306 	strd	r2, r3, [r1, #24]
    DataStruct->Temperature = (float)((int16_t)temp / (float)340.0 + (float)36.53);
 80029bc:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 80029c0:	4618      	mov	r0, r3
 80029c2:	f7fe f963 	bl	8000c8c <__aeabi_i2f>
 80029c6:	4603      	mov	r3, r0
 80029c8:	498a      	ldr	r1, [pc, #552]	; (8002bf4 <MPU6050_Read_All+0x33c>)
 80029ca:	4618      	mov	r0, r3
 80029cc:	f7fe fa66 	bl	8000e9c <__aeabi_fdiv>
 80029d0:	4603      	mov	r3, r0
 80029d2:	4989      	ldr	r1, [pc, #548]	; (8002bf8 <MPU6050_Read_All+0x340>)
 80029d4:	4618      	mov	r0, r3
 80029d6:	f7fe f8a5 	bl	8000b24 <__addsf3>
 80029da:	4603      	mov	r3, r0
 80029dc:	461a      	mov	r2, r3
 80029de:	68bb      	ldr	r3, [r7, #8]
 80029e0:	641a      	str	r2, [r3, #64]	; 0x40
    DataStruct->Gx = DataStruct->Gyro_X_RAW / 131.0 - RateCalibrationRoll;
 80029e2:	68bb      	ldr	r3, [r7, #8]
 80029e4:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 80029e8:	4618      	mov	r0, r3
 80029ea:	f7fd fce3 	bl	80003b4 <__aeabi_i2d>
 80029ee:	a37c      	add	r3, pc, #496	; (adr r3, 8002be0 <MPU6050_Read_All+0x328>)
 80029f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029f4:	f7fd fe72 	bl	80006dc <__aeabi_ddiv>
 80029f8:	4602      	mov	r2, r0
 80029fa:	460b      	mov	r3, r1
 80029fc:	4610      	mov	r0, r2
 80029fe:	4619      	mov	r1, r3
 8002a00:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002a04:	f7fd fb88 	bl	8000118 <__aeabi_dsub>
 8002a08:	4602      	mov	r2, r0
 8002a0a:	460b      	mov	r3, r1
 8002a0c:	68b9      	ldr	r1, [r7, #8]
 8002a0e:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    DataStruct->Gy = DataStruct->Gyro_Y_RAW / 131.0 - RateCalibrationPitch;
 8002a12:	68bb      	ldr	r3, [r7, #8]
 8002a14:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8002a18:	4618      	mov	r0, r3
 8002a1a:	f7fd fccb 	bl	80003b4 <__aeabi_i2d>
 8002a1e:	a370      	add	r3, pc, #448	; (adr r3, 8002be0 <MPU6050_Read_All+0x328>)
 8002a20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a24:	f7fd fe5a 	bl	80006dc <__aeabi_ddiv>
 8002a28:	4602      	mov	r2, r0
 8002a2a:	460b      	mov	r3, r1
 8002a2c:	4610      	mov	r0, r2
 8002a2e:	4619      	mov	r1, r3
 8002a30:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8002a34:	f7fd fb70 	bl	8000118 <__aeabi_dsub>
 8002a38:	4602      	mov	r2, r0
 8002a3a:	460b      	mov	r3, r1
 8002a3c:	68b9      	ldr	r1, [r7, #8]
 8002a3e:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    DataStruct->Gz = DataStruct->Gyro_Z_RAW / 131.0 - RateCalibrationYaw;
 8002a42:	68bb      	ldr	r3, [r7, #8]
 8002a44:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8002a48:	4618      	mov	r0, r3
 8002a4a:	f7fd fcb3 	bl	80003b4 <__aeabi_i2d>
 8002a4e:	a364      	add	r3, pc, #400	; (adr r3, 8002be0 <MPU6050_Read_All+0x328>)
 8002a50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a54:	f7fd fe42 	bl	80006dc <__aeabi_ddiv>
 8002a58:	4602      	mov	r2, r0
 8002a5a:	460b      	mov	r3, r1
 8002a5c:	4610      	mov	r0, r2
 8002a5e:	4619      	mov	r1, r3
 8002a60:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8002a64:	f7fd fb58 	bl	8000118 <__aeabi_dsub>
 8002a68:	4602      	mov	r2, r0
 8002a6a:	460b      	mov	r3, r1
 8002a6c:	68b9      	ldr	r1, [r7, #8]
 8002a6e:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

    // Kalman angle solve
    double dt = (double)(HAL_GetTick() - timer) / 1000;
 8002a72:	f000 ff65 	bl	8003940 <HAL_GetTick>
 8002a76:	4602      	mov	r2, r0
 8002a78:	4b60      	ldr	r3, [pc, #384]	; (8002bfc <MPU6050_Read_All+0x344>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	1ad3      	subs	r3, r2, r3
 8002a7e:	4618      	mov	r0, r3
 8002a80:	f7fd fc88 	bl	8000394 <__aeabi_ui2d>
 8002a84:	f04f 0200 	mov.w	r2, #0
 8002a88:	4b5d      	ldr	r3, [pc, #372]	; (8002c00 <MPU6050_Read_All+0x348>)
 8002a8a:	f7fd fe27 	bl	80006dc <__aeabi_ddiv>
 8002a8e:	4602      	mov	r2, r0
 8002a90:	460b      	mov	r3, r1
 8002a92:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    timer = HAL_GetTick();
 8002a96:	f000 ff53 	bl	8003940 <HAL_GetTick>
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	4a57      	ldr	r2, [pc, #348]	; (8002bfc <MPU6050_Read_All+0x344>)
 8002a9e:	6013      	str	r3, [r2, #0]
    double roll;
    double roll_sqrt = sqrt(
        DataStruct->Accel_X_RAW * DataStruct->Accel_X_RAW + DataStruct->Accel_Z_RAW * DataStruct->Accel_Z_RAW);
 8002aa0:	68bb      	ldr	r3, [r7, #8]
 8002aa2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002aa6:	461a      	mov	r2, r3
 8002aa8:	68bb      	ldr	r3, [r7, #8]
 8002aaa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002aae:	fb03 f202 	mul.w	r2, r3, r2
 8002ab2:	68bb      	ldr	r3, [r7, #8]
 8002ab4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002ab8:	4619      	mov	r1, r3
 8002aba:	68bb      	ldr	r3, [r7, #8]
 8002abc:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002ac0:	fb01 f303 	mul.w	r3, r1, r3
 8002ac4:	4413      	add	r3, r2
    double roll_sqrt = sqrt(
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	f7fd fc74 	bl	80003b4 <__aeabi_i2d>
 8002acc:	4602      	mov	r2, r0
 8002ace:	460b      	mov	r3, r1
 8002ad0:	4610      	mov	r0, r2
 8002ad2:	4619      	mov	r1, r3
 8002ad4:	f004 fc54 	bl	8007380 <sqrt>
 8002ad8:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
    if (roll_sqrt != 0.0)
 8002adc:	f04f 0200 	mov.w	r2, #0
 8002ae0:	f04f 0300 	mov.w	r3, #0
 8002ae4:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002ae8:	f7fd ff36 	bl	8000958 <__aeabi_dcmpeq>
 8002aec:	4603      	mov	r3, r0
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d119      	bne.n	8002b26 <MPU6050_Read_All+0x26e>
    {
        roll = atan(DataStruct->Accel_Y_RAW / roll_sqrt) * RAD_TO_DEG;
 8002af2:	68bb      	ldr	r3, [r7, #8]
 8002af4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002af8:	4618      	mov	r0, r3
 8002afa:	f7fd fc5b 	bl	80003b4 <__aeabi_i2d>
 8002afe:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002b02:	f7fd fdeb 	bl	80006dc <__aeabi_ddiv>
 8002b06:	4602      	mov	r2, r0
 8002b08:	460b      	mov	r3, r1
 8002b0a:	4610      	mov	r0, r2
 8002b0c:	4619      	mov	r1, r3
 8002b0e:	f004 fc5f 	bl	80073d0 <atan>
 8002b12:	a335      	add	r3, pc, #212	; (adr r3, 8002be8 <MPU6050_Read_All+0x330>)
 8002b14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b18:	f7fd fcb6 	bl	8000488 <__aeabi_dmul>
 8002b1c:	4602      	mov	r2, r0
 8002b1e:	460b      	mov	r3, r1
 8002b20:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
 8002b24:	e005      	b.n	8002b32 <MPU6050_Read_All+0x27a>
    }
    else
    {
        roll = 0.0;
 8002b26:	f04f 0200 	mov.w	r2, #0
 8002b2a:	f04f 0300 	mov.w	r3, #0
 8002b2e:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    }
    double pitch = atan2(-DataStruct->Accel_X_RAW, DataStruct->Accel_Z_RAW) * RAD_TO_DEG;
 8002b32:	68bb      	ldr	r3, [r7, #8]
 8002b34:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002b38:	425b      	negs	r3, r3
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	f7fd fc3a 	bl	80003b4 <__aeabi_i2d>
 8002b40:	4682      	mov	sl, r0
 8002b42:	468b      	mov	fp, r1
 8002b44:	68bb      	ldr	r3, [r7, #8]
 8002b46:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	f7fd fc32 	bl	80003b4 <__aeabi_i2d>
 8002b50:	4602      	mov	r2, r0
 8002b52:	460b      	mov	r3, r1
 8002b54:	4650      	mov	r0, sl
 8002b56:	4659      	mov	r1, fp
 8002b58:	f004 fba2 	bl	80072a0 <atan2>
 8002b5c:	a322      	add	r3, pc, #136	; (adr r3, 8002be8 <MPU6050_Read_All+0x330>)
 8002b5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b62:	f7fd fc91 	bl	8000488 <__aeabi_dmul>
 8002b66:	4602      	mov	r2, r0
 8002b68:	460b      	mov	r3, r1
 8002b6a:	e9c7 2308 	strd	r2, r3, [r7, #32]
    if ((pitch < -90 && DataStruct->KalmanAngleY > 90) || (pitch > 90 && DataStruct->KalmanAngleY < -90))
 8002b6e:	f04f 0200 	mov.w	r2, #0
 8002b72:	4b24      	ldr	r3, [pc, #144]	; (8002c04 <MPU6050_Read_All+0x34c>)
 8002b74:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002b78:	f7fd fef8 	bl	800096c <__aeabi_dcmplt>
 8002b7c:	4603      	mov	r3, r0
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d00a      	beq.n	8002b98 <MPU6050_Read_All+0x2e0>
 8002b82:	68bb      	ldr	r3, [r7, #8]
 8002b84:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8002b88:	f04f 0200 	mov.w	r2, #0
 8002b8c:	4b1e      	ldr	r3, [pc, #120]	; (8002c08 <MPU6050_Read_All+0x350>)
 8002b8e:	f7fd ff0b 	bl	80009a8 <__aeabi_dcmpgt>
 8002b92:	4603      	mov	r3, r0
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d114      	bne.n	8002bc2 <MPU6050_Read_All+0x30a>
 8002b98:	f04f 0200 	mov.w	r2, #0
 8002b9c:	4b1a      	ldr	r3, [pc, #104]	; (8002c08 <MPU6050_Read_All+0x350>)
 8002b9e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002ba2:	f7fd ff01 	bl	80009a8 <__aeabi_dcmpgt>
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d031      	beq.n	8002c10 <MPU6050_Read_All+0x358>
 8002bac:	68bb      	ldr	r3, [r7, #8]
 8002bae:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8002bb2:	f04f 0200 	mov.w	r2, #0
 8002bb6:	4b13      	ldr	r3, [pc, #76]	; (8002c04 <MPU6050_Read_All+0x34c>)
 8002bb8:	f7fd fed8 	bl	800096c <__aeabi_dcmplt>
 8002bbc:	4603      	mov	r3, r0
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d026      	beq.n	8002c10 <MPU6050_Read_All+0x358>
    {
        KalmanY.angle = pitch;
 8002bc2:	4912      	ldr	r1, [pc, #72]	; (8002c0c <MPU6050_Read_All+0x354>)
 8002bc4:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002bc8:	e9c1 2306 	strd	r2, r3, [r1, #24]
        DataStruct->KalmanAngleY = pitch;
 8002bcc:	68b9      	ldr	r1, [r7, #8]
 8002bce:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002bd2:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 8002bd6:	e02e      	b.n	8002c36 <MPU6050_Read_All+0x37e>
 8002bd8:	00000000 	.word	0x00000000
 8002bdc:	40cc2900 	.word	0x40cc2900
 8002be0:	00000000 	.word	0x00000000
 8002be4:	40606000 	.word	0x40606000
 8002be8:	1a63c1f8 	.word	0x1a63c1f8
 8002bec:	404ca5dc 	.word	0x404ca5dc
 8002bf0:	40d00000 	.word	0x40d00000
 8002bf4:	43aa0000 	.word	0x43aa0000
 8002bf8:	42121eb8 	.word	0x42121eb8
 8002bfc:	20000348 	.word	0x20000348
 8002c00:	408f4000 	.word	0x408f4000
 8002c04:	c0568000 	.word	0xc0568000
 8002c08:	40568000 	.word	0x40568000
 8002c0c:	20000120 	.word	0x20000120
    }
    else
    {
        DataStruct->KalmanAngleY = Kalman_getAngle(&KalmanY, pitch, DataStruct->Gy, dt);
 8002c10:	68bb      	ldr	r3, [r7, #8]
 8002c12:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8002c16:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8002c1a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002c1e:	e9cd 2300 	strd	r2, r3, [sp]
 8002c22:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002c26:	481c      	ldr	r0, [pc, #112]	; (8002c98 <MPU6050_Read_All+0x3e0>)
 8002c28:	f000 f83c 	bl	8002ca4 <Kalman_getAngle>
 8002c2c:	4602      	mov	r2, r0
 8002c2e:	460b      	mov	r3, r1
 8002c30:	68b9      	ldr	r1, [r7, #8]
 8002c32:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
    }
    if (fabs(DataStruct->KalmanAngleY) > 90)
 8002c36:	68bb      	ldr	r3, [r7, #8]
 8002c38:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8002c3c:	4690      	mov	r8, r2
 8002c3e:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 8002c42:	f04f 0200 	mov.w	r2, #0
 8002c46:	4b15      	ldr	r3, [pc, #84]	; (8002c9c <MPU6050_Read_All+0x3e4>)
 8002c48:	4640      	mov	r0, r8
 8002c4a:	4649      	mov	r1, r9
 8002c4c:	f7fd feac 	bl	80009a8 <__aeabi_dcmpgt>
 8002c50:	4603      	mov	r3, r0
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d008      	beq.n	8002c68 <MPU6050_Read_All+0x3b0>
        DataStruct->Gx = -DataStruct->Gx;
 8002c56:	68bb      	ldr	r3, [r7, #8]
 8002c58:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8002c5c:	4614      	mov	r4, r2
 8002c5e:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8002c62:	68bb      	ldr	r3, [r7, #8]
 8002c64:	e9c3 450a 	strd	r4, r5, [r3, #40]	; 0x28
    DataStruct->KalmanAngleX = Kalman_getAngle(&KalmanX, roll, DataStruct->Gx, dt);
 8002c68:	68bb      	ldr	r3, [r7, #8]
 8002c6a:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8002c6e:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8002c72:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002c76:	e9cd 2300 	strd	r2, r3, [sp]
 8002c7a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002c7e:	4808      	ldr	r0, [pc, #32]	; (8002ca0 <MPU6050_Read_All+0x3e8>)
 8002c80:	f000 f810 	bl	8002ca4 <Kalman_getAngle>
 8002c84:	4602      	mov	r2, r0
 8002c86:	460b      	mov	r3, r1
 8002c88:	68b9      	ldr	r1, [r7, #8]
 8002c8a:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
}
 8002c8e:	bf00      	nop
 8002c90:	3748      	adds	r7, #72	; 0x48
 8002c92:	46bd      	mov	sp, r7
 8002c94:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002c98:	20000120 	.word	0x20000120
 8002c9c:	40568000 	.word	0x40568000
 8002ca0:	200000d8 	.word	0x200000d8

08002ca4 <Kalman_getAngle>:

double Kalman_getAngle(Kalman_t *Kalman, double newAngle, double newRate, double dt)
{
 8002ca4:	b5b0      	push	{r4, r5, r7, lr}
 8002ca6:	b092      	sub	sp, #72	; 0x48
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	60f8      	str	r0, [r7, #12]
 8002cac:	e9c7 2300 	strd	r2, r3, [r7]
    double rate = newRate - Kalman->bias;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8002cb6:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8002cba:	f7fd fa2d 	bl	8000118 <__aeabi_dsub>
 8002cbe:	4602      	mov	r2, r0
 8002cc0:	460b      	mov	r3, r1
 8002cc2:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    Kalman->angle += dt * rate;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8002ccc:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002cd0:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8002cd4:	f7fd fbd8 	bl	8000488 <__aeabi_dmul>
 8002cd8:	4602      	mov	r2, r0
 8002cda:	460b      	mov	r3, r1
 8002cdc:	4620      	mov	r0, r4
 8002cde:	4629      	mov	r1, r5
 8002ce0:	f7fd fa1c 	bl	800011c <__adddf3>
 8002ce4:	4602      	mov	r2, r0
 8002ce6:	460b      	mov	r3, r1
 8002ce8:	68f9      	ldr	r1, [r7, #12]
 8002cea:	e9c1 2306 	strd	r2, r3, [r1, #24]

    Kalman->P[0][0] += dt * (dt * Kalman->P[1][1] - Kalman->P[0][1] - Kalman->P[1][0] + Kalman->Q_angle);
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8002cfa:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8002cfe:	f7fd fbc3 	bl	8000488 <__aeabi_dmul>
 8002d02:	4602      	mov	r2, r0
 8002d04:	460b      	mov	r3, r1
 8002d06:	4610      	mov	r0, r2
 8002d08:	4619      	mov	r1, r3
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8002d10:	f7fd fa02 	bl	8000118 <__aeabi_dsub>
 8002d14:	4602      	mov	r2, r0
 8002d16:	460b      	mov	r3, r1
 8002d18:	4610      	mov	r0, r2
 8002d1a:	4619      	mov	r1, r3
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8002d22:	f7fd f9f9 	bl	8000118 <__aeabi_dsub>
 8002d26:	4602      	mov	r2, r0
 8002d28:	460b      	mov	r3, r1
 8002d2a:	4610      	mov	r0, r2
 8002d2c:	4619      	mov	r1, r3
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d34:	f7fd f9f2 	bl	800011c <__adddf3>
 8002d38:	4602      	mov	r2, r0
 8002d3a:	460b      	mov	r3, r1
 8002d3c:	4610      	mov	r0, r2
 8002d3e:	4619      	mov	r1, r3
 8002d40:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8002d44:	f7fd fba0 	bl	8000488 <__aeabi_dmul>
 8002d48:	4602      	mov	r2, r0
 8002d4a:	460b      	mov	r3, r1
 8002d4c:	4620      	mov	r0, r4
 8002d4e:	4629      	mov	r1, r5
 8002d50:	f7fd f9e4 	bl	800011c <__adddf3>
 8002d54:	4602      	mov	r2, r0
 8002d56:	460b      	mov	r3, r1
 8002d58:	68f9      	ldr	r1, [r7, #12]
 8002d5a:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    Kalman->P[0][1] -= dt * Kalman->P[1][1];
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8002d6a:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8002d6e:	f7fd fb8b 	bl	8000488 <__aeabi_dmul>
 8002d72:	4602      	mov	r2, r0
 8002d74:	460b      	mov	r3, r1
 8002d76:	4620      	mov	r0, r4
 8002d78:	4629      	mov	r1, r5
 8002d7a:	f7fd f9cd 	bl	8000118 <__aeabi_dsub>
 8002d7e:	4602      	mov	r2, r0
 8002d80:	460b      	mov	r3, r1
 8002d82:	68f9      	ldr	r1, [r7, #12]
 8002d84:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    Kalman->P[1][0] -= dt * Kalman->P[1][1];
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8002d94:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8002d98:	f7fd fb76 	bl	8000488 <__aeabi_dmul>
 8002d9c:	4602      	mov	r2, r0
 8002d9e:	460b      	mov	r3, r1
 8002da0:	4620      	mov	r0, r4
 8002da2:	4629      	mov	r1, r5
 8002da4:	f7fd f9b8 	bl	8000118 <__aeabi_dsub>
 8002da8:	4602      	mov	r2, r0
 8002daa:	460b      	mov	r3, r1
 8002dac:	68f9      	ldr	r1, [r7, #12]
 8002dae:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    Kalman->P[1][1] += Kalman->Q_bias * dt;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8002dbe:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8002dc2:	f7fd fb61 	bl	8000488 <__aeabi_dmul>
 8002dc6:	4602      	mov	r2, r0
 8002dc8:	460b      	mov	r3, r1
 8002dca:	4620      	mov	r0, r4
 8002dcc:	4629      	mov	r1, r5
 8002dce:	f7fd f9a5 	bl	800011c <__adddf3>
 8002dd2:	4602      	mov	r2, r0
 8002dd4:	460b      	mov	r3, r1
 8002dd6:	68f9      	ldr	r1, [r7, #12]
 8002dd8:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

    double S = Kalman->P[0][0] + Kalman->R_measure;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002de8:	f7fd f998 	bl	800011c <__adddf3>
 8002dec:	4602      	mov	r2, r0
 8002dee:	460b      	mov	r3, r1
 8002df0:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    double K[2];
    K[0] = Kalman->P[0][0] / S;
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8002dfa:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002dfe:	f7fd fc6d 	bl	80006dc <__aeabi_ddiv>
 8002e02:	4602      	mov	r2, r0
 8002e04:	460b      	mov	r3, r1
 8002e06:	e9c7 2304 	strd	r2, r3, [r7, #16]
    K[1] = Kalman->P[1][0] / S;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8002e10:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002e14:	f7fd fc62 	bl	80006dc <__aeabi_ddiv>
 8002e18:	4602      	mov	r2, r0
 8002e1a:	460b      	mov	r3, r1
 8002e1c:	e9c7 2306 	strd	r2, r3, [r7, #24]

    double y = newAngle - Kalman->angle;
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8002e26:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002e2a:	f7fd f975 	bl	8000118 <__aeabi_dsub>
 8002e2e:	4602      	mov	r2, r0
 8002e30:	460b      	mov	r3, r1
 8002e32:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    Kalman->angle += K[0] * y;
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8002e3c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002e40:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002e44:	f7fd fb20 	bl	8000488 <__aeabi_dmul>
 8002e48:	4602      	mov	r2, r0
 8002e4a:	460b      	mov	r3, r1
 8002e4c:	4620      	mov	r0, r4
 8002e4e:	4629      	mov	r1, r5
 8002e50:	f7fd f964 	bl	800011c <__adddf3>
 8002e54:	4602      	mov	r2, r0
 8002e56:	460b      	mov	r3, r1
 8002e58:	68f9      	ldr	r1, [r7, #12]
 8002e5a:	e9c1 2306 	strd	r2, r3, [r1, #24]
    Kalman->bias += K[1] * y;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 8002e64:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002e68:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002e6c:	f7fd fb0c 	bl	8000488 <__aeabi_dmul>
 8002e70:	4602      	mov	r2, r0
 8002e72:	460b      	mov	r3, r1
 8002e74:	4620      	mov	r0, r4
 8002e76:	4629      	mov	r1, r5
 8002e78:	f7fd f950 	bl	800011c <__adddf3>
 8002e7c:	4602      	mov	r2, r0
 8002e7e:	460b      	mov	r3, r1
 8002e80:	68f9      	ldr	r1, [r7, #12]
 8002e82:	e9c1 2308 	strd	r2, r3, [r1, #32]

    double P00_temp = Kalman->P[0][0];
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8002e8c:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    double P01_temp = Kalman->P[0][1];
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8002e96:	e9c7 2308 	strd	r2, r3, [r7, #32]

    Kalman->P[0][0] -= K[0] * P00_temp;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8002ea0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002ea4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002ea8:	f7fd faee 	bl	8000488 <__aeabi_dmul>
 8002eac:	4602      	mov	r2, r0
 8002eae:	460b      	mov	r3, r1
 8002eb0:	4620      	mov	r0, r4
 8002eb2:	4629      	mov	r1, r5
 8002eb4:	f7fd f930 	bl	8000118 <__aeabi_dsub>
 8002eb8:	4602      	mov	r2, r0
 8002eba:	460b      	mov	r3, r1
 8002ebc:	68f9      	ldr	r1, [r7, #12]
 8002ebe:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    Kalman->P[0][1] -= K[0] * P01_temp;
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 8002ec8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002ecc:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002ed0:	f7fd fada 	bl	8000488 <__aeabi_dmul>
 8002ed4:	4602      	mov	r2, r0
 8002ed6:	460b      	mov	r3, r1
 8002ed8:	4620      	mov	r0, r4
 8002eda:	4629      	mov	r1, r5
 8002edc:	f7fd f91c 	bl	8000118 <__aeabi_dsub>
 8002ee0:	4602      	mov	r2, r0
 8002ee2:	460b      	mov	r3, r1
 8002ee4:	68f9      	ldr	r1, [r7, #12]
 8002ee6:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    Kalman->P[1][0] -= K[1] * P00_temp;
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 8002ef0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002ef4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002ef8:	f7fd fac6 	bl	8000488 <__aeabi_dmul>
 8002efc:	4602      	mov	r2, r0
 8002efe:	460b      	mov	r3, r1
 8002f00:	4620      	mov	r0, r4
 8002f02:	4629      	mov	r1, r5
 8002f04:	f7fd f908 	bl	8000118 <__aeabi_dsub>
 8002f08:	4602      	mov	r2, r0
 8002f0a:	460b      	mov	r3, r1
 8002f0c:	68f9      	ldr	r1, [r7, #12]
 8002f0e:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    Kalman->P[1][1] -= K[1] * P01_temp;
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 8002f18:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002f1c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002f20:	f7fd fab2 	bl	8000488 <__aeabi_dmul>
 8002f24:	4602      	mov	r2, r0
 8002f26:	460b      	mov	r3, r1
 8002f28:	4620      	mov	r0, r4
 8002f2a:	4629      	mov	r1, r5
 8002f2c:	f7fd f8f4 	bl	8000118 <__aeabi_dsub>
 8002f30:	4602      	mov	r2, r0
 8002f32:	460b      	mov	r3, r1
 8002f34:	68f9      	ldr	r1, [r7, #12]
 8002f36:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

    return Kalman->angle;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
};
 8002f40:	4610      	mov	r0, r2
 8002f42:	4619      	mov	r1, r3
 8002f44:	3748      	adds	r7, #72	; 0x48
 8002f46:	46bd      	mov	sp, r7
 8002f48:	bdb0      	pop	{r4, r5, r7, pc}
	...

08002f4c <SetupPixy>:
		1
};

uint8_t buffer_rx[32];

void SetupPixy(int *pixyChecked) {
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b082      	sub	sp, #8
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
	while(HAL_SPI_Receive(&hspi1, buffer_rx, 1, 1000));
 8002f54:	bf00      	nop
 8002f56:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002f5a:	2201      	movs	r2, #1
 8002f5c:	4912      	ldr	r1, [pc, #72]	; (8002fa8 <SetupPixy+0x5c>)
 8002f5e:	4813      	ldr	r0, [pc, #76]	; (8002fac <SetupPixy+0x60>)
 8002f60:	f002 fdc6 	bl	8005af0 <HAL_SPI_Receive>
 8002f64:	4603      	mov	r3, r0
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d1f5      	bne.n	8002f56 <SetupPixy+0xa>

	HAL_SPI_Transmit(&hspi1, versionRequest, 4, 1000);
 8002f6a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002f6e:	2204      	movs	r2, #4
 8002f70:	490f      	ldr	r1, [pc, #60]	; (8002fb0 <SetupPixy+0x64>)
 8002f72:	480e      	ldr	r0, [pc, #56]	; (8002fac <SetupPixy+0x60>)
 8002f74:	f002 fc80 	bl	8005878 <HAL_SPI_Transmit>
	HAL_Delay(1);
 8002f78:	2001      	movs	r0, #1
 8002f7a:	f000 fceb 	bl	8003954 <HAL_Delay>
	HAL_SPI_Receive(&hspi1, buffer_rx, 8, 1000);
 8002f7e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002f82:	2208      	movs	r2, #8
 8002f84:	4908      	ldr	r1, [pc, #32]	; (8002fa8 <SetupPixy+0x5c>)
 8002f86:	4809      	ldr	r0, [pc, #36]	; (8002fac <SetupPixy+0x60>)
 8002f88:	f002 fdb2 	bl	8005af0 <HAL_SPI_Receive>
	HAL_SPI_Receive(&hspi1, buffer_rx, 22, 1000);
 8002f8c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002f90:	2216      	movs	r2, #22
 8002f92:	4905      	ldr	r1, [pc, #20]	; (8002fa8 <SetupPixy+0x5c>)
 8002f94:	4805      	ldr	r0, [pc, #20]	; (8002fac <SetupPixy+0x60>)
 8002f96:	f002 fdab 	bl	8005af0 <HAL_SPI_Receive>

	*pixyChecked = 1;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	2201      	movs	r2, #1
 8002f9e:	601a      	str	r2, [r3, #0]
}
 8002fa0:	bf00      	nop
 8002fa2:	3708      	adds	r7, #8
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	bd80      	pop	{r7, pc}
 8002fa8:	2000034c 	.word	0x2000034c
 8002fac:	2000036c 	.word	0x2000036c
 8002fb0:	20000168 	.word	0x20000168

08002fb4 <getBallPosition>:

void getBallPosition(BallTransform *ball_transform, int *ballInView) {
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b084      	sub	sp, #16
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
 8002fbc:	6039      	str	r1, [r7, #0]

	// sending the getBlocks request and receiving datas
	// from pixy
	HAL_SPI_Transmit(&hspi1, getBlocks, 6, 1000);
 8002fbe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002fc2:	2206      	movs	r2, #6
 8002fc4:	4952      	ldr	r1, [pc, #328]	; (8003110 <getBallPosition+0x15c>)
 8002fc6:	4853      	ldr	r0, [pc, #332]	; (8003114 <getBallPosition+0x160>)
 8002fc8:	f002 fc56 	bl	8005878 <HAL_SPI_Transmit>
	HAL_Delay(1);
 8002fcc:	2001      	movs	r0, #1
 8002fce:	f000 fcc1 	bl	8003954 <HAL_Delay>
	HAL_SPI_Receive(&hspi1, buffer_rx, 8, 1000); //garbage values
 8002fd2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002fd6:	2208      	movs	r2, #8
 8002fd8:	494f      	ldr	r1, [pc, #316]	; (8003118 <getBallPosition+0x164>)
 8002fda:	484e      	ldr	r0, [pc, #312]	; (8003114 <getBallPosition+0x160>)
 8002fdc:	f002 fd88 	bl	8005af0 <HAL_SPI_Receive>
	HAL_SPI_Receive(&hspi1, buffer_rx, 18, 1000);
 8002fe0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002fe4:	2212      	movs	r2, #18
 8002fe6:	494c      	ldr	r1, [pc, #304]	; (8003118 <getBallPosition+0x164>)
 8002fe8:	484a      	ldr	r0, [pc, #296]	; (8003114 <getBallPosition+0x160>)
 8002fea:	f002 fd81 	bl	8005af0 <HAL_SPI_Receive>

	// checking if the length received data is 14 and the
	// ball is in the view and return from the function if it's not
	if (buffer_rx[3] != 14) {
 8002fee:	4b4a      	ldr	r3, [pc, #296]	; (8003118 <getBallPosition+0x164>)
 8002ff0:	78db      	ldrb	r3, [r3, #3]
 8002ff2:	2b0e      	cmp	r3, #14
 8002ff4:	d003      	beq.n	8002ffe <getBallPosition+0x4a>
		*ballInView = 0;
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	601a      	str	r2, [r3, #0]
		return;
 8002ffc:	e084      	b.n	8003108 <getBallPosition+0x154>
	}

	// saving the received data into the stuct
	ball_transform->ballx = buffer_rx[8] + buffer_rx[9] * 255;
 8002ffe:	4b46      	ldr	r3, [pc, #280]	; (8003118 <getBallPosition+0x164>)
 8003000:	7a1b      	ldrb	r3, [r3, #8]
 8003002:	4619      	mov	r1, r3
 8003004:	4b44      	ldr	r3, [pc, #272]	; (8003118 <getBallPosition+0x164>)
 8003006:	7a5b      	ldrb	r3, [r3, #9]
 8003008:	461a      	mov	r2, r3
 800300a:	4613      	mov	r3, r2
 800300c:	021b      	lsls	r3, r3, #8
 800300e:	1a9b      	subs	r3, r3, r2
 8003010:	18ca      	adds	r2, r1, r3
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	601a      	str	r2, [r3, #0]
	ball_transform->bally = buffer_rx[10] + buffer_rx[11] * 255;
 8003016:	4b40      	ldr	r3, [pc, #256]	; (8003118 <getBallPosition+0x164>)
 8003018:	7a9b      	ldrb	r3, [r3, #10]
 800301a:	4619      	mov	r1, r3
 800301c:	4b3e      	ldr	r3, [pc, #248]	; (8003118 <getBallPosition+0x164>)
 800301e:	7adb      	ldrb	r3, [r3, #11]
 8003020:	461a      	mov	r2, r3
 8003022:	4613      	mov	r3, r2
 8003024:	021b      	lsls	r3, r3, #8
 8003026:	1a9b      	subs	r3, r3, r2
 8003028:	18ca      	adds	r2, r1, r3
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	605a      	str	r2, [r3, #4]
	ball_transform->ballWidth = buffer_rx[12] + buffer_rx[13] * 255;
 800302e:	4b3a      	ldr	r3, [pc, #232]	; (8003118 <getBallPosition+0x164>)
 8003030:	7b1b      	ldrb	r3, [r3, #12]
 8003032:	4619      	mov	r1, r3
 8003034:	4b38      	ldr	r3, [pc, #224]	; (8003118 <getBallPosition+0x164>)
 8003036:	7b5b      	ldrb	r3, [r3, #13]
 8003038:	461a      	mov	r2, r3
 800303a:	4613      	mov	r3, r2
 800303c:	021b      	lsls	r3, r3, #8
 800303e:	1a9b      	subs	r3, r3, r2
 8003040:	18ca      	adds	r2, r1, r3
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	60da      	str	r2, [r3, #12]
	ball_transform->ballHeight = buffer_rx[14] + buffer_rx[15] * 255;
 8003046:	4b34      	ldr	r3, [pc, #208]	; (8003118 <getBallPosition+0x164>)
 8003048:	7b9b      	ldrb	r3, [r3, #14]
 800304a:	4619      	mov	r1, r3
 800304c:	4b32      	ldr	r3, [pc, #200]	; (8003118 <getBallPosition+0x164>)
 800304e:	7bdb      	ldrb	r3, [r3, #15]
 8003050:	461a      	mov	r2, r3
 8003052:	4613      	mov	r3, r2
 8003054:	021b      	lsls	r3, r3, #8
 8003056:	1a9b      	subs	r3, r3, r2
 8003058:	18ca      	adds	r2, r1, r3
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	609a      	str	r2, [r3, #8]

	// cropping the received ball position to be only in the mirror
	if (!(ball_transform->ballx > PIXY_X_MIN && ball_transform->ballx < PIXY_X_MAX)) {
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	2b53      	cmp	r3, #83	; 0x53
 8003064:	dd03      	ble.n	800306e <getBallPosition+0xba>
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	2be5      	cmp	r3, #229	; 0xe5
 800306c:	dd03      	ble.n	8003076 <getBallPosition+0xc2>
		*ballInView = 0;
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	2200      	movs	r2, #0
 8003072:	601a      	str	r2, [r3, #0]
		return;
 8003074:	e048      	b.n	8003108 <getBallPosition+0x154>
	}
	if (!(ball_transform->bally > PIXY_Y_MIN && ball_transform->bally < PIXY_Y_MAX)) {
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	685b      	ldr	r3, [r3, #4]
 800307a:	2b33      	cmp	r3, #51	; 0x33
 800307c:	dd03      	ble.n	8003086 <getBallPosition+0xd2>
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	685b      	ldr	r3, [r3, #4]
 8003082:	2bc4      	cmp	r3, #196	; 0xc4
 8003084:	dd03      	ble.n	800308e <getBallPosition+0xda>
		*ballInView = 0;
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	2200      	movs	r2, #0
 800308a:	601a      	str	r2, [r3, #0]
		return;
 800308c:	e03c      	b.n	8003108 <getBallPosition+0x154>
	}

	*ballInView = 1;
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	2201      	movs	r2, #1
 8003092:	601a      	str	r2, [r3, #0]

	// changing the center of the image from the top left corner to the center of mirror
	if (ball_transform->ballx >= PIXY_X_ZERO) {
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	2b9d      	cmp	r3, #157	; 0x9d
 800309a:	dd06      	ble.n	80030aa <getBallPosition+0xf6>
		ball_transform->ballx -= PIXY_X_ZERO;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f1a3 029e 	sub.w	r2, r3, #158	; 0x9e
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	601a      	str	r2, [r3, #0]
 80030a8:	e005      	b.n	80030b6 <getBallPosition+0x102>
	}else {
		ball_transform->ballx = -1 * (PIXY_X_ZERO - ball_transform->ballx);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f1a3 029e 	sub.w	r2, r3, #158	; 0x9e
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	601a      	str	r2, [r3, #0]
	}

	if (ball_transform->bally >= PIXY_Y_ZERO) {
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	685b      	ldr	r3, [r3, #4]
 80030ba:	2b79      	cmp	r3, #121	; 0x79
 80030bc:	dd06      	ble.n	80030cc <getBallPosition+0x118>
		ball_transform->bally = -1 * (PIXY_Y_ZERO - ball_transform->bally);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	685b      	ldr	r3, [r3, #4]
 80030c2:	f1a3 027a 	sub.w	r2, r3, #122	; 0x7a
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	605a      	str	r2, [r3, #4]
 80030ca:	e005      	b.n	80030d8 <getBallPosition+0x124>
	}else {
		ball_transform->bally -= PIXY_Y_ZERO;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	685b      	ldr	r3, [r3, #4]
 80030d0:	f1a3 027a 	sub.w	r2, r3, #122	; 0x7a
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	605a      	str	r2, [r3, #4]
	}

	ball_transform->ballx *= -1;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	425a      	negs	r2, r3
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	601a      	str	r2, [r3, #0]
	ball_transform->bally *= -1;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	685b      	ldr	r3, [r3, #4]
 80030e6:	425a      	negs	r2, r3
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	605a      	str	r2, [r3, #4]

	for (int i = 0; i < 26; i++) {
 80030ec:	2300      	movs	r3, #0
 80030ee:	60fb      	str	r3, [r7, #12]
 80030f0:	e007      	b.n	8003102 <getBallPosition+0x14e>
		buffer_rx[i] = 0;
 80030f2:	4a09      	ldr	r2, [pc, #36]	; (8003118 <getBallPosition+0x164>)
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	4413      	add	r3, r2
 80030f8:	2200      	movs	r2, #0
 80030fa:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 26; i++) {
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	3301      	adds	r3, #1
 8003100:	60fb      	str	r3, [r7, #12]
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	2b19      	cmp	r3, #25
 8003106:	ddf4      	ble.n	80030f2 <getBallPosition+0x13e>
	}
}
 8003108:	3710      	adds	r7, #16
 800310a:	46bd      	mov	sp, r7
 800310c:	bd80      	pop	{r7, pc}
 800310e:	bf00      	nop
 8003110:	2000016c 	.word	0x2000016c
 8003114:	2000036c 	.word	0x2000036c
 8003118:	2000034c 	.word	0x2000034c

0800311c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8003120:	4b17      	ldr	r3, [pc, #92]	; (8003180 <MX_SPI1_Init+0x64>)
 8003122:	4a18      	ldr	r2, [pc, #96]	; (8003184 <MX_SPI1_Init+0x68>)
 8003124:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003126:	4b16      	ldr	r3, [pc, #88]	; (8003180 <MX_SPI1_Init+0x64>)
 8003128:	f44f 7282 	mov.w	r2, #260	; 0x104
 800312c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800312e:	4b14      	ldr	r3, [pc, #80]	; (8003180 <MX_SPI1_Init+0x64>)
 8003130:	2200      	movs	r2, #0
 8003132:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003134:	4b12      	ldr	r3, [pc, #72]	; (8003180 <MX_SPI1_Init+0x64>)
 8003136:	2200      	movs	r2, #0
 8003138:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800313a:	4b11      	ldr	r3, [pc, #68]	; (8003180 <MX_SPI1_Init+0x64>)
 800313c:	2200      	movs	r2, #0
 800313e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003140:	4b0f      	ldr	r3, [pc, #60]	; (8003180 <MX_SPI1_Init+0x64>)
 8003142:	2200      	movs	r2, #0
 8003144:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003146:	4b0e      	ldr	r3, [pc, #56]	; (8003180 <MX_SPI1_Init+0x64>)
 8003148:	f44f 7200 	mov.w	r2, #512	; 0x200
 800314c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800314e:	4b0c      	ldr	r3, [pc, #48]	; (8003180 <MX_SPI1_Init+0x64>)
 8003150:	2210      	movs	r2, #16
 8003152:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003154:	4b0a      	ldr	r3, [pc, #40]	; (8003180 <MX_SPI1_Init+0x64>)
 8003156:	2200      	movs	r2, #0
 8003158:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800315a:	4b09      	ldr	r3, [pc, #36]	; (8003180 <MX_SPI1_Init+0x64>)
 800315c:	2200      	movs	r2, #0
 800315e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003160:	4b07      	ldr	r3, [pc, #28]	; (8003180 <MX_SPI1_Init+0x64>)
 8003162:	2200      	movs	r2, #0
 8003164:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8003166:	4b06      	ldr	r3, [pc, #24]	; (8003180 <MX_SPI1_Init+0x64>)
 8003168:	220a      	movs	r2, #10
 800316a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800316c:	4804      	ldr	r0, [pc, #16]	; (8003180 <MX_SPI1_Init+0x64>)
 800316e:	f002 faff 	bl	8005770 <HAL_SPI_Init>
 8003172:	4603      	mov	r3, r0
 8003174:	2b00      	cmp	r3, #0
 8003176:	d001      	beq.n	800317c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8003178:	f7ff fb2f 	bl	80027da <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800317c:	bf00      	nop
 800317e:	bd80      	pop	{r7, pc}
 8003180:	2000036c 	.word	0x2000036c
 8003184:	40013000 	.word	0x40013000

08003188 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b08a      	sub	sp, #40	; 0x28
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003190:	f107 0314 	add.w	r3, r7, #20
 8003194:	2200      	movs	r2, #0
 8003196:	601a      	str	r2, [r3, #0]
 8003198:	605a      	str	r2, [r3, #4]
 800319a:	609a      	str	r2, [r3, #8]
 800319c:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4a22      	ldr	r2, [pc, #136]	; (800322c <HAL_SPI_MspInit+0xa4>)
 80031a4:	4293      	cmp	r3, r2
 80031a6:	d13d      	bne.n	8003224 <HAL_SPI_MspInit+0x9c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80031a8:	4b21      	ldr	r3, [pc, #132]	; (8003230 <HAL_SPI_MspInit+0xa8>)
 80031aa:	699b      	ldr	r3, [r3, #24]
 80031ac:	4a20      	ldr	r2, [pc, #128]	; (8003230 <HAL_SPI_MspInit+0xa8>)
 80031ae:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80031b2:	6193      	str	r3, [r2, #24]
 80031b4:	4b1e      	ldr	r3, [pc, #120]	; (8003230 <HAL_SPI_MspInit+0xa8>)
 80031b6:	699b      	ldr	r3, [r3, #24]
 80031b8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80031bc:	613b      	str	r3, [r7, #16]
 80031be:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80031c0:	4b1b      	ldr	r3, [pc, #108]	; (8003230 <HAL_SPI_MspInit+0xa8>)
 80031c2:	699b      	ldr	r3, [r3, #24]
 80031c4:	4a1a      	ldr	r2, [pc, #104]	; (8003230 <HAL_SPI_MspInit+0xa8>)
 80031c6:	f043 0308 	orr.w	r3, r3, #8
 80031ca:	6193      	str	r3, [r2, #24]
 80031cc:	4b18      	ldr	r3, [pc, #96]	; (8003230 <HAL_SPI_MspInit+0xa8>)
 80031ce:	699b      	ldr	r3, [r3, #24]
 80031d0:	f003 0308 	and.w	r3, r3, #8
 80031d4:	60fb      	str	r3, [r7, #12]
 80031d6:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 80031d8:	2328      	movs	r3, #40	; 0x28
 80031da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031dc:	2302      	movs	r3, #2
 80031de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80031e0:	2303      	movs	r3, #3
 80031e2:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80031e4:	f107 0314 	add.w	r3, r7, #20
 80031e8:	4619      	mov	r1, r3
 80031ea:	4812      	ldr	r0, [pc, #72]	; (8003234 <HAL_SPI_MspInit+0xac>)
 80031ec:	f000 fce4 	bl	8003bb8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80031f0:	2310      	movs	r3, #16
 80031f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80031f4:	2300      	movs	r3, #0
 80031f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031f8:	2300      	movs	r3, #0
 80031fa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80031fc:	f107 0314 	add.w	r3, r7, #20
 8003200:	4619      	mov	r1, r3
 8003202:	480c      	ldr	r0, [pc, #48]	; (8003234 <HAL_SPI_MspInit+0xac>)
 8003204:	f000 fcd8 	bl	8003bb8 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_SPI1_ENABLE();
 8003208:	4b0b      	ldr	r3, [pc, #44]	; (8003238 <HAL_SPI_MspInit+0xb0>)
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	627b      	str	r3, [r7, #36]	; 0x24
 800320e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003210:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8003214:	627b      	str	r3, [r7, #36]	; 0x24
 8003216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003218:	f043 0301 	orr.w	r3, r3, #1
 800321c:	627b      	str	r3, [r7, #36]	; 0x24
 800321e:	4a06      	ldr	r2, [pc, #24]	; (8003238 <HAL_SPI_MspInit+0xb0>)
 8003220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003222:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8003224:	bf00      	nop
 8003226:	3728      	adds	r7, #40	; 0x28
 8003228:	46bd      	mov	sp, r7
 800322a:	bd80      	pop	{r7, pc}
 800322c:	40013000 	.word	0x40013000
 8003230:	40021000 	.word	0x40021000
 8003234:	40010c00 	.word	0x40010c00
 8003238:	40010000 	.word	0x40010000

0800323c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800323c:	b480      	push	{r7}
 800323e:	b085      	sub	sp, #20
 8003240:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8003242:	4b15      	ldr	r3, [pc, #84]	; (8003298 <HAL_MspInit+0x5c>)
 8003244:	699b      	ldr	r3, [r3, #24]
 8003246:	4a14      	ldr	r2, [pc, #80]	; (8003298 <HAL_MspInit+0x5c>)
 8003248:	f043 0301 	orr.w	r3, r3, #1
 800324c:	6193      	str	r3, [r2, #24]
 800324e:	4b12      	ldr	r3, [pc, #72]	; (8003298 <HAL_MspInit+0x5c>)
 8003250:	699b      	ldr	r3, [r3, #24]
 8003252:	f003 0301 	and.w	r3, r3, #1
 8003256:	60bb      	str	r3, [r7, #8]
 8003258:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800325a:	4b0f      	ldr	r3, [pc, #60]	; (8003298 <HAL_MspInit+0x5c>)
 800325c:	69db      	ldr	r3, [r3, #28]
 800325e:	4a0e      	ldr	r2, [pc, #56]	; (8003298 <HAL_MspInit+0x5c>)
 8003260:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003264:	61d3      	str	r3, [r2, #28]
 8003266:	4b0c      	ldr	r3, [pc, #48]	; (8003298 <HAL_MspInit+0x5c>)
 8003268:	69db      	ldr	r3, [r3, #28]
 800326a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800326e:	607b      	str	r3, [r7, #4]
 8003270:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8003272:	4b0a      	ldr	r3, [pc, #40]	; (800329c <HAL_MspInit+0x60>)
 8003274:	685b      	ldr	r3, [r3, #4]
 8003276:	60fb      	str	r3, [r7, #12]
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800327e:	60fb      	str	r3, [r7, #12]
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003286:	60fb      	str	r3, [r7, #12]
 8003288:	4a04      	ldr	r2, [pc, #16]	; (800329c <HAL_MspInit+0x60>)
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800328e:	bf00      	nop
 8003290:	3714      	adds	r7, #20
 8003292:	46bd      	mov	sp, r7
 8003294:	bc80      	pop	{r7}
 8003296:	4770      	bx	lr
 8003298:	40021000 	.word	0x40021000
 800329c:	40010000 	.word	0x40010000

080032a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80032a0:	b480      	push	{r7}
 80032a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80032a4:	bf00      	nop
 80032a6:	e7fd      	b.n	80032a4 <NMI_Handler+0x4>

080032a8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80032a8:	b480      	push	{r7}
 80032aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80032ac:	bf00      	nop
 80032ae:	e7fd      	b.n	80032ac <HardFault_Handler+0x4>

080032b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80032b0:	b480      	push	{r7}
 80032b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80032b4:	bf00      	nop
 80032b6:	e7fd      	b.n	80032b4 <MemManage_Handler+0x4>

080032b8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80032b8:	b480      	push	{r7}
 80032ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80032bc:	bf00      	nop
 80032be:	e7fd      	b.n	80032bc <BusFault_Handler+0x4>

080032c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80032c0:	b480      	push	{r7}
 80032c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80032c4:	bf00      	nop
 80032c6:	e7fd      	b.n	80032c4 <UsageFault_Handler+0x4>

080032c8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80032c8:	b480      	push	{r7}
 80032ca:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80032cc:	bf00      	nop
 80032ce:	46bd      	mov	sp, r7
 80032d0:	bc80      	pop	{r7}
 80032d2:	4770      	bx	lr

080032d4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80032d4:	b480      	push	{r7}
 80032d6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80032d8:	bf00      	nop
 80032da:	46bd      	mov	sp, r7
 80032dc:	bc80      	pop	{r7}
 80032de:	4770      	bx	lr

080032e0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80032e0:	b480      	push	{r7}
 80032e2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80032e4:	bf00      	nop
 80032e6:	46bd      	mov	sp, r7
 80032e8:	bc80      	pop	{r7}
 80032ea:	4770      	bx	lr

080032ec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80032f0:	f000 fb14 	bl	800391c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80032f4:	bf00      	nop
 80032f6:	bd80      	pop	{r7, pc}

080032f8 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80032fc:	2001      	movs	r0, #1
 80032fe:	f000 fe0f 	bl	8003f20 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8003302:	bf00      	nop
 8003304:	bd80      	pop	{r7, pc}

08003306 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8003306:	b580      	push	{r7, lr}
 8003308:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 800330a:	2002      	movs	r0, #2
 800330c:	f000 fe08 	bl	8003f20 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8003310:	bf00      	nop
 8003312:	bd80      	pop	{r7, pc}

08003314 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8003318:	2004      	movs	r0, #4
 800331a:	f000 fe01 	bl	8003f20 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 800331e:	bf00      	nop
 8003320:	bd80      	pop	{r7, pc}

08003322 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8003322:	b580      	push	{r7, lr}
 8003324:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8003326:	2008      	movs	r0, #8
 8003328:	f000 fdfa 	bl	8003f20 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 800332c:	bf00      	nop
 800332e:	bd80      	pop	{r7, pc}

08003330 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003334:	4802      	ldr	r0, [pc, #8]	; (8003340 <TIM4_IRQHandler+0x10>)
 8003336:	f003 f96d 	bl	8006614 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800333a:	bf00      	nop
 800333c:	bd80      	pop	{r7, pc}
 800333e:	bf00      	nop
 8003340:	2000049c 	.word	0x2000049c

08003344 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003344:	b480      	push	{r7}
 8003346:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003348:	bf00      	nop
 800334a:	46bd      	mov	sp, r7
 800334c:	bc80      	pop	{r7}
 800334e:	4770      	bx	lr

08003350 <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b096      	sub	sp, #88	; 0x58
 8003354:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003356:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800335a:	2200      	movs	r2, #0
 800335c:	601a      	str	r2, [r3, #0]
 800335e:	605a      	str	r2, [r3, #4]
 8003360:	609a      	str	r2, [r3, #8]
 8003362:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003364:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003368:	2200      	movs	r2, #0
 800336a:	601a      	str	r2, [r3, #0]
 800336c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800336e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003372:	2200      	movs	r2, #0
 8003374:	601a      	str	r2, [r3, #0]
 8003376:	605a      	str	r2, [r3, #4]
 8003378:	609a      	str	r2, [r3, #8]
 800337a:	60da      	str	r2, [r3, #12]
 800337c:	611a      	str	r2, [r3, #16]
 800337e:	615a      	str	r2, [r3, #20]
 8003380:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003382:	1d3b      	adds	r3, r7, #4
 8003384:	2220      	movs	r2, #32
 8003386:	2100      	movs	r1, #0
 8003388:	4618      	mov	r0, r3
 800338a:	f003 ff56 	bl	800723a <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800338e:	4b4a      	ldr	r3, [pc, #296]	; (80034b8 <MX_TIM1_Init+0x168>)
 8003390:	4a4a      	ldr	r2, [pc, #296]	; (80034bc <MX_TIM1_Init+0x16c>)
 8003392:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 47;
 8003394:	4b48      	ldr	r3, [pc, #288]	; (80034b8 <MX_TIM1_Init+0x168>)
 8003396:	222f      	movs	r2, #47	; 0x2f
 8003398:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800339a:	4b47      	ldr	r3, [pc, #284]	; (80034b8 <MX_TIM1_Init+0x168>)
 800339c:	2200      	movs	r2, #0
 800339e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 99;
 80033a0:	4b45      	ldr	r3, [pc, #276]	; (80034b8 <MX_TIM1_Init+0x168>)
 80033a2:	2263      	movs	r2, #99	; 0x63
 80033a4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80033a6:	4b44      	ldr	r3, [pc, #272]	; (80034b8 <MX_TIM1_Init+0x168>)
 80033a8:	2200      	movs	r2, #0
 80033aa:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80033ac:	4b42      	ldr	r3, [pc, #264]	; (80034b8 <MX_TIM1_Init+0x168>)
 80033ae:	2200      	movs	r2, #0
 80033b0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80033b2:	4b41      	ldr	r3, [pc, #260]	; (80034b8 <MX_TIM1_Init+0x168>)
 80033b4:	2200      	movs	r2, #0
 80033b6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80033b8:	483f      	ldr	r0, [pc, #252]	; (80034b8 <MX_TIM1_Init+0x168>)
 80033ba:	f002 ff45 	bl	8006248 <HAL_TIM_Base_Init>
 80033be:	4603      	mov	r3, r0
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d001      	beq.n	80033c8 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 80033c4:	f7ff fa09 	bl	80027da <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80033c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80033cc:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80033ce:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80033d2:	4619      	mov	r1, r3
 80033d4:	4838      	ldr	r0, [pc, #224]	; (80034b8 <MX_TIM1_Init+0x168>)
 80033d6:	f003 fae3 	bl	80069a0 <HAL_TIM_ConfigClockSource>
 80033da:	4603      	mov	r3, r0
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d001      	beq.n	80033e4 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 80033e0:	f7ff f9fb 	bl	80027da <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80033e4:	4834      	ldr	r0, [pc, #208]	; (80034b8 <MX_TIM1_Init+0x168>)
 80033e6:	f003 f81b 	bl	8006420 <HAL_TIM_PWM_Init>
 80033ea:	4603      	mov	r3, r0
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d001      	beq.n	80033f4 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 80033f0:	f7ff f9f3 	bl	80027da <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80033f4:	2300      	movs	r3, #0
 80033f6:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80033f8:	2300      	movs	r3, #0
 80033fa:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80033fc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003400:	4619      	mov	r1, r3
 8003402:	482d      	ldr	r0, [pc, #180]	; (80034b8 <MX_TIM1_Init+0x168>)
 8003404:	f003 fe58 	bl	80070b8 <HAL_TIMEx_MasterConfigSynchronization>
 8003408:	4603      	mov	r3, r0
 800340a:	2b00      	cmp	r3, #0
 800340c:	d001      	beq.n	8003412 <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 800340e:	f7ff f9e4 	bl	80027da <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003412:	2360      	movs	r3, #96	; 0x60
 8003414:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8003416:	2300      	movs	r3, #0
 8003418:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800341a:	2300      	movs	r3, #0
 800341c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800341e:	2300      	movs	r3, #0
 8003420:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003422:	2300      	movs	r3, #0
 8003424:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003426:	2300      	movs	r3, #0
 8003428:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800342a:	2300      	movs	r3, #0
 800342c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800342e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003432:	2204      	movs	r2, #4
 8003434:	4619      	mov	r1, r3
 8003436:	4820      	ldr	r0, [pc, #128]	; (80034b8 <MX_TIM1_Init+0x168>)
 8003438:	f003 f9f4 	bl	8006824 <HAL_TIM_PWM_ConfigChannel>
 800343c:	4603      	mov	r3, r0
 800343e:	2b00      	cmp	r3, #0
 8003440:	d001      	beq.n	8003446 <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8003442:	f7ff f9ca 	bl	80027da <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003446:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800344a:	2208      	movs	r2, #8
 800344c:	4619      	mov	r1, r3
 800344e:	481a      	ldr	r0, [pc, #104]	; (80034b8 <MX_TIM1_Init+0x168>)
 8003450:	f003 f9e8 	bl	8006824 <HAL_TIM_PWM_ConfigChannel>
 8003454:	4603      	mov	r3, r0
 8003456:	2b00      	cmp	r3, #0
 8003458:	d001      	beq.n	800345e <MX_TIM1_Init+0x10e>
  {
    Error_Handler();
 800345a:	f7ff f9be 	bl	80027da <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800345e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003462:	220c      	movs	r2, #12
 8003464:	4619      	mov	r1, r3
 8003466:	4814      	ldr	r0, [pc, #80]	; (80034b8 <MX_TIM1_Init+0x168>)
 8003468:	f003 f9dc 	bl	8006824 <HAL_TIM_PWM_ConfigChannel>
 800346c:	4603      	mov	r3, r0
 800346e:	2b00      	cmp	r3, #0
 8003470:	d001      	beq.n	8003476 <MX_TIM1_Init+0x126>
  {
    Error_Handler();
 8003472:	f7ff f9b2 	bl	80027da <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003476:	2300      	movs	r3, #0
 8003478:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800347a:	2300      	movs	r3, #0
 800347c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800347e:	2300      	movs	r3, #0
 8003480:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003482:	2300      	movs	r3, #0
 8003484:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003486:	2300      	movs	r3, #0
 8003488:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800348a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800348e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003490:	2300      	movs	r3, #0
 8003492:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003494:	1d3b      	adds	r3, r7, #4
 8003496:	4619      	mov	r1, r3
 8003498:	4807      	ldr	r0, [pc, #28]	; (80034b8 <MX_TIM1_Init+0x168>)
 800349a:	f003 fe6b 	bl	8007174 <HAL_TIMEx_ConfigBreakDeadTime>
 800349e:	4603      	mov	r3, r0
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d001      	beq.n	80034a8 <MX_TIM1_Init+0x158>
  {
    Error_Handler();
 80034a4:	f7ff f999 	bl	80027da <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80034a8:	4803      	ldr	r0, [pc, #12]	; (80034b8 <MX_TIM1_Init+0x168>)
 80034aa:	f000 f979 	bl	80037a0 <HAL_TIM_MspPostInit>

}
 80034ae:	bf00      	nop
 80034b0:	3758      	adds	r7, #88	; 0x58
 80034b2:	46bd      	mov	sp, r7
 80034b4:	bd80      	pop	{r7, pc}
 80034b6:	bf00      	nop
 80034b8:	200003c4 	.word	0x200003c4
 80034bc:	40012c00 	.word	0x40012c00

080034c0 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b08e      	sub	sp, #56	; 0x38
 80034c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80034c6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80034ca:	2200      	movs	r2, #0
 80034cc:	601a      	str	r2, [r3, #0]
 80034ce:	605a      	str	r2, [r3, #4]
 80034d0:	609a      	str	r2, [r3, #8]
 80034d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80034d4:	f107 0320 	add.w	r3, r7, #32
 80034d8:	2200      	movs	r2, #0
 80034da:	601a      	str	r2, [r3, #0]
 80034dc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80034de:	1d3b      	adds	r3, r7, #4
 80034e0:	2200      	movs	r2, #0
 80034e2:	601a      	str	r2, [r3, #0]
 80034e4:	605a      	str	r2, [r3, #4]
 80034e6:	609a      	str	r2, [r3, #8]
 80034e8:	60da      	str	r2, [r3, #12]
 80034ea:	611a      	str	r2, [r3, #16]
 80034ec:	615a      	str	r2, [r3, #20]
 80034ee:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80034f0:	4b2c      	ldr	r3, [pc, #176]	; (80035a4 <MX_TIM2_Init+0xe4>)
 80034f2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80034f6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 47;
 80034f8:	4b2a      	ldr	r3, [pc, #168]	; (80035a4 <MX_TIM2_Init+0xe4>)
 80034fa:	222f      	movs	r2, #47	; 0x2f
 80034fc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80034fe:	4b29      	ldr	r3, [pc, #164]	; (80035a4 <MX_TIM2_Init+0xe4>)
 8003500:	2200      	movs	r2, #0
 8003502:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 99;
 8003504:	4b27      	ldr	r3, [pc, #156]	; (80035a4 <MX_TIM2_Init+0xe4>)
 8003506:	2263      	movs	r2, #99	; 0x63
 8003508:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800350a:	4b26      	ldr	r3, [pc, #152]	; (80035a4 <MX_TIM2_Init+0xe4>)
 800350c:	2200      	movs	r2, #0
 800350e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003510:	4b24      	ldr	r3, [pc, #144]	; (80035a4 <MX_TIM2_Init+0xe4>)
 8003512:	2200      	movs	r2, #0
 8003514:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003516:	4823      	ldr	r0, [pc, #140]	; (80035a4 <MX_TIM2_Init+0xe4>)
 8003518:	f002 fe96 	bl	8006248 <HAL_TIM_Base_Init>
 800351c:	4603      	mov	r3, r0
 800351e:	2b00      	cmp	r3, #0
 8003520:	d001      	beq.n	8003526 <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 8003522:	f7ff f95a 	bl	80027da <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003526:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800352a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800352c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003530:	4619      	mov	r1, r3
 8003532:	481c      	ldr	r0, [pc, #112]	; (80035a4 <MX_TIM2_Init+0xe4>)
 8003534:	f003 fa34 	bl	80069a0 <HAL_TIM_ConfigClockSource>
 8003538:	4603      	mov	r3, r0
 800353a:	2b00      	cmp	r3, #0
 800353c:	d001      	beq.n	8003542 <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 800353e:	f7ff f94c 	bl	80027da <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8003542:	4818      	ldr	r0, [pc, #96]	; (80035a4 <MX_TIM2_Init+0xe4>)
 8003544:	f002 ff6c 	bl	8006420 <HAL_TIM_PWM_Init>
 8003548:	4603      	mov	r3, r0
 800354a:	2b00      	cmp	r3, #0
 800354c:	d001      	beq.n	8003552 <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 800354e:	f7ff f944 	bl	80027da <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003552:	2300      	movs	r3, #0
 8003554:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003556:	2300      	movs	r3, #0
 8003558:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800355a:	f107 0320 	add.w	r3, r7, #32
 800355e:	4619      	mov	r1, r3
 8003560:	4810      	ldr	r0, [pc, #64]	; (80035a4 <MX_TIM2_Init+0xe4>)
 8003562:	f003 fda9 	bl	80070b8 <HAL_TIMEx_MasterConfigSynchronization>
 8003566:	4603      	mov	r3, r0
 8003568:	2b00      	cmp	r3, #0
 800356a:	d001      	beq.n	8003570 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 800356c:	f7ff f935 	bl	80027da <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003570:	2360      	movs	r3, #96	; 0x60
 8003572:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8003574:	2300      	movs	r3, #0
 8003576:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003578:	2300      	movs	r3, #0
 800357a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800357c:	2300      	movs	r3, #0
 800357e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003580:	1d3b      	adds	r3, r7, #4
 8003582:	220c      	movs	r2, #12
 8003584:	4619      	mov	r1, r3
 8003586:	4807      	ldr	r0, [pc, #28]	; (80035a4 <MX_TIM2_Init+0xe4>)
 8003588:	f003 f94c 	bl	8006824 <HAL_TIM_PWM_ConfigChannel>
 800358c:	4603      	mov	r3, r0
 800358e:	2b00      	cmp	r3, #0
 8003590:	d001      	beq.n	8003596 <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 8003592:	f7ff f922 	bl	80027da <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8003596:	4803      	ldr	r0, [pc, #12]	; (80035a4 <MX_TIM2_Init+0xe4>)
 8003598:	f000 f902 	bl	80037a0 <HAL_TIM_MspPostInit>

}
 800359c:	bf00      	nop
 800359e:	3738      	adds	r7, #56	; 0x38
 80035a0:	46bd      	mov	sp, r7
 80035a2:	bd80      	pop	{r7, pc}
 80035a4:	2000040c 	.word	0x2000040c

080035a8 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b086      	sub	sp, #24
 80035ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80035ae:	f107 0308 	add.w	r3, r7, #8
 80035b2:	2200      	movs	r2, #0
 80035b4:	601a      	str	r2, [r3, #0]
 80035b6:	605a      	str	r2, [r3, #4]
 80035b8:	609a      	str	r2, [r3, #8]
 80035ba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80035bc:	463b      	mov	r3, r7
 80035be:	2200      	movs	r2, #0
 80035c0:	601a      	str	r2, [r3, #0]
 80035c2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80035c4:	4b1d      	ldr	r3, [pc, #116]	; (800363c <MX_TIM3_Init+0x94>)
 80035c6:	4a1e      	ldr	r2, [pc, #120]	; (8003640 <MX_TIM3_Init+0x98>)
 80035c8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 47;
 80035ca:	4b1c      	ldr	r3, [pc, #112]	; (800363c <MX_TIM3_Init+0x94>)
 80035cc:	222f      	movs	r2, #47	; 0x2f
 80035ce:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80035d0:	4b1a      	ldr	r3, [pc, #104]	; (800363c <MX_TIM3_Init+0x94>)
 80035d2:	2200      	movs	r2, #0
 80035d4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0xffff-1;
 80035d6:	4b19      	ldr	r3, [pc, #100]	; (800363c <MX_TIM3_Init+0x94>)
 80035d8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80035dc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80035de:	4b17      	ldr	r3, [pc, #92]	; (800363c <MX_TIM3_Init+0x94>)
 80035e0:	2200      	movs	r2, #0
 80035e2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80035e4:	4b15      	ldr	r3, [pc, #84]	; (800363c <MX_TIM3_Init+0x94>)
 80035e6:	2200      	movs	r2, #0
 80035e8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80035ea:	4814      	ldr	r0, [pc, #80]	; (800363c <MX_TIM3_Init+0x94>)
 80035ec:	f002 fe2c 	bl	8006248 <HAL_TIM_Base_Init>
 80035f0:	4603      	mov	r3, r0
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d001      	beq.n	80035fa <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 80035f6:	f7ff f8f0 	bl	80027da <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80035fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80035fe:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003600:	f107 0308 	add.w	r3, r7, #8
 8003604:	4619      	mov	r1, r3
 8003606:	480d      	ldr	r0, [pc, #52]	; (800363c <MX_TIM3_Init+0x94>)
 8003608:	f003 f9ca 	bl	80069a0 <HAL_TIM_ConfigClockSource>
 800360c:	4603      	mov	r3, r0
 800360e:	2b00      	cmp	r3, #0
 8003610:	d001      	beq.n	8003616 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8003612:	f7ff f8e2 	bl	80027da <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003616:	2300      	movs	r3, #0
 8003618:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800361a:	2300      	movs	r3, #0
 800361c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800361e:	463b      	mov	r3, r7
 8003620:	4619      	mov	r1, r3
 8003622:	4806      	ldr	r0, [pc, #24]	; (800363c <MX_TIM3_Init+0x94>)
 8003624:	f003 fd48 	bl	80070b8 <HAL_TIMEx_MasterConfigSynchronization>
 8003628:	4603      	mov	r3, r0
 800362a:	2b00      	cmp	r3, #0
 800362c:	d001      	beq.n	8003632 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 800362e:	f7ff f8d4 	bl	80027da <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8003632:	bf00      	nop
 8003634:	3718      	adds	r7, #24
 8003636:	46bd      	mov	sp, r7
 8003638:	bd80      	pop	{r7, pc}
 800363a:	bf00      	nop
 800363c:	20000454 	.word	0x20000454
 8003640:	40000400 	.word	0x40000400

08003644 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	b086      	sub	sp, #24
 8003648:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800364a:	f107 0308 	add.w	r3, r7, #8
 800364e:	2200      	movs	r2, #0
 8003650:	601a      	str	r2, [r3, #0]
 8003652:	605a      	str	r2, [r3, #4]
 8003654:	609a      	str	r2, [r3, #8]
 8003656:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003658:	463b      	mov	r3, r7
 800365a:	2200      	movs	r2, #0
 800365c:	601a      	str	r2, [r3, #0]
 800365e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003660:	4b1d      	ldr	r3, [pc, #116]	; (80036d8 <MX_TIM4_Init+0x94>)
 8003662:	4a1e      	ldr	r2, [pc, #120]	; (80036dc <MX_TIM4_Init+0x98>)
 8003664:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 47;
 8003666:	4b1c      	ldr	r3, [pc, #112]	; (80036d8 <MX_TIM4_Init+0x94>)
 8003668:	222f      	movs	r2, #47	; 0x2f
 800366a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800366c:	4b1a      	ldr	r3, [pc, #104]	; (80036d8 <MX_TIM4_Init+0x94>)
 800366e:	2200      	movs	r2, #0
 8003670:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 8003672:	4b19      	ldr	r3, [pc, #100]	; (80036d8 <MX_TIM4_Init+0x94>)
 8003674:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003678:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800367a:	4b17      	ldr	r3, [pc, #92]	; (80036d8 <MX_TIM4_Init+0x94>)
 800367c:	2200      	movs	r2, #0
 800367e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003680:	4b15      	ldr	r3, [pc, #84]	; (80036d8 <MX_TIM4_Init+0x94>)
 8003682:	2200      	movs	r2, #0
 8003684:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8003686:	4814      	ldr	r0, [pc, #80]	; (80036d8 <MX_TIM4_Init+0x94>)
 8003688:	f002 fdde 	bl	8006248 <HAL_TIM_Base_Init>
 800368c:	4603      	mov	r3, r0
 800368e:	2b00      	cmp	r3, #0
 8003690:	d001      	beq.n	8003696 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8003692:	f7ff f8a2 	bl	80027da <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003696:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800369a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800369c:	f107 0308 	add.w	r3, r7, #8
 80036a0:	4619      	mov	r1, r3
 80036a2:	480d      	ldr	r0, [pc, #52]	; (80036d8 <MX_TIM4_Init+0x94>)
 80036a4:	f003 f97c 	bl	80069a0 <HAL_TIM_ConfigClockSource>
 80036a8:	4603      	mov	r3, r0
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d001      	beq.n	80036b2 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 80036ae:	f7ff f894 	bl	80027da <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80036b2:	2300      	movs	r3, #0
 80036b4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80036b6:	2300      	movs	r3, #0
 80036b8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80036ba:	463b      	mov	r3, r7
 80036bc:	4619      	mov	r1, r3
 80036be:	4806      	ldr	r0, [pc, #24]	; (80036d8 <MX_TIM4_Init+0x94>)
 80036c0:	f003 fcfa 	bl	80070b8 <HAL_TIMEx_MasterConfigSynchronization>
 80036c4:	4603      	mov	r3, r0
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d001      	beq.n	80036ce <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 80036ca:	f7ff f886 	bl	80027da <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80036ce:	bf00      	nop
 80036d0:	3718      	adds	r7, #24
 80036d2:	46bd      	mov	sp, r7
 80036d4:	bd80      	pop	{r7, pc}
 80036d6:	bf00      	nop
 80036d8:	2000049c 	.word	0x2000049c
 80036dc:	40000800 	.word	0x40000800

080036e0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b086      	sub	sp, #24
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	4a28      	ldr	r2, [pc, #160]	; (8003790 <HAL_TIM_Base_MspInit+0xb0>)
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d10c      	bne.n	800370c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80036f2:	4b28      	ldr	r3, [pc, #160]	; (8003794 <HAL_TIM_Base_MspInit+0xb4>)
 80036f4:	699b      	ldr	r3, [r3, #24]
 80036f6:	4a27      	ldr	r2, [pc, #156]	; (8003794 <HAL_TIM_Base_MspInit+0xb4>)
 80036f8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80036fc:	6193      	str	r3, [r2, #24]
 80036fe:	4b25      	ldr	r3, [pc, #148]	; (8003794 <HAL_TIM_Base_MspInit+0xb4>)
 8003700:	699b      	ldr	r3, [r3, #24]
 8003702:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003706:	617b      	str	r3, [r7, #20]
 8003708:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 800370a:	e03c      	b.n	8003786 <HAL_TIM_Base_MspInit+0xa6>
  else if(tim_baseHandle->Instance==TIM2)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003714:	d10c      	bne.n	8003730 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003716:	4b1f      	ldr	r3, [pc, #124]	; (8003794 <HAL_TIM_Base_MspInit+0xb4>)
 8003718:	69db      	ldr	r3, [r3, #28]
 800371a:	4a1e      	ldr	r2, [pc, #120]	; (8003794 <HAL_TIM_Base_MspInit+0xb4>)
 800371c:	f043 0301 	orr.w	r3, r3, #1
 8003720:	61d3      	str	r3, [r2, #28]
 8003722:	4b1c      	ldr	r3, [pc, #112]	; (8003794 <HAL_TIM_Base_MspInit+0xb4>)
 8003724:	69db      	ldr	r3, [r3, #28]
 8003726:	f003 0301 	and.w	r3, r3, #1
 800372a:	613b      	str	r3, [r7, #16]
 800372c:	693b      	ldr	r3, [r7, #16]
}
 800372e:	e02a      	b.n	8003786 <HAL_TIM_Base_MspInit+0xa6>
  else if(tim_baseHandle->Instance==TIM3)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	4a18      	ldr	r2, [pc, #96]	; (8003798 <HAL_TIM_Base_MspInit+0xb8>)
 8003736:	4293      	cmp	r3, r2
 8003738:	d10c      	bne.n	8003754 <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800373a:	4b16      	ldr	r3, [pc, #88]	; (8003794 <HAL_TIM_Base_MspInit+0xb4>)
 800373c:	69db      	ldr	r3, [r3, #28]
 800373e:	4a15      	ldr	r2, [pc, #84]	; (8003794 <HAL_TIM_Base_MspInit+0xb4>)
 8003740:	f043 0302 	orr.w	r3, r3, #2
 8003744:	61d3      	str	r3, [r2, #28]
 8003746:	4b13      	ldr	r3, [pc, #76]	; (8003794 <HAL_TIM_Base_MspInit+0xb4>)
 8003748:	69db      	ldr	r3, [r3, #28]
 800374a:	f003 0302 	and.w	r3, r3, #2
 800374e:	60fb      	str	r3, [r7, #12]
 8003750:	68fb      	ldr	r3, [r7, #12]
}
 8003752:	e018      	b.n	8003786 <HAL_TIM_Base_MspInit+0xa6>
  else if(tim_baseHandle->Instance==TIM4)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4a10      	ldr	r2, [pc, #64]	; (800379c <HAL_TIM_Base_MspInit+0xbc>)
 800375a:	4293      	cmp	r3, r2
 800375c:	d113      	bne.n	8003786 <HAL_TIM_Base_MspInit+0xa6>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800375e:	4b0d      	ldr	r3, [pc, #52]	; (8003794 <HAL_TIM_Base_MspInit+0xb4>)
 8003760:	69db      	ldr	r3, [r3, #28]
 8003762:	4a0c      	ldr	r2, [pc, #48]	; (8003794 <HAL_TIM_Base_MspInit+0xb4>)
 8003764:	f043 0304 	orr.w	r3, r3, #4
 8003768:	61d3      	str	r3, [r2, #28]
 800376a:	4b0a      	ldr	r3, [pc, #40]	; (8003794 <HAL_TIM_Base_MspInit+0xb4>)
 800376c:	69db      	ldr	r3, [r3, #28]
 800376e:	f003 0304 	and.w	r3, r3, #4
 8003772:	60bb      	str	r3, [r7, #8]
 8003774:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 2, 0);
 8003776:	2200      	movs	r2, #0
 8003778:	2102      	movs	r1, #2
 800377a:	201e      	movs	r0, #30
 800377c:	f000 f9e5 	bl	8003b4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8003780:	201e      	movs	r0, #30
 8003782:	f000 f9fe 	bl	8003b82 <HAL_NVIC_EnableIRQ>
}
 8003786:	bf00      	nop
 8003788:	3718      	adds	r7, #24
 800378a:	46bd      	mov	sp, r7
 800378c:	bd80      	pop	{r7, pc}
 800378e:	bf00      	nop
 8003790:	40012c00 	.word	0x40012c00
 8003794:	40021000 	.word	0x40021000
 8003798:	40000400 	.word	0x40000400
 800379c:	40000800 	.word	0x40000800

080037a0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b088      	sub	sp, #32
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037a8:	f107 0310 	add.w	r3, r7, #16
 80037ac:	2200      	movs	r2, #0
 80037ae:	601a      	str	r2, [r3, #0]
 80037b0:	605a      	str	r2, [r3, #4]
 80037b2:	609a      	str	r2, [r3, #8]
 80037b4:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM1)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	4a1f      	ldr	r2, [pc, #124]	; (8003838 <HAL_TIM_MspPostInit+0x98>)
 80037bc:	4293      	cmp	r3, r2
 80037be:	d119      	bne.n	80037f4 <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80037c0:	4b1e      	ldr	r3, [pc, #120]	; (800383c <HAL_TIM_MspPostInit+0x9c>)
 80037c2:	699b      	ldr	r3, [r3, #24]
 80037c4:	4a1d      	ldr	r2, [pc, #116]	; (800383c <HAL_TIM_MspPostInit+0x9c>)
 80037c6:	f043 0304 	orr.w	r3, r3, #4
 80037ca:	6193      	str	r3, [r2, #24]
 80037cc:	4b1b      	ldr	r3, [pc, #108]	; (800383c <HAL_TIM_MspPostInit+0x9c>)
 80037ce:	699b      	ldr	r3, [r3, #24]
 80037d0:	f003 0304 	and.w	r3, r3, #4
 80037d4:	60fb      	str	r3, [r7, #12]
 80037d6:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 80037d8:	f44f 6360 	mov.w	r3, #3584	; 0xe00
 80037dc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037de:	2302      	movs	r3, #2
 80037e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037e2:	2302      	movs	r3, #2
 80037e4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80037e6:	f107 0310 	add.w	r3, r7, #16
 80037ea:	4619      	mov	r1, r3
 80037ec:	4814      	ldr	r0, [pc, #80]	; (8003840 <HAL_TIM_MspPostInit+0xa0>)
 80037ee:	f000 f9e3 	bl	8003bb8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80037f2:	e01c      	b.n	800382e <HAL_TIM_MspPostInit+0x8e>
  else if(timHandle->Instance==TIM2)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037fc:	d117      	bne.n	800382e <HAL_TIM_MspPostInit+0x8e>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80037fe:	4b0f      	ldr	r3, [pc, #60]	; (800383c <HAL_TIM_MspPostInit+0x9c>)
 8003800:	699b      	ldr	r3, [r3, #24]
 8003802:	4a0e      	ldr	r2, [pc, #56]	; (800383c <HAL_TIM_MspPostInit+0x9c>)
 8003804:	f043 0304 	orr.w	r3, r3, #4
 8003808:	6193      	str	r3, [r2, #24]
 800380a:	4b0c      	ldr	r3, [pc, #48]	; (800383c <HAL_TIM_MspPostInit+0x9c>)
 800380c:	699b      	ldr	r3, [r3, #24]
 800380e:	f003 0304 	and.w	r3, r3, #4
 8003812:	60bb      	str	r3, [r7, #8]
 8003814:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003816:	2308      	movs	r3, #8
 8003818:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800381a:	2302      	movs	r3, #2
 800381c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800381e:	2302      	movs	r3, #2
 8003820:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003822:	f107 0310 	add.w	r3, r7, #16
 8003826:	4619      	mov	r1, r3
 8003828:	4805      	ldr	r0, [pc, #20]	; (8003840 <HAL_TIM_MspPostInit+0xa0>)
 800382a:	f000 f9c5 	bl	8003bb8 <HAL_GPIO_Init>
}
 800382e:	bf00      	nop
 8003830:	3720      	adds	r7, #32
 8003832:	46bd      	mov	sp, r7
 8003834:	bd80      	pop	{r7, pc}
 8003836:	bf00      	nop
 8003838:	40012c00 	.word	0x40012c00
 800383c:	40021000 	.word	0x40021000
 8003840:	40010800 	.word	0x40010800

08003844 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003844:	480c      	ldr	r0, [pc, #48]	; (8003878 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003846:	490d      	ldr	r1, [pc, #52]	; (800387c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003848:	4a0d      	ldr	r2, [pc, #52]	; (8003880 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800384a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800384c:	e002      	b.n	8003854 <LoopCopyDataInit>

0800384e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800384e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003850:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003852:	3304      	adds	r3, #4

08003854 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003854:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003856:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003858:	d3f9      	bcc.n	800384e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800385a:	4a0a      	ldr	r2, [pc, #40]	; (8003884 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800385c:	4c0a      	ldr	r4, [pc, #40]	; (8003888 <LoopFillZerobss+0x22>)
  movs r3, #0
 800385e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003860:	e001      	b.n	8003866 <LoopFillZerobss>

08003862 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003862:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003864:	3204      	adds	r2, #4

08003866 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003866:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003868:	d3fb      	bcc.n	8003862 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800386a:	f7ff fd6b 	bl	8003344 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800386e:	f003 fcf3 	bl	8007258 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003872:	f7fe fe87 	bl	8002584 <main>
  bx lr
 8003876:	4770      	bx	lr
  ldr r0, =_sdata
 8003878:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800387c:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8003880:	08009de0 	.word	0x08009de0
  ldr r2, =_sbss
 8003884:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8003888:	20000620 	.word	0x20000620

0800388c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800388c:	e7fe      	b.n	800388c <ADC1_2_IRQHandler>
	...

08003890 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003894:	4b08      	ldr	r3, [pc, #32]	; (80038b8 <HAL_Init+0x28>)
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	4a07      	ldr	r2, [pc, #28]	; (80038b8 <HAL_Init+0x28>)
 800389a:	f043 0310 	orr.w	r3, r3, #16
 800389e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80038a0:	2003      	movs	r0, #3
 80038a2:	f000 f947 	bl	8003b34 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80038a6:	2000      	movs	r0, #0
 80038a8:	f000 f808 	bl	80038bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80038ac:	f7ff fcc6 	bl	800323c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80038b0:	2300      	movs	r3, #0
}
 80038b2:	4618      	mov	r0, r3
 80038b4:	bd80      	pop	{r7, pc}
 80038b6:	bf00      	nop
 80038b8:	40022000 	.word	0x40022000

080038bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b082      	sub	sp, #8
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80038c4:	4b12      	ldr	r3, [pc, #72]	; (8003910 <HAL_InitTick+0x54>)
 80038c6:	681a      	ldr	r2, [r3, #0]
 80038c8:	4b12      	ldr	r3, [pc, #72]	; (8003914 <HAL_InitTick+0x58>)
 80038ca:	781b      	ldrb	r3, [r3, #0]
 80038cc:	4619      	mov	r1, r3
 80038ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80038d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80038d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80038da:	4618      	mov	r0, r3
 80038dc:	f000 f95f 	bl	8003b9e <HAL_SYSTICK_Config>
 80038e0:	4603      	mov	r3, r0
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d001      	beq.n	80038ea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80038e6:	2301      	movs	r3, #1
 80038e8:	e00e      	b.n	8003908 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2b0f      	cmp	r3, #15
 80038ee:	d80a      	bhi.n	8003906 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80038f0:	2200      	movs	r2, #0
 80038f2:	6879      	ldr	r1, [r7, #4]
 80038f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80038f8:	f000 f927 	bl	8003b4a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80038fc:	4a06      	ldr	r2, [pc, #24]	; (8003918 <HAL_InitTick+0x5c>)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003902:	2300      	movs	r3, #0
 8003904:	e000      	b.n	8003908 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003906:	2301      	movs	r3, #1
}
 8003908:	4618      	mov	r0, r3
 800390a:	3708      	adds	r7, #8
 800390c:	46bd      	mov	sp, r7
 800390e:	bd80      	pop	{r7, pc}
 8003910:	20000174 	.word	0x20000174
 8003914:	2000017c 	.word	0x2000017c
 8003918:	20000178 	.word	0x20000178

0800391c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800391c:	b480      	push	{r7}
 800391e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003920:	4b05      	ldr	r3, [pc, #20]	; (8003938 <HAL_IncTick+0x1c>)
 8003922:	781b      	ldrb	r3, [r3, #0]
 8003924:	461a      	mov	r2, r3
 8003926:	4b05      	ldr	r3, [pc, #20]	; (800393c <HAL_IncTick+0x20>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	4413      	add	r3, r2
 800392c:	4a03      	ldr	r2, [pc, #12]	; (800393c <HAL_IncTick+0x20>)
 800392e:	6013      	str	r3, [r2, #0]
}
 8003930:	bf00      	nop
 8003932:	46bd      	mov	sp, r7
 8003934:	bc80      	pop	{r7}
 8003936:	4770      	bx	lr
 8003938:	2000017c 	.word	0x2000017c
 800393c:	200004e4 	.word	0x200004e4

08003940 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003940:	b480      	push	{r7}
 8003942:	af00      	add	r7, sp, #0
  return uwTick;
 8003944:	4b02      	ldr	r3, [pc, #8]	; (8003950 <HAL_GetTick+0x10>)
 8003946:	681b      	ldr	r3, [r3, #0]
}
 8003948:	4618      	mov	r0, r3
 800394a:	46bd      	mov	sp, r7
 800394c:	bc80      	pop	{r7}
 800394e:	4770      	bx	lr
 8003950:	200004e4 	.word	0x200004e4

08003954 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	b084      	sub	sp, #16
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800395c:	f7ff fff0 	bl	8003940 <HAL_GetTick>
 8003960:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800396c:	d005      	beq.n	800397a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800396e:	4b0a      	ldr	r3, [pc, #40]	; (8003998 <HAL_Delay+0x44>)
 8003970:	781b      	ldrb	r3, [r3, #0]
 8003972:	461a      	mov	r2, r3
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	4413      	add	r3, r2
 8003978:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800397a:	bf00      	nop
 800397c:	f7ff ffe0 	bl	8003940 <HAL_GetTick>
 8003980:	4602      	mov	r2, r0
 8003982:	68bb      	ldr	r3, [r7, #8]
 8003984:	1ad3      	subs	r3, r2, r3
 8003986:	68fa      	ldr	r2, [r7, #12]
 8003988:	429a      	cmp	r2, r3
 800398a:	d8f7      	bhi.n	800397c <HAL_Delay+0x28>
  {
  }
}
 800398c:	bf00      	nop
 800398e:	bf00      	nop
 8003990:	3710      	adds	r7, #16
 8003992:	46bd      	mov	sp, r7
 8003994:	bd80      	pop	{r7, pc}
 8003996:	bf00      	nop
 8003998:	2000017c 	.word	0x2000017c

0800399c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800399c:	b480      	push	{r7}
 800399e:	b085      	sub	sp, #20
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	f003 0307 	and.w	r3, r3, #7
 80039aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80039ac:	4b0c      	ldr	r3, [pc, #48]	; (80039e0 <__NVIC_SetPriorityGrouping+0x44>)
 80039ae:	68db      	ldr	r3, [r3, #12]
 80039b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80039b2:	68ba      	ldr	r2, [r7, #8]
 80039b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80039b8:	4013      	ands	r3, r2
 80039ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80039c0:	68bb      	ldr	r3, [r7, #8]
 80039c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80039c4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80039c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80039cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80039ce:	4a04      	ldr	r2, [pc, #16]	; (80039e0 <__NVIC_SetPriorityGrouping+0x44>)
 80039d0:	68bb      	ldr	r3, [r7, #8]
 80039d2:	60d3      	str	r3, [r2, #12]
}
 80039d4:	bf00      	nop
 80039d6:	3714      	adds	r7, #20
 80039d8:	46bd      	mov	sp, r7
 80039da:	bc80      	pop	{r7}
 80039dc:	4770      	bx	lr
 80039de:	bf00      	nop
 80039e0:	e000ed00 	.word	0xe000ed00

080039e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80039e4:	b480      	push	{r7}
 80039e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80039e8:	4b04      	ldr	r3, [pc, #16]	; (80039fc <__NVIC_GetPriorityGrouping+0x18>)
 80039ea:	68db      	ldr	r3, [r3, #12]
 80039ec:	0a1b      	lsrs	r3, r3, #8
 80039ee:	f003 0307 	and.w	r3, r3, #7
}
 80039f2:	4618      	mov	r0, r3
 80039f4:	46bd      	mov	sp, r7
 80039f6:	bc80      	pop	{r7}
 80039f8:	4770      	bx	lr
 80039fa:	bf00      	nop
 80039fc:	e000ed00 	.word	0xe000ed00

08003a00 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a00:	b480      	push	{r7}
 8003a02:	b083      	sub	sp, #12
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	4603      	mov	r3, r0
 8003a08:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	db0b      	blt.n	8003a2a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003a12:	79fb      	ldrb	r3, [r7, #7]
 8003a14:	f003 021f 	and.w	r2, r3, #31
 8003a18:	4906      	ldr	r1, [pc, #24]	; (8003a34 <__NVIC_EnableIRQ+0x34>)
 8003a1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a1e:	095b      	lsrs	r3, r3, #5
 8003a20:	2001      	movs	r0, #1
 8003a22:	fa00 f202 	lsl.w	r2, r0, r2
 8003a26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003a2a:	bf00      	nop
 8003a2c:	370c      	adds	r7, #12
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	bc80      	pop	{r7}
 8003a32:	4770      	bx	lr
 8003a34:	e000e100 	.word	0xe000e100

08003a38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003a38:	b480      	push	{r7}
 8003a3a:	b083      	sub	sp, #12
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	4603      	mov	r3, r0
 8003a40:	6039      	str	r1, [r7, #0]
 8003a42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	db0a      	blt.n	8003a62 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	b2da      	uxtb	r2, r3
 8003a50:	490c      	ldr	r1, [pc, #48]	; (8003a84 <__NVIC_SetPriority+0x4c>)
 8003a52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a56:	0112      	lsls	r2, r2, #4
 8003a58:	b2d2      	uxtb	r2, r2
 8003a5a:	440b      	add	r3, r1
 8003a5c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003a60:	e00a      	b.n	8003a78 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	b2da      	uxtb	r2, r3
 8003a66:	4908      	ldr	r1, [pc, #32]	; (8003a88 <__NVIC_SetPriority+0x50>)
 8003a68:	79fb      	ldrb	r3, [r7, #7]
 8003a6a:	f003 030f 	and.w	r3, r3, #15
 8003a6e:	3b04      	subs	r3, #4
 8003a70:	0112      	lsls	r2, r2, #4
 8003a72:	b2d2      	uxtb	r2, r2
 8003a74:	440b      	add	r3, r1
 8003a76:	761a      	strb	r2, [r3, #24]
}
 8003a78:	bf00      	nop
 8003a7a:	370c      	adds	r7, #12
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	bc80      	pop	{r7}
 8003a80:	4770      	bx	lr
 8003a82:	bf00      	nop
 8003a84:	e000e100 	.word	0xe000e100
 8003a88:	e000ed00 	.word	0xe000ed00

08003a8c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003a8c:	b480      	push	{r7}
 8003a8e:	b089      	sub	sp, #36	; 0x24
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	60f8      	str	r0, [r7, #12]
 8003a94:	60b9      	str	r1, [r7, #8]
 8003a96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	f003 0307 	and.w	r3, r3, #7
 8003a9e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003aa0:	69fb      	ldr	r3, [r7, #28]
 8003aa2:	f1c3 0307 	rsb	r3, r3, #7
 8003aa6:	2b04      	cmp	r3, #4
 8003aa8:	bf28      	it	cs
 8003aaa:	2304      	movcs	r3, #4
 8003aac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003aae:	69fb      	ldr	r3, [r7, #28]
 8003ab0:	3304      	adds	r3, #4
 8003ab2:	2b06      	cmp	r3, #6
 8003ab4:	d902      	bls.n	8003abc <NVIC_EncodePriority+0x30>
 8003ab6:	69fb      	ldr	r3, [r7, #28]
 8003ab8:	3b03      	subs	r3, #3
 8003aba:	e000      	b.n	8003abe <NVIC_EncodePriority+0x32>
 8003abc:	2300      	movs	r3, #0
 8003abe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ac0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003ac4:	69bb      	ldr	r3, [r7, #24]
 8003ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8003aca:	43da      	mvns	r2, r3
 8003acc:	68bb      	ldr	r3, [r7, #8]
 8003ace:	401a      	ands	r2, r3
 8003ad0:	697b      	ldr	r3, [r7, #20]
 8003ad2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003ad4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003ad8:	697b      	ldr	r3, [r7, #20]
 8003ada:	fa01 f303 	lsl.w	r3, r1, r3
 8003ade:	43d9      	mvns	r1, r3
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ae4:	4313      	orrs	r3, r2
         );
}
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	3724      	adds	r7, #36	; 0x24
 8003aea:	46bd      	mov	sp, r7
 8003aec:	bc80      	pop	{r7}
 8003aee:	4770      	bx	lr

08003af0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b082      	sub	sp, #8
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	3b01      	subs	r3, #1
 8003afc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003b00:	d301      	bcc.n	8003b06 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003b02:	2301      	movs	r3, #1
 8003b04:	e00f      	b.n	8003b26 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003b06:	4a0a      	ldr	r2, [pc, #40]	; (8003b30 <SysTick_Config+0x40>)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	3b01      	subs	r3, #1
 8003b0c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003b0e:	210f      	movs	r1, #15
 8003b10:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003b14:	f7ff ff90 	bl	8003a38 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003b18:	4b05      	ldr	r3, [pc, #20]	; (8003b30 <SysTick_Config+0x40>)
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003b1e:	4b04      	ldr	r3, [pc, #16]	; (8003b30 <SysTick_Config+0x40>)
 8003b20:	2207      	movs	r2, #7
 8003b22:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003b24:	2300      	movs	r3, #0
}
 8003b26:	4618      	mov	r0, r3
 8003b28:	3708      	adds	r7, #8
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	bd80      	pop	{r7, pc}
 8003b2e:	bf00      	nop
 8003b30:	e000e010 	.word	0xe000e010

08003b34 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b082      	sub	sp, #8
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003b3c:	6878      	ldr	r0, [r7, #4]
 8003b3e:	f7ff ff2d 	bl	800399c <__NVIC_SetPriorityGrouping>
}
 8003b42:	bf00      	nop
 8003b44:	3708      	adds	r7, #8
 8003b46:	46bd      	mov	sp, r7
 8003b48:	bd80      	pop	{r7, pc}

08003b4a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003b4a:	b580      	push	{r7, lr}
 8003b4c:	b086      	sub	sp, #24
 8003b4e:	af00      	add	r7, sp, #0
 8003b50:	4603      	mov	r3, r0
 8003b52:	60b9      	str	r1, [r7, #8]
 8003b54:	607a      	str	r2, [r7, #4]
 8003b56:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003b58:	2300      	movs	r3, #0
 8003b5a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003b5c:	f7ff ff42 	bl	80039e4 <__NVIC_GetPriorityGrouping>
 8003b60:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003b62:	687a      	ldr	r2, [r7, #4]
 8003b64:	68b9      	ldr	r1, [r7, #8]
 8003b66:	6978      	ldr	r0, [r7, #20]
 8003b68:	f7ff ff90 	bl	8003a8c <NVIC_EncodePriority>
 8003b6c:	4602      	mov	r2, r0
 8003b6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003b72:	4611      	mov	r1, r2
 8003b74:	4618      	mov	r0, r3
 8003b76:	f7ff ff5f 	bl	8003a38 <__NVIC_SetPriority>
}
 8003b7a:	bf00      	nop
 8003b7c:	3718      	adds	r7, #24
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	bd80      	pop	{r7, pc}

08003b82 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b82:	b580      	push	{r7, lr}
 8003b84:	b082      	sub	sp, #8
 8003b86:	af00      	add	r7, sp, #0
 8003b88:	4603      	mov	r3, r0
 8003b8a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003b8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b90:	4618      	mov	r0, r3
 8003b92:	f7ff ff35 	bl	8003a00 <__NVIC_EnableIRQ>
}
 8003b96:	bf00      	nop
 8003b98:	3708      	adds	r7, #8
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	bd80      	pop	{r7, pc}

08003b9e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003b9e:	b580      	push	{r7, lr}
 8003ba0:	b082      	sub	sp, #8
 8003ba2:	af00      	add	r7, sp, #0
 8003ba4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003ba6:	6878      	ldr	r0, [r7, #4]
 8003ba8:	f7ff ffa2 	bl	8003af0 <SysTick_Config>
 8003bac:	4603      	mov	r3, r0
}
 8003bae:	4618      	mov	r0, r3
 8003bb0:	3708      	adds	r7, #8
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	bd80      	pop	{r7, pc}
	...

08003bb8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003bb8:	b480      	push	{r7}
 8003bba:	b08b      	sub	sp, #44	; 0x2c
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
 8003bc0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003bca:	e169      	b.n	8003ea0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003bcc:	2201      	movs	r2, #1
 8003bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8003bd4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003bd6:	683b      	ldr	r3, [r7, #0]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	69fa      	ldr	r2, [r7, #28]
 8003bdc:	4013      	ands	r3, r2
 8003bde:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003be0:	69ba      	ldr	r2, [r7, #24]
 8003be2:	69fb      	ldr	r3, [r7, #28]
 8003be4:	429a      	cmp	r2, r3
 8003be6:	f040 8158 	bne.w	8003e9a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003bea:	683b      	ldr	r3, [r7, #0]
 8003bec:	685b      	ldr	r3, [r3, #4]
 8003bee:	4a9a      	ldr	r2, [pc, #616]	; (8003e58 <HAL_GPIO_Init+0x2a0>)
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	d05e      	beq.n	8003cb2 <HAL_GPIO_Init+0xfa>
 8003bf4:	4a98      	ldr	r2, [pc, #608]	; (8003e58 <HAL_GPIO_Init+0x2a0>)
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d875      	bhi.n	8003ce6 <HAL_GPIO_Init+0x12e>
 8003bfa:	4a98      	ldr	r2, [pc, #608]	; (8003e5c <HAL_GPIO_Init+0x2a4>)
 8003bfc:	4293      	cmp	r3, r2
 8003bfe:	d058      	beq.n	8003cb2 <HAL_GPIO_Init+0xfa>
 8003c00:	4a96      	ldr	r2, [pc, #600]	; (8003e5c <HAL_GPIO_Init+0x2a4>)
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d86f      	bhi.n	8003ce6 <HAL_GPIO_Init+0x12e>
 8003c06:	4a96      	ldr	r2, [pc, #600]	; (8003e60 <HAL_GPIO_Init+0x2a8>)
 8003c08:	4293      	cmp	r3, r2
 8003c0a:	d052      	beq.n	8003cb2 <HAL_GPIO_Init+0xfa>
 8003c0c:	4a94      	ldr	r2, [pc, #592]	; (8003e60 <HAL_GPIO_Init+0x2a8>)
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d869      	bhi.n	8003ce6 <HAL_GPIO_Init+0x12e>
 8003c12:	4a94      	ldr	r2, [pc, #592]	; (8003e64 <HAL_GPIO_Init+0x2ac>)
 8003c14:	4293      	cmp	r3, r2
 8003c16:	d04c      	beq.n	8003cb2 <HAL_GPIO_Init+0xfa>
 8003c18:	4a92      	ldr	r2, [pc, #584]	; (8003e64 <HAL_GPIO_Init+0x2ac>)
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d863      	bhi.n	8003ce6 <HAL_GPIO_Init+0x12e>
 8003c1e:	4a92      	ldr	r2, [pc, #584]	; (8003e68 <HAL_GPIO_Init+0x2b0>)
 8003c20:	4293      	cmp	r3, r2
 8003c22:	d046      	beq.n	8003cb2 <HAL_GPIO_Init+0xfa>
 8003c24:	4a90      	ldr	r2, [pc, #576]	; (8003e68 <HAL_GPIO_Init+0x2b0>)
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d85d      	bhi.n	8003ce6 <HAL_GPIO_Init+0x12e>
 8003c2a:	2b12      	cmp	r3, #18
 8003c2c:	d82a      	bhi.n	8003c84 <HAL_GPIO_Init+0xcc>
 8003c2e:	2b12      	cmp	r3, #18
 8003c30:	d859      	bhi.n	8003ce6 <HAL_GPIO_Init+0x12e>
 8003c32:	a201      	add	r2, pc, #4	; (adr r2, 8003c38 <HAL_GPIO_Init+0x80>)
 8003c34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c38:	08003cb3 	.word	0x08003cb3
 8003c3c:	08003c8d 	.word	0x08003c8d
 8003c40:	08003c9f 	.word	0x08003c9f
 8003c44:	08003ce1 	.word	0x08003ce1
 8003c48:	08003ce7 	.word	0x08003ce7
 8003c4c:	08003ce7 	.word	0x08003ce7
 8003c50:	08003ce7 	.word	0x08003ce7
 8003c54:	08003ce7 	.word	0x08003ce7
 8003c58:	08003ce7 	.word	0x08003ce7
 8003c5c:	08003ce7 	.word	0x08003ce7
 8003c60:	08003ce7 	.word	0x08003ce7
 8003c64:	08003ce7 	.word	0x08003ce7
 8003c68:	08003ce7 	.word	0x08003ce7
 8003c6c:	08003ce7 	.word	0x08003ce7
 8003c70:	08003ce7 	.word	0x08003ce7
 8003c74:	08003ce7 	.word	0x08003ce7
 8003c78:	08003ce7 	.word	0x08003ce7
 8003c7c:	08003c95 	.word	0x08003c95
 8003c80:	08003ca9 	.word	0x08003ca9
 8003c84:	4a79      	ldr	r2, [pc, #484]	; (8003e6c <HAL_GPIO_Init+0x2b4>)
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d013      	beq.n	8003cb2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003c8a:	e02c      	b.n	8003ce6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	68db      	ldr	r3, [r3, #12]
 8003c90:	623b      	str	r3, [r7, #32]
          break;
 8003c92:	e029      	b.n	8003ce8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	68db      	ldr	r3, [r3, #12]
 8003c98:	3304      	adds	r3, #4
 8003c9a:	623b      	str	r3, [r7, #32]
          break;
 8003c9c:	e024      	b.n	8003ce8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	68db      	ldr	r3, [r3, #12]
 8003ca2:	3308      	adds	r3, #8
 8003ca4:	623b      	str	r3, [r7, #32]
          break;
 8003ca6:	e01f      	b.n	8003ce8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	68db      	ldr	r3, [r3, #12]
 8003cac:	330c      	adds	r3, #12
 8003cae:	623b      	str	r3, [r7, #32]
          break;
 8003cb0:	e01a      	b.n	8003ce8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	689b      	ldr	r3, [r3, #8]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d102      	bne.n	8003cc0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003cba:	2304      	movs	r3, #4
 8003cbc:	623b      	str	r3, [r7, #32]
          break;
 8003cbe:	e013      	b.n	8003ce8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003cc0:	683b      	ldr	r3, [r7, #0]
 8003cc2:	689b      	ldr	r3, [r3, #8]
 8003cc4:	2b01      	cmp	r3, #1
 8003cc6:	d105      	bne.n	8003cd4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003cc8:	2308      	movs	r3, #8
 8003cca:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	69fa      	ldr	r2, [r7, #28]
 8003cd0:	611a      	str	r2, [r3, #16]
          break;
 8003cd2:	e009      	b.n	8003ce8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003cd4:	2308      	movs	r3, #8
 8003cd6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	69fa      	ldr	r2, [r7, #28]
 8003cdc:	615a      	str	r2, [r3, #20]
          break;
 8003cde:	e003      	b.n	8003ce8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003ce0:	2300      	movs	r3, #0
 8003ce2:	623b      	str	r3, [r7, #32]
          break;
 8003ce4:	e000      	b.n	8003ce8 <HAL_GPIO_Init+0x130>
          break;
 8003ce6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003ce8:	69bb      	ldr	r3, [r7, #24]
 8003cea:	2bff      	cmp	r3, #255	; 0xff
 8003cec:	d801      	bhi.n	8003cf2 <HAL_GPIO_Init+0x13a>
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	e001      	b.n	8003cf6 <HAL_GPIO_Init+0x13e>
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	3304      	adds	r3, #4
 8003cf6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003cf8:	69bb      	ldr	r3, [r7, #24]
 8003cfa:	2bff      	cmp	r3, #255	; 0xff
 8003cfc:	d802      	bhi.n	8003d04 <HAL_GPIO_Init+0x14c>
 8003cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d00:	009b      	lsls	r3, r3, #2
 8003d02:	e002      	b.n	8003d0a <HAL_GPIO_Init+0x152>
 8003d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d06:	3b08      	subs	r3, #8
 8003d08:	009b      	lsls	r3, r3, #2
 8003d0a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003d0c:	697b      	ldr	r3, [r7, #20]
 8003d0e:	681a      	ldr	r2, [r3, #0]
 8003d10:	210f      	movs	r1, #15
 8003d12:	693b      	ldr	r3, [r7, #16]
 8003d14:	fa01 f303 	lsl.w	r3, r1, r3
 8003d18:	43db      	mvns	r3, r3
 8003d1a:	401a      	ands	r2, r3
 8003d1c:	6a39      	ldr	r1, [r7, #32]
 8003d1e:	693b      	ldr	r3, [r7, #16]
 8003d20:	fa01 f303 	lsl.w	r3, r1, r3
 8003d24:	431a      	orrs	r2, r3
 8003d26:	697b      	ldr	r3, [r7, #20]
 8003d28:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	685b      	ldr	r3, [r3, #4]
 8003d2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	f000 80b1 	beq.w	8003e9a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003d38:	4b4d      	ldr	r3, [pc, #308]	; (8003e70 <HAL_GPIO_Init+0x2b8>)
 8003d3a:	699b      	ldr	r3, [r3, #24]
 8003d3c:	4a4c      	ldr	r2, [pc, #304]	; (8003e70 <HAL_GPIO_Init+0x2b8>)
 8003d3e:	f043 0301 	orr.w	r3, r3, #1
 8003d42:	6193      	str	r3, [r2, #24]
 8003d44:	4b4a      	ldr	r3, [pc, #296]	; (8003e70 <HAL_GPIO_Init+0x2b8>)
 8003d46:	699b      	ldr	r3, [r3, #24]
 8003d48:	f003 0301 	and.w	r3, r3, #1
 8003d4c:	60bb      	str	r3, [r7, #8]
 8003d4e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003d50:	4a48      	ldr	r2, [pc, #288]	; (8003e74 <HAL_GPIO_Init+0x2bc>)
 8003d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d54:	089b      	lsrs	r3, r3, #2
 8003d56:	3302      	adds	r3, #2
 8003d58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d5c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d60:	f003 0303 	and.w	r3, r3, #3
 8003d64:	009b      	lsls	r3, r3, #2
 8003d66:	220f      	movs	r2, #15
 8003d68:	fa02 f303 	lsl.w	r3, r2, r3
 8003d6c:	43db      	mvns	r3, r3
 8003d6e:	68fa      	ldr	r2, [r7, #12]
 8003d70:	4013      	ands	r3, r2
 8003d72:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	4a40      	ldr	r2, [pc, #256]	; (8003e78 <HAL_GPIO_Init+0x2c0>)
 8003d78:	4293      	cmp	r3, r2
 8003d7a:	d013      	beq.n	8003da4 <HAL_GPIO_Init+0x1ec>
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	4a3f      	ldr	r2, [pc, #252]	; (8003e7c <HAL_GPIO_Init+0x2c4>)
 8003d80:	4293      	cmp	r3, r2
 8003d82:	d00d      	beq.n	8003da0 <HAL_GPIO_Init+0x1e8>
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	4a3e      	ldr	r2, [pc, #248]	; (8003e80 <HAL_GPIO_Init+0x2c8>)
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	d007      	beq.n	8003d9c <HAL_GPIO_Init+0x1e4>
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	4a3d      	ldr	r2, [pc, #244]	; (8003e84 <HAL_GPIO_Init+0x2cc>)
 8003d90:	4293      	cmp	r3, r2
 8003d92:	d101      	bne.n	8003d98 <HAL_GPIO_Init+0x1e0>
 8003d94:	2303      	movs	r3, #3
 8003d96:	e006      	b.n	8003da6 <HAL_GPIO_Init+0x1ee>
 8003d98:	2304      	movs	r3, #4
 8003d9a:	e004      	b.n	8003da6 <HAL_GPIO_Init+0x1ee>
 8003d9c:	2302      	movs	r3, #2
 8003d9e:	e002      	b.n	8003da6 <HAL_GPIO_Init+0x1ee>
 8003da0:	2301      	movs	r3, #1
 8003da2:	e000      	b.n	8003da6 <HAL_GPIO_Init+0x1ee>
 8003da4:	2300      	movs	r3, #0
 8003da6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003da8:	f002 0203 	and.w	r2, r2, #3
 8003dac:	0092      	lsls	r2, r2, #2
 8003dae:	4093      	lsls	r3, r2
 8003db0:	68fa      	ldr	r2, [r7, #12]
 8003db2:	4313      	orrs	r3, r2
 8003db4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003db6:	492f      	ldr	r1, [pc, #188]	; (8003e74 <HAL_GPIO_Init+0x2bc>)
 8003db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dba:	089b      	lsrs	r3, r3, #2
 8003dbc:	3302      	adds	r3, #2
 8003dbe:	68fa      	ldr	r2, [r7, #12]
 8003dc0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	685b      	ldr	r3, [r3, #4]
 8003dc8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d006      	beq.n	8003dde <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003dd0:	4b2d      	ldr	r3, [pc, #180]	; (8003e88 <HAL_GPIO_Init+0x2d0>)
 8003dd2:	681a      	ldr	r2, [r3, #0]
 8003dd4:	492c      	ldr	r1, [pc, #176]	; (8003e88 <HAL_GPIO_Init+0x2d0>)
 8003dd6:	69bb      	ldr	r3, [r7, #24]
 8003dd8:	4313      	orrs	r3, r2
 8003dda:	600b      	str	r3, [r1, #0]
 8003ddc:	e006      	b.n	8003dec <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003dde:	4b2a      	ldr	r3, [pc, #168]	; (8003e88 <HAL_GPIO_Init+0x2d0>)
 8003de0:	681a      	ldr	r2, [r3, #0]
 8003de2:	69bb      	ldr	r3, [r7, #24]
 8003de4:	43db      	mvns	r3, r3
 8003de6:	4928      	ldr	r1, [pc, #160]	; (8003e88 <HAL_GPIO_Init+0x2d0>)
 8003de8:	4013      	ands	r3, r2
 8003dea:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	685b      	ldr	r3, [r3, #4]
 8003df0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d006      	beq.n	8003e06 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003df8:	4b23      	ldr	r3, [pc, #140]	; (8003e88 <HAL_GPIO_Init+0x2d0>)
 8003dfa:	685a      	ldr	r2, [r3, #4]
 8003dfc:	4922      	ldr	r1, [pc, #136]	; (8003e88 <HAL_GPIO_Init+0x2d0>)
 8003dfe:	69bb      	ldr	r3, [r7, #24]
 8003e00:	4313      	orrs	r3, r2
 8003e02:	604b      	str	r3, [r1, #4]
 8003e04:	e006      	b.n	8003e14 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003e06:	4b20      	ldr	r3, [pc, #128]	; (8003e88 <HAL_GPIO_Init+0x2d0>)
 8003e08:	685a      	ldr	r2, [r3, #4]
 8003e0a:	69bb      	ldr	r3, [r7, #24]
 8003e0c:	43db      	mvns	r3, r3
 8003e0e:	491e      	ldr	r1, [pc, #120]	; (8003e88 <HAL_GPIO_Init+0x2d0>)
 8003e10:	4013      	ands	r3, r2
 8003e12:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	685b      	ldr	r3, [r3, #4]
 8003e18:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d006      	beq.n	8003e2e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003e20:	4b19      	ldr	r3, [pc, #100]	; (8003e88 <HAL_GPIO_Init+0x2d0>)
 8003e22:	689a      	ldr	r2, [r3, #8]
 8003e24:	4918      	ldr	r1, [pc, #96]	; (8003e88 <HAL_GPIO_Init+0x2d0>)
 8003e26:	69bb      	ldr	r3, [r7, #24]
 8003e28:	4313      	orrs	r3, r2
 8003e2a:	608b      	str	r3, [r1, #8]
 8003e2c:	e006      	b.n	8003e3c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003e2e:	4b16      	ldr	r3, [pc, #88]	; (8003e88 <HAL_GPIO_Init+0x2d0>)
 8003e30:	689a      	ldr	r2, [r3, #8]
 8003e32:	69bb      	ldr	r3, [r7, #24]
 8003e34:	43db      	mvns	r3, r3
 8003e36:	4914      	ldr	r1, [pc, #80]	; (8003e88 <HAL_GPIO_Init+0x2d0>)
 8003e38:	4013      	ands	r3, r2
 8003e3a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	685b      	ldr	r3, [r3, #4]
 8003e40:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d021      	beq.n	8003e8c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003e48:	4b0f      	ldr	r3, [pc, #60]	; (8003e88 <HAL_GPIO_Init+0x2d0>)
 8003e4a:	68da      	ldr	r2, [r3, #12]
 8003e4c:	490e      	ldr	r1, [pc, #56]	; (8003e88 <HAL_GPIO_Init+0x2d0>)
 8003e4e:	69bb      	ldr	r3, [r7, #24]
 8003e50:	4313      	orrs	r3, r2
 8003e52:	60cb      	str	r3, [r1, #12]
 8003e54:	e021      	b.n	8003e9a <HAL_GPIO_Init+0x2e2>
 8003e56:	bf00      	nop
 8003e58:	10320000 	.word	0x10320000
 8003e5c:	10310000 	.word	0x10310000
 8003e60:	10220000 	.word	0x10220000
 8003e64:	10210000 	.word	0x10210000
 8003e68:	10120000 	.word	0x10120000
 8003e6c:	10110000 	.word	0x10110000
 8003e70:	40021000 	.word	0x40021000
 8003e74:	40010000 	.word	0x40010000
 8003e78:	40010800 	.word	0x40010800
 8003e7c:	40010c00 	.word	0x40010c00
 8003e80:	40011000 	.word	0x40011000
 8003e84:	40011400 	.word	0x40011400
 8003e88:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003e8c:	4b0b      	ldr	r3, [pc, #44]	; (8003ebc <HAL_GPIO_Init+0x304>)
 8003e8e:	68da      	ldr	r2, [r3, #12]
 8003e90:	69bb      	ldr	r3, [r7, #24]
 8003e92:	43db      	mvns	r3, r3
 8003e94:	4909      	ldr	r1, [pc, #36]	; (8003ebc <HAL_GPIO_Init+0x304>)
 8003e96:	4013      	ands	r3, r2
 8003e98:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8003e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e9c:	3301      	adds	r3, #1
 8003e9e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	681a      	ldr	r2, [r3, #0]
 8003ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ea6:	fa22 f303 	lsr.w	r3, r2, r3
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	f47f ae8e 	bne.w	8003bcc <HAL_GPIO_Init+0x14>
  }
}
 8003eb0:	bf00      	nop
 8003eb2:	bf00      	nop
 8003eb4:	372c      	adds	r7, #44	; 0x2c
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	bc80      	pop	{r7}
 8003eba:	4770      	bx	lr
 8003ebc:	40010400 	.word	0x40010400

08003ec0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003ec0:	b480      	push	{r7}
 8003ec2:	b085      	sub	sp, #20
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
 8003ec8:	460b      	mov	r3, r1
 8003eca:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	689a      	ldr	r2, [r3, #8]
 8003ed0:	887b      	ldrh	r3, [r7, #2]
 8003ed2:	4013      	ands	r3, r2
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d002      	beq.n	8003ede <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003ed8:	2301      	movs	r3, #1
 8003eda:	73fb      	strb	r3, [r7, #15]
 8003edc:	e001      	b.n	8003ee2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003ede:	2300      	movs	r3, #0
 8003ee0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003ee2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	3714      	adds	r7, #20
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	bc80      	pop	{r7}
 8003eec:	4770      	bx	lr

08003eee <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003eee:	b480      	push	{r7}
 8003ef0:	b083      	sub	sp, #12
 8003ef2:	af00      	add	r7, sp, #0
 8003ef4:	6078      	str	r0, [r7, #4]
 8003ef6:	460b      	mov	r3, r1
 8003ef8:	807b      	strh	r3, [r7, #2]
 8003efa:	4613      	mov	r3, r2
 8003efc:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003efe:	787b      	ldrb	r3, [r7, #1]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d003      	beq.n	8003f0c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003f04:	887a      	ldrh	r2, [r7, #2]
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003f0a:	e003      	b.n	8003f14 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003f0c:	887b      	ldrh	r3, [r7, #2]
 8003f0e:	041a      	lsls	r2, r3, #16
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	611a      	str	r2, [r3, #16]
}
 8003f14:	bf00      	nop
 8003f16:	370c      	adds	r7, #12
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	bc80      	pop	{r7}
 8003f1c:	4770      	bx	lr
	...

08003f20 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003f20:	b580      	push	{r7, lr}
 8003f22:	b082      	sub	sp, #8
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	4603      	mov	r3, r0
 8003f28:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003f2a:	4b08      	ldr	r3, [pc, #32]	; (8003f4c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003f2c:	695a      	ldr	r2, [r3, #20]
 8003f2e:	88fb      	ldrh	r3, [r7, #6]
 8003f30:	4013      	ands	r3, r2
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d006      	beq.n	8003f44 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003f36:	4a05      	ldr	r2, [pc, #20]	; (8003f4c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003f38:	88fb      	ldrh	r3, [r7, #6]
 8003f3a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003f3c:	88fb      	ldrh	r3, [r7, #6]
 8003f3e:	4618      	mov	r0, r3
 8003f40:	f000 f806 	bl	8003f50 <HAL_GPIO_EXTI_Callback>
  }
}
 8003f44:	bf00      	nop
 8003f46:	3708      	adds	r7, #8
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	bd80      	pop	{r7, pc}
 8003f4c:	40010400 	.word	0x40010400

08003f50 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003f50:	b480      	push	{r7}
 8003f52:	b083      	sub	sp, #12
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	4603      	mov	r3, r0
 8003f58:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003f5a:	bf00      	nop
 8003f5c:	370c      	adds	r7, #12
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	bc80      	pop	{r7}
 8003f62:	4770      	bx	lr

08003f64 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b084      	sub	sp, #16
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d101      	bne.n	8003f76 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003f72:	2301      	movs	r3, #1
 8003f74:	e12b      	b.n	80041ce <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f7c:	b2db      	uxtb	r3, r3
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d106      	bne.n	8003f90 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	2200      	movs	r2, #0
 8003f86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003f8a:	6878      	ldr	r0, [r7, #4]
 8003f8c:	f7fe f91a 	bl	80021c4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2224      	movs	r2, #36	; 0x24
 8003f94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	681a      	ldr	r2, [r3, #0]
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f022 0201 	bic.w	r2, r2, #1
 8003fa6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	681a      	ldr	r2, [r3, #0]
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003fb6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	681a      	ldr	r2, [r3, #0]
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003fc6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003fc8:	f001 fba0 	bl	800570c <HAL_RCC_GetPCLK1Freq>
 8003fcc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	685b      	ldr	r3, [r3, #4]
 8003fd2:	4a81      	ldr	r2, [pc, #516]	; (80041d8 <HAL_I2C_Init+0x274>)
 8003fd4:	4293      	cmp	r3, r2
 8003fd6:	d807      	bhi.n	8003fe8 <HAL_I2C_Init+0x84>
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	4a80      	ldr	r2, [pc, #512]	; (80041dc <HAL_I2C_Init+0x278>)
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	bf94      	ite	ls
 8003fe0:	2301      	movls	r3, #1
 8003fe2:	2300      	movhi	r3, #0
 8003fe4:	b2db      	uxtb	r3, r3
 8003fe6:	e006      	b.n	8003ff6 <HAL_I2C_Init+0x92>
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	4a7d      	ldr	r2, [pc, #500]	; (80041e0 <HAL_I2C_Init+0x27c>)
 8003fec:	4293      	cmp	r3, r2
 8003fee:	bf94      	ite	ls
 8003ff0:	2301      	movls	r3, #1
 8003ff2:	2300      	movhi	r3, #0
 8003ff4:	b2db      	uxtb	r3, r3
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d001      	beq.n	8003ffe <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003ffa:	2301      	movs	r3, #1
 8003ffc:	e0e7      	b.n	80041ce <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	4a78      	ldr	r2, [pc, #480]	; (80041e4 <HAL_I2C_Init+0x280>)
 8004002:	fba2 2303 	umull	r2, r3, r2, r3
 8004006:	0c9b      	lsrs	r3, r3, #18
 8004008:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	685b      	ldr	r3, [r3, #4]
 8004010:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	68ba      	ldr	r2, [r7, #8]
 800401a:	430a      	orrs	r2, r1
 800401c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	6a1b      	ldr	r3, [r3, #32]
 8004024:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	685b      	ldr	r3, [r3, #4]
 800402c:	4a6a      	ldr	r2, [pc, #424]	; (80041d8 <HAL_I2C_Init+0x274>)
 800402e:	4293      	cmp	r3, r2
 8004030:	d802      	bhi.n	8004038 <HAL_I2C_Init+0xd4>
 8004032:	68bb      	ldr	r3, [r7, #8]
 8004034:	3301      	adds	r3, #1
 8004036:	e009      	b.n	800404c <HAL_I2C_Init+0xe8>
 8004038:	68bb      	ldr	r3, [r7, #8]
 800403a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800403e:	fb02 f303 	mul.w	r3, r2, r3
 8004042:	4a69      	ldr	r2, [pc, #420]	; (80041e8 <HAL_I2C_Init+0x284>)
 8004044:	fba2 2303 	umull	r2, r3, r2, r3
 8004048:	099b      	lsrs	r3, r3, #6
 800404a:	3301      	adds	r3, #1
 800404c:	687a      	ldr	r2, [r7, #4]
 800404e:	6812      	ldr	r2, [r2, #0]
 8004050:	430b      	orrs	r3, r1
 8004052:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	69db      	ldr	r3, [r3, #28]
 800405a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800405e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	685b      	ldr	r3, [r3, #4]
 8004066:	495c      	ldr	r1, [pc, #368]	; (80041d8 <HAL_I2C_Init+0x274>)
 8004068:	428b      	cmp	r3, r1
 800406a:	d819      	bhi.n	80040a0 <HAL_I2C_Init+0x13c>
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	1e59      	subs	r1, r3, #1
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	685b      	ldr	r3, [r3, #4]
 8004074:	005b      	lsls	r3, r3, #1
 8004076:	fbb1 f3f3 	udiv	r3, r1, r3
 800407a:	1c59      	adds	r1, r3, #1
 800407c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004080:	400b      	ands	r3, r1
 8004082:	2b00      	cmp	r3, #0
 8004084:	d00a      	beq.n	800409c <HAL_I2C_Init+0x138>
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	1e59      	subs	r1, r3, #1
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	685b      	ldr	r3, [r3, #4]
 800408e:	005b      	lsls	r3, r3, #1
 8004090:	fbb1 f3f3 	udiv	r3, r1, r3
 8004094:	3301      	adds	r3, #1
 8004096:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800409a:	e051      	b.n	8004140 <HAL_I2C_Init+0x1dc>
 800409c:	2304      	movs	r3, #4
 800409e:	e04f      	b.n	8004140 <HAL_I2C_Init+0x1dc>
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	689b      	ldr	r3, [r3, #8]
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d111      	bne.n	80040cc <HAL_I2C_Init+0x168>
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	1e58      	subs	r0, r3, #1
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6859      	ldr	r1, [r3, #4]
 80040b0:	460b      	mov	r3, r1
 80040b2:	005b      	lsls	r3, r3, #1
 80040b4:	440b      	add	r3, r1
 80040b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80040ba:	3301      	adds	r3, #1
 80040bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	bf0c      	ite	eq
 80040c4:	2301      	moveq	r3, #1
 80040c6:	2300      	movne	r3, #0
 80040c8:	b2db      	uxtb	r3, r3
 80040ca:	e012      	b.n	80040f2 <HAL_I2C_Init+0x18e>
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	1e58      	subs	r0, r3, #1
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6859      	ldr	r1, [r3, #4]
 80040d4:	460b      	mov	r3, r1
 80040d6:	009b      	lsls	r3, r3, #2
 80040d8:	440b      	add	r3, r1
 80040da:	0099      	lsls	r1, r3, #2
 80040dc:	440b      	add	r3, r1
 80040de:	fbb0 f3f3 	udiv	r3, r0, r3
 80040e2:	3301      	adds	r3, #1
 80040e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	bf0c      	ite	eq
 80040ec:	2301      	moveq	r3, #1
 80040ee:	2300      	movne	r3, #0
 80040f0:	b2db      	uxtb	r3, r3
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d001      	beq.n	80040fa <HAL_I2C_Init+0x196>
 80040f6:	2301      	movs	r3, #1
 80040f8:	e022      	b.n	8004140 <HAL_I2C_Init+0x1dc>
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	689b      	ldr	r3, [r3, #8]
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d10e      	bne.n	8004120 <HAL_I2C_Init+0x1bc>
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	1e58      	subs	r0, r3, #1
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6859      	ldr	r1, [r3, #4]
 800410a:	460b      	mov	r3, r1
 800410c:	005b      	lsls	r3, r3, #1
 800410e:	440b      	add	r3, r1
 8004110:	fbb0 f3f3 	udiv	r3, r0, r3
 8004114:	3301      	adds	r3, #1
 8004116:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800411a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800411e:	e00f      	b.n	8004140 <HAL_I2C_Init+0x1dc>
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	1e58      	subs	r0, r3, #1
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6859      	ldr	r1, [r3, #4]
 8004128:	460b      	mov	r3, r1
 800412a:	009b      	lsls	r3, r3, #2
 800412c:	440b      	add	r3, r1
 800412e:	0099      	lsls	r1, r3, #2
 8004130:	440b      	add	r3, r1
 8004132:	fbb0 f3f3 	udiv	r3, r0, r3
 8004136:	3301      	adds	r3, #1
 8004138:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800413c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004140:	6879      	ldr	r1, [r7, #4]
 8004142:	6809      	ldr	r1, [r1, #0]
 8004144:	4313      	orrs	r3, r2
 8004146:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	69da      	ldr	r2, [r3, #28]
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6a1b      	ldr	r3, [r3, #32]
 800415a:	431a      	orrs	r2, r3
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	430a      	orrs	r2, r1
 8004162:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	689b      	ldr	r3, [r3, #8]
 800416a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800416e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004172:	687a      	ldr	r2, [r7, #4]
 8004174:	6911      	ldr	r1, [r2, #16]
 8004176:	687a      	ldr	r2, [r7, #4]
 8004178:	68d2      	ldr	r2, [r2, #12]
 800417a:	4311      	orrs	r1, r2
 800417c:	687a      	ldr	r2, [r7, #4]
 800417e:	6812      	ldr	r2, [r2, #0]
 8004180:	430b      	orrs	r3, r1
 8004182:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	68db      	ldr	r3, [r3, #12]
 800418a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	695a      	ldr	r2, [r3, #20]
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	699b      	ldr	r3, [r3, #24]
 8004196:	431a      	orrs	r2, r3
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	430a      	orrs	r2, r1
 800419e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	681a      	ldr	r2, [r3, #0]
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f042 0201 	orr.w	r2, r2, #1
 80041ae:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2200      	movs	r2, #0
 80041b4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	2220      	movs	r2, #32
 80041ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	2200      	movs	r2, #0
 80041c2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2200      	movs	r2, #0
 80041c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80041cc:	2300      	movs	r3, #0
}
 80041ce:	4618      	mov	r0, r3
 80041d0:	3710      	adds	r7, #16
 80041d2:	46bd      	mov	sp, r7
 80041d4:	bd80      	pop	{r7, pc}
 80041d6:	bf00      	nop
 80041d8:	000186a0 	.word	0x000186a0
 80041dc:	001e847f 	.word	0x001e847f
 80041e0:	003d08ff 	.word	0x003d08ff
 80041e4:	431bde83 	.word	0x431bde83
 80041e8:	10624dd3 	.word	0x10624dd3

080041ec <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b088      	sub	sp, #32
 80041f0:	af02      	add	r7, sp, #8
 80041f2:	60f8      	str	r0, [r7, #12]
 80041f4:	4608      	mov	r0, r1
 80041f6:	4611      	mov	r1, r2
 80041f8:	461a      	mov	r2, r3
 80041fa:	4603      	mov	r3, r0
 80041fc:	817b      	strh	r3, [r7, #10]
 80041fe:	460b      	mov	r3, r1
 8004200:	813b      	strh	r3, [r7, #8]
 8004202:	4613      	mov	r3, r2
 8004204:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004206:	f7ff fb9b 	bl	8003940 <HAL_GetTick>
 800420a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004212:	b2db      	uxtb	r3, r3
 8004214:	2b20      	cmp	r3, #32
 8004216:	f040 80d9 	bne.w	80043cc <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800421a:	697b      	ldr	r3, [r7, #20]
 800421c:	9300      	str	r3, [sp, #0]
 800421e:	2319      	movs	r3, #25
 8004220:	2201      	movs	r2, #1
 8004222:	496d      	ldr	r1, [pc, #436]	; (80043d8 <HAL_I2C_Mem_Write+0x1ec>)
 8004224:	68f8      	ldr	r0, [r7, #12]
 8004226:	f000 fcc1 	bl	8004bac <I2C_WaitOnFlagUntilTimeout>
 800422a:	4603      	mov	r3, r0
 800422c:	2b00      	cmp	r3, #0
 800422e:	d001      	beq.n	8004234 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004230:	2302      	movs	r3, #2
 8004232:	e0cc      	b.n	80043ce <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800423a:	2b01      	cmp	r3, #1
 800423c:	d101      	bne.n	8004242 <HAL_I2C_Mem_Write+0x56>
 800423e:	2302      	movs	r3, #2
 8004240:	e0c5      	b.n	80043ce <HAL_I2C_Mem_Write+0x1e2>
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	2201      	movs	r2, #1
 8004246:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f003 0301 	and.w	r3, r3, #1
 8004254:	2b01      	cmp	r3, #1
 8004256:	d007      	beq.n	8004268 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	681a      	ldr	r2, [r3, #0]
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f042 0201 	orr.w	r2, r2, #1
 8004266:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	681a      	ldr	r2, [r3, #0]
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004276:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	2221      	movs	r2, #33	; 0x21
 800427c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	2240      	movs	r2, #64	; 0x40
 8004284:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	2200      	movs	r2, #0
 800428c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	6a3a      	ldr	r2, [r7, #32]
 8004292:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004298:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800429e:	b29a      	uxth	r2, r3
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	4a4d      	ldr	r2, [pc, #308]	; (80043dc <HAL_I2C_Mem_Write+0x1f0>)
 80042a8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80042aa:	88f8      	ldrh	r0, [r7, #6]
 80042ac:	893a      	ldrh	r2, [r7, #8]
 80042ae:	8979      	ldrh	r1, [r7, #10]
 80042b0:	697b      	ldr	r3, [r7, #20]
 80042b2:	9301      	str	r3, [sp, #4]
 80042b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042b6:	9300      	str	r3, [sp, #0]
 80042b8:	4603      	mov	r3, r0
 80042ba:	68f8      	ldr	r0, [r7, #12]
 80042bc:	f000 faf8 	bl	80048b0 <I2C_RequestMemoryWrite>
 80042c0:	4603      	mov	r3, r0
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d052      	beq.n	800436c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80042c6:	2301      	movs	r3, #1
 80042c8:	e081      	b.n	80043ce <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80042ca:	697a      	ldr	r2, [r7, #20]
 80042cc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80042ce:	68f8      	ldr	r0, [r7, #12]
 80042d0:	f000 fd42 	bl	8004d58 <I2C_WaitOnTXEFlagUntilTimeout>
 80042d4:	4603      	mov	r3, r0
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d00d      	beq.n	80042f6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042de:	2b04      	cmp	r3, #4
 80042e0:	d107      	bne.n	80042f2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	681a      	ldr	r2, [r3, #0]
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80042f0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80042f2:	2301      	movs	r3, #1
 80042f4:	e06b      	b.n	80043ce <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042fa:	781a      	ldrb	r2, [r3, #0]
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004306:	1c5a      	adds	r2, r3, #1
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004310:	3b01      	subs	r3, #1
 8004312:	b29a      	uxth	r2, r3
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800431c:	b29b      	uxth	r3, r3
 800431e:	3b01      	subs	r3, #1
 8004320:	b29a      	uxth	r2, r3
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	695b      	ldr	r3, [r3, #20]
 800432c:	f003 0304 	and.w	r3, r3, #4
 8004330:	2b04      	cmp	r3, #4
 8004332:	d11b      	bne.n	800436c <HAL_I2C_Mem_Write+0x180>
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004338:	2b00      	cmp	r3, #0
 800433a:	d017      	beq.n	800436c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004340:	781a      	ldrb	r2, [r3, #0]
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800434c:	1c5a      	adds	r2, r3, #1
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004356:	3b01      	subs	r3, #1
 8004358:	b29a      	uxth	r2, r3
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004362:	b29b      	uxth	r3, r3
 8004364:	3b01      	subs	r3, #1
 8004366:	b29a      	uxth	r2, r3
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004370:	2b00      	cmp	r3, #0
 8004372:	d1aa      	bne.n	80042ca <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004374:	697a      	ldr	r2, [r7, #20]
 8004376:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004378:	68f8      	ldr	r0, [r7, #12]
 800437a:	f000 fd2e 	bl	8004dda <I2C_WaitOnBTFFlagUntilTimeout>
 800437e:	4603      	mov	r3, r0
 8004380:	2b00      	cmp	r3, #0
 8004382:	d00d      	beq.n	80043a0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004388:	2b04      	cmp	r3, #4
 800438a:	d107      	bne.n	800439c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	681a      	ldr	r2, [r3, #0]
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800439a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800439c:	2301      	movs	r3, #1
 800439e:	e016      	b.n	80043ce <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	681a      	ldr	r2, [r3, #0]
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80043ae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	2220      	movs	r2, #32
 80043b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	2200      	movs	r2, #0
 80043bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	2200      	movs	r2, #0
 80043c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80043c8:	2300      	movs	r3, #0
 80043ca:	e000      	b.n	80043ce <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80043cc:	2302      	movs	r3, #2
  }
}
 80043ce:	4618      	mov	r0, r3
 80043d0:	3718      	adds	r7, #24
 80043d2:	46bd      	mov	sp, r7
 80043d4:	bd80      	pop	{r7, pc}
 80043d6:	bf00      	nop
 80043d8:	00100002 	.word	0x00100002
 80043dc:	ffff0000 	.word	0xffff0000

080043e0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	b08c      	sub	sp, #48	; 0x30
 80043e4:	af02      	add	r7, sp, #8
 80043e6:	60f8      	str	r0, [r7, #12]
 80043e8:	4608      	mov	r0, r1
 80043ea:	4611      	mov	r1, r2
 80043ec:	461a      	mov	r2, r3
 80043ee:	4603      	mov	r3, r0
 80043f0:	817b      	strh	r3, [r7, #10]
 80043f2:	460b      	mov	r3, r1
 80043f4:	813b      	strh	r3, [r7, #8]
 80043f6:	4613      	mov	r3, r2
 80043f8:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 80043fa:	2300      	movs	r3, #0
 80043fc:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80043fe:	f7ff fa9f 	bl	8003940 <HAL_GetTick>
 8004402:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800440a:	b2db      	uxtb	r3, r3
 800440c:	2b20      	cmp	r3, #32
 800440e:	f040 8244 	bne.w	800489a <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004414:	9300      	str	r3, [sp, #0]
 8004416:	2319      	movs	r3, #25
 8004418:	2201      	movs	r2, #1
 800441a:	4982      	ldr	r1, [pc, #520]	; (8004624 <HAL_I2C_Mem_Read+0x244>)
 800441c:	68f8      	ldr	r0, [r7, #12]
 800441e:	f000 fbc5 	bl	8004bac <I2C_WaitOnFlagUntilTimeout>
 8004422:	4603      	mov	r3, r0
 8004424:	2b00      	cmp	r3, #0
 8004426:	d001      	beq.n	800442c <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8004428:	2302      	movs	r3, #2
 800442a:	e237      	b.n	800489c <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004432:	2b01      	cmp	r3, #1
 8004434:	d101      	bne.n	800443a <HAL_I2C_Mem_Read+0x5a>
 8004436:	2302      	movs	r3, #2
 8004438:	e230      	b.n	800489c <HAL_I2C_Mem_Read+0x4bc>
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	2201      	movs	r2, #1
 800443e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f003 0301 	and.w	r3, r3, #1
 800444c:	2b01      	cmp	r3, #1
 800444e:	d007      	beq.n	8004460 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	681a      	ldr	r2, [r3, #0]
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f042 0201 	orr.w	r2, r2, #1
 800445e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	681a      	ldr	r2, [r3, #0]
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800446e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	2222      	movs	r2, #34	; 0x22
 8004474:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	2240      	movs	r2, #64	; 0x40
 800447c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	2200      	movs	r2, #0
 8004484:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800448a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004490:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004496:	b29a      	uxth	r2, r3
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	4a62      	ldr	r2, [pc, #392]	; (8004628 <HAL_I2C_Mem_Read+0x248>)
 80044a0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80044a2:	88f8      	ldrh	r0, [r7, #6]
 80044a4:	893a      	ldrh	r2, [r7, #8]
 80044a6:	8979      	ldrh	r1, [r7, #10]
 80044a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044aa:	9301      	str	r3, [sp, #4]
 80044ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044ae:	9300      	str	r3, [sp, #0]
 80044b0:	4603      	mov	r3, r0
 80044b2:	68f8      	ldr	r0, [r7, #12]
 80044b4:	f000 fa92 	bl	80049dc <I2C_RequestMemoryRead>
 80044b8:	4603      	mov	r3, r0
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d001      	beq.n	80044c2 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 80044be:	2301      	movs	r3, #1
 80044c0:	e1ec      	b.n	800489c <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d113      	bne.n	80044f2 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80044ca:	2300      	movs	r3, #0
 80044cc:	61fb      	str	r3, [r7, #28]
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	695b      	ldr	r3, [r3, #20]
 80044d4:	61fb      	str	r3, [r7, #28]
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	699b      	ldr	r3, [r3, #24]
 80044dc:	61fb      	str	r3, [r7, #28]
 80044de:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	681a      	ldr	r2, [r3, #0]
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80044ee:	601a      	str	r2, [r3, #0]
 80044f0:	e1c0      	b.n	8004874 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044f6:	2b01      	cmp	r3, #1
 80044f8:	d11e      	bne.n	8004538 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	681a      	ldr	r2, [r3, #0]
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004508:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800450a:	b672      	cpsid	i
}
 800450c:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800450e:	2300      	movs	r3, #0
 8004510:	61bb      	str	r3, [r7, #24]
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	695b      	ldr	r3, [r3, #20]
 8004518:	61bb      	str	r3, [r7, #24]
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	699b      	ldr	r3, [r3, #24]
 8004520:	61bb      	str	r3, [r7, #24]
 8004522:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	681a      	ldr	r2, [r3, #0]
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004532:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004534:	b662      	cpsie	i
}
 8004536:	e035      	b.n	80045a4 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800453c:	2b02      	cmp	r3, #2
 800453e:	d11e      	bne.n	800457e <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	681a      	ldr	r2, [r3, #0]
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800454e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004550:	b672      	cpsid	i
}
 8004552:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004554:	2300      	movs	r3, #0
 8004556:	617b      	str	r3, [r7, #20]
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	695b      	ldr	r3, [r3, #20]
 800455e:	617b      	str	r3, [r7, #20]
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	699b      	ldr	r3, [r3, #24]
 8004566:	617b      	str	r3, [r7, #20]
 8004568:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	681a      	ldr	r2, [r3, #0]
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004578:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800457a:	b662      	cpsie	i
}
 800457c:	e012      	b.n	80045a4 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	681a      	ldr	r2, [r3, #0]
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800458c:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800458e:	2300      	movs	r3, #0
 8004590:	613b      	str	r3, [r7, #16]
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	695b      	ldr	r3, [r3, #20]
 8004598:	613b      	str	r3, [r7, #16]
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	699b      	ldr	r3, [r3, #24]
 80045a0:	613b      	str	r3, [r7, #16]
 80045a2:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80045a4:	e166      	b.n	8004874 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045aa:	2b03      	cmp	r3, #3
 80045ac:	f200 811f 	bhi.w	80047ee <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045b4:	2b01      	cmp	r3, #1
 80045b6:	d123      	bne.n	8004600 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80045b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045ba:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80045bc:	68f8      	ldr	r0, [r7, #12]
 80045be:	f000 fc4d 	bl	8004e5c <I2C_WaitOnRXNEFlagUntilTimeout>
 80045c2:	4603      	mov	r3, r0
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d001      	beq.n	80045cc <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 80045c8:	2301      	movs	r3, #1
 80045ca:	e167      	b.n	800489c <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	691a      	ldr	r2, [r3, #16]
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045d6:	b2d2      	uxtb	r2, r2
 80045d8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045de:	1c5a      	adds	r2, r3, #1
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045e8:	3b01      	subs	r3, #1
 80045ea:	b29a      	uxth	r2, r3
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045f4:	b29b      	uxth	r3, r3
 80045f6:	3b01      	subs	r3, #1
 80045f8:	b29a      	uxth	r2, r3
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	855a      	strh	r2, [r3, #42]	; 0x2a
 80045fe:	e139      	b.n	8004874 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004604:	2b02      	cmp	r3, #2
 8004606:	d152      	bne.n	80046ae <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800460a:	9300      	str	r3, [sp, #0]
 800460c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800460e:	2200      	movs	r2, #0
 8004610:	4906      	ldr	r1, [pc, #24]	; (800462c <HAL_I2C_Mem_Read+0x24c>)
 8004612:	68f8      	ldr	r0, [r7, #12]
 8004614:	f000 faca 	bl	8004bac <I2C_WaitOnFlagUntilTimeout>
 8004618:	4603      	mov	r3, r0
 800461a:	2b00      	cmp	r3, #0
 800461c:	d008      	beq.n	8004630 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 800461e:	2301      	movs	r3, #1
 8004620:	e13c      	b.n	800489c <HAL_I2C_Mem_Read+0x4bc>
 8004622:	bf00      	nop
 8004624:	00100002 	.word	0x00100002
 8004628:	ffff0000 	.word	0xffff0000
 800462c:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8004630:	b672      	cpsid	i
}
 8004632:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	681a      	ldr	r2, [r3, #0]
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004642:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	691a      	ldr	r2, [r3, #16]
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800464e:	b2d2      	uxtb	r2, r2
 8004650:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004656:	1c5a      	adds	r2, r3, #1
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004660:	3b01      	subs	r3, #1
 8004662:	b29a      	uxth	r2, r3
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800466c:	b29b      	uxth	r3, r3
 800466e:	3b01      	subs	r3, #1
 8004670:	b29a      	uxth	r2, r3
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8004676:	b662      	cpsie	i
}
 8004678:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	691a      	ldr	r2, [r3, #16]
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004684:	b2d2      	uxtb	r2, r2
 8004686:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800468c:	1c5a      	adds	r2, r3, #1
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004696:	3b01      	subs	r3, #1
 8004698:	b29a      	uxth	r2, r3
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046a2:	b29b      	uxth	r3, r3
 80046a4:	3b01      	subs	r3, #1
 80046a6:	b29a      	uxth	r2, r3
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	855a      	strh	r2, [r3, #42]	; 0x2a
 80046ac:	e0e2      	b.n	8004874 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80046ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046b0:	9300      	str	r3, [sp, #0]
 80046b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046b4:	2200      	movs	r2, #0
 80046b6:	497b      	ldr	r1, [pc, #492]	; (80048a4 <HAL_I2C_Mem_Read+0x4c4>)
 80046b8:	68f8      	ldr	r0, [r7, #12]
 80046ba:	f000 fa77 	bl	8004bac <I2C_WaitOnFlagUntilTimeout>
 80046be:	4603      	mov	r3, r0
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d001      	beq.n	80046c8 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 80046c4:	2301      	movs	r3, #1
 80046c6:	e0e9      	b.n	800489c <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	681a      	ldr	r2, [r3, #0]
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80046d6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80046d8:	b672      	cpsid	i
}
 80046da:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	691a      	ldr	r2, [r3, #16]
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046e6:	b2d2      	uxtb	r2, r2
 80046e8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ee:	1c5a      	adds	r2, r3, #1
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046f8:	3b01      	subs	r3, #1
 80046fa:	b29a      	uxth	r2, r3
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004704:	b29b      	uxth	r3, r3
 8004706:	3b01      	subs	r3, #1
 8004708:	b29a      	uxth	r2, r3
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800470e:	4b66      	ldr	r3, [pc, #408]	; (80048a8 <HAL_I2C_Mem_Read+0x4c8>)
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	08db      	lsrs	r3, r3, #3
 8004714:	4a65      	ldr	r2, [pc, #404]	; (80048ac <HAL_I2C_Mem_Read+0x4cc>)
 8004716:	fba2 2303 	umull	r2, r3, r2, r3
 800471a:	0a1a      	lsrs	r2, r3, #8
 800471c:	4613      	mov	r3, r2
 800471e:	009b      	lsls	r3, r3, #2
 8004720:	4413      	add	r3, r2
 8004722:	00da      	lsls	r2, r3, #3
 8004724:	1ad3      	subs	r3, r2, r3
 8004726:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8004728:	6a3b      	ldr	r3, [r7, #32]
 800472a:	3b01      	subs	r3, #1
 800472c:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800472e:	6a3b      	ldr	r3, [r7, #32]
 8004730:	2b00      	cmp	r3, #0
 8004732:	d118      	bne.n	8004766 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	2200      	movs	r2, #0
 8004738:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	2220      	movs	r2, #32
 800473e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	2200      	movs	r2, #0
 8004746:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800474e:	f043 0220 	orr.w	r2, r3, #32
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8004756:	b662      	cpsie	i
}
 8004758:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	2200      	movs	r2, #0
 800475e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8004762:	2301      	movs	r3, #1
 8004764:	e09a      	b.n	800489c <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	695b      	ldr	r3, [r3, #20]
 800476c:	f003 0304 	and.w	r3, r3, #4
 8004770:	2b04      	cmp	r3, #4
 8004772:	d1d9      	bne.n	8004728 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	681a      	ldr	r2, [r3, #0]
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004782:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	691a      	ldr	r2, [r3, #16]
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800478e:	b2d2      	uxtb	r2, r2
 8004790:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004796:	1c5a      	adds	r2, r3, #1
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047a0:	3b01      	subs	r3, #1
 80047a2:	b29a      	uxth	r2, r3
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047ac:	b29b      	uxth	r3, r3
 80047ae:	3b01      	subs	r3, #1
 80047b0:	b29a      	uxth	r2, r3
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80047b6:	b662      	cpsie	i
}
 80047b8:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	691a      	ldr	r2, [r3, #16]
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047c4:	b2d2      	uxtb	r2, r2
 80047c6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047cc:	1c5a      	adds	r2, r3, #1
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047d6:	3b01      	subs	r3, #1
 80047d8:	b29a      	uxth	r2, r3
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047e2:	b29b      	uxth	r3, r3
 80047e4:	3b01      	subs	r3, #1
 80047e6:	b29a      	uxth	r2, r3
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	855a      	strh	r2, [r3, #42]	; 0x2a
 80047ec:	e042      	b.n	8004874 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80047ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047f0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80047f2:	68f8      	ldr	r0, [r7, #12]
 80047f4:	f000 fb32 	bl	8004e5c <I2C_WaitOnRXNEFlagUntilTimeout>
 80047f8:	4603      	mov	r3, r0
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d001      	beq.n	8004802 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 80047fe:	2301      	movs	r3, #1
 8004800:	e04c      	b.n	800489c <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	691a      	ldr	r2, [r3, #16]
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800480c:	b2d2      	uxtb	r2, r2
 800480e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004814:	1c5a      	adds	r2, r3, #1
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800481e:	3b01      	subs	r3, #1
 8004820:	b29a      	uxth	r2, r3
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800482a:	b29b      	uxth	r3, r3
 800482c:	3b01      	subs	r3, #1
 800482e:	b29a      	uxth	r2, r3
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	695b      	ldr	r3, [r3, #20]
 800483a:	f003 0304 	and.w	r3, r3, #4
 800483e:	2b04      	cmp	r3, #4
 8004840:	d118      	bne.n	8004874 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	691a      	ldr	r2, [r3, #16]
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800484c:	b2d2      	uxtb	r2, r2
 800484e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004854:	1c5a      	adds	r2, r3, #1
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800485e:	3b01      	subs	r3, #1
 8004860:	b29a      	uxth	r2, r3
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800486a:	b29b      	uxth	r3, r3
 800486c:	3b01      	subs	r3, #1
 800486e:	b29a      	uxth	r2, r3
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004878:	2b00      	cmp	r3, #0
 800487a:	f47f ae94 	bne.w	80045a6 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	2220      	movs	r2, #32
 8004882:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	2200      	movs	r2, #0
 800488a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	2200      	movs	r2, #0
 8004892:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004896:	2300      	movs	r3, #0
 8004898:	e000      	b.n	800489c <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 800489a:	2302      	movs	r3, #2
  }
}
 800489c:	4618      	mov	r0, r3
 800489e:	3728      	adds	r7, #40	; 0x28
 80048a0:	46bd      	mov	sp, r7
 80048a2:	bd80      	pop	{r7, pc}
 80048a4:	00010004 	.word	0x00010004
 80048a8:	20000174 	.word	0x20000174
 80048ac:	14f8b589 	.word	0x14f8b589

080048b0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80048b0:	b580      	push	{r7, lr}
 80048b2:	b088      	sub	sp, #32
 80048b4:	af02      	add	r7, sp, #8
 80048b6:	60f8      	str	r0, [r7, #12]
 80048b8:	4608      	mov	r0, r1
 80048ba:	4611      	mov	r1, r2
 80048bc:	461a      	mov	r2, r3
 80048be:	4603      	mov	r3, r0
 80048c0:	817b      	strh	r3, [r7, #10]
 80048c2:	460b      	mov	r3, r1
 80048c4:	813b      	strh	r3, [r7, #8]
 80048c6:	4613      	mov	r3, r2
 80048c8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	681a      	ldr	r2, [r3, #0]
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80048d8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80048da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048dc:	9300      	str	r3, [sp, #0]
 80048de:	6a3b      	ldr	r3, [r7, #32]
 80048e0:	2200      	movs	r2, #0
 80048e2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80048e6:	68f8      	ldr	r0, [r7, #12]
 80048e8:	f000 f960 	bl	8004bac <I2C_WaitOnFlagUntilTimeout>
 80048ec:	4603      	mov	r3, r0
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d00d      	beq.n	800490e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004900:	d103      	bne.n	800490a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004908:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800490a:	2303      	movs	r3, #3
 800490c:	e05f      	b.n	80049ce <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800490e:	897b      	ldrh	r3, [r7, #10]
 8004910:	b2db      	uxtb	r3, r3
 8004912:	461a      	mov	r2, r3
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800491c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800491e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004920:	6a3a      	ldr	r2, [r7, #32]
 8004922:	492d      	ldr	r1, [pc, #180]	; (80049d8 <I2C_RequestMemoryWrite+0x128>)
 8004924:	68f8      	ldr	r0, [r7, #12]
 8004926:	f000 f998 	bl	8004c5a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800492a:	4603      	mov	r3, r0
 800492c:	2b00      	cmp	r3, #0
 800492e:	d001      	beq.n	8004934 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004930:	2301      	movs	r3, #1
 8004932:	e04c      	b.n	80049ce <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004934:	2300      	movs	r3, #0
 8004936:	617b      	str	r3, [r7, #20]
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	695b      	ldr	r3, [r3, #20]
 800493e:	617b      	str	r3, [r7, #20]
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	699b      	ldr	r3, [r3, #24]
 8004946:	617b      	str	r3, [r7, #20]
 8004948:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800494a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800494c:	6a39      	ldr	r1, [r7, #32]
 800494e:	68f8      	ldr	r0, [r7, #12]
 8004950:	f000 fa02 	bl	8004d58 <I2C_WaitOnTXEFlagUntilTimeout>
 8004954:	4603      	mov	r3, r0
 8004956:	2b00      	cmp	r3, #0
 8004958:	d00d      	beq.n	8004976 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800495e:	2b04      	cmp	r3, #4
 8004960:	d107      	bne.n	8004972 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	681a      	ldr	r2, [r3, #0]
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004970:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004972:	2301      	movs	r3, #1
 8004974:	e02b      	b.n	80049ce <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004976:	88fb      	ldrh	r3, [r7, #6]
 8004978:	2b01      	cmp	r3, #1
 800497a:	d105      	bne.n	8004988 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800497c:	893b      	ldrh	r3, [r7, #8]
 800497e:	b2da      	uxtb	r2, r3
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	611a      	str	r2, [r3, #16]
 8004986:	e021      	b.n	80049cc <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004988:	893b      	ldrh	r3, [r7, #8]
 800498a:	0a1b      	lsrs	r3, r3, #8
 800498c:	b29b      	uxth	r3, r3
 800498e:	b2da      	uxtb	r2, r3
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004996:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004998:	6a39      	ldr	r1, [r7, #32]
 800499a:	68f8      	ldr	r0, [r7, #12]
 800499c:	f000 f9dc 	bl	8004d58 <I2C_WaitOnTXEFlagUntilTimeout>
 80049a0:	4603      	mov	r3, r0
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d00d      	beq.n	80049c2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049aa:	2b04      	cmp	r3, #4
 80049ac:	d107      	bne.n	80049be <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	681a      	ldr	r2, [r3, #0]
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80049bc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80049be:	2301      	movs	r3, #1
 80049c0:	e005      	b.n	80049ce <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80049c2:	893b      	ldrh	r3, [r7, #8]
 80049c4:	b2da      	uxtb	r2, r3
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80049cc:	2300      	movs	r3, #0
}
 80049ce:	4618      	mov	r0, r3
 80049d0:	3718      	adds	r7, #24
 80049d2:	46bd      	mov	sp, r7
 80049d4:	bd80      	pop	{r7, pc}
 80049d6:	bf00      	nop
 80049d8:	00010002 	.word	0x00010002

080049dc <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80049dc:	b580      	push	{r7, lr}
 80049de:	b088      	sub	sp, #32
 80049e0:	af02      	add	r7, sp, #8
 80049e2:	60f8      	str	r0, [r7, #12]
 80049e4:	4608      	mov	r0, r1
 80049e6:	4611      	mov	r1, r2
 80049e8:	461a      	mov	r2, r3
 80049ea:	4603      	mov	r3, r0
 80049ec:	817b      	strh	r3, [r7, #10]
 80049ee:	460b      	mov	r3, r1
 80049f0:	813b      	strh	r3, [r7, #8]
 80049f2:	4613      	mov	r3, r2
 80049f4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	681a      	ldr	r2, [r3, #0]
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004a04:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	681a      	ldr	r2, [r3, #0]
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004a14:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a18:	9300      	str	r3, [sp, #0]
 8004a1a:	6a3b      	ldr	r3, [r7, #32]
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004a22:	68f8      	ldr	r0, [r7, #12]
 8004a24:	f000 f8c2 	bl	8004bac <I2C_WaitOnFlagUntilTimeout>
 8004a28:	4603      	mov	r3, r0
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d00d      	beq.n	8004a4a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a38:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a3c:	d103      	bne.n	8004a46 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004a44:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004a46:	2303      	movs	r3, #3
 8004a48:	e0aa      	b.n	8004ba0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004a4a:	897b      	ldrh	r3, [r7, #10]
 8004a4c:	b2db      	uxtb	r3, r3
 8004a4e:	461a      	mov	r2, r3
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004a58:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a5c:	6a3a      	ldr	r2, [r7, #32]
 8004a5e:	4952      	ldr	r1, [pc, #328]	; (8004ba8 <I2C_RequestMemoryRead+0x1cc>)
 8004a60:	68f8      	ldr	r0, [r7, #12]
 8004a62:	f000 f8fa 	bl	8004c5a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004a66:	4603      	mov	r3, r0
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d001      	beq.n	8004a70 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004a6c:	2301      	movs	r3, #1
 8004a6e:	e097      	b.n	8004ba0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a70:	2300      	movs	r3, #0
 8004a72:	617b      	str	r3, [r7, #20]
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	695b      	ldr	r3, [r3, #20]
 8004a7a:	617b      	str	r3, [r7, #20]
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	699b      	ldr	r3, [r3, #24]
 8004a82:	617b      	str	r3, [r7, #20]
 8004a84:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004a86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a88:	6a39      	ldr	r1, [r7, #32]
 8004a8a:	68f8      	ldr	r0, [r7, #12]
 8004a8c:	f000 f964 	bl	8004d58 <I2C_WaitOnTXEFlagUntilTimeout>
 8004a90:	4603      	mov	r3, r0
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d00d      	beq.n	8004ab2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a9a:	2b04      	cmp	r3, #4
 8004a9c:	d107      	bne.n	8004aae <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	681a      	ldr	r2, [r3, #0]
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004aac:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004aae:	2301      	movs	r3, #1
 8004ab0:	e076      	b.n	8004ba0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004ab2:	88fb      	ldrh	r3, [r7, #6]
 8004ab4:	2b01      	cmp	r3, #1
 8004ab6:	d105      	bne.n	8004ac4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004ab8:	893b      	ldrh	r3, [r7, #8]
 8004aba:	b2da      	uxtb	r2, r3
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	611a      	str	r2, [r3, #16]
 8004ac2:	e021      	b.n	8004b08 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004ac4:	893b      	ldrh	r3, [r7, #8]
 8004ac6:	0a1b      	lsrs	r3, r3, #8
 8004ac8:	b29b      	uxth	r3, r3
 8004aca:	b2da      	uxtb	r2, r3
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004ad2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ad4:	6a39      	ldr	r1, [r7, #32]
 8004ad6:	68f8      	ldr	r0, [r7, #12]
 8004ad8:	f000 f93e 	bl	8004d58 <I2C_WaitOnTXEFlagUntilTimeout>
 8004adc:	4603      	mov	r3, r0
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d00d      	beq.n	8004afe <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ae6:	2b04      	cmp	r3, #4
 8004ae8:	d107      	bne.n	8004afa <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	681a      	ldr	r2, [r3, #0]
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004af8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004afa:	2301      	movs	r3, #1
 8004afc:	e050      	b.n	8004ba0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004afe:	893b      	ldrh	r3, [r7, #8]
 8004b00:	b2da      	uxtb	r2, r3
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004b08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b0a:	6a39      	ldr	r1, [r7, #32]
 8004b0c:	68f8      	ldr	r0, [r7, #12]
 8004b0e:	f000 f923 	bl	8004d58 <I2C_WaitOnTXEFlagUntilTimeout>
 8004b12:	4603      	mov	r3, r0
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d00d      	beq.n	8004b34 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b1c:	2b04      	cmp	r3, #4
 8004b1e:	d107      	bne.n	8004b30 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	681a      	ldr	r2, [r3, #0]
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b2e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004b30:	2301      	movs	r3, #1
 8004b32:	e035      	b.n	8004ba0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	681a      	ldr	r2, [r3, #0]
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004b42:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b46:	9300      	str	r3, [sp, #0]
 8004b48:	6a3b      	ldr	r3, [r7, #32]
 8004b4a:	2200      	movs	r2, #0
 8004b4c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004b50:	68f8      	ldr	r0, [r7, #12]
 8004b52:	f000 f82b 	bl	8004bac <I2C_WaitOnFlagUntilTimeout>
 8004b56:	4603      	mov	r3, r0
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d00d      	beq.n	8004b78 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b66:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b6a:	d103      	bne.n	8004b74 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004b72:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004b74:	2303      	movs	r3, #3
 8004b76:	e013      	b.n	8004ba0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004b78:	897b      	ldrh	r3, [r7, #10]
 8004b7a:	b2db      	uxtb	r3, r3
 8004b7c:	f043 0301 	orr.w	r3, r3, #1
 8004b80:	b2da      	uxtb	r2, r3
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b8a:	6a3a      	ldr	r2, [r7, #32]
 8004b8c:	4906      	ldr	r1, [pc, #24]	; (8004ba8 <I2C_RequestMemoryRead+0x1cc>)
 8004b8e:	68f8      	ldr	r0, [r7, #12]
 8004b90:	f000 f863 	bl	8004c5a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004b94:	4603      	mov	r3, r0
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d001      	beq.n	8004b9e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004b9a:	2301      	movs	r3, #1
 8004b9c:	e000      	b.n	8004ba0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004b9e:	2300      	movs	r3, #0
}
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	3718      	adds	r7, #24
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	bd80      	pop	{r7, pc}
 8004ba8:	00010002 	.word	0x00010002

08004bac <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004bac:	b580      	push	{r7, lr}
 8004bae:	b084      	sub	sp, #16
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	60f8      	str	r0, [r7, #12]
 8004bb4:	60b9      	str	r1, [r7, #8]
 8004bb6:	603b      	str	r3, [r7, #0]
 8004bb8:	4613      	mov	r3, r2
 8004bba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004bbc:	e025      	b.n	8004c0a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004bbe:	683b      	ldr	r3, [r7, #0]
 8004bc0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004bc4:	d021      	beq.n	8004c0a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004bc6:	f7fe febb 	bl	8003940 <HAL_GetTick>
 8004bca:	4602      	mov	r2, r0
 8004bcc:	69bb      	ldr	r3, [r7, #24]
 8004bce:	1ad3      	subs	r3, r2, r3
 8004bd0:	683a      	ldr	r2, [r7, #0]
 8004bd2:	429a      	cmp	r2, r3
 8004bd4:	d302      	bcc.n	8004bdc <I2C_WaitOnFlagUntilTimeout+0x30>
 8004bd6:	683b      	ldr	r3, [r7, #0]
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d116      	bne.n	8004c0a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	2200      	movs	r2, #0
 8004be0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	2220      	movs	r2, #32
 8004be6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	2200      	movs	r2, #0
 8004bee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bf6:	f043 0220 	orr.w	r2, r3, #32
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	2200      	movs	r2, #0
 8004c02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004c06:	2301      	movs	r3, #1
 8004c08:	e023      	b.n	8004c52 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004c0a:	68bb      	ldr	r3, [r7, #8]
 8004c0c:	0c1b      	lsrs	r3, r3, #16
 8004c0e:	b2db      	uxtb	r3, r3
 8004c10:	2b01      	cmp	r3, #1
 8004c12:	d10d      	bne.n	8004c30 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	695b      	ldr	r3, [r3, #20]
 8004c1a:	43da      	mvns	r2, r3
 8004c1c:	68bb      	ldr	r3, [r7, #8]
 8004c1e:	4013      	ands	r3, r2
 8004c20:	b29b      	uxth	r3, r3
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	bf0c      	ite	eq
 8004c26:	2301      	moveq	r3, #1
 8004c28:	2300      	movne	r3, #0
 8004c2a:	b2db      	uxtb	r3, r3
 8004c2c:	461a      	mov	r2, r3
 8004c2e:	e00c      	b.n	8004c4a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	699b      	ldr	r3, [r3, #24]
 8004c36:	43da      	mvns	r2, r3
 8004c38:	68bb      	ldr	r3, [r7, #8]
 8004c3a:	4013      	ands	r3, r2
 8004c3c:	b29b      	uxth	r3, r3
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	bf0c      	ite	eq
 8004c42:	2301      	moveq	r3, #1
 8004c44:	2300      	movne	r3, #0
 8004c46:	b2db      	uxtb	r3, r3
 8004c48:	461a      	mov	r2, r3
 8004c4a:	79fb      	ldrb	r3, [r7, #7]
 8004c4c:	429a      	cmp	r2, r3
 8004c4e:	d0b6      	beq.n	8004bbe <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004c50:	2300      	movs	r3, #0
}
 8004c52:	4618      	mov	r0, r3
 8004c54:	3710      	adds	r7, #16
 8004c56:	46bd      	mov	sp, r7
 8004c58:	bd80      	pop	{r7, pc}

08004c5a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004c5a:	b580      	push	{r7, lr}
 8004c5c:	b084      	sub	sp, #16
 8004c5e:	af00      	add	r7, sp, #0
 8004c60:	60f8      	str	r0, [r7, #12]
 8004c62:	60b9      	str	r1, [r7, #8]
 8004c64:	607a      	str	r2, [r7, #4]
 8004c66:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004c68:	e051      	b.n	8004d0e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	695b      	ldr	r3, [r3, #20]
 8004c70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c74:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c78:	d123      	bne.n	8004cc2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	681a      	ldr	r2, [r3, #0]
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c88:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004c92:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	2200      	movs	r2, #0
 8004c98:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	2220      	movs	r2, #32
 8004c9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cae:	f043 0204 	orr.w	r2, r3, #4
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	2200      	movs	r2, #0
 8004cba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004cbe:	2301      	movs	r3, #1
 8004cc0:	e046      	b.n	8004d50 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004cc8:	d021      	beq.n	8004d0e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004cca:	f7fe fe39 	bl	8003940 <HAL_GetTick>
 8004cce:	4602      	mov	r2, r0
 8004cd0:	683b      	ldr	r3, [r7, #0]
 8004cd2:	1ad3      	subs	r3, r2, r3
 8004cd4:	687a      	ldr	r2, [r7, #4]
 8004cd6:	429a      	cmp	r2, r3
 8004cd8:	d302      	bcc.n	8004ce0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d116      	bne.n	8004d0e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	2220      	movs	r2, #32
 8004cea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cfa:	f043 0220 	orr.w	r2, r3, #32
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	2200      	movs	r2, #0
 8004d06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004d0a:	2301      	movs	r3, #1
 8004d0c:	e020      	b.n	8004d50 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004d0e:	68bb      	ldr	r3, [r7, #8]
 8004d10:	0c1b      	lsrs	r3, r3, #16
 8004d12:	b2db      	uxtb	r3, r3
 8004d14:	2b01      	cmp	r3, #1
 8004d16:	d10c      	bne.n	8004d32 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	695b      	ldr	r3, [r3, #20]
 8004d1e:	43da      	mvns	r2, r3
 8004d20:	68bb      	ldr	r3, [r7, #8]
 8004d22:	4013      	ands	r3, r2
 8004d24:	b29b      	uxth	r3, r3
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	bf14      	ite	ne
 8004d2a:	2301      	movne	r3, #1
 8004d2c:	2300      	moveq	r3, #0
 8004d2e:	b2db      	uxtb	r3, r3
 8004d30:	e00b      	b.n	8004d4a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	699b      	ldr	r3, [r3, #24]
 8004d38:	43da      	mvns	r2, r3
 8004d3a:	68bb      	ldr	r3, [r7, #8]
 8004d3c:	4013      	ands	r3, r2
 8004d3e:	b29b      	uxth	r3, r3
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	bf14      	ite	ne
 8004d44:	2301      	movne	r3, #1
 8004d46:	2300      	moveq	r3, #0
 8004d48:	b2db      	uxtb	r3, r3
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d18d      	bne.n	8004c6a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004d4e:	2300      	movs	r3, #0
}
 8004d50:	4618      	mov	r0, r3
 8004d52:	3710      	adds	r7, #16
 8004d54:	46bd      	mov	sp, r7
 8004d56:	bd80      	pop	{r7, pc}

08004d58 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004d58:	b580      	push	{r7, lr}
 8004d5a:	b084      	sub	sp, #16
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	60f8      	str	r0, [r7, #12]
 8004d60:	60b9      	str	r1, [r7, #8]
 8004d62:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004d64:	e02d      	b.n	8004dc2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004d66:	68f8      	ldr	r0, [r7, #12]
 8004d68:	f000 f8ce 	bl	8004f08 <I2C_IsAcknowledgeFailed>
 8004d6c:	4603      	mov	r3, r0
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d001      	beq.n	8004d76 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004d72:	2301      	movs	r3, #1
 8004d74:	e02d      	b.n	8004dd2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d76:	68bb      	ldr	r3, [r7, #8]
 8004d78:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004d7c:	d021      	beq.n	8004dc2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d7e:	f7fe fddf 	bl	8003940 <HAL_GetTick>
 8004d82:	4602      	mov	r2, r0
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	1ad3      	subs	r3, r2, r3
 8004d88:	68ba      	ldr	r2, [r7, #8]
 8004d8a:	429a      	cmp	r2, r3
 8004d8c:	d302      	bcc.n	8004d94 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004d8e:	68bb      	ldr	r3, [r7, #8]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d116      	bne.n	8004dc2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	2200      	movs	r2, #0
 8004d98:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	2220      	movs	r2, #32
 8004d9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	2200      	movs	r2, #0
 8004da6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dae:	f043 0220 	orr.w	r2, r3, #32
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	2200      	movs	r2, #0
 8004dba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004dbe:	2301      	movs	r3, #1
 8004dc0:	e007      	b.n	8004dd2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	695b      	ldr	r3, [r3, #20]
 8004dc8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004dcc:	2b80      	cmp	r3, #128	; 0x80
 8004dce:	d1ca      	bne.n	8004d66 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004dd0:	2300      	movs	r3, #0
}
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	3710      	adds	r7, #16
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	bd80      	pop	{r7, pc}

08004dda <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004dda:	b580      	push	{r7, lr}
 8004ddc:	b084      	sub	sp, #16
 8004dde:	af00      	add	r7, sp, #0
 8004de0:	60f8      	str	r0, [r7, #12]
 8004de2:	60b9      	str	r1, [r7, #8]
 8004de4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004de6:	e02d      	b.n	8004e44 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004de8:	68f8      	ldr	r0, [r7, #12]
 8004dea:	f000 f88d 	bl	8004f08 <I2C_IsAcknowledgeFailed>
 8004dee:	4603      	mov	r3, r0
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d001      	beq.n	8004df8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004df4:	2301      	movs	r3, #1
 8004df6:	e02d      	b.n	8004e54 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004df8:	68bb      	ldr	r3, [r7, #8]
 8004dfa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004dfe:	d021      	beq.n	8004e44 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e00:	f7fe fd9e 	bl	8003940 <HAL_GetTick>
 8004e04:	4602      	mov	r2, r0
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	1ad3      	subs	r3, r2, r3
 8004e0a:	68ba      	ldr	r2, [r7, #8]
 8004e0c:	429a      	cmp	r2, r3
 8004e0e:	d302      	bcc.n	8004e16 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004e10:	68bb      	ldr	r3, [r7, #8]
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d116      	bne.n	8004e44 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	2200      	movs	r2, #0
 8004e1a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	2220      	movs	r2, #32
 8004e20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	2200      	movs	r2, #0
 8004e28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e30:	f043 0220 	orr.w	r2, r3, #32
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004e40:	2301      	movs	r3, #1
 8004e42:	e007      	b.n	8004e54 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	695b      	ldr	r3, [r3, #20]
 8004e4a:	f003 0304 	and.w	r3, r3, #4
 8004e4e:	2b04      	cmp	r3, #4
 8004e50:	d1ca      	bne.n	8004de8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004e52:	2300      	movs	r3, #0
}
 8004e54:	4618      	mov	r0, r3
 8004e56:	3710      	adds	r7, #16
 8004e58:	46bd      	mov	sp, r7
 8004e5a:	bd80      	pop	{r7, pc}

08004e5c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	b084      	sub	sp, #16
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	60f8      	str	r0, [r7, #12]
 8004e64:	60b9      	str	r1, [r7, #8]
 8004e66:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004e68:	e042      	b.n	8004ef0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	695b      	ldr	r3, [r3, #20]
 8004e70:	f003 0310 	and.w	r3, r3, #16
 8004e74:	2b10      	cmp	r3, #16
 8004e76:	d119      	bne.n	8004eac <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f06f 0210 	mvn.w	r2, #16
 8004e80:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	2200      	movs	r2, #0
 8004e86:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	2220      	movs	r2, #32
 8004e8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	2200      	movs	r2, #0
 8004e94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004ea8:	2301      	movs	r3, #1
 8004eaa:	e029      	b.n	8004f00 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004eac:	f7fe fd48 	bl	8003940 <HAL_GetTick>
 8004eb0:	4602      	mov	r2, r0
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	1ad3      	subs	r3, r2, r3
 8004eb6:	68ba      	ldr	r2, [r7, #8]
 8004eb8:	429a      	cmp	r2, r3
 8004eba:	d302      	bcc.n	8004ec2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004ebc:	68bb      	ldr	r3, [r7, #8]
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d116      	bne.n	8004ef0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	2220      	movs	r2, #32
 8004ecc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004edc:	f043 0220 	orr.w	r2, r3, #32
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	2200      	movs	r2, #0
 8004ee8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004eec:	2301      	movs	r3, #1
 8004eee:	e007      	b.n	8004f00 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	695b      	ldr	r3, [r3, #20]
 8004ef6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004efa:	2b40      	cmp	r3, #64	; 0x40
 8004efc:	d1b5      	bne.n	8004e6a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004efe:	2300      	movs	r3, #0
}
 8004f00:	4618      	mov	r0, r3
 8004f02:	3710      	adds	r7, #16
 8004f04:	46bd      	mov	sp, r7
 8004f06:	bd80      	pop	{r7, pc}

08004f08 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004f08:	b480      	push	{r7}
 8004f0a:	b083      	sub	sp, #12
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	695b      	ldr	r3, [r3, #20]
 8004f16:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f1a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f1e:	d11b      	bne.n	8004f58 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004f28:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2220      	movs	r2, #32
 8004f34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f44:	f043 0204 	orr.w	r2, r3, #4
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2200      	movs	r2, #0
 8004f50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004f54:	2301      	movs	r3, #1
 8004f56:	e000      	b.n	8004f5a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004f58:	2300      	movs	r3, #0
}
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	370c      	adds	r7, #12
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	bc80      	pop	{r7}
 8004f62:	4770      	bx	lr

08004f64 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004f64:	b580      	push	{r7, lr}
 8004f66:	b086      	sub	sp, #24
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d101      	bne.n	8004f76 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004f72:	2301      	movs	r3, #1
 8004f74:	e272      	b.n	800545c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f003 0301 	and.w	r3, r3, #1
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	f000 8087 	beq.w	8005092 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004f84:	4b92      	ldr	r3, [pc, #584]	; (80051d0 <HAL_RCC_OscConfig+0x26c>)
 8004f86:	685b      	ldr	r3, [r3, #4]
 8004f88:	f003 030c 	and.w	r3, r3, #12
 8004f8c:	2b04      	cmp	r3, #4
 8004f8e:	d00c      	beq.n	8004faa <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004f90:	4b8f      	ldr	r3, [pc, #572]	; (80051d0 <HAL_RCC_OscConfig+0x26c>)
 8004f92:	685b      	ldr	r3, [r3, #4]
 8004f94:	f003 030c 	and.w	r3, r3, #12
 8004f98:	2b08      	cmp	r3, #8
 8004f9a:	d112      	bne.n	8004fc2 <HAL_RCC_OscConfig+0x5e>
 8004f9c:	4b8c      	ldr	r3, [pc, #560]	; (80051d0 <HAL_RCC_OscConfig+0x26c>)
 8004f9e:	685b      	ldr	r3, [r3, #4]
 8004fa0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004fa4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004fa8:	d10b      	bne.n	8004fc2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004faa:	4b89      	ldr	r3, [pc, #548]	; (80051d0 <HAL_RCC_OscConfig+0x26c>)
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d06c      	beq.n	8005090 <HAL_RCC_OscConfig+0x12c>
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	685b      	ldr	r3, [r3, #4]
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d168      	bne.n	8005090 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004fbe:	2301      	movs	r3, #1
 8004fc0:	e24c      	b.n	800545c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	685b      	ldr	r3, [r3, #4]
 8004fc6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004fca:	d106      	bne.n	8004fda <HAL_RCC_OscConfig+0x76>
 8004fcc:	4b80      	ldr	r3, [pc, #512]	; (80051d0 <HAL_RCC_OscConfig+0x26c>)
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	4a7f      	ldr	r2, [pc, #508]	; (80051d0 <HAL_RCC_OscConfig+0x26c>)
 8004fd2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004fd6:	6013      	str	r3, [r2, #0]
 8004fd8:	e02e      	b.n	8005038 <HAL_RCC_OscConfig+0xd4>
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	685b      	ldr	r3, [r3, #4]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d10c      	bne.n	8004ffc <HAL_RCC_OscConfig+0x98>
 8004fe2:	4b7b      	ldr	r3, [pc, #492]	; (80051d0 <HAL_RCC_OscConfig+0x26c>)
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	4a7a      	ldr	r2, [pc, #488]	; (80051d0 <HAL_RCC_OscConfig+0x26c>)
 8004fe8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004fec:	6013      	str	r3, [r2, #0]
 8004fee:	4b78      	ldr	r3, [pc, #480]	; (80051d0 <HAL_RCC_OscConfig+0x26c>)
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	4a77      	ldr	r2, [pc, #476]	; (80051d0 <HAL_RCC_OscConfig+0x26c>)
 8004ff4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004ff8:	6013      	str	r3, [r2, #0]
 8004ffa:	e01d      	b.n	8005038 <HAL_RCC_OscConfig+0xd4>
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	685b      	ldr	r3, [r3, #4]
 8005000:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005004:	d10c      	bne.n	8005020 <HAL_RCC_OscConfig+0xbc>
 8005006:	4b72      	ldr	r3, [pc, #456]	; (80051d0 <HAL_RCC_OscConfig+0x26c>)
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	4a71      	ldr	r2, [pc, #452]	; (80051d0 <HAL_RCC_OscConfig+0x26c>)
 800500c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005010:	6013      	str	r3, [r2, #0]
 8005012:	4b6f      	ldr	r3, [pc, #444]	; (80051d0 <HAL_RCC_OscConfig+0x26c>)
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	4a6e      	ldr	r2, [pc, #440]	; (80051d0 <HAL_RCC_OscConfig+0x26c>)
 8005018:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800501c:	6013      	str	r3, [r2, #0]
 800501e:	e00b      	b.n	8005038 <HAL_RCC_OscConfig+0xd4>
 8005020:	4b6b      	ldr	r3, [pc, #428]	; (80051d0 <HAL_RCC_OscConfig+0x26c>)
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	4a6a      	ldr	r2, [pc, #424]	; (80051d0 <HAL_RCC_OscConfig+0x26c>)
 8005026:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800502a:	6013      	str	r3, [r2, #0]
 800502c:	4b68      	ldr	r3, [pc, #416]	; (80051d0 <HAL_RCC_OscConfig+0x26c>)
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	4a67      	ldr	r2, [pc, #412]	; (80051d0 <HAL_RCC_OscConfig+0x26c>)
 8005032:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005036:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	685b      	ldr	r3, [r3, #4]
 800503c:	2b00      	cmp	r3, #0
 800503e:	d013      	beq.n	8005068 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005040:	f7fe fc7e 	bl	8003940 <HAL_GetTick>
 8005044:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005046:	e008      	b.n	800505a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005048:	f7fe fc7a 	bl	8003940 <HAL_GetTick>
 800504c:	4602      	mov	r2, r0
 800504e:	693b      	ldr	r3, [r7, #16]
 8005050:	1ad3      	subs	r3, r2, r3
 8005052:	2b64      	cmp	r3, #100	; 0x64
 8005054:	d901      	bls.n	800505a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005056:	2303      	movs	r3, #3
 8005058:	e200      	b.n	800545c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800505a:	4b5d      	ldr	r3, [pc, #372]	; (80051d0 <HAL_RCC_OscConfig+0x26c>)
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005062:	2b00      	cmp	r3, #0
 8005064:	d0f0      	beq.n	8005048 <HAL_RCC_OscConfig+0xe4>
 8005066:	e014      	b.n	8005092 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005068:	f7fe fc6a 	bl	8003940 <HAL_GetTick>
 800506c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800506e:	e008      	b.n	8005082 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005070:	f7fe fc66 	bl	8003940 <HAL_GetTick>
 8005074:	4602      	mov	r2, r0
 8005076:	693b      	ldr	r3, [r7, #16]
 8005078:	1ad3      	subs	r3, r2, r3
 800507a:	2b64      	cmp	r3, #100	; 0x64
 800507c:	d901      	bls.n	8005082 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800507e:	2303      	movs	r3, #3
 8005080:	e1ec      	b.n	800545c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005082:	4b53      	ldr	r3, [pc, #332]	; (80051d0 <HAL_RCC_OscConfig+0x26c>)
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800508a:	2b00      	cmp	r3, #0
 800508c:	d1f0      	bne.n	8005070 <HAL_RCC_OscConfig+0x10c>
 800508e:	e000      	b.n	8005092 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005090:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f003 0302 	and.w	r3, r3, #2
 800509a:	2b00      	cmp	r3, #0
 800509c:	d063      	beq.n	8005166 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800509e:	4b4c      	ldr	r3, [pc, #304]	; (80051d0 <HAL_RCC_OscConfig+0x26c>)
 80050a0:	685b      	ldr	r3, [r3, #4]
 80050a2:	f003 030c 	and.w	r3, r3, #12
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d00b      	beq.n	80050c2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80050aa:	4b49      	ldr	r3, [pc, #292]	; (80051d0 <HAL_RCC_OscConfig+0x26c>)
 80050ac:	685b      	ldr	r3, [r3, #4]
 80050ae:	f003 030c 	and.w	r3, r3, #12
 80050b2:	2b08      	cmp	r3, #8
 80050b4:	d11c      	bne.n	80050f0 <HAL_RCC_OscConfig+0x18c>
 80050b6:	4b46      	ldr	r3, [pc, #280]	; (80051d0 <HAL_RCC_OscConfig+0x26c>)
 80050b8:	685b      	ldr	r3, [r3, #4]
 80050ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d116      	bne.n	80050f0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80050c2:	4b43      	ldr	r3, [pc, #268]	; (80051d0 <HAL_RCC_OscConfig+0x26c>)
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f003 0302 	and.w	r3, r3, #2
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d005      	beq.n	80050da <HAL_RCC_OscConfig+0x176>
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	691b      	ldr	r3, [r3, #16]
 80050d2:	2b01      	cmp	r3, #1
 80050d4:	d001      	beq.n	80050da <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80050d6:	2301      	movs	r3, #1
 80050d8:	e1c0      	b.n	800545c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80050da:	4b3d      	ldr	r3, [pc, #244]	; (80051d0 <HAL_RCC_OscConfig+0x26c>)
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	695b      	ldr	r3, [r3, #20]
 80050e6:	00db      	lsls	r3, r3, #3
 80050e8:	4939      	ldr	r1, [pc, #228]	; (80051d0 <HAL_RCC_OscConfig+0x26c>)
 80050ea:	4313      	orrs	r3, r2
 80050ec:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80050ee:	e03a      	b.n	8005166 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	691b      	ldr	r3, [r3, #16]
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d020      	beq.n	800513a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80050f8:	4b36      	ldr	r3, [pc, #216]	; (80051d4 <HAL_RCC_OscConfig+0x270>)
 80050fa:	2201      	movs	r2, #1
 80050fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050fe:	f7fe fc1f 	bl	8003940 <HAL_GetTick>
 8005102:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005104:	e008      	b.n	8005118 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005106:	f7fe fc1b 	bl	8003940 <HAL_GetTick>
 800510a:	4602      	mov	r2, r0
 800510c:	693b      	ldr	r3, [r7, #16]
 800510e:	1ad3      	subs	r3, r2, r3
 8005110:	2b02      	cmp	r3, #2
 8005112:	d901      	bls.n	8005118 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8005114:	2303      	movs	r3, #3
 8005116:	e1a1      	b.n	800545c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005118:	4b2d      	ldr	r3, [pc, #180]	; (80051d0 <HAL_RCC_OscConfig+0x26c>)
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f003 0302 	and.w	r3, r3, #2
 8005120:	2b00      	cmp	r3, #0
 8005122:	d0f0      	beq.n	8005106 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005124:	4b2a      	ldr	r3, [pc, #168]	; (80051d0 <HAL_RCC_OscConfig+0x26c>)
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	695b      	ldr	r3, [r3, #20]
 8005130:	00db      	lsls	r3, r3, #3
 8005132:	4927      	ldr	r1, [pc, #156]	; (80051d0 <HAL_RCC_OscConfig+0x26c>)
 8005134:	4313      	orrs	r3, r2
 8005136:	600b      	str	r3, [r1, #0]
 8005138:	e015      	b.n	8005166 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800513a:	4b26      	ldr	r3, [pc, #152]	; (80051d4 <HAL_RCC_OscConfig+0x270>)
 800513c:	2200      	movs	r2, #0
 800513e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005140:	f7fe fbfe 	bl	8003940 <HAL_GetTick>
 8005144:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005146:	e008      	b.n	800515a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005148:	f7fe fbfa 	bl	8003940 <HAL_GetTick>
 800514c:	4602      	mov	r2, r0
 800514e:	693b      	ldr	r3, [r7, #16]
 8005150:	1ad3      	subs	r3, r2, r3
 8005152:	2b02      	cmp	r3, #2
 8005154:	d901      	bls.n	800515a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8005156:	2303      	movs	r3, #3
 8005158:	e180      	b.n	800545c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800515a:	4b1d      	ldr	r3, [pc, #116]	; (80051d0 <HAL_RCC_OscConfig+0x26c>)
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f003 0302 	and.w	r3, r3, #2
 8005162:	2b00      	cmp	r3, #0
 8005164:	d1f0      	bne.n	8005148 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f003 0308 	and.w	r3, r3, #8
 800516e:	2b00      	cmp	r3, #0
 8005170:	d03a      	beq.n	80051e8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	699b      	ldr	r3, [r3, #24]
 8005176:	2b00      	cmp	r3, #0
 8005178:	d019      	beq.n	80051ae <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800517a:	4b17      	ldr	r3, [pc, #92]	; (80051d8 <HAL_RCC_OscConfig+0x274>)
 800517c:	2201      	movs	r2, #1
 800517e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005180:	f7fe fbde 	bl	8003940 <HAL_GetTick>
 8005184:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005186:	e008      	b.n	800519a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005188:	f7fe fbda 	bl	8003940 <HAL_GetTick>
 800518c:	4602      	mov	r2, r0
 800518e:	693b      	ldr	r3, [r7, #16]
 8005190:	1ad3      	subs	r3, r2, r3
 8005192:	2b02      	cmp	r3, #2
 8005194:	d901      	bls.n	800519a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8005196:	2303      	movs	r3, #3
 8005198:	e160      	b.n	800545c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800519a:	4b0d      	ldr	r3, [pc, #52]	; (80051d0 <HAL_RCC_OscConfig+0x26c>)
 800519c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800519e:	f003 0302 	and.w	r3, r3, #2
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d0f0      	beq.n	8005188 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80051a6:	2001      	movs	r0, #1
 80051a8:	f000 fac4 	bl	8005734 <RCC_Delay>
 80051ac:	e01c      	b.n	80051e8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80051ae:	4b0a      	ldr	r3, [pc, #40]	; (80051d8 <HAL_RCC_OscConfig+0x274>)
 80051b0:	2200      	movs	r2, #0
 80051b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80051b4:	f7fe fbc4 	bl	8003940 <HAL_GetTick>
 80051b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80051ba:	e00f      	b.n	80051dc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80051bc:	f7fe fbc0 	bl	8003940 <HAL_GetTick>
 80051c0:	4602      	mov	r2, r0
 80051c2:	693b      	ldr	r3, [r7, #16]
 80051c4:	1ad3      	subs	r3, r2, r3
 80051c6:	2b02      	cmp	r3, #2
 80051c8:	d908      	bls.n	80051dc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80051ca:	2303      	movs	r3, #3
 80051cc:	e146      	b.n	800545c <HAL_RCC_OscConfig+0x4f8>
 80051ce:	bf00      	nop
 80051d0:	40021000 	.word	0x40021000
 80051d4:	42420000 	.word	0x42420000
 80051d8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80051dc:	4b92      	ldr	r3, [pc, #584]	; (8005428 <HAL_RCC_OscConfig+0x4c4>)
 80051de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051e0:	f003 0302 	and.w	r3, r3, #2
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d1e9      	bne.n	80051bc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f003 0304 	and.w	r3, r3, #4
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	f000 80a6 	beq.w	8005342 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80051f6:	2300      	movs	r3, #0
 80051f8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80051fa:	4b8b      	ldr	r3, [pc, #556]	; (8005428 <HAL_RCC_OscConfig+0x4c4>)
 80051fc:	69db      	ldr	r3, [r3, #28]
 80051fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005202:	2b00      	cmp	r3, #0
 8005204:	d10d      	bne.n	8005222 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005206:	4b88      	ldr	r3, [pc, #544]	; (8005428 <HAL_RCC_OscConfig+0x4c4>)
 8005208:	69db      	ldr	r3, [r3, #28]
 800520a:	4a87      	ldr	r2, [pc, #540]	; (8005428 <HAL_RCC_OscConfig+0x4c4>)
 800520c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005210:	61d3      	str	r3, [r2, #28]
 8005212:	4b85      	ldr	r3, [pc, #532]	; (8005428 <HAL_RCC_OscConfig+0x4c4>)
 8005214:	69db      	ldr	r3, [r3, #28]
 8005216:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800521a:	60bb      	str	r3, [r7, #8]
 800521c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800521e:	2301      	movs	r3, #1
 8005220:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005222:	4b82      	ldr	r3, [pc, #520]	; (800542c <HAL_RCC_OscConfig+0x4c8>)
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800522a:	2b00      	cmp	r3, #0
 800522c:	d118      	bne.n	8005260 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800522e:	4b7f      	ldr	r3, [pc, #508]	; (800542c <HAL_RCC_OscConfig+0x4c8>)
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	4a7e      	ldr	r2, [pc, #504]	; (800542c <HAL_RCC_OscConfig+0x4c8>)
 8005234:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005238:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800523a:	f7fe fb81 	bl	8003940 <HAL_GetTick>
 800523e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005240:	e008      	b.n	8005254 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005242:	f7fe fb7d 	bl	8003940 <HAL_GetTick>
 8005246:	4602      	mov	r2, r0
 8005248:	693b      	ldr	r3, [r7, #16]
 800524a:	1ad3      	subs	r3, r2, r3
 800524c:	2b64      	cmp	r3, #100	; 0x64
 800524e:	d901      	bls.n	8005254 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8005250:	2303      	movs	r3, #3
 8005252:	e103      	b.n	800545c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005254:	4b75      	ldr	r3, [pc, #468]	; (800542c <HAL_RCC_OscConfig+0x4c8>)
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800525c:	2b00      	cmp	r3, #0
 800525e:	d0f0      	beq.n	8005242 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	68db      	ldr	r3, [r3, #12]
 8005264:	2b01      	cmp	r3, #1
 8005266:	d106      	bne.n	8005276 <HAL_RCC_OscConfig+0x312>
 8005268:	4b6f      	ldr	r3, [pc, #444]	; (8005428 <HAL_RCC_OscConfig+0x4c4>)
 800526a:	6a1b      	ldr	r3, [r3, #32]
 800526c:	4a6e      	ldr	r2, [pc, #440]	; (8005428 <HAL_RCC_OscConfig+0x4c4>)
 800526e:	f043 0301 	orr.w	r3, r3, #1
 8005272:	6213      	str	r3, [r2, #32]
 8005274:	e02d      	b.n	80052d2 <HAL_RCC_OscConfig+0x36e>
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	68db      	ldr	r3, [r3, #12]
 800527a:	2b00      	cmp	r3, #0
 800527c:	d10c      	bne.n	8005298 <HAL_RCC_OscConfig+0x334>
 800527e:	4b6a      	ldr	r3, [pc, #424]	; (8005428 <HAL_RCC_OscConfig+0x4c4>)
 8005280:	6a1b      	ldr	r3, [r3, #32]
 8005282:	4a69      	ldr	r2, [pc, #420]	; (8005428 <HAL_RCC_OscConfig+0x4c4>)
 8005284:	f023 0301 	bic.w	r3, r3, #1
 8005288:	6213      	str	r3, [r2, #32]
 800528a:	4b67      	ldr	r3, [pc, #412]	; (8005428 <HAL_RCC_OscConfig+0x4c4>)
 800528c:	6a1b      	ldr	r3, [r3, #32]
 800528e:	4a66      	ldr	r2, [pc, #408]	; (8005428 <HAL_RCC_OscConfig+0x4c4>)
 8005290:	f023 0304 	bic.w	r3, r3, #4
 8005294:	6213      	str	r3, [r2, #32]
 8005296:	e01c      	b.n	80052d2 <HAL_RCC_OscConfig+0x36e>
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	68db      	ldr	r3, [r3, #12]
 800529c:	2b05      	cmp	r3, #5
 800529e:	d10c      	bne.n	80052ba <HAL_RCC_OscConfig+0x356>
 80052a0:	4b61      	ldr	r3, [pc, #388]	; (8005428 <HAL_RCC_OscConfig+0x4c4>)
 80052a2:	6a1b      	ldr	r3, [r3, #32]
 80052a4:	4a60      	ldr	r2, [pc, #384]	; (8005428 <HAL_RCC_OscConfig+0x4c4>)
 80052a6:	f043 0304 	orr.w	r3, r3, #4
 80052aa:	6213      	str	r3, [r2, #32]
 80052ac:	4b5e      	ldr	r3, [pc, #376]	; (8005428 <HAL_RCC_OscConfig+0x4c4>)
 80052ae:	6a1b      	ldr	r3, [r3, #32]
 80052b0:	4a5d      	ldr	r2, [pc, #372]	; (8005428 <HAL_RCC_OscConfig+0x4c4>)
 80052b2:	f043 0301 	orr.w	r3, r3, #1
 80052b6:	6213      	str	r3, [r2, #32]
 80052b8:	e00b      	b.n	80052d2 <HAL_RCC_OscConfig+0x36e>
 80052ba:	4b5b      	ldr	r3, [pc, #364]	; (8005428 <HAL_RCC_OscConfig+0x4c4>)
 80052bc:	6a1b      	ldr	r3, [r3, #32]
 80052be:	4a5a      	ldr	r2, [pc, #360]	; (8005428 <HAL_RCC_OscConfig+0x4c4>)
 80052c0:	f023 0301 	bic.w	r3, r3, #1
 80052c4:	6213      	str	r3, [r2, #32]
 80052c6:	4b58      	ldr	r3, [pc, #352]	; (8005428 <HAL_RCC_OscConfig+0x4c4>)
 80052c8:	6a1b      	ldr	r3, [r3, #32]
 80052ca:	4a57      	ldr	r2, [pc, #348]	; (8005428 <HAL_RCC_OscConfig+0x4c4>)
 80052cc:	f023 0304 	bic.w	r3, r3, #4
 80052d0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	68db      	ldr	r3, [r3, #12]
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d015      	beq.n	8005306 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80052da:	f7fe fb31 	bl	8003940 <HAL_GetTick>
 80052de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80052e0:	e00a      	b.n	80052f8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80052e2:	f7fe fb2d 	bl	8003940 <HAL_GetTick>
 80052e6:	4602      	mov	r2, r0
 80052e8:	693b      	ldr	r3, [r7, #16]
 80052ea:	1ad3      	subs	r3, r2, r3
 80052ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80052f0:	4293      	cmp	r3, r2
 80052f2:	d901      	bls.n	80052f8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80052f4:	2303      	movs	r3, #3
 80052f6:	e0b1      	b.n	800545c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80052f8:	4b4b      	ldr	r3, [pc, #300]	; (8005428 <HAL_RCC_OscConfig+0x4c4>)
 80052fa:	6a1b      	ldr	r3, [r3, #32]
 80052fc:	f003 0302 	and.w	r3, r3, #2
 8005300:	2b00      	cmp	r3, #0
 8005302:	d0ee      	beq.n	80052e2 <HAL_RCC_OscConfig+0x37e>
 8005304:	e014      	b.n	8005330 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005306:	f7fe fb1b 	bl	8003940 <HAL_GetTick>
 800530a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800530c:	e00a      	b.n	8005324 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800530e:	f7fe fb17 	bl	8003940 <HAL_GetTick>
 8005312:	4602      	mov	r2, r0
 8005314:	693b      	ldr	r3, [r7, #16]
 8005316:	1ad3      	subs	r3, r2, r3
 8005318:	f241 3288 	movw	r2, #5000	; 0x1388
 800531c:	4293      	cmp	r3, r2
 800531e:	d901      	bls.n	8005324 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005320:	2303      	movs	r3, #3
 8005322:	e09b      	b.n	800545c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005324:	4b40      	ldr	r3, [pc, #256]	; (8005428 <HAL_RCC_OscConfig+0x4c4>)
 8005326:	6a1b      	ldr	r3, [r3, #32]
 8005328:	f003 0302 	and.w	r3, r3, #2
 800532c:	2b00      	cmp	r3, #0
 800532e:	d1ee      	bne.n	800530e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005330:	7dfb      	ldrb	r3, [r7, #23]
 8005332:	2b01      	cmp	r3, #1
 8005334:	d105      	bne.n	8005342 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005336:	4b3c      	ldr	r3, [pc, #240]	; (8005428 <HAL_RCC_OscConfig+0x4c4>)
 8005338:	69db      	ldr	r3, [r3, #28]
 800533a:	4a3b      	ldr	r2, [pc, #236]	; (8005428 <HAL_RCC_OscConfig+0x4c4>)
 800533c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005340:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	69db      	ldr	r3, [r3, #28]
 8005346:	2b00      	cmp	r3, #0
 8005348:	f000 8087 	beq.w	800545a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800534c:	4b36      	ldr	r3, [pc, #216]	; (8005428 <HAL_RCC_OscConfig+0x4c4>)
 800534e:	685b      	ldr	r3, [r3, #4]
 8005350:	f003 030c 	and.w	r3, r3, #12
 8005354:	2b08      	cmp	r3, #8
 8005356:	d061      	beq.n	800541c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	69db      	ldr	r3, [r3, #28]
 800535c:	2b02      	cmp	r3, #2
 800535e:	d146      	bne.n	80053ee <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005360:	4b33      	ldr	r3, [pc, #204]	; (8005430 <HAL_RCC_OscConfig+0x4cc>)
 8005362:	2200      	movs	r2, #0
 8005364:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005366:	f7fe faeb 	bl	8003940 <HAL_GetTick>
 800536a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800536c:	e008      	b.n	8005380 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800536e:	f7fe fae7 	bl	8003940 <HAL_GetTick>
 8005372:	4602      	mov	r2, r0
 8005374:	693b      	ldr	r3, [r7, #16]
 8005376:	1ad3      	subs	r3, r2, r3
 8005378:	2b02      	cmp	r3, #2
 800537a:	d901      	bls.n	8005380 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800537c:	2303      	movs	r3, #3
 800537e:	e06d      	b.n	800545c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005380:	4b29      	ldr	r3, [pc, #164]	; (8005428 <HAL_RCC_OscConfig+0x4c4>)
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005388:	2b00      	cmp	r3, #0
 800538a:	d1f0      	bne.n	800536e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	6a1b      	ldr	r3, [r3, #32]
 8005390:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005394:	d108      	bne.n	80053a8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005396:	4b24      	ldr	r3, [pc, #144]	; (8005428 <HAL_RCC_OscConfig+0x4c4>)
 8005398:	685b      	ldr	r3, [r3, #4]
 800539a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	689b      	ldr	r3, [r3, #8]
 80053a2:	4921      	ldr	r1, [pc, #132]	; (8005428 <HAL_RCC_OscConfig+0x4c4>)
 80053a4:	4313      	orrs	r3, r2
 80053a6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80053a8:	4b1f      	ldr	r3, [pc, #124]	; (8005428 <HAL_RCC_OscConfig+0x4c4>)
 80053aa:	685b      	ldr	r3, [r3, #4]
 80053ac:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	6a19      	ldr	r1, [r3, #32]
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053b8:	430b      	orrs	r3, r1
 80053ba:	491b      	ldr	r1, [pc, #108]	; (8005428 <HAL_RCC_OscConfig+0x4c4>)
 80053bc:	4313      	orrs	r3, r2
 80053be:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80053c0:	4b1b      	ldr	r3, [pc, #108]	; (8005430 <HAL_RCC_OscConfig+0x4cc>)
 80053c2:	2201      	movs	r2, #1
 80053c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053c6:	f7fe fabb 	bl	8003940 <HAL_GetTick>
 80053ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80053cc:	e008      	b.n	80053e0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80053ce:	f7fe fab7 	bl	8003940 <HAL_GetTick>
 80053d2:	4602      	mov	r2, r0
 80053d4:	693b      	ldr	r3, [r7, #16]
 80053d6:	1ad3      	subs	r3, r2, r3
 80053d8:	2b02      	cmp	r3, #2
 80053da:	d901      	bls.n	80053e0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80053dc:	2303      	movs	r3, #3
 80053de:	e03d      	b.n	800545c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80053e0:	4b11      	ldr	r3, [pc, #68]	; (8005428 <HAL_RCC_OscConfig+0x4c4>)
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d0f0      	beq.n	80053ce <HAL_RCC_OscConfig+0x46a>
 80053ec:	e035      	b.n	800545a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80053ee:	4b10      	ldr	r3, [pc, #64]	; (8005430 <HAL_RCC_OscConfig+0x4cc>)
 80053f0:	2200      	movs	r2, #0
 80053f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053f4:	f7fe faa4 	bl	8003940 <HAL_GetTick>
 80053f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80053fa:	e008      	b.n	800540e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80053fc:	f7fe faa0 	bl	8003940 <HAL_GetTick>
 8005400:	4602      	mov	r2, r0
 8005402:	693b      	ldr	r3, [r7, #16]
 8005404:	1ad3      	subs	r3, r2, r3
 8005406:	2b02      	cmp	r3, #2
 8005408:	d901      	bls.n	800540e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800540a:	2303      	movs	r3, #3
 800540c:	e026      	b.n	800545c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800540e:	4b06      	ldr	r3, [pc, #24]	; (8005428 <HAL_RCC_OscConfig+0x4c4>)
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005416:	2b00      	cmp	r3, #0
 8005418:	d1f0      	bne.n	80053fc <HAL_RCC_OscConfig+0x498>
 800541a:	e01e      	b.n	800545a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	69db      	ldr	r3, [r3, #28]
 8005420:	2b01      	cmp	r3, #1
 8005422:	d107      	bne.n	8005434 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8005424:	2301      	movs	r3, #1
 8005426:	e019      	b.n	800545c <HAL_RCC_OscConfig+0x4f8>
 8005428:	40021000 	.word	0x40021000
 800542c:	40007000 	.word	0x40007000
 8005430:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005434:	4b0b      	ldr	r3, [pc, #44]	; (8005464 <HAL_RCC_OscConfig+0x500>)
 8005436:	685b      	ldr	r3, [r3, #4]
 8005438:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	6a1b      	ldr	r3, [r3, #32]
 8005444:	429a      	cmp	r2, r3
 8005446:	d106      	bne.n	8005456 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005452:	429a      	cmp	r2, r3
 8005454:	d001      	beq.n	800545a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8005456:	2301      	movs	r3, #1
 8005458:	e000      	b.n	800545c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800545a:	2300      	movs	r3, #0
}
 800545c:	4618      	mov	r0, r3
 800545e:	3718      	adds	r7, #24
 8005460:	46bd      	mov	sp, r7
 8005462:	bd80      	pop	{r7, pc}
 8005464:	40021000 	.word	0x40021000

08005468 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005468:	b580      	push	{r7, lr}
 800546a:	b084      	sub	sp, #16
 800546c:	af00      	add	r7, sp, #0
 800546e:	6078      	str	r0, [r7, #4]
 8005470:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	2b00      	cmp	r3, #0
 8005476:	d101      	bne.n	800547c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005478:	2301      	movs	r3, #1
 800547a:	e0d0      	b.n	800561e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800547c:	4b6a      	ldr	r3, [pc, #424]	; (8005628 <HAL_RCC_ClockConfig+0x1c0>)
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f003 0307 	and.w	r3, r3, #7
 8005484:	683a      	ldr	r2, [r7, #0]
 8005486:	429a      	cmp	r2, r3
 8005488:	d910      	bls.n	80054ac <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800548a:	4b67      	ldr	r3, [pc, #412]	; (8005628 <HAL_RCC_ClockConfig+0x1c0>)
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f023 0207 	bic.w	r2, r3, #7
 8005492:	4965      	ldr	r1, [pc, #404]	; (8005628 <HAL_RCC_ClockConfig+0x1c0>)
 8005494:	683b      	ldr	r3, [r7, #0]
 8005496:	4313      	orrs	r3, r2
 8005498:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800549a:	4b63      	ldr	r3, [pc, #396]	; (8005628 <HAL_RCC_ClockConfig+0x1c0>)
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f003 0307 	and.w	r3, r3, #7
 80054a2:	683a      	ldr	r2, [r7, #0]
 80054a4:	429a      	cmp	r2, r3
 80054a6:	d001      	beq.n	80054ac <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80054a8:	2301      	movs	r3, #1
 80054aa:	e0b8      	b.n	800561e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f003 0302 	and.w	r3, r3, #2
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d020      	beq.n	80054fa <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f003 0304 	and.w	r3, r3, #4
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d005      	beq.n	80054d0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80054c4:	4b59      	ldr	r3, [pc, #356]	; (800562c <HAL_RCC_ClockConfig+0x1c4>)
 80054c6:	685b      	ldr	r3, [r3, #4]
 80054c8:	4a58      	ldr	r2, [pc, #352]	; (800562c <HAL_RCC_ClockConfig+0x1c4>)
 80054ca:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80054ce:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	f003 0308 	and.w	r3, r3, #8
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d005      	beq.n	80054e8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80054dc:	4b53      	ldr	r3, [pc, #332]	; (800562c <HAL_RCC_ClockConfig+0x1c4>)
 80054de:	685b      	ldr	r3, [r3, #4]
 80054e0:	4a52      	ldr	r2, [pc, #328]	; (800562c <HAL_RCC_ClockConfig+0x1c4>)
 80054e2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80054e6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80054e8:	4b50      	ldr	r3, [pc, #320]	; (800562c <HAL_RCC_ClockConfig+0x1c4>)
 80054ea:	685b      	ldr	r3, [r3, #4]
 80054ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	689b      	ldr	r3, [r3, #8]
 80054f4:	494d      	ldr	r1, [pc, #308]	; (800562c <HAL_RCC_ClockConfig+0x1c4>)
 80054f6:	4313      	orrs	r3, r2
 80054f8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f003 0301 	and.w	r3, r3, #1
 8005502:	2b00      	cmp	r3, #0
 8005504:	d040      	beq.n	8005588 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	685b      	ldr	r3, [r3, #4]
 800550a:	2b01      	cmp	r3, #1
 800550c:	d107      	bne.n	800551e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800550e:	4b47      	ldr	r3, [pc, #284]	; (800562c <HAL_RCC_ClockConfig+0x1c4>)
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005516:	2b00      	cmp	r3, #0
 8005518:	d115      	bne.n	8005546 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800551a:	2301      	movs	r3, #1
 800551c:	e07f      	b.n	800561e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	685b      	ldr	r3, [r3, #4]
 8005522:	2b02      	cmp	r3, #2
 8005524:	d107      	bne.n	8005536 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005526:	4b41      	ldr	r3, [pc, #260]	; (800562c <HAL_RCC_ClockConfig+0x1c4>)
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800552e:	2b00      	cmp	r3, #0
 8005530:	d109      	bne.n	8005546 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005532:	2301      	movs	r3, #1
 8005534:	e073      	b.n	800561e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005536:	4b3d      	ldr	r3, [pc, #244]	; (800562c <HAL_RCC_ClockConfig+0x1c4>)
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f003 0302 	and.w	r3, r3, #2
 800553e:	2b00      	cmp	r3, #0
 8005540:	d101      	bne.n	8005546 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005542:	2301      	movs	r3, #1
 8005544:	e06b      	b.n	800561e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005546:	4b39      	ldr	r3, [pc, #228]	; (800562c <HAL_RCC_ClockConfig+0x1c4>)
 8005548:	685b      	ldr	r3, [r3, #4]
 800554a:	f023 0203 	bic.w	r2, r3, #3
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	685b      	ldr	r3, [r3, #4]
 8005552:	4936      	ldr	r1, [pc, #216]	; (800562c <HAL_RCC_ClockConfig+0x1c4>)
 8005554:	4313      	orrs	r3, r2
 8005556:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005558:	f7fe f9f2 	bl	8003940 <HAL_GetTick>
 800555c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800555e:	e00a      	b.n	8005576 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005560:	f7fe f9ee 	bl	8003940 <HAL_GetTick>
 8005564:	4602      	mov	r2, r0
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	1ad3      	subs	r3, r2, r3
 800556a:	f241 3288 	movw	r2, #5000	; 0x1388
 800556e:	4293      	cmp	r3, r2
 8005570:	d901      	bls.n	8005576 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005572:	2303      	movs	r3, #3
 8005574:	e053      	b.n	800561e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005576:	4b2d      	ldr	r3, [pc, #180]	; (800562c <HAL_RCC_ClockConfig+0x1c4>)
 8005578:	685b      	ldr	r3, [r3, #4]
 800557a:	f003 020c 	and.w	r2, r3, #12
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	685b      	ldr	r3, [r3, #4]
 8005582:	009b      	lsls	r3, r3, #2
 8005584:	429a      	cmp	r2, r3
 8005586:	d1eb      	bne.n	8005560 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005588:	4b27      	ldr	r3, [pc, #156]	; (8005628 <HAL_RCC_ClockConfig+0x1c0>)
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f003 0307 	and.w	r3, r3, #7
 8005590:	683a      	ldr	r2, [r7, #0]
 8005592:	429a      	cmp	r2, r3
 8005594:	d210      	bcs.n	80055b8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005596:	4b24      	ldr	r3, [pc, #144]	; (8005628 <HAL_RCC_ClockConfig+0x1c0>)
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f023 0207 	bic.w	r2, r3, #7
 800559e:	4922      	ldr	r1, [pc, #136]	; (8005628 <HAL_RCC_ClockConfig+0x1c0>)
 80055a0:	683b      	ldr	r3, [r7, #0]
 80055a2:	4313      	orrs	r3, r2
 80055a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80055a6:	4b20      	ldr	r3, [pc, #128]	; (8005628 <HAL_RCC_ClockConfig+0x1c0>)
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f003 0307 	and.w	r3, r3, #7
 80055ae:	683a      	ldr	r2, [r7, #0]
 80055b0:	429a      	cmp	r2, r3
 80055b2:	d001      	beq.n	80055b8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80055b4:	2301      	movs	r3, #1
 80055b6:	e032      	b.n	800561e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f003 0304 	and.w	r3, r3, #4
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d008      	beq.n	80055d6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80055c4:	4b19      	ldr	r3, [pc, #100]	; (800562c <HAL_RCC_ClockConfig+0x1c4>)
 80055c6:	685b      	ldr	r3, [r3, #4]
 80055c8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	68db      	ldr	r3, [r3, #12]
 80055d0:	4916      	ldr	r1, [pc, #88]	; (800562c <HAL_RCC_ClockConfig+0x1c4>)
 80055d2:	4313      	orrs	r3, r2
 80055d4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f003 0308 	and.w	r3, r3, #8
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d009      	beq.n	80055f6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80055e2:	4b12      	ldr	r3, [pc, #72]	; (800562c <HAL_RCC_ClockConfig+0x1c4>)
 80055e4:	685b      	ldr	r3, [r3, #4]
 80055e6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	691b      	ldr	r3, [r3, #16]
 80055ee:	00db      	lsls	r3, r3, #3
 80055f0:	490e      	ldr	r1, [pc, #56]	; (800562c <HAL_RCC_ClockConfig+0x1c4>)
 80055f2:	4313      	orrs	r3, r2
 80055f4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80055f6:	f000 f821 	bl	800563c <HAL_RCC_GetSysClockFreq>
 80055fa:	4602      	mov	r2, r0
 80055fc:	4b0b      	ldr	r3, [pc, #44]	; (800562c <HAL_RCC_ClockConfig+0x1c4>)
 80055fe:	685b      	ldr	r3, [r3, #4]
 8005600:	091b      	lsrs	r3, r3, #4
 8005602:	f003 030f 	and.w	r3, r3, #15
 8005606:	490a      	ldr	r1, [pc, #40]	; (8005630 <HAL_RCC_ClockConfig+0x1c8>)
 8005608:	5ccb      	ldrb	r3, [r1, r3]
 800560a:	fa22 f303 	lsr.w	r3, r2, r3
 800560e:	4a09      	ldr	r2, [pc, #36]	; (8005634 <HAL_RCC_ClockConfig+0x1cc>)
 8005610:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005612:	4b09      	ldr	r3, [pc, #36]	; (8005638 <HAL_RCC_ClockConfig+0x1d0>)
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	4618      	mov	r0, r3
 8005618:	f7fe f950 	bl	80038bc <HAL_InitTick>

  return HAL_OK;
 800561c:	2300      	movs	r3, #0
}
 800561e:	4618      	mov	r0, r3
 8005620:	3710      	adds	r7, #16
 8005622:	46bd      	mov	sp, r7
 8005624:	bd80      	pop	{r7, pc}
 8005626:	bf00      	nop
 8005628:	40022000 	.word	0x40022000
 800562c:	40021000 	.word	0x40021000
 8005630:	08009b70 	.word	0x08009b70
 8005634:	20000174 	.word	0x20000174
 8005638:	20000178 	.word	0x20000178

0800563c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800563c:	b490      	push	{r4, r7}
 800563e:	b08a      	sub	sp, #40	; 0x28
 8005640:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8005642:	4b29      	ldr	r3, [pc, #164]	; (80056e8 <HAL_RCC_GetSysClockFreq+0xac>)
 8005644:	1d3c      	adds	r4, r7, #4
 8005646:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005648:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800564c:	f240 2301 	movw	r3, #513	; 0x201
 8005650:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005652:	2300      	movs	r3, #0
 8005654:	61fb      	str	r3, [r7, #28]
 8005656:	2300      	movs	r3, #0
 8005658:	61bb      	str	r3, [r7, #24]
 800565a:	2300      	movs	r3, #0
 800565c:	627b      	str	r3, [r7, #36]	; 0x24
 800565e:	2300      	movs	r3, #0
 8005660:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8005662:	2300      	movs	r3, #0
 8005664:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005666:	4b21      	ldr	r3, [pc, #132]	; (80056ec <HAL_RCC_GetSysClockFreq+0xb0>)
 8005668:	685b      	ldr	r3, [r3, #4]
 800566a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800566c:	69fb      	ldr	r3, [r7, #28]
 800566e:	f003 030c 	and.w	r3, r3, #12
 8005672:	2b04      	cmp	r3, #4
 8005674:	d002      	beq.n	800567c <HAL_RCC_GetSysClockFreq+0x40>
 8005676:	2b08      	cmp	r3, #8
 8005678:	d003      	beq.n	8005682 <HAL_RCC_GetSysClockFreq+0x46>
 800567a:	e02b      	b.n	80056d4 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800567c:	4b1c      	ldr	r3, [pc, #112]	; (80056f0 <HAL_RCC_GetSysClockFreq+0xb4>)
 800567e:	623b      	str	r3, [r7, #32]
      break;
 8005680:	e02b      	b.n	80056da <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005682:	69fb      	ldr	r3, [r7, #28]
 8005684:	0c9b      	lsrs	r3, r3, #18
 8005686:	f003 030f 	and.w	r3, r3, #15
 800568a:	3328      	adds	r3, #40	; 0x28
 800568c:	443b      	add	r3, r7
 800568e:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8005692:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005694:	69fb      	ldr	r3, [r7, #28]
 8005696:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800569a:	2b00      	cmp	r3, #0
 800569c:	d012      	beq.n	80056c4 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800569e:	4b13      	ldr	r3, [pc, #76]	; (80056ec <HAL_RCC_GetSysClockFreq+0xb0>)
 80056a0:	685b      	ldr	r3, [r3, #4]
 80056a2:	0c5b      	lsrs	r3, r3, #17
 80056a4:	f003 0301 	and.w	r3, r3, #1
 80056a8:	3328      	adds	r3, #40	; 0x28
 80056aa:	443b      	add	r3, r7
 80056ac:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80056b0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80056b2:	697b      	ldr	r3, [r7, #20]
 80056b4:	4a0e      	ldr	r2, [pc, #56]	; (80056f0 <HAL_RCC_GetSysClockFreq+0xb4>)
 80056b6:	fb03 f202 	mul.w	r2, r3, r2
 80056ba:	69bb      	ldr	r3, [r7, #24]
 80056bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80056c0:	627b      	str	r3, [r7, #36]	; 0x24
 80056c2:	e004      	b.n	80056ce <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80056c4:	697b      	ldr	r3, [r7, #20]
 80056c6:	4a0b      	ldr	r2, [pc, #44]	; (80056f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 80056c8:	fb02 f303 	mul.w	r3, r2, r3
 80056cc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80056ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056d0:	623b      	str	r3, [r7, #32]
      break;
 80056d2:	e002      	b.n	80056da <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80056d4:	4b06      	ldr	r3, [pc, #24]	; (80056f0 <HAL_RCC_GetSysClockFreq+0xb4>)
 80056d6:	623b      	str	r3, [r7, #32]
      break;
 80056d8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80056da:	6a3b      	ldr	r3, [r7, #32]
}
 80056dc:	4618      	mov	r0, r3
 80056de:	3728      	adds	r7, #40	; 0x28
 80056e0:	46bd      	mov	sp, r7
 80056e2:	bc90      	pop	{r4, r7}
 80056e4:	4770      	bx	lr
 80056e6:	bf00      	nop
 80056e8:	08009b60 	.word	0x08009b60
 80056ec:	40021000 	.word	0x40021000
 80056f0:	007a1200 	.word	0x007a1200
 80056f4:	003d0900 	.word	0x003d0900

080056f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80056f8:	b480      	push	{r7}
 80056fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80056fc:	4b02      	ldr	r3, [pc, #8]	; (8005708 <HAL_RCC_GetHCLKFreq+0x10>)
 80056fe:	681b      	ldr	r3, [r3, #0]
}
 8005700:	4618      	mov	r0, r3
 8005702:	46bd      	mov	sp, r7
 8005704:	bc80      	pop	{r7}
 8005706:	4770      	bx	lr
 8005708:	20000174 	.word	0x20000174

0800570c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800570c:	b580      	push	{r7, lr}
 800570e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005710:	f7ff fff2 	bl	80056f8 <HAL_RCC_GetHCLKFreq>
 8005714:	4602      	mov	r2, r0
 8005716:	4b05      	ldr	r3, [pc, #20]	; (800572c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005718:	685b      	ldr	r3, [r3, #4]
 800571a:	0a1b      	lsrs	r3, r3, #8
 800571c:	f003 0307 	and.w	r3, r3, #7
 8005720:	4903      	ldr	r1, [pc, #12]	; (8005730 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005722:	5ccb      	ldrb	r3, [r1, r3]
 8005724:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005728:	4618      	mov	r0, r3
 800572a:	bd80      	pop	{r7, pc}
 800572c:	40021000 	.word	0x40021000
 8005730:	08009b80 	.word	0x08009b80

08005734 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005734:	b480      	push	{r7}
 8005736:	b085      	sub	sp, #20
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800573c:	4b0a      	ldr	r3, [pc, #40]	; (8005768 <RCC_Delay+0x34>)
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	4a0a      	ldr	r2, [pc, #40]	; (800576c <RCC_Delay+0x38>)
 8005742:	fba2 2303 	umull	r2, r3, r2, r3
 8005746:	0a5b      	lsrs	r3, r3, #9
 8005748:	687a      	ldr	r2, [r7, #4]
 800574a:	fb02 f303 	mul.w	r3, r2, r3
 800574e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005750:	bf00      	nop
  }
  while (Delay --);
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	1e5a      	subs	r2, r3, #1
 8005756:	60fa      	str	r2, [r7, #12]
 8005758:	2b00      	cmp	r3, #0
 800575a:	d1f9      	bne.n	8005750 <RCC_Delay+0x1c>
}
 800575c:	bf00      	nop
 800575e:	bf00      	nop
 8005760:	3714      	adds	r7, #20
 8005762:	46bd      	mov	sp, r7
 8005764:	bc80      	pop	{r7}
 8005766:	4770      	bx	lr
 8005768:	20000174 	.word	0x20000174
 800576c:	10624dd3 	.word	0x10624dd3

08005770 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005770:	b580      	push	{r7, lr}
 8005772:	b082      	sub	sp, #8
 8005774:	af00      	add	r7, sp, #0
 8005776:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2b00      	cmp	r3, #0
 800577c:	d101      	bne.n	8005782 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800577e:	2301      	movs	r3, #1
 8005780:	e076      	b.n	8005870 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005786:	2b00      	cmp	r3, #0
 8005788:	d108      	bne.n	800579c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	685b      	ldr	r3, [r3, #4]
 800578e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005792:	d009      	beq.n	80057a8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2200      	movs	r2, #0
 8005798:	61da      	str	r2, [r3, #28]
 800579a:	e005      	b.n	80057a8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2200      	movs	r2, #0
 80057a0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	2200      	movs	r2, #0
 80057a6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2200      	movs	r2, #0
 80057ac:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80057b4:	b2db      	uxtb	r3, r3
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d106      	bne.n	80057c8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	2200      	movs	r2, #0
 80057be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80057c2:	6878      	ldr	r0, [r7, #4]
 80057c4:	f7fd fce0 	bl	8003188 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	2202      	movs	r2, #2
 80057cc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	681a      	ldr	r2, [r3, #0]
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80057de:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	685b      	ldr	r3, [r3, #4]
 80057e4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	689b      	ldr	r3, [r3, #8]
 80057ec:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80057f0:	431a      	orrs	r2, r3
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	68db      	ldr	r3, [r3, #12]
 80057f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80057fa:	431a      	orrs	r2, r3
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	691b      	ldr	r3, [r3, #16]
 8005800:	f003 0302 	and.w	r3, r3, #2
 8005804:	431a      	orrs	r2, r3
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	695b      	ldr	r3, [r3, #20]
 800580a:	f003 0301 	and.w	r3, r3, #1
 800580e:	431a      	orrs	r2, r3
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	699b      	ldr	r3, [r3, #24]
 8005814:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005818:	431a      	orrs	r2, r3
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	69db      	ldr	r3, [r3, #28]
 800581e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005822:	431a      	orrs	r2, r3
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	6a1b      	ldr	r3, [r3, #32]
 8005828:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800582c:	ea42 0103 	orr.w	r1, r2, r3
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005834:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	430a      	orrs	r2, r1
 800583e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	699b      	ldr	r3, [r3, #24]
 8005844:	0c1a      	lsrs	r2, r3, #16
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	f002 0204 	and.w	r2, r2, #4
 800584e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	69da      	ldr	r2, [r3, #28]
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800585e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	2200      	movs	r2, #0
 8005864:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	2201      	movs	r2, #1
 800586a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800586e:	2300      	movs	r3, #0
}
 8005870:	4618      	mov	r0, r3
 8005872:	3708      	adds	r7, #8
 8005874:	46bd      	mov	sp, r7
 8005876:	bd80      	pop	{r7, pc}

08005878 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005878:	b580      	push	{r7, lr}
 800587a:	b088      	sub	sp, #32
 800587c:	af00      	add	r7, sp, #0
 800587e:	60f8      	str	r0, [r7, #12]
 8005880:	60b9      	str	r1, [r7, #8]
 8005882:	603b      	str	r3, [r7, #0]
 8005884:	4613      	mov	r3, r2
 8005886:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005888:	2300      	movs	r3, #0
 800588a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005892:	2b01      	cmp	r3, #1
 8005894:	d101      	bne.n	800589a <HAL_SPI_Transmit+0x22>
 8005896:	2302      	movs	r3, #2
 8005898:	e126      	b.n	8005ae8 <HAL_SPI_Transmit+0x270>
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	2201      	movs	r2, #1
 800589e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80058a2:	f7fe f84d 	bl	8003940 <HAL_GetTick>
 80058a6:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80058a8:	88fb      	ldrh	r3, [r7, #6]
 80058aa:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80058b2:	b2db      	uxtb	r3, r3
 80058b4:	2b01      	cmp	r3, #1
 80058b6:	d002      	beq.n	80058be <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80058b8:	2302      	movs	r3, #2
 80058ba:	77fb      	strb	r3, [r7, #31]
    goto error;
 80058bc:	e10b      	b.n	8005ad6 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80058be:	68bb      	ldr	r3, [r7, #8]
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d002      	beq.n	80058ca <HAL_SPI_Transmit+0x52>
 80058c4:	88fb      	ldrh	r3, [r7, #6]
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d102      	bne.n	80058d0 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80058ca:	2301      	movs	r3, #1
 80058cc:	77fb      	strb	r3, [r7, #31]
    goto error;
 80058ce:	e102      	b.n	8005ad6 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	2203      	movs	r2, #3
 80058d4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	2200      	movs	r2, #0
 80058dc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	68ba      	ldr	r2, [r7, #8]
 80058e2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	88fa      	ldrh	r2, [r7, #6]
 80058e8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	88fa      	ldrh	r2, [r7, #6]
 80058ee:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	2200      	movs	r2, #0
 80058f4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	2200      	movs	r2, #0
 80058fa:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	2200      	movs	r2, #0
 8005900:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	2200      	movs	r2, #0
 8005906:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	2200      	movs	r2, #0
 800590c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	689b      	ldr	r3, [r3, #8]
 8005912:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005916:	d10f      	bne.n	8005938 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	681a      	ldr	r2, [r3, #0]
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005926:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	681a      	ldr	r2, [r3, #0]
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005936:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005942:	2b40      	cmp	r3, #64	; 0x40
 8005944:	d007      	beq.n	8005956 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	681a      	ldr	r2, [r3, #0]
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005954:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	68db      	ldr	r3, [r3, #12]
 800595a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800595e:	d14b      	bne.n	80059f8 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	685b      	ldr	r3, [r3, #4]
 8005964:	2b00      	cmp	r3, #0
 8005966:	d002      	beq.n	800596e <HAL_SPI_Transmit+0xf6>
 8005968:	8afb      	ldrh	r3, [r7, #22]
 800596a:	2b01      	cmp	r3, #1
 800596c:	d13e      	bne.n	80059ec <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005972:	881a      	ldrh	r2, [r3, #0]
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800597e:	1c9a      	adds	r2, r3, #2
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005988:	b29b      	uxth	r3, r3
 800598a:	3b01      	subs	r3, #1
 800598c:	b29a      	uxth	r2, r3
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005992:	e02b      	b.n	80059ec <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	689b      	ldr	r3, [r3, #8]
 800599a:	f003 0302 	and.w	r3, r3, #2
 800599e:	2b02      	cmp	r3, #2
 80059a0:	d112      	bne.n	80059c8 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059a6:	881a      	ldrh	r2, [r3, #0]
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059b2:	1c9a      	adds	r2, r3, #2
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80059bc:	b29b      	uxth	r3, r3
 80059be:	3b01      	subs	r3, #1
 80059c0:	b29a      	uxth	r2, r3
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	86da      	strh	r2, [r3, #54]	; 0x36
 80059c6:	e011      	b.n	80059ec <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80059c8:	f7fd ffba 	bl	8003940 <HAL_GetTick>
 80059cc:	4602      	mov	r2, r0
 80059ce:	69bb      	ldr	r3, [r7, #24]
 80059d0:	1ad3      	subs	r3, r2, r3
 80059d2:	683a      	ldr	r2, [r7, #0]
 80059d4:	429a      	cmp	r2, r3
 80059d6:	d803      	bhi.n	80059e0 <HAL_SPI_Transmit+0x168>
 80059d8:	683b      	ldr	r3, [r7, #0]
 80059da:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80059de:	d102      	bne.n	80059e6 <HAL_SPI_Transmit+0x16e>
 80059e0:	683b      	ldr	r3, [r7, #0]
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d102      	bne.n	80059ec <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80059e6:	2303      	movs	r3, #3
 80059e8:	77fb      	strb	r3, [r7, #31]
          goto error;
 80059ea:	e074      	b.n	8005ad6 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80059f0:	b29b      	uxth	r3, r3
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d1ce      	bne.n	8005994 <HAL_SPI_Transmit+0x11c>
 80059f6:	e04c      	b.n	8005a92 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	685b      	ldr	r3, [r3, #4]
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d002      	beq.n	8005a06 <HAL_SPI_Transmit+0x18e>
 8005a00:	8afb      	ldrh	r3, [r7, #22]
 8005a02:	2b01      	cmp	r3, #1
 8005a04:	d140      	bne.n	8005a88 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	330c      	adds	r3, #12
 8005a10:	7812      	ldrb	r2, [r2, #0]
 8005a12:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a18:	1c5a      	adds	r2, r3, #1
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005a22:	b29b      	uxth	r3, r3
 8005a24:	3b01      	subs	r3, #1
 8005a26:	b29a      	uxth	r2, r3
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005a2c:	e02c      	b.n	8005a88 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	689b      	ldr	r3, [r3, #8]
 8005a34:	f003 0302 	and.w	r3, r3, #2
 8005a38:	2b02      	cmp	r3, #2
 8005a3a:	d113      	bne.n	8005a64 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	330c      	adds	r3, #12
 8005a46:	7812      	ldrb	r2, [r2, #0]
 8005a48:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a4e:	1c5a      	adds	r2, r3, #1
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005a58:	b29b      	uxth	r3, r3
 8005a5a:	3b01      	subs	r3, #1
 8005a5c:	b29a      	uxth	r2, r3
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	86da      	strh	r2, [r3, #54]	; 0x36
 8005a62:	e011      	b.n	8005a88 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005a64:	f7fd ff6c 	bl	8003940 <HAL_GetTick>
 8005a68:	4602      	mov	r2, r0
 8005a6a:	69bb      	ldr	r3, [r7, #24]
 8005a6c:	1ad3      	subs	r3, r2, r3
 8005a6e:	683a      	ldr	r2, [r7, #0]
 8005a70:	429a      	cmp	r2, r3
 8005a72:	d803      	bhi.n	8005a7c <HAL_SPI_Transmit+0x204>
 8005a74:	683b      	ldr	r3, [r7, #0]
 8005a76:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005a7a:	d102      	bne.n	8005a82 <HAL_SPI_Transmit+0x20a>
 8005a7c:	683b      	ldr	r3, [r7, #0]
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d102      	bne.n	8005a88 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8005a82:	2303      	movs	r3, #3
 8005a84:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005a86:	e026      	b.n	8005ad6 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005a8c:	b29b      	uxth	r3, r3
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d1cd      	bne.n	8005a2e <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005a92:	69ba      	ldr	r2, [r7, #24]
 8005a94:	6839      	ldr	r1, [r7, #0]
 8005a96:	68f8      	ldr	r0, [r7, #12]
 8005a98:	f000 fbb8 	bl	800620c <SPI_EndRxTxTransaction>
 8005a9c:	4603      	mov	r3, r0
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d002      	beq.n	8005aa8 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	2220      	movs	r2, #32
 8005aa6:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	689b      	ldr	r3, [r3, #8]
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d10a      	bne.n	8005ac6 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005ab0:	2300      	movs	r3, #0
 8005ab2:	613b      	str	r3, [r7, #16]
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	68db      	ldr	r3, [r3, #12]
 8005aba:	613b      	str	r3, [r7, #16]
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	689b      	ldr	r3, [r3, #8]
 8005ac2:	613b      	str	r3, [r7, #16]
 8005ac4:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d002      	beq.n	8005ad4 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8005ace:	2301      	movs	r3, #1
 8005ad0:	77fb      	strb	r3, [r7, #31]
 8005ad2:	e000      	b.n	8005ad6 <HAL_SPI_Transmit+0x25e>
  }

error:
 8005ad4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	2201      	movs	r2, #1
 8005ada:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	2200      	movs	r2, #0
 8005ae2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005ae6:	7ffb      	ldrb	r3, [r7, #31]
}
 8005ae8:	4618      	mov	r0, r3
 8005aea:	3720      	adds	r7, #32
 8005aec:	46bd      	mov	sp, r7
 8005aee:	bd80      	pop	{r7, pc}

08005af0 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005af0:	b580      	push	{r7, lr}
 8005af2:	b088      	sub	sp, #32
 8005af4:	af02      	add	r7, sp, #8
 8005af6:	60f8      	str	r0, [r7, #12]
 8005af8:	60b9      	str	r1, [r7, #8]
 8005afa:	603b      	str	r3, [r7, #0]
 8005afc:	4613      	mov	r3, r2
 8005afe:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005b00:	2300      	movs	r3, #0
 8005b02:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	685b      	ldr	r3, [r3, #4]
 8005b08:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005b0c:	d112      	bne.n	8005b34 <HAL_SPI_Receive+0x44>
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	689b      	ldr	r3, [r3, #8]
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d10e      	bne.n	8005b34 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	2204      	movs	r2, #4
 8005b1a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005b1e:	88fa      	ldrh	r2, [r7, #6]
 8005b20:	683b      	ldr	r3, [r7, #0]
 8005b22:	9300      	str	r3, [sp, #0]
 8005b24:	4613      	mov	r3, r2
 8005b26:	68ba      	ldr	r2, [r7, #8]
 8005b28:	68b9      	ldr	r1, [r7, #8]
 8005b2a:	68f8      	ldr	r0, [r7, #12]
 8005b2c:	f000 f8f1 	bl	8005d12 <HAL_SPI_TransmitReceive>
 8005b30:	4603      	mov	r3, r0
 8005b32:	e0ea      	b.n	8005d0a <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005b3a:	2b01      	cmp	r3, #1
 8005b3c:	d101      	bne.n	8005b42 <HAL_SPI_Receive+0x52>
 8005b3e:	2302      	movs	r3, #2
 8005b40:	e0e3      	b.n	8005d0a <HAL_SPI_Receive+0x21a>
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	2201      	movs	r2, #1
 8005b46:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005b4a:	f7fd fef9 	bl	8003940 <HAL_GetTick>
 8005b4e:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005b56:	b2db      	uxtb	r3, r3
 8005b58:	2b01      	cmp	r3, #1
 8005b5a:	d002      	beq.n	8005b62 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8005b5c:	2302      	movs	r3, #2
 8005b5e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005b60:	e0ca      	b.n	8005cf8 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8005b62:	68bb      	ldr	r3, [r7, #8]
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d002      	beq.n	8005b6e <HAL_SPI_Receive+0x7e>
 8005b68:	88fb      	ldrh	r3, [r7, #6]
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d102      	bne.n	8005b74 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8005b6e:	2301      	movs	r3, #1
 8005b70:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005b72:	e0c1      	b.n	8005cf8 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	2204      	movs	r2, #4
 8005b78:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	2200      	movs	r2, #0
 8005b80:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	68ba      	ldr	r2, [r7, #8]
 8005b86:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	88fa      	ldrh	r2, [r7, #6]
 8005b8c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	88fa      	ldrh	r2, [r7, #6]
 8005b92:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	2200      	movs	r2, #0
 8005b98:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	2200      	movs	r2, #0
 8005b9e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	2200      	movs	r2, #0
 8005ba4:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	2200      	movs	r2, #0
 8005baa:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	2200      	movs	r2, #0
 8005bb0:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	689b      	ldr	r3, [r3, #8]
 8005bb6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005bba:	d10f      	bne.n	8005bdc <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	681a      	ldr	r2, [r3, #0]
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005bca:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	681a      	ldr	r2, [r3, #0]
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005bda:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005be6:	2b40      	cmp	r3, #64	; 0x40
 8005be8:	d007      	beq.n	8005bfa <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	681a      	ldr	r2, [r3, #0]
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005bf8:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	68db      	ldr	r3, [r3, #12]
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d162      	bne.n	8005cc8 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005c02:	e02e      	b.n	8005c62 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	689b      	ldr	r3, [r3, #8]
 8005c0a:	f003 0301 	and.w	r3, r3, #1
 8005c0e:	2b01      	cmp	r3, #1
 8005c10:	d115      	bne.n	8005c3e <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	f103 020c 	add.w	r2, r3, #12
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c1e:	7812      	ldrb	r2, [r2, #0]
 8005c20:	b2d2      	uxtb	r2, r2
 8005c22:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c28:	1c5a      	adds	r2, r3, #1
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c32:	b29b      	uxth	r3, r3
 8005c34:	3b01      	subs	r3, #1
 8005c36:	b29a      	uxth	r2, r3
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005c3c:	e011      	b.n	8005c62 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005c3e:	f7fd fe7f 	bl	8003940 <HAL_GetTick>
 8005c42:	4602      	mov	r2, r0
 8005c44:	693b      	ldr	r3, [r7, #16]
 8005c46:	1ad3      	subs	r3, r2, r3
 8005c48:	683a      	ldr	r2, [r7, #0]
 8005c4a:	429a      	cmp	r2, r3
 8005c4c:	d803      	bhi.n	8005c56 <HAL_SPI_Receive+0x166>
 8005c4e:	683b      	ldr	r3, [r7, #0]
 8005c50:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005c54:	d102      	bne.n	8005c5c <HAL_SPI_Receive+0x16c>
 8005c56:	683b      	ldr	r3, [r7, #0]
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d102      	bne.n	8005c62 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8005c5c:	2303      	movs	r3, #3
 8005c5e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005c60:	e04a      	b.n	8005cf8 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c66:	b29b      	uxth	r3, r3
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d1cb      	bne.n	8005c04 <HAL_SPI_Receive+0x114>
 8005c6c:	e031      	b.n	8005cd2 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	689b      	ldr	r3, [r3, #8]
 8005c74:	f003 0301 	and.w	r3, r3, #1
 8005c78:	2b01      	cmp	r3, #1
 8005c7a:	d113      	bne.n	8005ca4 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	68da      	ldr	r2, [r3, #12]
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c86:	b292      	uxth	r2, r2
 8005c88:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c8e:	1c9a      	adds	r2, r3, #2
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c98:	b29b      	uxth	r3, r3
 8005c9a:	3b01      	subs	r3, #1
 8005c9c:	b29a      	uxth	r2, r3
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005ca2:	e011      	b.n	8005cc8 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005ca4:	f7fd fe4c 	bl	8003940 <HAL_GetTick>
 8005ca8:	4602      	mov	r2, r0
 8005caa:	693b      	ldr	r3, [r7, #16]
 8005cac:	1ad3      	subs	r3, r2, r3
 8005cae:	683a      	ldr	r2, [r7, #0]
 8005cb0:	429a      	cmp	r2, r3
 8005cb2:	d803      	bhi.n	8005cbc <HAL_SPI_Receive+0x1cc>
 8005cb4:	683b      	ldr	r3, [r7, #0]
 8005cb6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005cba:	d102      	bne.n	8005cc2 <HAL_SPI_Receive+0x1d2>
 8005cbc:	683b      	ldr	r3, [r7, #0]
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d102      	bne.n	8005cc8 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8005cc2:	2303      	movs	r3, #3
 8005cc4:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005cc6:	e017      	b.n	8005cf8 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ccc:	b29b      	uxth	r3, r3
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d1cd      	bne.n	8005c6e <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005cd2:	693a      	ldr	r2, [r7, #16]
 8005cd4:	6839      	ldr	r1, [r7, #0]
 8005cd6:	68f8      	ldr	r0, [r7, #12]
 8005cd8:	f000 fa46 	bl	8006168 <SPI_EndRxTransaction>
 8005cdc:	4603      	mov	r3, r0
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d002      	beq.n	8005ce8 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	2220      	movs	r2, #32
 8005ce6:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d002      	beq.n	8005cf6 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8005cf0:	2301      	movs	r3, #1
 8005cf2:	75fb      	strb	r3, [r7, #23]
 8005cf4:	e000      	b.n	8005cf8 <HAL_SPI_Receive+0x208>
  }

error :
 8005cf6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	2201      	movs	r2, #1
 8005cfc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	2200      	movs	r2, #0
 8005d04:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005d08:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d0a:	4618      	mov	r0, r3
 8005d0c:	3718      	adds	r7, #24
 8005d0e:	46bd      	mov	sp, r7
 8005d10:	bd80      	pop	{r7, pc}

08005d12 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005d12:	b580      	push	{r7, lr}
 8005d14:	b08c      	sub	sp, #48	; 0x30
 8005d16:	af00      	add	r7, sp, #0
 8005d18:	60f8      	str	r0, [r7, #12]
 8005d1a:	60b9      	str	r1, [r7, #8]
 8005d1c:	607a      	str	r2, [r7, #4]
 8005d1e:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005d20:	2301      	movs	r3, #1
 8005d22:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005d24:	2300      	movs	r3, #0
 8005d26:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005d30:	2b01      	cmp	r3, #1
 8005d32:	d101      	bne.n	8005d38 <HAL_SPI_TransmitReceive+0x26>
 8005d34:	2302      	movs	r3, #2
 8005d36:	e18a      	b.n	800604e <HAL_SPI_TransmitReceive+0x33c>
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	2201      	movs	r2, #1
 8005d3c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005d40:	f7fd fdfe 	bl	8003940 <HAL_GetTick>
 8005d44:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005d4c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	685b      	ldr	r3, [r3, #4]
 8005d54:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8005d56:	887b      	ldrh	r3, [r7, #2]
 8005d58:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005d5a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005d5e:	2b01      	cmp	r3, #1
 8005d60:	d00f      	beq.n	8005d82 <HAL_SPI_TransmitReceive+0x70>
 8005d62:	69fb      	ldr	r3, [r7, #28]
 8005d64:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005d68:	d107      	bne.n	8005d7a <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	689b      	ldr	r3, [r3, #8]
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d103      	bne.n	8005d7a <HAL_SPI_TransmitReceive+0x68>
 8005d72:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005d76:	2b04      	cmp	r3, #4
 8005d78:	d003      	beq.n	8005d82 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8005d7a:	2302      	movs	r3, #2
 8005d7c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005d80:	e15b      	b.n	800603a <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005d82:	68bb      	ldr	r3, [r7, #8]
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d005      	beq.n	8005d94 <HAL_SPI_TransmitReceive+0x82>
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d002      	beq.n	8005d94 <HAL_SPI_TransmitReceive+0x82>
 8005d8e:	887b      	ldrh	r3, [r7, #2]
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d103      	bne.n	8005d9c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8005d94:	2301      	movs	r3, #1
 8005d96:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005d9a:	e14e      	b.n	800603a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005da2:	b2db      	uxtb	r3, r3
 8005da4:	2b04      	cmp	r3, #4
 8005da6:	d003      	beq.n	8005db0 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	2205      	movs	r2, #5
 8005dac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	2200      	movs	r2, #0
 8005db4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	687a      	ldr	r2, [r7, #4]
 8005dba:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	887a      	ldrh	r2, [r7, #2]
 8005dc0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	887a      	ldrh	r2, [r7, #2]
 8005dc6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	68ba      	ldr	r2, [r7, #8]
 8005dcc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	887a      	ldrh	r2, [r7, #2]
 8005dd2:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	887a      	ldrh	r2, [r7, #2]
 8005dd8:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	2200      	movs	r2, #0
 8005dde:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	2200      	movs	r2, #0
 8005de4:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005df0:	2b40      	cmp	r3, #64	; 0x40
 8005df2:	d007      	beq.n	8005e04 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	681a      	ldr	r2, [r3, #0]
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005e02:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	68db      	ldr	r3, [r3, #12]
 8005e08:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005e0c:	d178      	bne.n	8005f00 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	685b      	ldr	r3, [r3, #4]
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d002      	beq.n	8005e1c <HAL_SPI_TransmitReceive+0x10a>
 8005e16:	8b7b      	ldrh	r3, [r7, #26]
 8005e18:	2b01      	cmp	r3, #1
 8005e1a:	d166      	bne.n	8005eea <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e20:	881a      	ldrh	r2, [r3, #0]
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e2c:	1c9a      	adds	r2, r3, #2
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005e36:	b29b      	uxth	r3, r3
 8005e38:	3b01      	subs	r3, #1
 8005e3a:	b29a      	uxth	r2, r3
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005e40:	e053      	b.n	8005eea <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	689b      	ldr	r3, [r3, #8]
 8005e48:	f003 0302 	and.w	r3, r3, #2
 8005e4c:	2b02      	cmp	r3, #2
 8005e4e:	d11b      	bne.n	8005e88 <HAL_SPI_TransmitReceive+0x176>
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005e54:	b29b      	uxth	r3, r3
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d016      	beq.n	8005e88 <HAL_SPI_TransmitReceive+0x176>
 8005e5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e5c:	2b01      	cmp	r3, #1
 8005e5e:	d113      	bne.n	8005e88 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e64:	881a      	ldrh	r2, [r3, #0]
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e70:	1c9a      	adds	r2, r3, #2
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005e7a:	b29b      	uxth	r3, r3
 8005e7c:	3b01      	subs	r3, #1
 8005e7e:	b29a      	uxth	r2, r3
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005e84:	2300      	movs	r3, #0
 8005e86:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	689b      	ldr	r3, [r3, #8]
 8005e8e:	f003 0301 	and.w	r3, r3, #1
 8005e92:	2b01      	cmp	r3, #1
 8005e94:	d119      	bne.n	8005eca <HAL_SPI_TransmitReceive+0x1b8>
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e9a:	b29b      	uxth	r3, r3
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d014      	beq.n	8005eca <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	68da      	ldr	r2, [r3, #12]
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005eaa:	b292      	uxth	r2, r2
 8005eac:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005eb2:	1c9a      	adds	r2, r3, #2
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ebc:	b29b      	uxth	r3, r3
 8005ebe:	3b01      	subs	r3, #1
 8005ec0:	b29a      	uxth	r2, r3
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005ec6:	2301      	movs	r3, #1
 8005ec8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005eca:	f7fd fd39 	bl	8003940 <HAL_GetTick>
 8005ece:	4602      	mov	r2, r0
 8005ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ed2:	1ad3      	subs	r3, r2, r3
 8005ed4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005ed6:	429a      	cmp	r2, r3
 8005ed8:	d807      	bhi.n	8005eea <HAL_SPI_TransmitReceive+0x1d8>
 8005eda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005edc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005ee0:	d003      	beq.n	8005eea <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8005ee2:	2303      	movs	r3, #3
 8005ee4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005ee8:	e0a7      	b.n	800603a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005eee:	b29b      	uxth	r3, r3
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d1a6      	bne.n	8005e42 <HAL_SPI_TransmitReceive+0x130>
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ef8:	b29b      	uxth	r3, r3
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d1a1      	bne.n	8005e42 <HAL_SPI_TransmitReceive+0x130>
 8005efe:	e07c      	b.n	8005ffa <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	685b      	ldr	r3, [r3, #4]
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d002      	beq.n	8005f0e <HAL_SPI_TransmitReceive+0x1fc>
 8005f08:	8b7b      	ldrh	r3, [r7, #26]
 8005f0a:	2b01      	cmp	r3, #1
 8005f0c:	d16b      	bne.n	8005fe6 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	330c      	adds	r3, #12
 8005f18:	7812      	ldrb	r2, [r2, #0]
 8005f1a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f20:	1c5a      	adds	r2, r3, #1
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005f2a:	b29b      	uxth	r3, r3
 8005f2c:	3b01      	subs	r3, #1
 8005f2e:	b29a      	uxth	r2, r3
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005f34:	e057      	b.n	8005fe6 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	689b      	ldr	r3, [r3, #8]
 8005f3c:	f003 0302 	and.w	r3, r3, #2
 8005f40:	2b02      	cmp	r3, #2
 8005f42:	d11c      	bne.n	8005f7e <HAL_SPI_TransmitReceive+0x26c>
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005f48:	b29b      	uxth	r3, r3
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d017      	beq.n	8005f7e <HAL_SPI_TransmitReceive+0x26c>
 8005f4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f50:	2b01      	cmp	r3, #1
 8005f52:	d114      	bne.n	8005f7e <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	330c      	adds	r3, #12
 8005f5e:	7812      	ldrb	r2, [r2, #0]
 8005f60:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f66:	1c5a      	adds	r2, r3, #1
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005f70:	b29b      	uxth	r3, r3
 8005f72:	3b01      	subs	r3, #1
 8005f74:	b29a      	uxth	r2, r3
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005f7a:	2300      	movs	r3, #0
 8005f7c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	689b      	ldr	r3, [r3, #8]
 8005f84:	f003 0301 	and.w	r3, r3, #1
 8005f88:	2b01      	cmp	r3, #1
 8005f8a:	d119      	bne.n	8005fc0 <HAL_SPI_TransmitReceive+0x2ae>
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f90:	b29b      	uxth	r3, r3
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d014      	beq.n	8005fc0 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	68da      	ldr	r2, [r3, #12]
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fa0:	b2d2      	uxtb	r2, r2
 8005fa2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fa8:	1c5a      	adds	r2, r3, #1
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005fb2:	b29b      	uxth	r3, r3
 8005fb4:	3b01      	subs	r3, #1
 8005fb6:	b29a      	uxth	r2, r3
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005fbc:	2301      	movs	r3, #1
 8005fbe:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005fc0:	f7fd fcbe 	bl	8003940 <HAL_GetTick>
 8005fc4:	4602      	mov	r2, r0
 8005fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fc8:	1ad3      	subs	r3, r2, r3
 8005fca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005fcc:	429a      	cmp	r2, r3
 8005fce:	d803      	bhi.n	8005fd8 <HAL_SPI_TransmitReceive+0x2c6>
 8005fd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fd2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005fd6:	d102      	bne.n	8005fde <HAL_SPI_TransmitReceive+0x2cc>
 8005fd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d103      	bne.n	8005fe6 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8005fde:	2303      	movs	r3, #3
 8005fe0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005fe4:	e029      	b.n	800603a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005fea:	b29b      	uxth	r3, r3
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d1a2      	bne.n	8005f36 <HAL_SPI_TransmitReceive+0x224>
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ff4:	b29b      	uxth	r3, r3
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d19d      	bne.n	8005f36 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005ffa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ffc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005ffe:	68f8      	ldr	r0, [r7, #12]
 8006000:	f000 f904 	bl	800620c <SPI_EndRxTxTransaction>
 8006004:	4603      	mov	r3, r0
 8006006:	2b00      	cmp	r3, #0
 8006008:	d006      	beq.n	8006018 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800600a:	2301      	movs	r3, #1
 800600c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	2220      	movs	r2, #32
 8006014:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8006016:	e010      	b.n	800603a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	689b      	ldr	r3, [r3, #8]
 800601c:	2b00      	cmp	r3, #0
 800601e:	d10b      	bne.n	8006038 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006020:	2300      	movs	r3, #0
 8006022:	617b      	str	r3, [r7, #20]
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	68db      	ldr	r3, [r3, #12]
 800602a:	617b      	str	r3, [r7, #20]
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	689b      	ldr	r3, [r3, #8]
 8006032:	617b      	str	r3, [r7, #20]
 8006034:	697b      	ldr	r3, [r7, #20]
 8006036:	e000      	b.n	800603a <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8006038:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	2201      	movs	r2, #1
 800603e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	2200      	movs	r2, #0
 8006046:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800604a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800604e:	4618      	mov	r0, r3
 8006050:	3730      	adds	r7, #48	; 0x30
 8006052:	46bd      	mov	sp, r7
 8006054:	bd80      	pop	{r7, pc}
	...

08006058 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006058:	b580      	push	{r7, lr}
 800605a:	b088      	sub	sp, #32
 800605c:	af00      	add	r7, sp, #0
 800605e:	60f8      	str	r0, [r7, #12]
 8006060:	60b9      	str	r1, [r7, #8]
 8006062:	603b      	str	r3, [r7, #0]
 8006064:	4613      	mov	r3, r2
 8006066:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006068:	f7fd fc6a 	bl	8003940 <HAL_GetTick>
 800606c:	4602      	mov	r2, r0
 800606e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006070:	1a9b      	subs	r3, r3, r2
 8006072:	683a      	ldr	r2, [r7, #0]
 8006074:	4413      	add	r3, r2
 8006076:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006078:	f7fd fc62 	bl	8003940 <HAL_GetTick>
 800607c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800607e:	4b39      	ldr	r3, [pc, #228]	; (8006164 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	015b      	lsls	r3, r3, #5
 8006084:	0d1b      	lsrs	r3, r3, #20
 8006086:	69fa      	ldr	r2, [r7, #28]
 8006088:	fb02 f303 	mul.w	r3, r2, r3
 800608c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800608e:	e054      	b.n	800613a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006090:	683b      	ldr	r3, [r7, #0]
 8006092:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006096:	d050      	beq.n	800613a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006098:	f7fd fc52 	bl	8003940 <HAL_GetTick>
 800609c:	4602      	mov	r2, r0
 800609e:	69bb      	ldr	r3, [r7, #24]
 80060a0:	1ad3      	subs	r3, r2, r3
 80060a2:	69fa      	ldr	r2, [r7, #28]
 80060a4:	429a      	cmp	r2, r3
 80060a6:	d902      	bls.n	80060ae <SPI_WaitFlagStateUntilTimeout+0x56>
 80060a8:	69fb      	ldr	r3, [r7, #28]
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d13d      	bne.n	800612a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	685a      	ldr	r2, [r3, #4]
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80060bc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	685b      	ldr	r3, [r3, #4]
 80060c2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80060c6:	d111      	bne.n	80060ec <SPI_WaitFlagStateUntilTimeout+0x94>
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	689b      	ldr	r3, [r3, #8]
 80060cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80060d0:	d004      	beq.n	80060dc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	689b      	ldr	r3, [r3, #8]
 80060d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80060da:	d107      	bne.n	80060ec <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	681a      	ldr	r2, [r3, #0]
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80060ea:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80060f4:	d10f      	bne.n	8006116 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	681a      	ldr	r2, [r3, #0]
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006104:	601a      	str	r2, [r3, #0]
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	681a      	ldr	r2, [r3, #0]
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006114:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	2201      	movs	r2, #1
 800611a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	2200      	movs	r2, #0
 8006122:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8006126:	2303      	movs	r3, #3
 8006128:	e017      	b.n	800615a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800612a:	697b      	ldr	r3, [r7, #20]
 800612c:	2b00      	cmp	r3, #0
 800612e:	d101      	bne.n	8006134 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006130:	2300      	movs	r3, #0
 8006132:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006134:	697b      	ldr	r3, [r7, #20]
 8006136:	3b01      	subs	r3, #1
 8006138:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	689a      	ldr	r2, [r3, #8]
 8006140:	68bb      	ldr	r3, [r7, #8]
 8006142:	4013      	ands	r3, r2
 8006144:	68ba      	ldr	r2, [r7, #8]
 8006146:	429a      	cmp	r2, r3
 8006148:	bf0c      	ite	eq
 800614a:	2301      	moveq	r3, #1
 800614c:	2300      	movne	r3, #0
 800614e:	b2db      	uxtb	r3, r3
 8006150:	461a      	mov	r2, r3
 8006152:	79fb      	ldrb	r3, [r7, #7]
 8006154:	429a      	cmp	r2, r3
 8006156:	d19b      	bne.n	8006090 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006158:	2300      	movs	r3, #0
}
 800615a:	4618      	mov	r0, r3
 800615c:	3720      	adds	r7, #32
 800615e:	46bd      	mov	sp, r7
 8006160:	bd80      	pop	{r7, pc}
 8006162:	bf00      	nop
 8006164:	20000174 	.word	0x20000174

08006168 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006168:	b580      	push	{r7, lr}
 800616a:	b086      	sub	sp, #24
 800616c:	af02      	add	r7, sp, #8
 800616e:	60f8      	str	r0, [r7, #12]
 8006170:	60b9      	str	r1, [r7, #8]
 8006172:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	685b      	ldr	r3, [r3, #4]
 8006178:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800617c:	d111      	bne.n	80061a2 <SPI_EndRxTransaction+0x3a>
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	689b      	ldr	r3, [r3, #8]
 8006182:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006186:	d004      	beq.n	8006192 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	689b      	ldr	r3, [r3, #8]
 800618c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006190:	d107      	bne.n	80061a2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	681a      	ldr	r2, [r3, #0]
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80061a0:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	685b      	ldr	r3, [r3, #4]
 80061a6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80061aa:	d117      	bne.n	80061dc <SPI_EndRxTransaction+0x74>
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	689b      	ldr	r3, [r3, #8]
 80061b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80061b4:	d112      	bne.n	80061dc <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	9300      	str	r3, [sp, #0]
 80061ba:	68bb      	ldr	r3, [r7, #8]
 80061bc:	2200      	movs	r2, #0
 80061be:	2101      	movs	r1, #1
 80061c0:	68f8      	ldr	r0, [r7, #12]
 80061c2:	f7ff ff49 	bl	8006058 <SPI_WaitFlagStateUntilTimeout>
 80061c6:	4603      	mov	r3, r0
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d01a      	beq.n	8006202 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061d0:	f043 0220 	orr.w	r2, r3, #32
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80061d8:	2303      	movs	r3, #3
 80061da:	e013      	b.n	8006204 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	9300      	str	r3, [sp, #0]
 80061e0:	68bb      	ldr	r3, [r7, #8]
 80061e2:	2200      	movs	r2, #0
 80061e4:	2180      	movs	r1, #128	; 0x80
 80061e6:	68f8      	ldr	r0, [r7, #12]
 80061e8:	f7ff ff36 	bl	8006058 <SPI_WaitFlagStateUntilTimeout>
 80061ec:	4603      	mov	r3, r0
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d007      	beq.n	8006202 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061f6:	f043 0220 	orr.w	r2, r3, #32
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80061fe:	2303      	movs	r3, #3
 8006200:	e000      	b.n	8006204 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8006202:	2300      	movs	r3, #0
}
 8006204:	4618      	mov	r0, r3
 8006206:	3710      	adds	r7, #16
 8006208:	46bd      	mov	sp, r7
 800620a:	bd80      	pop	{r7, pc}

0800620c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800620c:	b580      	push	{r7, lr}
 800620e:	b086      	sub	sp, #24
 8006210:	af02      	add	r7, sp, #8
 8006212:	60f8      	str	r0, [r7, #12]
 8006214:	60b9      	str	r1, [r7, #8]
 8006216:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	9300      	str	r3, [sp, #0]
 800621c:	68bb      	ldr	r3, [r7, #8]
 800621e:	2200      	movs	r2, #0
 8006220:	2180      	movs	r1, #128	; 0x80
 8006222:	68f8      	ldr	r0, [r7, #12]
 8006224:	f7ff ff18 	bl	8006058 <SPI_WaitFlagStateUntilTimeout>
 8006228:	4603      	mov	r3, r0
 800622a:	2b00      	cmp	r3, #0
 800622c:	d007      	beq.n	800623e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006232:	f043 0220 	orr.w	r2, r3, #32
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800623a:	2303      	movs	r3, #3
 800623c:	e000      	b.n	8006240 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 800623e:	2300      	movs	r3, #0
}
 8006240:	4618      	mov	r0, r3
 8006242:	3710      	adds	r7, #16
 8006244:	46bd      	mov	sp, r7
 8006246:	bd80      	pop	{r7, pc}

08006248 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006248:	b580      	push	{r7, lr}
 800624a:	b082      	sub	sp, #8
 800624c:	af00      	add	r7, sp, #0
 800624e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	2b00      	cmp	r3, #0
 8006254:	d101      	bne.n	800625a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006256:	2301      	movs	r3, #1
 8006258:	e041      	b.n	80062de <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006260:	b2db      	uxtb	r3, r3
 8006262:	2b00      	cmp	r3, #0
 8006264:	d106      	bne.n	8006274 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	2200      	movs	r2, #0
 800626a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800626e:	6878      	ldr	r0, [r7, #4]
 8006270:	f7fd fa36 	bl	80036e0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	2202      	movs	r2, #2
 8006278:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681a      	ldr	r2, [r3, #0]
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	3304      	adds	r3, #4
 8006284:	4619      	mov	r1, r3
 8006286:	4610      	mov	r0, r2
 8006288:	f000 fc72 	bl	8006b70 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	2201      	movs	r2, #1
 8006290:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	2201      	movs	r2, #1
 8006298:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	2201      	movs	r2, #1
 80062a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	2201      	movs	r2, #1
 80062a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	2201      	movs	r2, #1
 80062b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	2201      	movs	r2, #1
 80062b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	2201      	movs	r2, #1
 80062c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	2201      	movs	r2, #1
 80062c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	2201      	movs	r2, #1
 80062d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	2201      	movs	r2, #1
 80062d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80062dc:	2300      	movs	r3, #0
}
 80062de:	4618      	mov	r0, r3
 80062e0:	3708      	adds	r7, #8
 80062e2:	46bd      	mov	sp, r7
 80062e4:	bd80      	pop	{r7, pc}
	...

080062e8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80062e8:	b480      	push	{r7}
 80062ea:	b085      	sub	sp, #20
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80062f6:	b2db      	uxtb	r3, r3
 80062f8:	2b01      	cmp	r3, #1
 80062fa:	d001      	beq.n	8006300 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80062fc:	2301      	movs	r3, #1
 80062fe:	e032      	b.n	8006366 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	2202      	movs	r2, #2
 8006304:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	4a18      	ldr	r2, [pc, #96]	; (8006370 <HAL_TIM_Base_Start+0x88>)
 800630e:	4293      	cmp	r3, r2
 8006310:	d00e      	beq.n	8006330 <HAL_TIM_Base_Start+0x48>
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800631a:	d009      	beq.n	8006330 <HAL_TIM_Base_Start+0x48>
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	4a14      	ldr	r2, [pc, #80]	; (8006374 <HAL_TIM_Base_Start+0x8c>)
 8006322:	4293      	cmp	r3, r2
 8006324:	d004      	beq.n	8006330 <HAL_TIM_Base_Start+0x48>
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	4a13      	ldr	r2, [pc, #76]	; (8006378 <HAL_TIM_Base_Start+0x90>)
 800632c:	4293      	cmp	r3, r2
 800632e:	d111      	bne.n	8006354 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	689b      	ldr	r3, [r3, #8]
 8006336:	f003 0307 	and.w	r3, r3, #7
 800633a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	2b06      	cmp	r3, #6
 8006340:	d010      	beq.n	8006364 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	681a      	ldr	r2, [r3, #0]
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	f042 0201 	orr.w	r2, r2, #1
 8006350:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006352:	e007      	b.n	8006364 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	681a      	ldr	r2, [r3, #0]
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	f042 0201 	orr.w	r2, r2, #1
 8006362:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006364:	2300      	movs	r3, #0
}
 8006366:	4618      	mov	r0, r3
 8006368:	3714      	adds	r7, #20
 800636a:	46bd      	mov	sp, r7
 800636c:	bc80      	pop	{r7}
 800636e:	4770      	bx	lr
 8006370:	40012c00 	.word	0x40012c00
 8006374:	40000400 	.word	0x40000400
 8006378:	40000800 	.word	0x40000800

0800637c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800637c:	b480      	push	{r7}
 800637e:	b085      	sub	sp, #20
 8006380:	af00      	add	r7, sp, #0
 8006382:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800638a:	b2db      	uxtb	r3, r3
 800638c:	2b01      	cmp	r3, #1
 800638e:	d001      	beq.n	8006394 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006390:	2301      	movs	r3, #1
 8006392:	e03a      	b.n	800640a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	2202      	movs	r2, #2
 8006398:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	68da      	ldr	r2, [r3, #12]
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	f042 0201 	orr.w	r2, r2, #1
 80063aa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	4a18      	ldr	r2, [pc, #96]	; (8006414 <HAL_TIM_Base_Start_IT+0x98>)
 80063b2:	4293      	cmp	r3, r2
 80063b4:	d00e      	beq.n	80063d4 <HAL_TIM_Base_Start_IT+0x58>
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80063be:	d009      	beq.n	80063d4 <HAL_TIM_Base_Start_IT+0x58>
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	4a14      	ldr	r2, [pc, #80]	; (8006418 <HAL_TIM_Base_Start_IT+0x9c>)
 80063c6:	4293      	cmp	r3, r2
 80063c8:	d004      	beq.n	80063d4 <HAL_TIM_Base_Start_IT+0x58>
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	4a13      	ldr	r2, [pc, #76]	; (800641c <HAL_TIM_Base_Start_IT+0xa0>)
 80063d0:	4293      	cmp	r3, r2
 80063d2:	d111      	bne.n	80063f8 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	689b      	ldr	r3, [r3, #8]
 80063da:	f003 0307 	and.w	r3, r3, #7
 80063de:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	2b06      	cmp	r3, #6
 80063e4:	d010      	beq.n	8006408 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	681a      	ldr	r2, [r3, #0]
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	f042 0201 	orr.w	r2, r2, #1
 80063f4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80063f6:	e007      	b.n	8006408 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	681a      	ldr	r2, [r3, #0]
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	f042 0201 	orr.w	r2, r2, #1
 8006406:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006408:	2300      	movs	r3, #0
}
 800640a:	4618      	mov	r0, r3
 800640c:	3714      	adds	r7, #20
 800640e:	46bd      	mov	sp, r7
 8006410:	bc80      	pop	{r7}
 8006412:	4770      	bx	lr
 8006414:	40012c00 	.word	0x40012c00
 8006418:	40000400 	.word	0x40000400
 800641c:	40000800 	.word	0x40000800

08006420 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006420:	b580      	push	{r7, lr}
 8006422:	b082      	sub	sp, #8
 8006424:	af00      	add	r7, sp, #0
 8006426:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	2b00      	cmp	r3, #0
 800642c:	d101      	bne.n	8006432 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800642e:	2301      	movs	r3, #1
 8006430:	e041      	b.n	80064b6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006438:	b2db      	uxtb	r3, r3
 800643a:	2b00      	cmp	r3, #0
 800643c:	d106      	bne.n	800644c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	2200      	movs	r2, #0
 8006442:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006446:	6878      	ldr	r0, [r7, #4]
 8006448:	f000 f839 	bl	80064be <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	2202      	movs	r2, #2
 8006450:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681a      	ldr	r2, [r3, #0]
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	3304      	adds	r3, #4
 800645c:	4619      	mov	r1, r3
 800645e:	4610      	mov	r0, r2
 8006460:	f000 fb86 	bl	8006b70 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	2201      	movs	r2, #1
 8006468:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	2201      	movs	r2, #1
 8006470:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	2201      	movs	r2, #1
 8006478:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	2201      	movs	r2, #1
 8006480:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	2201      	movs	r2, #1
 8006488:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	2201      	movs	r2, #1
 8006490:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	2201      	movs	r2, #1
 8006498:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	2201      	movs	r2, #1
 80064a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	2201      	movs	r2, #1
 80064a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	2201      	movs	r2, #1
 80064b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80064b4:	2300      	movs	r3, #0
}
 80064b6:	4618      	mov	r0, r3
 80064b8:	3708      	adds	r7, #8
 80064ba:	46bd      	mov	sp, r7
 80064bc:	bd80      	pop	{r7, pc}

080064be <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80064be:	b480      	push	{r7}
 80064c0:	b083      	sub	sp, #12
 80064c2:	af00      	add	r7, sp, #0
 80064c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80064c6:	bf00      	nop
 80064c8:	370c      	adds	r7, #12
 80064ca:	46bd      	mov	sp, r7
 80064cc:	bc80      	pop	{r7}
 80064ce:	4770      	bx	lr

080064d0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80064d0:	b580      	push	{r7, lr}
 80064d2:	b084      	sub	sp, #16
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	6078      	str	r0, [r7, #4]
 80064d8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80064da:	683b      	ldr	r3, [r7, #0]
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d109      	bne.n	80064f4 <HAL_TIM_PWM_Start+0x24>
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80064e6:	b2db      	uxtb	r3, r3
 80064e8:	2b01      	cmp	r3, #1
 80064ea:	bf14      	ite	ne
 80064ec:	2301      	movne	r3, #1
 80064ee:	2300      	moveq	r3, #0
 80064f0:	b2db      	uxtb	r3, r3
 80064f2:	e022      	b.n	800653a <HAL_TIM_PWM_Start+0x6a>
 80064f4:	683b      	ldr	r3, [r7, #0]
 80064f6:	2b04      	cmp	r3, #4
 80064f8:	d109      	bne.n	800650e <HAL_TIM_PWM_Start+0x3e>
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006500:	b2db      	uxtb	r3, r3
 8006502:	2b01      	cmp	r3, #1
 8006504:	bf14      	ite	ne
 8006506:	2301      	movne	r3, #1
 8006508:	2300      	moveq	r3, #0
 800650a:	b2db      	uxtb	r3, r3
 800650c:	e015      	b.n	800653a <HAL_TIM_PWM_Start+0x6a>
 800650e:	683b      	ldr	r3, [r7, #0]
 8006510:	2b08      	cmp	r3, #8
 8006512:	d109      	bne.n	8006528 <HAL_TIM_PWM_Start+0x58>
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800651a:	b2db      	uxtb	r3, r3
 800651c:	2b01      	cmp	r3, #1
 800651e:	bf14      	ite	ne
 8006520:	2301      	movne	r3, #1
 8006522:	2300      	moveq	r3, #0
 8006524:	b2db      	uxtb	r3, r3
 8006526:	e008      	b.n	800653a <HAL_TIM_PWM_Start+0x6a>
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800652e:	b2db      	uxtb	r3, r3
 8006530:	2b01      	cmp	r3, #1
 8006532:	bf14      	ite	ne
 8006534:	2301      	movne	r3, #1
 8006536:	2300      	moveq	r3, #0
 8006538:	b2db      	uxtb	r3, r3
 800653a:	2b00      	cmp	r3, #0
 800653c:	d001      	beq.n	8006542 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800653e:	2301      	movs	r3, #1
 8006540:	e05e      	b.n	8006600 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006542:	683b      	ldr	r3, [r7, #0]
 8006544:	2b00      	cmp	r3, #0
 8006546:	d104      	bne.n	8006552 <HAL_TIM_PWM_Start+0x82>
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	2202      	movs	r2, #2
 800654c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006550:	e013      	b.n	800657a <HAL_TIM_PWM_Start+0xaa>
 8006552:	683b      	ldr	r3, [r7, #0]
 8006554:	2b04      	cmp	r3, #4
 8006556:	d104      	bne.n	8006562 <HAL_TIM_PWM_Start+0x92>
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	2202      	movs	r2, #2
 800655c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006560:	e00b      	b.n	800657a <HAL_TIM_PWM_Start+0xaa>
 8006562:	683b      	ldr	r3, [r7, #0]
 8006564:	2b08      	cmp	r3, #8
 8006566:	d104      	bne.n	8006572 <HAL_TIM_PWM_Start+0xa2>
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	2202      	movs	r2, #2
 800656c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006570:	e003      	b.n	800657a <HAL_TIM_PWM_Start+0xaa>
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	2202      	movs	r2, #2
 8006576:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	2201      	movs	r2, #1
 8006580:	6839      	ldr	r1, [r7, #0]
 8006582:	4618      	mov	r0, r3
 8006584:	f000 fd74 	bl	8007070 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	4a1e      	ldr	r2, [pc, #120]	; (8006608 <HAL_TIM_PWM_Start+0x138>)
 800658e:	4293      	cmp	r3, r2
 8006590:	d107      	bne.n	80065a2 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80065a0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	4a18      	ldr	r2, [pc, #96]	; (8006608 <HAL_TIM_PWM_Start+0x138>)
 80065a8:	4293      	cmp	r3, r2
 80065aa:	d00e      	beq.n	80065ca <HAL_TIM_PWM_Start+0xfa>
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80065b4:	d009      	beq.n	80065ca <HAL_TIM_PWM_Start+0xfa>
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	4a14      	ldr	r2, [pc, #80]	; (800660c <HAL_TIM_PWM_Start+0x13c>)
 80065bc:	4293      	cmp	r3, r2
 80065be:	d004      	beq.n	80065ca <HAL_TIM_PWM_Start+0xfa>
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	4a12      	ldr	r2, [pc, #72]	; (8006610 <HAL_TIM_PWM_Start+0x140>)
 80065c6:	4293      	cmp	r3, r2
 80065c8:	d111      	bne.n	80065ee <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	689b      	ldr	r3, [r3, #8]
 80065d0:	f003 0307 	and.w	r3, r3, #7
 80065d4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	2b06      	cmp	r3, #6
 80065da:	d010      	beq.n	80065fe <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	681a      	ldr	r2, [r3, #0]
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	f042 0201 	orr.w	r2, r2, #1
 80065ea:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80065ec:	e007      	b.n	80065fe <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	681a      	ldr	r2, [r3, #0]
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	f042 0201 	orr.w	r2, r2, #1
 80065fc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80065fe:	2300      	movs	r3, #0
}
 8006600:	4618      	mov	r0, r3
 8006602:	3710      	adds	r7, #16
 8006604:	46bd      	mov	sp, r7
 8006606:	bd80      	pop	{r7, pc}
 8006608:	40012c00 	.word	0x40012c00
 800660c:	40000400 	.word	0x40000400
 8006610:	40000800 	.word	0x40000800

08006614 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006614:	b580      	push	{r7, lr}
 8006616:	b082      	sub	sp, #8
 8006618:	af00      	add	r7, sp, #0
 800661a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	691b      	ldr	r3, [r3, #16]
 8006622:	f003 0302 	and.w	r3, r3, #2
 8006626:	2b02      	cmp	r3, #2
 8006628:	d122      	bne.n	8006670 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	68db      	ldr	r3, [r3, #12]
 8006630:	f003 0302 	and.w	r3, r3, #2
 8006634:	2b02      	cmp	r3, #2
 8006636:	d11b      	bne.n	8006670 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	f06f 0202 	mvn.w	r2, #2
 8006640:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	2201      	movs	r2, #1
 8006646:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	699b      	ldr	r3, [r3, #24]
 800664e:	f003 0303 	and.w	r3, r3, #3
 8006652:	2b00      	cmp	r3, #0
 8006654:	d003      	beq.n	800665e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006656:	6878      	ldr	r0, [r7, #4]
 8006658:	f000 fa6f 	bl	8006b3a <HAL_TIM_IC_CaptureCallback>
 800665c:	e005      	b.n	800666a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800665e:	6878      	ldr	r0, [r7, #4]
 8006660:	f000 fa62 	bl	8006b28 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006664:	6878      	ldr	r0, [r7, #4]
 8006666:	f000 fa71 	bl	8006b4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	2200      	movs	r2, #0
 800666e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	691b      	ldr	r3, [r3, #16]
 8006676:	f003 0304 	and.w	r3, r3, #4
 800667a:	2b04      	cmp	r3, #4
 800667c:	d122      	bne.n	80066c4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	68db      	ldr	r3, [r3, #12]
 8006684:	f003 0304 	and.w	r3, r3, #4
 8006688:	2b04      	cmp	r3, #4
 800668a:	d11b      	bne.n	80066c4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	f06f 0204 	mvn.w	r2, #4
 8006694:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	2202      	movs	r2, #2
 800669a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	699b      	ldr	r3, [r3, #24]
 80066a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d003      	beq.n	80066b2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80066aa:	6878      	ldr	r0, [r7, #4]
 80066ac:	f000 fa45 	bl	8006b3a <HAL_TIM_IC_CaptureCallback>
 80066b0:	e005      	b.n	80066be <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80066b2:	6878      	ldr	r0, [r7, #4]
 80066b4:	f000 fa38 	bl	8006b28 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80066b8:	6878      	ldr	r0, [r7, #4]
 80066ba:	f000 fa47 	bl	8006b4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	2200      	movs	r2, #0
 80066c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	691b      	ldr	r3, [r3, #16]
 80066ca:	f003 0308 	and.w	r3, r3, #8
 80066ce:	2b08      	cmp	r3, #8
 80066d0:	d122      	bne.n	8006718 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	68db      	ldr	r3, [r3, #12]
 80066d8:	f003 0308 	and.w	r3, r3, #8
 80066dc:	2b08      	cmp	r3, #8
 80066de:	d11b      	bne.n	8006718 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	f06f 0208 	mvn.w	r2, #8
 80066e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	2204      	movs	r2, #4
 80066ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	69db      	ldr	r3, [r3, #28]
 80066f6:	f003 0303 	and.w	r3, r3, #3
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d003      	beq.n	8006706 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80066fe:	6878      	ldr	r0, [r7, #4]
 8006700:	f000 fa1b 	bl	8006b3a <HAL_TIM_IC_CaptureCallback>
 8006704:	e005      	b.n	8006712 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006706:	6878      	ldr	r0, [r7, #4]
 8006708:	f000 fa0e 	bl	8006b28 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800670c:	6878      	ldr	r0, [r7, #4]
 800670e:	f000 fa1d 	bl	8006b4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	2200      	movs	r2, #0
 8006716:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	691b      	ldr	r3, [r3, #16]
 800671e:	f003 0310 	and.w	r3, r3, #16
 8006722:	2b10      	cmp	r3, #16
 8006724:	d122      	bne.n	800676c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	68db      	ldr	r3, [r3, #12]
 800672c:	f003 0310 	and.w	r3, r3, #16
 8006730:	2b10      	cmp	r3, #16
 8006732:	d11b      	bne.n	800676c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	f06f 0210 	mvn.w	r2, #16
 800673c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	2208      	movs	r2, #8
 8006742:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	69db      	ldr	r3, [r3, #28]
 800674a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800674e:	2b00      	cmp	r3, #0
 8006750:	d003      	beq.n	800675a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006752:	6878      	ldr	r0, [r7, #4]
 8006754:	f000 f9f1 	bl	8006b3a <HAL_TIM_IC_CaptureCallback>
 8006758:	e005      	b.n	8006766 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800675a:	6878      	ldr	r0, [r7, #4]
 800675c:	f000 f9e4 	bl	8006b28 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006760:	6878      	ldr	r0, [r7, #4]
 8006762:	f000 f9f3 	bl	8006b4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	2200      	movs	r2, #0
 800676a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	691b      	ldr	r3, [r3, #16]
 8006772:	f003 0301 	and.w	r3, r3, #1
 8006776:	2b01      	cmp	r3, #1
 8006778:	d10e      	bne.n	8006798 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	68db      	ldr	r3, [r3, #12]
 8006780:	f003 0301 	and.w	r3, r3, #1
 8006784:	2b01      	cmp	r3, #1
 8006786:	d107      	bne.n	8006798 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	f06f 0201 	mvn.w	r2, #1
 8006790:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006792:	6878      	ldr	r0, [r7, #4]
 8006794:	f7fb fe9c 	bl	80024d0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	691b      	ldr	r3, [r3, #16]
 800679e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067a2:	2b80      	cmp	r3, #128	; 0x80
 80067a4:	d10e      	bne.n	80067c4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	68db      	ldr	r3, [r3, #12]
 80067ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067b0:	2b80      	cmp	r3, #128	; 0x80
 80067b2:	d107      	bne.n	80067c4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80067bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80067be:	6878      	ldr	r0, [r7, #4]
 80067c0:	f000 fd32 	bl	8007228 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	691b      	ldr	r3, [r3, #16]
 80067ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067ce:	2b40      	cmp	r3, #64	; 0x40
 80067d0:	d10e      	bne.n	80067f0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	68db      	ldr	r3, [r3, #12]
 80067d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067dc:	2b40      	cmp	r3, #64	; 0x40
 80067de:	d107      	bne.n	80067f0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80067e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80067ea:	6878      	ldr	r0, [r7, #4]
 80067ec:	f000 f9b7 	bl	8006b5e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	691b      	ldr	r3, [r3, #16]
 80067f6:	f003 0320 	and.w	r3, r3, #32
 80067fa:	2b20      	cmp	r3, #32
 80067fc:	d10e      	bne.n	800681c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	68db      	ldr	r3, [r3, #12]
 8006804:	f003 0320 	and.w	r3, r3, #32
 8006808:	2b20      	cmp	r3, #32
 800680a:	d107      	bne.n	800681c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	f06f 0220 	mvn.w	r2, #32
 8006814:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006816:	6878      	ldr	r0, [r7, #4]
 8006818:	f000 fcfd 	bl	8007216 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800681c:	bf00      	nop
 800681e:	3708      	adds	r7, #8
 8006820:	46bd      	mov	sp, r7
 8006822:	bd80      	pop	{r7, pc}

08006824 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006824:	b580      	push	{r7, lr}
 8006826:	b084      	sub	sp, #16
 8006828:	af00      	add	r7, sp, #0
 800682a:	60f8      	str	r0, [r7, #12]
 800682c:	60b9      	str	r1, [r7, #8]
 800682e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006836:	2b01      	cmp	r3, #1
 8006838:	d101      	bne.n	800683e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800683a:	2302      	movs	r3, #2
 800683c:	e0ac      	b.n	8006998 <HAL_TIM_PWM_ConfigChannel+0x174>
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	2201      	movs	r2, #1
 8006842:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	2b0c      	cmp	r3, #12
 800684a:	f200 809f 	bhi.w	800698c <HAL_TIM_PWM_ConfigChannel+0x168>
 800684e:	a201      	add	r2, pc, #4	; (adr r2, 8006854 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8006850:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006854:	08006889 	.word	0x08006889
 8006858:	0800698d 	.word	0x0800698d
 800685c:	0800698d 	.word	0x0800698d
 8006860:	0800698d 	.word	0x0800698d
 8006864:	080068c9 	.word	0x080068c9
 8006868:	0800698d 	.word	0x0800698d
 800686c:	0800698d 	.word	0x0800698d
 8006870:	0800698d 	.word	0x0800698d
 8006874:	0800690b 	.word	0x0800690b
 8006878:	0800698d 	.word	0x0800698d
 800687c:	0800698d 	.word	0x0800698d
 8006880:	0800698d 	.word	0x0800698d
 8006884:	0800694b 	.word	0x0800694b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	68b9      	ldr	r1, [r7, #8]
 800688e:	4618      	mov	r0, r3
 8006890:	f000 f9d0 	bl	8006c34 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	699a      	ldr	r2, [r3, #24]
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	f042 0208 	orr.w	r2, r2, #8
 80068a2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	699a      	ldr	r2, [r3, #24]
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	f022 0204 	bic.w	r2, r2, #4
 80068b2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	6999      	ldr	r1, [r3, #24]
 80068ba:	68bb      	ldr	r3, [r7, #8]
 80068bc:	691a      	ldr	r2, [r3, #16]
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	430a      	orrs	r2, r1
 80068c4:	619a      	str	r2, [r3, #24]
      break;
 80068c6:	e062      	b.n	800698e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	68b9      	ldr	r1, [r7, #8]
 80068ce:	4618      	mov	r0, r3
 80068d0:	f000 fa16 	bl	8006d00 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	699a      	ldr	r2, [r3, #24]
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80068e2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	699a      	ldr	r2, [r3, #24]
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80068f2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	6999      	ldr	r1, [r3, #24]
 80068fa:	68bb      	ldr	r3, [r7, #8]
 80068fc:	691b      	ldr	r3, [r3, #16]
 80068fe:	021a      	lsls	r2, r3, #8
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	430a      	orrs	r2, r1
 8006906:	619a      	str	r2, [r3, #24]
      break;
 8006908:	e041      	b.n	800698e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	68b9      	ldr	r1, [r7, #8]
 8006910:	4618      	mov	r0, r3
 8006912:	f000 fa5f 	bl	8006dd4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	69da      	ldr	r2, [r3, #28]
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	f042 0208 	orr.w	r2, r2, #8
 8006924:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	69da      	ldr	r2, [r3, #28]
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	f022 0204 	bic.w	r2, r2, #4
 8006934:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	69d9      	ldr	r1, [r3, #28]
 800693c:	68bb      	ldr	r3, [r7, #8]
 800693e:	691a      	ldr	r2, [r3, #16]
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	430a      	orrs	r2, r1
 8006946:	61da      	str	r2, [r3, #28]
      break;
 8006948:	e021      	b.n	800698e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	68b9      	ldr	r1, [r7, #8]
 8006950:	4618      	mov	r0, r3
 8006952:	f000 faa9 	bl	8006ea8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	69da      	ldr	r2, [r3, #28]
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006964:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	69da      	ldr	r2, [r3, #28]
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006974:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	69d9      	ldr	r1, [r3, #28]
 800697c:	68bb      	ldr	r3, [r7, #8]
 800697e:	691b      	ldr	r3, [r3, #16]
 8006980:	021a      	lsls	r2, r3, #8
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	430a      	orrs	r2, r1
 8006988:	61da      	str	r2, [r3, #28]
      break;
 800698a:	e000      	b.n	800698e <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 800698c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	2200      	movs	r2, #0
 8006992:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006996:	2300      	movs	r3, #0
}
 8006998:	4618      	mov	r0, r3
 800699a:	3710      	adds	r7, #16
 800699c:	46bd      	mov	sp, r7
 800699e:	bd80      	pop	{r7, pc}

080069a0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80069a0:	b580      	push	{r7, lr}
 80069a2:	b084      	sub	sp, #16
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	6078      	str	r0, [r7, #4]
 80069a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80069b0:	2b01      	cmp	r3, #1
 80069b2:	d101      	bne.n	80069b8 <HAL_TIM_ConfigClockSource+0x18>
 80069b4:	2302      	movs	r3, #2
 80069b6:	e0b3      	b.n	8006b20 <HAL_TIM_ConfigClockSource+0x180>
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	2201      	movs	r2, #1
 80069bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	2202      	movs	r2, #2
 80069c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	689b      	ldr	r3, [r3, #8]
 80069ce:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80069d6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80069de:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	68fa      	ldr	r2, [r7, #12]
 80069e6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80069e8:	683b      	ldr	r3, [r7, #0]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80069f0:	d03e      	beq.n	8006a70 <HAL_TIM_ConfigClockSource+0xd0>
 80069f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80069f6:	f200 8087 	bhi.w	8006b08 <HAL_TIM_ConfigClockSource+0x168>
 80069fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80069fe:	f000 8085 	beq.w	8006b0c <HAL_TIM_ConfigClockSource+0x16c>
 8006a02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a06:	d87f      	bhi.n	8006b08 <HAL_TIM_ConfigClockSource+0x168>
 8006a08:	2b70      	cmp	r3, #112	; 0x70
 8006a0a:	d01a      	beq.n	8006a42 <HAL_TIM_ConfigClockSource+0xa2>
 8006a0c:	2b70      	cmp	r3, #112	; 0x70
 8006a0e:	d87b      	bhi.n	8006b08 <HAL_TIM_ConfigClockSource+0x168>
 8006a10:	2b60      	cmp	r3, #96	; 0x60
 8006a12:	d050      	beq.n	8006ab6 <HAL_TIM_ConfigClockSource+0x116>
 8006a14:	2b60      	cmp	r3, #96	; 0x60
 8006a16:	d877      	bhi.n	8006b08 <HAL_TIM_ConfigClockSource+0x168>
 8006a18:	2b50      	cmp	r3, #80	; 0x50
 8006a1a:	d03c      	beq.n	8006a96 <HAL_TIM_ConfigClockSource+0xf6>
 8006a1c:	2b50      	cmp	r3, #80	; 0x50
 8006a1e:	d873      	bhi.n	8006b08 <HAL_TIM_ConfigClockSource+0x168>
 8006a20:	2b40      	cmp	r3, #64	; 0x40
 8006a22:	d058      	beq.n	8006ad6 <HAL_TIM_ConfigClockSource+0x136>
 8006a24:	2b40      	cmp	r3, #64	; 0x40
 8006a26:	d86f      	bhi.n	8006b08 <HAL_TIM_ConfigClockSource+0x168>
 8006a28:	2b30      	cmp	r3, #48	; 0x30
 8006a2a:	d064      	beq.n	8006af6 <HAL_TIM_ConfigClockSource+0x156>
 8006a2c:	2b30      	cmp	r3, #48	; 0x30
 8006a2e:	d86b      	bhi.n	8006b08 <HAL_TIM_ConfigClockSource+0x168>
 8006a30:	2b20      	cmp	r3, #32
 8006a32:	d060      	beq.n	8006af6 <HAL_TIM_ConfigClockSource+0x156>
 8006a34:	2b20      	cmp	r3, #32
 8006a36:	d867      	bhi.n	8006b08 <HAL_TIM_ConfigClockSource+0x168>
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d05c      	beq.n	8006af6 <HAL_TIM_ConfigClockSource+0x156>
 8006a3c:	2b10      	cmp	r3, #16
 8006a3e:	d05a      	beq.n	8006af6 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8006a40:	e062      	b.n	8006b08 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	6818      	ldr	r0, [r3, #0]
 8006a46:	683b      	ldr	r3, [r7, #0]
 8006a48:	6899      	ldr	r1, [r3, #8]
 8006a4a:	683b      	ldr	r3, [r7, #0]
 8006a4c:	685a      	ldr	r2, [r3, #4]
 8006a4e:	683b      	ldr	r3, [r7, #0]
 8006a50:	68db      	ldr	r3, [r3, #12]
 8006a52:	f000 faee 	bl	8007032 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	689b      	ldr	r3, [r3, #8]
 8006a5c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006a64:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	68fa      	ldr	r2, [r7, #12]
 8006a6c:	609a      	str	r2, [r3, #8]
      break;
 8006a6e:	e04e      	b.n	8006b0e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	6818      	ldr	r0, [r3, #0]
 8006a74:	683b      	ldr	r3, [r7, #0]
 8006a76:	6899      	ldr	r1, [r3, #8]
 8006a78:	683b      	ldr	r3, [r7, #0]
 8006a7a:	685a      	ldr	r2, [r3, #4]
 8006a7c:	683b      	ldr	r3, [r7, #0]
 8006a7e:	68db      	ldr	r3, [r3, #12]
 8006a80:	f000 fad7 	bl	8007032 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	689a      	ldr	r2, [r3, #8]
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006a92:	609a      	str	r2, [r3, #8]
      break;
 8006a94:	e03b      	b.n	8006b0e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	6818      	ldr	r0, [r3, #0]
 8006a9a:	683b      	ldr	r3, [r7, #0]
 8006a9c:	6859      	ldr	r1, [r3, #4]
 8006a9e:	683b      	ldr	r3, [r7, #0]
 8006aa0:	68db      	ldr	r3, [r3, #12]
 8006aa2:	461a      	mov	r2, r3
 8006aa4:	f000 fa4e 	bl	8006f44 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	2150      	movs	r1, #80	; 0x50
 8006aae:	4618      	mov	r0, r3
 8006ab0:	f000 faa5 	bl	8006ffe <TIM_ITRx_SetConfig>
      break;
 8006ab4:	e02b      	b.n	8006b0e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	6818      	ldr	r0, [r3, #0]
 8006aba:	683b      	ldr	r3, [r7, #0]
 8006abc:	6859      	ldr	r1, [r3, #4]
 8006abe:	683b      	ldr	r3, [r7, #0]
 8006ac0:	68db      	ldr	r3, [r3, #12]
 8006ac2:	461a      	mov	r2, r3
 8006ac4:	f000 fa6c 	bl	8006fa0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	2160      	movs	r1, #96	; 0x60
 8006ace:	4618      	mov	r0, r3
 8006ad0:	f000 fa95 	bl	8006ffe <TIM_ITRx_SetConfig>
      break;
 8006ad4:	e01b      	b.n	8006b0e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	6818      	ldr	r0, [r3, #0]
 8006ada:	683b      	ldr	r3, [r7, #0]
 8006adc:	6859      	ldr	r1, [r3, #4]
 8006ade:	683b      	ldr	r3, [r7, #0]
 8006ae0:	68db      	ldr	r3, [r3, #12]
 8006ae2:	461a      	mov	r2, r3
 8006ae4:	f000 fa2e 	bl	8006f44 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	2140      	movs	r1, #64	; 0x40
 8006aee:	4618      	mov	r0, r3
 8006af0:	f000 fa85 	bl	8006ffe <TIM_ITRx_SetConfig>
      break;
 8006af4:	e00b      	b.n	8006b0e <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681a      	ldr	r2, [r3, #0]
 8006afa:	683b      	ldr	r3, [r7, #0]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	4619      	mov	r1, r3
 8006b00:	4610      	mov	r0, r2
 8006b02:	f000 fa7c 	bl	8006ffe <TIM_ITRx_SetConfig>
        break;
 8006b06:	e002      	b.n	8006b0e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8006b08:	bf00      	nop
 8006b0a:	e000      	b.n	8006b0e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8006b0c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	2201      	movs	r2, #1
 8006b12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	2200      	movs	r2, #0
 8006b1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006b1e:	2300      	movs	r3, #0
}
 8006b20:	4618      	mov	r0, r3
 8006b22:	3710      	adds	r7, #16
 8006b24:	46bd      	mov	sp, r7
 8006b26:	bd80      	pop	{r7, pc}

08006b28 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006b28:	b480      	push	{r7}
 8006b2a:	b083      	sub	sp, #12
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006b30:	bf00      	nop
 8006b32:	370c      	adds	r7, #12
 8006b34:	46bd      	mov	sp, r7
 8006b36:	bc80      	pop	{r7}
 8006b38:	4770      	bx	lr

08006b3a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006b3a:	b480      	push	{r7}
 8006b3c:	b083      	sub	sp, #12
 8006b3e:	af00      	add	r7, sp, #0
 8006b40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006b42:	bf00      	nop
 8006b44:	370c      	adds	r7, #12
 8006b46:	46bd      	mov	sp, r7
 8006b48:	bc80      	pop	{r7}
 8006b4a:	4770      	bx	lr

08006b4c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006b4c:	b480      	push	{r7}
 8006b4e:	b083      	sub	sp, #12
 8006b50:	af00      	add	r7, sp, #0
 8006b52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006b54:	bf00      	nop
 8006b56:	370c      	adds	r7, #12
 8006b58:	46bd      	mov	sp, r7
 8006b5a:	bc80      	pop	{r7}
 8006b5c:	4770      	bx	lr

08006b5e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006b5e:	b480      	push	{r7}
 8006b60:	b083      	sub	sp, #12
 8006b62:	af00      	add	r7, sp, #0
 8006b64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006b66:	bf00      	nop
 8006b68:	370c      	adds	r7, #12
 8006b6a:	46bd      	mov	sp, r7
 8006b6c:	bc80      	pop	{r7}
 8006b6e:	4770      	bx	lr

08006b70 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006b70:	b480      	push	{r7}
 8006b72:	b085      	sub	sp, #20
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	6078      	str	r0, [r7, #4]
 8006b78:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	4a29      	ldr	r2, [pc, #164]	; (8006c28 <TIM_Base_SetConfig+0xb8>)
 8006b84:	4293      	cmp	r3, r2
 8006b86:	d00b      	beq.n	8006ba0 <TIM_Base_SetConfig+0x30>
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b8e:	d007      	beq.n	8006ba0 <TIM_Base_SetConfig+0x30>
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	4a26      	ldr	r2, [pc, #152]	; (8006c2c <TIM_Base_SetConfig+0xbc>)
 8006b94:	4293      	cmp	r3, r2
 8006b96:	d003      	beq.n	8006ba0 <TIM_Base_SetConfig+0x30>
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	4a25      	ldr	r2, [pc, #148]	; (8006c30 <TIM_Base_SetConfig+0xc0>)
 8006b9c:	4293      	cmp	r3, r2
 8006b9e:	d108      	bne.n	8006bb2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ba6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006ba8:	683b      	ldr	r3, [r7, #0]
 8006baa:	685b      	ldr	r3, [r3, #4]
 8006bac:	68fa      	ldr	r2, [r7, #12]
 8006bae:	4313      	orrs	r3, r2
 8006bb0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	4a1c      	ldr	r2, [pc, #112]	; (8006c28 <TIM_Base_SetConfig+0xb8>)
 8006bb6:	4293      	cmp	r3, r2
 8006bb8:	d00b      	beq.n	8006bd2 <TIM_Base_SetConfig+0x62>
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006bc0:	d007      	beq.n	8006bd2 <TIM_Base_SetConfig+0x62>
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	4a19      	ldr	r2, [pc, #100]	; (8006c2c <TIM_Base_SetConfig+0xbc>)
 8006bc6:	4293      	cmp	r3, r2
 8006bc8:	d003      	beq.n	8006bd2 <TIM_Base_SetConfig+0x62>
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	4a18      	ldr	r2, [pc, #96]	; (8006c30 <TIM_Base_SetConfig+0xc0>)
 8006bce:	4293      	cmp	r3, r2
 8006bd0:	d108      	bne.n	8006be4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006bd8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006bda:	683b      	ldr	r3, [r7, #0]
 8006bdc:	68db      	ldr	r3, [r3, #12]
 8006bde:	68fa      	ldr	r2, [r7, #12]
 8006be0:	4313      	orrs	r3, r2
 8006be2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006bea:	683b      	ldr	r3, [r7, #0]
 8006bec:	695b      	ldr	r3, [r3, #20]
 8006bee:	4313      	orrs	r3, r2
 8006bf0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	68fa      	ldr	r2, [r7, #12]
 8006bf6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006bf8:	683b      	ldr	r3, [r7, #0]
 8006bfa:	689a      	ldr	r2, [r3, #8]
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006c00:	683b      	ldr	r3, [r7, #0]
 8006c02:	681a      	ldr	r2, [r3, #0]
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	4a07      	ldr	r2, [pc, #28]	; (8006c28 <TIM_Base_SetConfig+0xb8>)
 8006c0c:	4293      	cmp	r3, r2
 8006c0e:	d103      	bne.n	8006c18 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006c10:	683b      	ldr	r3, [r7, #0]
 8006c12:	691a      	ldr	r2, [r3, #16]
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	2201      	movs	r2, #1
 8006c1c:	615a      	str	r2, [r3, #20]
}
 8006c1e:	bf00      	nop
 8006c20:	3714      	adds	r7, #20
 8006c22:	46bd      	mov	sp, r7
 8006c24:	bc80      	pop	{r7}
 8006c26:	4770      	bx	lr
 8006c28:	40012c00 	.word	0x40012c00
 8006c2c:	40000400 	.word	0x40000400
 8006c30:	40000800 	.word	0x40000800

08006c34 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006c34:	b480      	push	{r7}
 8006c36:	b087      	sub	sp, #28
 8006c38:	af00      	add	r7, sp, #0
 8006c3a:	6078      	str	r0, [r7, #4]
 8006c3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	6a1b      	ldr	r3, [r3, #32]
 8006c42:	f023 0201 	bic.w	r2, r3, #1
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	6a1b      	ldr	r3, [r3, #32]
 8006c4e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	685b      	ldr	r3, [r3, #4]
 8006c54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	699b      	ldr	r3, [r3, #24]
 8006c5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	f023 0303 	bic.w	r3, r3, #3
 8006c6a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006c6c:	683b      	ldr	r3, [r7, #0]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	68fa      	ldr	r2, [r7, #12]
 8006c72:	4313      	orrs	r3, r2
 8006c74:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006c76:	697b      	ldr	r3, [r7, #20]
 8006c78:	f023 0302 	bic.w	r3, r3, #2
 8006c7c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006c7e:	683b      	ldr	r3, [r7, #0]
 8006c80:	689b      	ldr	r3, [r3, #8]
 8006c82:	697a      	ldr	r2, [r7, #20]
 8006c84:	4313      	orrs	r3, r2
 8006c86:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	4a1c      	ldr	r2, [pc, #112]	; (8006cfc <TIM_OC1_SetConfig+0xc8>)
 8006c8c:	4293      	cmp	r3, r2
 8006c8e:	d10c      	bne.n	8006caa <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006c90:	697b      	ldr	r3, [r7, #20]
 8006c92:	f023 0308 	bic.w	r3, r3, #8
 8006c96:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006c98:	683b      	ldr	r3, [r7, #0]
 8006c9a:	68db      	ldr	r3, [r3, #12]
 8006c9c:	697a      	ldr	r2, [r7, #20]
 8006c9e:	4313      	orrs	r3, r2
 8006ca0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006ca2:	697b      	ldr	r3, [r7, #20]
 8006ca4:	f023 0304 	bic.w	r3, r3, #4
 8006ca8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	4a13      	ldr	r2, [pc, #76]	; (8006cfc <TIM_OC1_SetConfig+0xc8>)
 8006cae:	4293      	cmp	r3, r2
 8006cb0:	d111      	bne.n	8006cd6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006cb2:	693b      	ldr	r3, [r7, #16]
 8006cb4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006cb8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006cba:	693b      	ldr	r3, [r7, #16]
 8006cbc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006cc0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006cc2:	683b      	ldr	r3, [r7, #0]
 8006cc4:	695b      	ldr	r3, [r3, #20]
 8006cc6:	693a      	ldr	r2, [r7, #16]
 8006cc8:	4313      	orrs	r3, r2
 8006cca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006ccc:	683b      	ldr	r3, [r7, #0]
 8006cce:	699b      	ldr	r3, [r3, #24]
 8006cd0:	693a      	ldr	r2, [r7, #16]
 8006cd2:	4313      	orrs	r3, r2
 8006cd4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	693a      	ldr	r2, [r7, #16]
 8006cda:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	68fa      	ldr	r2, [r7, #12]
 8006ce0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006ce2:	683b      	ldr	r3, [r7, #0]
 8006ce4:	685a      	ldr	r2, [r3, #4]
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	697a      	ldr	r2, [r7, #20]
 8006cee:	621a      	str	r2, [r3, #32]
}
 8006cf0:	bf00      	nop
 8006cf2:	371c      	adds	r7, #28
 8006cf4:	46bd      	mov	sp, r7
 8006cf6:	bc80      	pop	{r7}
 8006cf8:	4770      	bx	lr
 8006cfa:	bf00      	nop
 8006cfc:	40012c00 	.word	0x40012c00

08006d00 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006d00:	b480      	push	{r7}
 8006d02:	b087      	sub	sp, #28
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	6078      	str	r0, [r7, #4]
 8006d08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	6a1b      	ldr	r3, [r3, #32]
 8006d0e:	f023 0210 	bic.w	r2, r3, #16
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	6a1b      	ldr	r3, [r3, #32]
 8006d1a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	685b      	ldr	r3, [r3, #4]
 8006d20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	699b      	ldr	r3, [r3, #24]
 8006d26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006d36:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006d38:	683b      	ldr	r3, [r7, #0]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	021b      	lsls	r3, r3, #8
 8006d3e:	68fa      	ldr	r2, [r7, #12]
 8006d40:	4313      	orrs	r3, r2
 8006d42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006d44:	697b      	ldr	r3, [r7, #20]
 8006d46:	f023 0320 	bic.w	r3, r3, #32
 8006d4a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006d4c:	683b      	ldr	r3, [r7, #0]
 8006d4e:	689b      	ldr	r3, [r3, #8]
 8006d50:	011b      	lsls	r3, r3, #4
 8006d52:	697a      	ldr	r2, [r7, #20]
 8006d54:	4313      	orrs	r3, r2
 8006d56:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	4a1d      	ldr	r2, [pc, #116]	; (8006dd0 <TIM_OC2_SetConfig+0xd0>)
 8006d5c:	4293      	cmp	r3, r2
 8006d5e:	d10d      	bne.n	8006d7c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006d60:	697b      	ldr	r3, [r7, #20]
 8006d62:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006d66:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006d68:	683b      	ldr	r3, [r7, #0]
 8006d6a:	68db      	ldr	r3, [r3, #12]
 8006d6c:	011b      	lsls	r3, r3, #4
 8006d6e:	697a      	ldr	r2, [r7, #20]
 8006d70:	4313      	orrs	r3, r2
 8006d72:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006d74:	697b      	ldr	r3, [r7, #20]
 8006d76:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006d7a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	4a14      	ldr	r2, [pc, #80]	; (8006dd0 <TIM_OC2_SetConfig+0xd0>)
 8006d80:	4293      	cmp	r3, r2
 8006d82:	d113      	bne.n	8006dac <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006d84:	693b      	ldr	r3, [r7, #16]
 8006d86:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006d8a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006d8c:	693b      	ldr	r3, [r7, #16]
 8006d8e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006d92:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006d94:	683b      	ldr	r3, [r7, #0]
 8006d96:	695b      	ldr	r3, [r3, #20]
 8006d98:	009b      	lsls	r3, r3, #2
 8006d9a:	693a      	ldr	r2, [r7, #16]
 8006d9c:	4313      	orrs	r3, r2
 8006d9e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006da0:	683b      	ldr	r3, [r7, #0]
 8006da2:	699b      	ldr	r3, [r3, #24]
 8006da4:	009b      	lsls	r3, r3, #2
 8006da6:	693a      	ldr	r2, [r7, #16]
 8006da8:	4313      	orrs	r3, r2
 8006daa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	693a      	ldr	r2, [r7, #16]
 8006db0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	68fa      	ldr	r2, [r7, #12]
 8006db6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006db8:	683b      	ldr	r3, [r7, #0]
 8006dba:	685a      	ldr	r2, [r3, #4]
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	697a      	ldr	r2, [r7, #20]
 8006dc4:	621a      	str	r2, [r3, #32]
}
 8006dc6:	bf00      	nop
 8006dc8:	371c      	adds	r7, #28
 8006dca:	46bd      	mov	sp, r7
 8006dcc:	bc80      	pop	{r7}
 8006dce:	4770      	bx	lr
 8006dd0:	40012c00 	.word	0x40012c00

08006dd4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006dd4:	b480      	push	{r7}
 8006dd6:	b087      	sub	sp, #28
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	6078      	str	r0, [r7, #4]
 8006ddc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	6a1b      	ldr	r3, [r3, #32]
 8006de2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	6a1b      	ldr	r3, [r3, #32]
 8006dee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	685b      	ldr	r3, [r3, #4]
 8006df4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	69db      	ldr	r3, [r3, #28]
 8006dfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	f023 0303 	bic.w	r3, r3, #3
 8006e0a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006e0c:	683b      	ldr	r3, [r7, #0]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	68fa      	ldr	r2, [r7, #12]
 8006e12:	4313      	orrs	r3, r2
 8006e14:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006e16:	697b      	ldr	r3, [r7, #20]
 8006e18:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006e1c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006e1e:	683b      	ldr	r3, [r7, #0]
 8006e20:	689b      	ldr	r3, [r3, #8]
 8006e22:	021b      	lsls	r3, r3, #8
 8006e24:	697a      	ldr	r2, [r7, #20]
 8006e26:	4313      	orrs	r3, r2
 8006e28:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	4a1d      	ldr	r2, [pc, #116]	; (8006ea4 <TIM_OC3_SetConfig+0xd0>)
 8006e2e:	4293      	cmp	r3, r2
 8006e30:	d10d      	bne.n	8006e4e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006e32:	697b      	ldr	r3, [r7, #20]
 8006e34:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006e38:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006e3a:	683b      	ldr	r3, [r7, #0]
 8006e3c:	68db      	ldr	r3, [r3, #12]
 8006e3e:	021b      	lsls	r3, r3, #8
 8006e40:	697a      	ldr	r2, [r7, #20]
 8006e42:	4313      	orrs	r3, r2
 8006e44:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006e46:	697b      	ldr	r3, [r7, #20]
 8006e48:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006e4c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	4a14      	ldr	r2, [pc, #80]	; (8006ea4 <TIM_OC3_SetConfig+0xd0>)
 8006e52:	4293      	cmp	r3, r2
 8006e54:	d113      	bne.n	8006e7e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006e56:	693b      	ldr	r3, [r7, #16]
 8006e58:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006e5c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006e5e:	693b      	ldr	r3, [r7, #16]
 8006e60:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006e64:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006e66:	683b      	ldr	r3, [r7, #0]
 8006e68:	695b      	ldr	r3, [r3, #20]
 8006e6a:	011b      	lsls	r3, r3, #4
 8006e6c:	693a      	ldr	r2, [r7, #16]
 8006e6e:	4313      	orrs	r3, r2
 8006e70:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006e72:	683b      	ldr	r3, [r7, #0]
 8006e74:	699b      	ldr	r3, [r3, #24]
 8006e76:	011b      	lsls	r3, r3, #4
 8006e78:	693a      	ldr	r2, [r7, #16]
 8006e7a:	4313      	orrs	r3, r2
 8006e7c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	693a      	ldr	r2, [r7, #16]
 8006e82:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	68fa      	ldr	r2, [r7, #12]
 8006e88:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006e8a:	683b      	ldr	r3, [r7, #0]
 8006e8c:	685a      	ldr	r2, [r3, #4]
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	697a      	ldr	r2, [r7, #20]
 8006e96:	621a      	str	r2, [r3, #32]
}
 8006e98:	bf00      	nop
 8006e9a:	371c      	adds	r7, #28
 8006e9c:	46bd      	mov	sp, r7
 8006e9e:	bc80      	pop	{r7}
 8006ea0:	4770      	bx	lr
 8006ea2:	bf00      	nop
 8006ea4:	40012c00 	.word	0x40012c00

08006ea8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006ea8:	b480      	push	{r7}
 8006eaa:	b087      	sub	sp, #28
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	6078      	str	r0, [r7, #4]
 8006eb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	6a1b      	ldr	r3, [r3, #32]
 8006eb6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	6a1b      	ldr	r3, [r3, #32]
 8006ec2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	685b      	ldr	r3, [r3, #4]
 8006ec8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	69db      	ldr	r3, [r3, #28]
 8006ece:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ed6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006ede:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006ee0:	683b      	ldr	r3, [r7, #0]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	021b      	lsls	r3, r3, #8
 8006ee6:	68fa      	ldr	r2, [r7, #12]
 8006ee8:	4313      	orrs	r3, r2
 8006eea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006eec:	693b      	ldr	r3, [r7, #16]
 8006eee:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006ef2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006ef4:	683b      	ldr	r3, [r7, #0]
 8006ef6:	689b      	ldr	r3, [r3, #8]
 8006ef8:	031b      	lsls	r3, r3, #12
 8006efa:	693a      	ldr	r2, [r7, #16]
 8006efc:	4313      	orrs	r3, r2
 8006efe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	4a0f      	ldr	r2, [pc, #60]	; (8006f40 <TIM_OC4_SetConfig+0x98>)
 8006f04:	4293      	cmp	r3, r2
 8006f06:	d109      	bne.n	8006f1c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006f08:	697b      	ldr	r3, [r7, #20]
 8006f0a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006f0e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006f10:	683b      	ldr	r3, [r7, #0]
 8006f12:	695b      	ldr	r3, [r3, #20]
 8006f14:	019b      	lsls	r3, r3, #6
 8006f16:	697a      	ldr	r2, [r7, #20]
 8006f18:	4313      	orrs	r3, r2
 8006f1a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	697a      	ldr	r2, [r7, #20]
 8006f20:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	68fa      	ldr	r2, [r7, #12]
 8006f26:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006f28:	683b      	ldr	r3, [r7, #0]
 8006f2a:	685a      	ldr	r2, [r3, #4]
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	693a      	ldr	r2, [r7, #16]
 8006f34:	621a      	str	r2, [r3, #32]
}
 8006f36:	bf00      	nop
 8006f38:	371c      	adds	r7, #28
 8006f3a:	46bd      	mov	sp, r7
 8006f3c:	bc80      	pop	{r7}
 8006f3e:	4770      	bx	lr
 8006f40:	40012c00 	.word	0x40012c00

08006f44 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006f44:	b480      	push	{r7}
 8006f46:	b087      	sub	sp, #28
 8006f48:	af00      	add	r7, sp, #0
 8006f4a:	60f8      	str	r0, [r7, #12]
 8006f4c:	60b9      	str	r1, [r7, #8]
 8006f4e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	6a1b      	ldr	r3, [r3, #32]
 8006f54:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	6a1b      	ldr	r3, [r3, #32]
 8006f5a:	f023 0201 	bic.w	r2, r3, #1
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	699b      	ldr	r3, [r3, #24]
 8006f66:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006f68:	693b      	ldr	r3, [r7, #16]
 8006f6a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006f6e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	011b      	lsls	r3, r3, #4
 8006f74:	693a      	ldr	r2, [r7, #16]
 8006f76:	4313      	orrs	r3, r2
 8006f78:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006f7a:	697b      	ldr	r3, [r7, #20]
 8006f7c:	f023 030a 	bic.w	r3, r3, #10
 8006f80:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006f82:	697a      	ldr	r2, [r7, #20]
 8006f84:	68bb      	ldr	r3, [r7, #8]
 8006f86:	4313      	orrs	r3, r2
 8006f88:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	693a      	ldr	r2, [r7, #16]
 8006f8e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	697a      	ldr	r2, [r7, #20]
 8006f94:	621a      	str	r2, [r3, #32]
}
 8006f96:	bf00      	nop
 8006f98:	371c      	adds	r7, #28
 8006f9a:	46bd      	mov	sp, r7
 8006f9c:	bc80      	pop	{r7}
 8006f9e:	4770      	bx	lr

08006fa0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006fa0:	b480      	push	{r7}
 8006fa2:	b087      	sub	sp, #28
 8006fa4:	af00      	add	r7, sp, #0
 8006fa6:	60f8      	str	r0, [r7, #12]
 8006fa8:	60b9      	str	r1, [r7, #8]
 8006faa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	6a1b      	ldr	r3, [r3, #32]
 8006fb0:	f023 0210 	bic.w	r2, r3, #16
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	699b      	ldr	r3, [r3, #24]
 8006fbc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	6a1b      	ldr	r3, [r3, #32]
 8006fc2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006fc4:	697b      	ldr	r3, [r7, #20]
 8006fc6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006fca:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	031b      	lsls	r3, r3, #12
 8006fd0:	697a      	ldr	r2, [r7, #20]
 8006fd2:	4313      	orrs	r3, r2
 8006fd4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006fd6:	693b      	ldr	r3, [r7, #16]
 8006fd8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006fdc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006fde:	68bb      	ldr	r3, [r7, #8]
 8006fe0:	011b      	lsls	r3, r3, #4
 8006fe2:	693a      	ldr	r2, [r7, #16]
 8006fe4:	4313      	orrs	r3, r2
 8006fe6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	697a      	ldr	r2, [r7, #20]
 8006fec:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	693a      	ldr	r2, [r7, #16]
 8006ff2:	621a      	str	r2, [r3, #32]
}
 8006ff4:	bf00      	nop
 8006ff6:	371c      	adds	r7, #28
 8006ff8:	46bd      	mov	sp, r7
 8006ffa:	bc80      	pop	{r7}
 8006ffc:	4770      	bx	lr

08006ffe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006ffe:	b480      	push	{r7}
 8007000:	b085      	sub	sp, #20
 8007002:	af00      	add	r7, sp, #0
 8007004:	6078      	str	r0, [r7, #4]
 8007006:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	689b      	ldr	r3, [r3, #8]
 800700c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007014:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007016:	683a      	ldr	r2, [r7, #0]
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	4313      	orrs	r3, r2
 800701c:	f043 0307 	orr.w	r3, r3, #7
 8007020:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	68fa      	ldr	r2, [r7, #12]
 8007026:	609a      	str	r2, [r3, #8]
}
 8007028:	bf00      	nop
 800702a:	3714      	adds	r7, #20
 800702c:	46bd      	mov	sp, r7
 800702e:	bc80      	pop	{r7}
 8007030:	4770      	bx	lr

08007032 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007032:	b480      	push	{r7}
 8007034:	b087      	sub	sp, #28
 8007036:	af00      	add	r7, sp, #0
 8007038:	60f8      	str	r0, [r7, #12]
 800703a:	60b9      	str	r1, [r7, #8]
 800703c:	607a      	str	r2, [r7, #4]
 800703e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	689b      	ldr	r3, [r3, #8]
 8007044:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007046:	697b      	ldr	r3, [r7, #20]
 8007048:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800704c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800704e:	683b      	ldr	r3, [r7, #0]
 8007050:	021a      	lsls	r2, r3, #8
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	431a      	orrs	r2, r3
 8007056:	68bb      	ldr	r3, [r7, #8]
 8007058:	4313      	orrs	r3, r2
 800705a:	697a      	ldr	r2, [r7, #20]
 800705c:	4313      	orrs	r3, r2
 800705e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	697a      	ldr	r2, [r7, #20]
 8007064:	609a      	str	r2, [r3, #8]
}
 8007066:	bf00      	nop
 8007068:	371c      	adds	r7, #28
 800706a:	46bd      	mov	sp, r7
 800706c:	bc80      	pop	{r7}
 800706e:	4770      	bx	lr

08007070 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007070:	b480      	push	{r7}
 8007072:	b087      	sub	sp, #28
 8007074:	af00      	add	r7, sp, #0
 8007076:	60f8      	str	r0, [r7, #12]
 8007078:	60b9      	str	r1, [r7, #8]
 800707a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800707c:	68bb      	ldr	r3, [r7, #8]
 800707e:	f003 031f 	and.w	r3, r3, #31
 8007082:	2201      	movs	r2, #1
 8007084:	fa02 f303 	lsl.w	r3, r2, r3
 8007088:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	6a1a      	ldr	r2, [r3, #32]
 800708e:	697b      	ldr	r3, [r7, #20]
 8007090:	43db      	mvns	r3, r3
 8007092:	401a      	ands	r2, r3
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	6a1a      	ldr	r2, [r3, #32]
 800709c:	68bb      	ldr	r3, [r7, #8]
 800709e:	f003 031f 	and.w	r3, r3, #31
 80070a2:	6879      	ldr	r1, [r7, #4]
 80070a4:	fa01 f303 	lsl.w	r3, r1, r3
 80070a8:	431a      	orrs	r2, r3
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	621a      	str	r2, [r3, #32]
}
 80070ae:	bf00      	nop
 80070b0:	371c      	adds	r7, #28
 80070b2:	46bd      	mov	sp, r7
 80070b4:	bc80      	pop	{r7}
 80070b6:	4770      	bx	lr

080070b8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80070b8:	b480      	push	{r7}
 80070ba:	b085      	sub	sp, #20
 80070bc:	af00      	add	r7, sp, #0
 80070be:	6078      	str	r0, [r7, #4]
 80070c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80070c8:	2b01      	cmp	r3, #1
 80070ca:	d101      	bne.n	80070d0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80070cc:	2302      	movs	r3, #2
 80070ce:	e046      	b.n	800715e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	2201      	movs	r2, #1
 80070d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	2202      	movs	r2, #2
 80070dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	685b      	ldr	r3, [r3, #4]
 80070e6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	689b      	ldr	r3, [r3, #8]
 80070ee:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070f6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80070f8:	683b      	ldr	r3, [r7, #0]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	68fa      	ldr	r2, [r7, #12]
 80070fe:	4313      	orrs	r3, r2
 8007100:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	68fa      	ldr	r2, [r7, #12]
 8007108:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	4a16      	ldr	r2, [pc, #88]	; (8007168 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8007110:	4293      	cmp	r3, r2
 8007112:	d00e      	beq.n	8007132 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800711c:	d009      	beq.n	8007132 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	4a12      	ldr	r2, [pc, #72]	; (800716c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8007124:	4293      	cmp	r3, r2
 8007126:	d004      	beq.n	8007132 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	4a10      	ldr	r2, [pc, #64]	; (8007170 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800712e:	4293      	cmp	r3, r2
 8007130:	d10c      	bne.n	800714c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007132:	68bb      	ldr	r3, [r7, #8]
 8007134:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007138:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800713a:	683b      	ldr	r3, [r7, #0]
 800713c:	685b      	ldr	r3, [r3, #4]
 800713e:	68ba      	ldr	r2, [r7, #8]
 8007140:	4313      	orrs	r3, r2
 8007142:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	68ba      	ldr	r2, [r7, #8]
 800714a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	2201      	movs	r2, #1
 8007150:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	2200      	movs	r2, #0
 8007158:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800715c:	2300      	movs	r3, #0
}
 800715e:	4618      	mov	r0, r3
 8007160:	3714      	adds	r7, #20
 8007162:	46bd      	mov	sp, r7
 8007164:	bc80      	pop	{r7}
 8007166:	4770      	bx	lr
 8007168:	40012c00 	.word	0x40012c00
 800716c:	40000400 	.word	0x40000400
 8007170:	40000800 	.word	0x40000800

08007174 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007174:	b480      	push	{r7}
 8007176:	b085      	sub	sp, #20
 8007178:	af00      	add	r7, sp, #0
 800717a:	6078      	str	r0, [r7, #4]
 800717c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800717e:	2300      	movs	r3, #0
 8007180:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007188:	2b01      	cmp	r3, #1
 800718a:	d101      	bne.n	8007190 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800718c:	2302      	movs	r3, #2
 800718e:	e03d      	b.n	800720c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	2201      	movs	r2, #1
 8007194:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800719e:	683b      	ldr	r3, [r7, #0]
 80071a0:	68db      	ldr	r3, [r3, #12]
 80071a2:	4313      	orrs	r3, r2
 80071a4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80071ac:	683b      	ldr	r3, [r7, #0]
 80071ae:	689b      	ldr	r3, [r3, #8]
 80071b0:	4313      	orrs	r3, r2
 80071b2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80071ba:	683b      	ldr	r3, [r7, #0]
 80071bc:	685b      	ldr	r3, [r3, #4]
 80071be:	4313      	orrs	r3, r2
 80071c0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80071c8:	683b      	ldr	r3, [r7, #0]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	4313      	orrs	r3, r2
 80071ce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80071d6:	683b      	ldr	r3, [r7, #0]
 80071d8:	691b      	ldr	r3, [r3, #16]
 80071da:	4313      	orrs	r3, r2
 80071dc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80071e4:	683b      	ldr	r3, [r7, #0]
 80071e6:	695b      	ldr	r3, [r3, #20]
 80071e8:	4313      	orrs	r3, r2
 80071ea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80071f2:	683b      	ldr	r3, [r7, #0]
 80071f4:	69db      	ldr	r3, [r3, #28]
 80071f6:	4313      	orrs	r3, r2
 80071f8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	68fa      	ldr	r2, [r7, #12]
 8007200:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	2200      	movs	r2, #0
 8007206:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800720a:	2300      	movs	r3, #0
}
 800720c:	4618      	mov	r0, r3
 800720e:	3714      	adds	r7, #20
 8007210:	46bd      	mov	sp, r7
 8007212:	bc80      	pop	{r7}
 8007214:	4770      	bx	lr

08007216 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007216:	b480      	push	{r7}
 8007218:	b083      	sub	sp, #12
 800721a:	af00      	add	r7, sp, #0
 800721c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800721e:	bf00      	nop
 8007220:	370c      	adds	r7, #12
 8007222:	46bd      	mov	sp, r7
 8007224:	bc80      	pop	{r7}
 8007226:	4770      	bx	lr

08007228 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007228:	b480      	push	{r7}
 800722a:	b083      	sub	sp, #12
 800722c:	af00      	add	r7, sp, #0
 800722e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007230:	bf00      	nop
 8007232:	370c      	adds	r7, #12
 8007234:	46bd      	mov	sp, r7
 8007236:	bc80      	pop	{r7}
 8007238:	4770      	bx	lr

0800723a <memset>:
 800723a:	4603      	mov	r3, r0
 800723c:	4402      	add	r2, r0
 800723e:	4293      	cmp	r3, r2
 8007240:	d100      	bne.n	8007244 <memset+0xa>
 8007242:	4770      	bx	lr
 8007244:	f803 1b01 	strb.w	r1, [r3], #1
 8007248:	e7f9      	b.n	800723e <memset+0x4>
	...

0800724c <__errno>:
 800724c:	4b01      	ldr	r3, [pc, #4]	; (8007254 <__errno+0x8>)
 800724e:	6818      	ldr	r0, [r3, #0]
 8007250:	4770      	bx	lr
 8007252:	bf00      	nop
 8007254:	20000180 	.word	0x20000180

08007258 <__libc_init_array>:
 8007258:	b570      	push	{r4, r5, r6, lr}
 800725a:	2600      	movs	r6, #0
 800725c:	4d0c      	ldr	r5, [pc, #48]	; (8007290 <__libc_init_array+0x38>)
 800725e:	4c0d      	ldr	r4, [pc, #52]	; (8007294 <__libc_init_array+0x3c>)
 8007260:	1b64      	subs	r4, r4, r5
 8007262:	10a4      	asrs	r4, r4, #2
 8007264:	42a6      	cmp	r6, r4
 8007266:	d109      	bne.n	800727c <__libc_init_array+0x24>
 8007268:	f002 fc6e 	bl	8009b48 <_init>
 800726c:	2600      	movs	r6, #0
 800726e:	4d0a      	ldr	r5, [pc, #40]	; (8007298 <__libc_init_array+0x40>)
 8007270:	4c0a      	ldr	r4, [pc, #40]	; (800729c <__libc_init_array+0x44>)
 8007272:	1b64      	subs	r4, r4, r5
 8007274:	10a4      	asrs	r4, r4, #2
 8007276:	42a6      	cmp	r6, r4
 8007278:	d105      	bne.n	8007286 <__libc_init_array+0x2e>
 800727a:	bd70      	pop	{r4, r5, r6, pc}
 800727c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007280:	4798      	blx	r3
 8007282:	3601      	adds	r6, #1
 8007284:	e7ee      	b.n	8007264 <__libc_init_array+0xc>
 8007286:	f855 3b04 	ldr.w	r3, [r5], #4
 800728a:	4798      	blx	r3
 800728c:	3601      	adds	r6, #1
 800728e:	e7f2      	b.n	8007276 <__libc_init_array+0x1e>
 8007290:	08009dd8 	.word	0x08009dd8
 8007294:	08009dd8 	.word	0x08009dd8
 8007298:	08009dd8 	.word	0x08009dd8
 800729c:	08009ddc 	.word	0x08009ddc

080072a0 <atan2>:
 80072a0:	f000 bd3e 	b.w	8007d20 <__ieee754_atan2>

080072a4 <pow>:
 80072a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80072a8:	4614      	mov	r4, r2
 80072aa:	461d      	mov	r5, r3
 80072ac:	4680      	mov	r8, r0
 80072ae:	4689      	mov	r9, r1
 80072b0:	f000 fe02 	bl	8007eb8 <__ieee754_pow>
 80072b4:	4622      	mov	r2, r4
 80072b6:	4606      	mov	r6, r0
 80072b8:	460f      	mov	r7, r1
 80072ba:	462b      	mov	r3, r5
 80072bc:	4620      	mov	r0, r4
 80072be:	4629      	mov	r1, r5
 80072c0:	f7f9 fb7c 	bl	80009bc <__aeabi_dcmpun>
 80072c4:	b978      	cbnz	r0, 80072e6 <pow+0x42>
 80072c6:	2200      	movs	r2, #0
 80072c8:	2300      	movs	r3, #0
 80072ca:	4640      	mov	r0, r8
 80072cc:	4649      	mov	r1, r9
 80072ce:	f7f9 fb43 	bl	8000958 <__aeabi_dcmpeq>
 80072d2:	b1d8      	cbz	r0, 800730c <pow+0x68>
 80072d4:	2200      	movs	r2, #0
 80072d6:	2300      	movs	r3, #0
 80072d8:	4620      	mov	r0, r4
 80072da:	4629      	mov	r1, r5
 80072dc:	f7f9 fb3c 	bl	8000958 <__aeabi_dcmpeq>
 80072e0:	b128      	cbz	r0, 80072ee <pow+0x4a>
 80072e2:	2600      	movs	r6, #0
 80072e4:	4f25      	ldr	r7, [pc, #148]	; (800737c <pow+0xd8>)
 80072e6:	4630      	mov	r0, r6
 80072e8:	4639      	mov	r1, r7
 80072ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80072ee:	4620      	mov	r0, r4
 80072f0:	4629      	mov	r1, r5
 80072f2:	f000 fa3f 	bl	8007774 <finite>
 80072f6:	2800      	cmp	r0, #0
 80072f8:	d0f5      	beq.n	80072e6 <pow+0x42>
 80072fa:	4620      	mov	r0, r4
 80072fc:	4629      	mov	r1, r5
 80072fe:	2200      	movs	r2, #0
 8007300:	2300      	movs	r3, #0
 8007302:	f7f9 fb33 	bl	800096c <__aeabi_dcmplt>
 8007306:	2800      	cmp	r0, #0
 8007308:	d0ed      	beq.n	80072e6 <pow+0x42>
 800730a:	e02c      	b.n	8007366 <pow+0xc2>
 800730c:	4630      	mov	r0, r6
 800730e:	4639      	mov	r1, r7
 8007310:	f000 fa30 	bl	8007774 <finite>
 8007314:	b1a0      	cbz	r0, 8007340 <pow+0x9c>
 8007316:	2200      	movs	r2, #0
 8007318:	2300      	movs	r3, #0
 800731a:	4630      	mov	r0, r6
 800731c:	4639      	mov	r1, r7
 800731e:	f7f9 fb1b 	bl	8000958 <__aeabi_dcmpeq>
 8007322:	2800      	cmp	r0, #0
 8007324:	d0df      	beq.n	80072e6 <pow+0x42>
 8007326:	4640      	mov	r0, r8
 8007328:	4649      	mov	r1, r9
 800732a:	f000 fa23 	bl	8007774 <finite>
 800732e:	2800      	cmp	r0, #0
 8007330:	d0d9      	beq.n	80072e6 <pow+0x42>
 8007332:	4620      	mov	r0, r4
 8007334:	4629      	mov	r1, r5
 8007336:	f000 fa1d 	bl	8007774 <finite>
 800733a:	2800      	cmp	r0, #0
 800733c:	d0d3      	beq.n	80072e6 <pow+0x42>
 800733e:	e012      	b.n	8007366 <pow+0xc2>
 8007340:	4640      	mov	r0, r8
 8007342:	4649      	mov	r1, r9
 8007344:	f000 fa16 	bl	8007774 <finite>
 8007348:	2800      	cmp	r0, #0
 800734a:	d0e4      	beq.n	8007316 <pow+0x72>
 800734c:	4620      	mov	r0, r4
 800734e:	4629      	mov	r1, r5
 8007350:	f000 fa10 	bl	8007774 <finite>
 8007354:	2800      	cmp	r0, #0
 8007356:	d0de      	beq.n	8007316 <pow+0x72>
 8007358:	4632      	mov	r2, r6
 800735a:	463b      	mov	r3, r7
 800735c:	4630      	mov	r0, r6
 800735e:	4639      	mov	r1, r7
 8007360:	f7f9 fb2c 	bl	80009bc <__aeabi_dcmpun>
 8007364:	b920      	cbnz	r0, 8007370 <pow+0xcc>
 8007366:	f7ff ff71 	bl	800724c <__errno>
 800736a:	2322      	movs	r3, #34	; 0x22
 800736c:	6003      	str	r3, [r0, #0]
 800736e:	e7ba      	b.n	80072e6 <pow+0x42>
 8007370:	f7ff ff6c 	bl	800724c <__errno>
 8007374:	2321      	movs	r3, #33	; 0x21
 8007376:	6003      	str	r3, [r0, #0]
 8007378:	e7b5      	b.n	80072e6 <pow+0x42>
 800737a:	bf00      	nop
 800737c:	3ff00000 	.word	0x3ff00000

08007380 <sqrt>:
 8007380:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007382:	4604      	mov	r4, r0
 8007384:	460d      	mov	r5, r1
 8007386:	f000 f9fb 	bl	8007780 <__ieee754_sqrt>
 800738a:	4622      	mov	r2, r4
 800738c:	4606      	mov	r6, r0
 800738e:	460f      	mov	r7, r1
 8007390:	462b      	mov	r3, r5
 8007392:	4620      	mov	r0, r4
 8007394:	4629      	mov	r1, r5
 8007396:	f7f9 fb11 	bl	80009bc <__aeabi_dcmpun>
 800739a:	b930      	cbnz	r0, 80073aa <sqrt+0x2a>
 800739c:	4620      	mov	r0, r4
 800739e:	4629      	mov	r1, r5
 80073a0:	2200      	movs	r2, #0
 80073a2:	2300      	movs	r3, #0
 80073a4:	f7f9 fae2 	bl	800096c <__aeabi_dcmplt>
 80073a8:	b910      	cbnz	r0, 80073b0 <sqrt+0x30>
 80073aa:	4630      	mov	r0, r6
 80073ac:	4639      	mov	r1, r7
 80073ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80073b0:	f7ff ff4c 	bl	800724c <__errno>
 80073b4:	2200      	movs	r2, #0
 80073b6:	2300      	movs	r3, #0
 80073b8:	2121      	movs	r1, #33	; 0x21
 80073ba:	6001      	str	r1, [r0, #0]
 80073bc:	4610      	mov	r0, r2
 80073be:	4619      	mov	r1, r3
 80073c0:	f7f9 f98c 	bl	80006dc <__aeabi_ddiv>
 80073c4:	4606      	mov	r6, r0
 80073c6:	460f      	mov	r7, r1
 80073c8:	4630      	mov	r0, r6
 80073ca:	4639      	mov	r1, r7
 80073cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80073ce:	bf00      	nop

080073d0 <atan>:
 80073d0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073d4:	4bb6      	ldr	r3, [pc, #728]	; (80076b0 <atan+0x2e0>)
 80073d6:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80073da:	429e      	cmp	r6, r3
 80073dc:	4604      	mov	r4, r0
 80073de:	460d      	mov	r5, r1
 80073e0:	468a      	mov	sl, r1
 80073e2:	d916      	bls.n	8007412 <atan+0x42>
 80073e4:	4bb3      	ldr	r3, [pc, #716]	; (80076b4 <atan+0x2e4>)
 80073e6:	429e      	cmp	r6, r3
 80073e8:	d80b      	bhi.n	8007402 <atan+0x32>
 80073ea:	d008      	beq.n	80073fe <atan+0x2e>
 80073ec:	f1ba 0f00 	cmp.w	sl, #0
 80073f0:	f340 80c2 	ble.w	8007578 <atan+0x1a8>
 80073f4:	a192      	add	r1, pc, #584	; (adr r1, 8007640 <atan+0x270>)
 80073f6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80073fa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073fe:	2800      	cmp	r0, #0
 8007400:	d0f4      	beq.n	80073ec <atan+0x1c>
 8007402:	4622      	mov	r2, r4
 8007404:	462b      	mov	r3, r5
 8007406:	4620      	mov	r0, r4
 8007408:	4629      	mov	r1, r5
 800740a:	f7f8 fe87 	bl	800011c <__adddf3>
 800740e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007412:	4ba9      	ldr	r3, [pc, #676]	; (80076b8 <atan+0x2e8>)
 8007414:	429e      	cmp	r6, r3
 8007416:	f200 80b4 	bhi.w	8007582 <atan+0x1b2>
 800741a:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800741e:	429e      	cmp	r6, r3
 8007420:	f240 809b 	bls.w	800755a <atan+0x18a>
 8007424:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 8007428:	4622      	mov	r2, r4
 800742a:	462b      	mov	r3, r5
 800742c:	4620      	mov	r0, r4
 800742e:	4629      	mov	r1, r5
 8007430:	f7f9 f82a 	bl	8000488 <__aeabi_dmul>
 8007434:	4602      	mov	r2, r0
 8007436:	460b      	mov	r3, r1
 8007438:	4680      	mov	r8, r0
 800743a:	4689      	mov	r9, r1
 800743c:	f7f9 f824 	bl	8000488 <__aeabi_dmul>
 8007440:	a381      	add	r3, pc, #516	; (adr r3, 8007648 <atan+0x278>)
 8007442:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007446:	4606      	mov	r6, r0
 8007448:	460f      	mov	r7, r1
 800744a:	f7f9 f81d 	bl	8000488 <__aeabi_dmul>
 800744e:	a380      	add	r3, pc, #512	; (adr r3, 8007650 <atan+0x280>)
 8007450:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007454:	f7f8 fe62 	bl	800011c <__adddf3>
 8007458:	4632      	mov	r2, r6
 800745a:	463b      	mov	r3, r7
 800745c:	f7f9 f814 	bl	8000488 <__aeabi_dmul>
 8007460:	a37d      	add	r3, pc, #500	; (adr r3, 8007658 <atan+0x288>)
 8007462:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007466:	f7f8 fe59 	bl	800011c <__adddf3>
 800746a:	4632      	mov	r2, r6
 800746c:	463b      	mov	r3, r7
 800746e:	f7f9 f80b 	bl	8000488 <__aeabi_dmul>
 8007472:	a37b      	add	r3, pc, #492	; (adr r3, 8007660 <atan+0x290>)
 8007474:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007478:	f7f8 fe50 	bl	800011c <__adddf3>
 800747c:	4632      	mov	r2, r6
 800747e:	463b      	mov	r3, r7
 8007480:	f7f9 f802 	bl	8000488 <__aeabi_dmul>
 8007484:	a378      	add	r3, pc, #480	; (adr r3, 8007668 <atan+0x298>)
 8007486:	e9d3 2300 	ldrd	r2, r3, [r3]
 800748a:	f7f8 fe47 	bl	800011c <__adddf3>
 800748e:	4632      	mov	r2, r6
 8007490:	463b      	mov	r3, r7
 8007492:	f7f8 fff9 	bl	8000488 <__aeabi_dmul>
 8007496:	a376      	add	r3, pc, #472	; (adr r3, 8007670 <atan+0x2a0>)
 8007498:	e9d3 2300 	ldrd	r2, r3, [r3]
 800749c:	f7f8 fe3e 	bl	800011c <__adddf3>
 80074a0:	4642      	mov	r2, r8
 80074a2:	464b      	mov	r3, r9
 80074a4:	f7f8 fff0 	bl	8000488 <__aeabi_dmul>
 80074a8:	a373      	add	r3, pc, #460	; (adr r3, 8007678 <atan+0x2a8>)
 80074aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074ae:	4680      	mov	r8, r0
 80074b0:	4689      	mov	r9, r1
 80074b2:	4630      	mov	r0, r6
 80074b4:	4639      	mov	r1, r7
 80074b6:	f7f8 ffe7 	bl	8000488 <__aeabi_dmul>
 80074ba:	a371      	add	r3, pc, #452	; (adr r3, 8007680 <atan+0x2b0>)
 80074bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074c0:	f7f8 fe2a 	bl	8000118 <__aeabi_dsub>
 80074c4:	4632      	mov	r2, r6
 80074c6:	463b      	mov	r3, r7
 80074c8:	f7f8 ffde 	bl	8000488 <__aeabi_dmul>
 80074cc:	a36e      	add	r3, pc, #440	; (adr r3, 8007688 <atan+0x2b8>)
 80074ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074d2:	f7f8 fe21 	bl	8000118 <__aeabi_dsub>
 80074d6:	4632      	mov	r2, r6
 80074d8:	463b      	mov	r3, r7
 80074da:	f7f8 ffd5 	bl	8000488 <__aeabi_dmul>
 80074de:	a36c      	add	r3, pc, #432	; (adr r3, 8007690 <atan+0x2c0>)
 80074e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074e4:	f7f8 fe18 	bl	8000118 <__aeabi_dsub>
 80074e8:	4632      	mov	r2, r6
 80074ea:	463b      	mov	r3, r7
 80074ec:	f7f8 ffcc 	bl	8000488 <__aeabi_dmul>
 80074f0:	a369      	add	r3, pc, #420	; (adr r3, 8007698 <atan+0x2c8>)
 80074f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074f6:	f7f8 fe0f 	bl	8000118 <__aeabi_dsub>
 80074fa:	4632      	mov	r2, r6
 80074fc:	463b      	mov	r3, r7
 80074fe:	f7f8 ffc3 	bl	8000488 <__aeabi_dmul>
 8007502:	4602      	mov	r2, r0
 8007504:	460b      	mov	r3, r1
 8007506:	4640      	mov	r0, r8
 8007508:	4649      	mov	r1, r9
 800750a:	f7f8 fe07 	bl	800011c <__adddf3>
 800750e:	4622      	mov	r2, r4
 8007510:	462b      	mov	r3, r5
 8007512:	f7f8 ffb9 	bl	8000488 <__aeabi_dmul>
 8007516:	f1bb 3fff 	cmp.w	fp, #4294967295	; 0xffffffff
 800751a:	4602      	mov	r2, r0
 800751c:	460b      	mov	r3, r1
 800751e:	d04f      	beq.n	80075c0 <atan+0x1f0>
 8007520:	4b66      	ldr	r3, [pc, #408]	; (80076bc <atan+0x2ec>)
 8007522:	4e67      	ldr	r6, [pc, #412]	; (80076c0 <atan+0x2f0>)
 8007524:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8007528:	e9d3 2300 	ldrd	r2, r3, [r3]
 800752c:	f7f8 fdf4 	bl	8000118 <__aeabi_dsub>
 8007530:	4622      	mov	r2, r4
 8007532:	462b      	mov	r3, r5
 8007534:	f7f8 fdf0 	bl	8000118 <__aeabi_dsub>
 8007538:	eb06 06cb 	add.w	r6, r6, fp, lsl #3
 800753c:	4602      	mov	r2, r0
 800753e:	460b      	mov	r3, r1
 8007540:	e9d6 0100 	ldrd	r0, r1, [r6]
 8007544:	f7f8 fde8 	bl	8000118 <__aeabi_dsub>
 8007548:	f1ba 0f00 	cmp.w	sl, #0
 800754c:	f6bf af5f 	bge.w	800740e <atan+0x3e>
 8007550:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007554:	4619      	mov	r1, r3
 8007556:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800755a:	a351      	add	r3, pc, #324	; (adr r3, 80076a0 <atan+0x2d0>)
 800755c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007560:	f7f8 fddc 	bl	800011c <__adddf3>
 8007564:	2200      	movs	r2, #0
 8007566:	4b57      	ldr	r3, [pc, #348]	; (80076c4 <atan+0x2f4>)
 8007568:	f7f9 fa1e 	bl	80009a8 <__aeabi_dcmpgt>
 800756c:	2800      	cmp	r0, #0
 800756e:	f43f af59 	beq.w	8007424 <atan+0x54>
 8007572:	4620      	mov	r0, r4
 8007574:	4629      	mov	r1, r5
 8007576:	e74a      	b.n	800740e <atan+0x3e>
 8007578:	a14b      	add	r1, pc, #300	; (adr r1, 80076a8 <atan+0x2d8>)
 800757a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800757e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007582:	f000 f8a9 	bl	80076d8 <fabs>
 8007586:	4b50      	ldr	r3, [pc, #320]	; (80076c8 <atan+0x2f8>)
 8007588:	4604      	mov	r4, r0
 800758a:	429e      	cmp	r6, r3
 800758c:	460d      	mov	r5, r1
 800758e:	d81d      	bhi.n	80075cc <atan+0x1fc>
 8007590:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8007594:	429e      	cmp	r6, r3
 8007596:	d844      	bhi.n	8007622 <atan+0x252>
 8007598:	4602      	mov	r2, r0
 800759a:	460b      	mov	r3, r1
 800759c:	f7f8 fdbe 	bl	800011c <__adddf3>
 80075a0:	2200      	movs	r2, #0
 80075a2:	4b48      	ldr	r3, [pc, #288]	; (80076c4 <atan+0x2f4>)
 80075a4:	f7f8 fdb8 	bl	8000118 <__aeabi_dsub>
 80075a8:	4602      	mov	r2, r0
 80075aa:	460b      	mov	r3, r1
 80075ac:	4620      	mov	r0, r4
 80075ae:	4629      	mov	r1, r5
 80075b0:	4614      	mov	r4, r2
 80075b2:	461d      	mov	r5, r3
 80075b4:	f04f 0b00 	mov.w	fp, #0
 80075b8:	2200      	movs	r2, #0
 80075ba:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80075be:	e01a      	b.n	80075f6 <atan+0x226>
 80075c0:	4620      	mov	r0, r4
 80075c2:	4629      	mov	r1, r5
 80075c4:	f7f8 fda8 	bl	8000118 <__aeabi_dsub>
 80075c8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80075cc:	4b3f      	ldr	r3, [pc, #252]	; (80076cc <atan+0x2fc>)
 80075ce:	429e      	cmp	r6, r3
 80075d0:	d21c      	bcs.n	800760c <atan+0x23c>
 80075d2:	2200      	movs	r2, #0
 80075d4:	4b3e      	ldr	r3, [pc, #248]	; (80076d0 <atan+0x300>)
 80075d6:	f7f8 fd9f 	bl	8000118 <__aeabi_dsub>
 80075da:	4602      	mov	r2, r0
 80075dc:	460b      	mov	r3, r1
 80075de:	4620      	mov	r0, r4
 80075e0:	4629      	mov	r1, r5
 80075e2:	4614      	mov	r4, r2
 80075e4:	461d      	mov	r5, r3
 80075e6:	2200      	movs	r2, #0
 80075e8:	4b39      	ldr	r3, [pc, #228]	; (80076d0 <atan+0x300>)
 80075ea:	f04f 0b02 	mov.w	fp, #2
 80075ee:	f7f8 ff4b 	bl	8000488 <__aeabi_dmul>
 80075f2:	2200      	movs	r2, #0
 80075f4:	4b33      	ldr	r3, [pc, #204]	; (80076c4 <atan+0x2f4>)
 80075f6:	f7f8 fd91 	bl	800011c <__adddf3>
 80075fa:	4602      	mov	r2, r0
 80075fc:	460b      	mov	r3, r1
 80075fe:	4620      	mov	r0, r4
 8007600:	4629      	mov	r1, r5
 8007602:	f7f9 f86b 	bl	80006dc <__aeabi_ddiv>
 8007606:	4604      	mov	r4, r0
 8007608:	460d      	mov	r5, r1
 800760a:	e70d      	b.n	8007428 <atan+0x58>
 800760c:	4602      	mov	r2, r0
 800760e:	460b      	mov	r3, r1
 8007610:	2000      	movs	r0, #0
 8007612:	4930      	ldr	r1, [pc, #192]	; (80076d4 <atan+0x304>)
 8007614:	f7f9 f862 	bl	80006dc <__aeabi_ddiv>
 8007618:	f04f 0b03 	mov.w	fp, #3
 800761c:	4604      	mov	r4, r0
 800761e:	460d      	mov	r5, r1
 8007620:	e702      	b.n	8007428 <atan+0x58>
 8007622:	2200      	movs	r2, #0
 8007624:	4b27      	ldr	r3, [pc, #156]	; (80076c4 <atan+0x2f4>)
 8007626:	f7f8 fd77 	bl	8000118 <__aeabi_dsub>
 800762a:	4602      	mov	r2, r0
 800762c:	460b      	mov	r3, r1
 800762e:	4620      	mov	r0, r4
 8007630:	4629      	mov	r1, r5
 8007632:	f04f 0b01 	mov.w	fp, #1
 8007636:	4614      	mov	r4, r2
 8007638:	461d      	mov	r5, r3
 800763a:	e7da      	b.n	80075f2 <atan+0x222>
 800763c:	f3af 8000 	nop.w
 8007640:	54442d18 	.word	0x54442d18
 8007644:	3ff921fb 	.word	0x3ff921fb
 8007648:	e322da11 	.word	0xe322da11
 800764c:	3f90ad3a 	.word	0x3f90ad3a
 8007650:	24760deb 	.word	0x24760deb
 8007654:	3fa97b4b 	.word	0x3fa97b4b
 8007658:	a0d03d51 	.word	0xa0d03d51
 800765c:	3fb10d66 	.word	0x3fb10d66
 8007660:	c54c206e 	.word	0xc54c206e
 8007664:	3fb745cd 	.word	0x3fb745cd
 8007668:	920083ff 	.word	0x920083ff
 800766c:	3fc24924 	.word	0x3fc24924
 8007670:	5555550d 	.word	0x5555550d
 8007674:	3fd55555 	.word	0x3fd55555
 8007678:	2c6a6c2f 	.word	0x2c6a6c2f
 800767c:	bfa2b444 	.word	0xbfa2b444
 8007680:	52defd9a 	.word	0x52defd9a
 8007684:	3fadde2d 	.word	0x3fadde2d
 8007688:	af749a6d 	.word	0xaf749a6d
 800768c:	3fb3b0f2 	.word	0x3fb3b0f2
 8007690:	fe231671 	.word	0xfe231671
 8007694:	3fbc71c6 	.word	0x3fbc71c6
 8007698:	9998ebc4 	.word	0x9998ebc4
 800769c:	3fc99999 	.word	0x3fc99999
 80076a0:	8800759c 	.word	0x8800759c
 80076a4:	7e37e43c 	.word	0x7e37e43c
 80076a8:	54442d18 	.word	0x54442d18
 80076ac:	bff921fb 	.word	0xbff921fb
 80076b0:	440fffff 	.word	0x440fffff
 80076b4:	7ff00000 	.word	0x7ff00000
 80076b8:	3fdbffff 	.word	0x3fdbffff
 80076bc:	08009b88 	.word	0x08009b88
 80076c0:	08009ba8 	.word	0x08009ba8
 80076c4:	3ff00000 	.word	0x3ff00000
 80076c8:	3ff2ffff 	.word	0x3ff2ffff
 80076cc:	40038000 	.word	0x40038000
 80076d0:	3ff80000 	.word	0x3ff80000
 80076d4:	bff00000 	.word	0xbff00000

080076d8 <fabs>:
 80076d8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80076dc:	4619      	mov	r1, r3
 80076de:	4770      	bx	lr

080076e0 <sin>:
 80076e0:	b530      	push	{r4, r5, lr}
 80076e2:	4a22      	ldr	r2, [pc, #136]	; (800776c <sin+0x8c>)
 80076e4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80076e8:	4293      	cmp	r3, r2
 80076ea:	b087      	sub	sp, #28
 80076ec:	d91c      	bls.n	8007728 <sin+0x48>
 80076ee:	4a20      	ldr	r2, [pc, #128]	; (8007770 <sin+0x90>)
 80076f0:	4293      	cmp	r3, r2
 80076f2:	d905      	bls.n	8007700 <sin+0x20>
 80076f4:	4602      	mov	r2, r0
 80076f6:	460b      	mov	r3, r1
 80076f8:	f7f8 fd0e 	bl	8000118 <__aeabi_dsub>
 80076fc:	b007      	add	sp, #28
 80076fe:	bd30      	pop	{r4, r5, pc}
 8007700:	aa02      	add	r2, sp, #8
 8007702:	f001 f981 	bl	8008a08 <__ieee754_rem_pio2>
 8007706:	f000 0003 	and.w	r0, r0, #3
 800770a:	2801      	cmp	r0, #1
 800770c:	d014      	beq.n	8007738 <sin+0x58>
 800770e:	2802      	cmp	r0, #2
 8007710:	d022      	beq.n	8007758 <sin+0x78>
 8007712:	b1c0      	cbz	r0, 8007746 <sin+0x66>
 8007714:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007718:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800771c:	f000 f920 	bl	8007960 <__kernel_cos>
 8007720:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8007724:	b007      	add	sp, #28
 8007726:	bd30      	pop	{r4, r5, pc}
 8007728:	2400      	movs	r4, #0
 800772a:	2200      	movs	r2, #0
 800772c:	2300      	movs	r3, #0
 800772e:	9400      	str	r4, [sp, #0]
 8007730:	f000 fa3e 	bl	8007bb0 <__kernel_sin>
 8007734:	b007      	add	sp, #28
 8007736:	bd30      	pop	{r4, r5, pc}
 8007738:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800773c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007740:	f000 f90e 	bl	8007960 <__kernel_cos>
 8007744:	e7da      	b.n	80076fc <sin+0x1c>
 8007746:	2401      	movs	r4, #1
 8007748:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800774c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007750:	9400      	str	r4, [sp, #0]
 8007752:	f000 fa2d 	bl	8007bb0 <__kernel_sin>
 8007756:	e7d1      	b.n	80076fc <sin+0x1c>
 8007758:	2401      	movs	r4, #1
 800775a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800775e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007762:	9400      	str	r4, [sp, #0]
 8007764:	f000 fa24 	bl	8007bb0 <__kernel_sin>
 8007768:	e7da      	b.n	8007720 <sin+0x40>
 800776a:	bf00      	nop
 800776c:	3fe921fb 	.word	0x3fe921fb
 8007770:	7fefffff 	.word	0x7fefffff

08007774 <finite>:
 8007774:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
 8007778:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800777c:	0fc0      	lsrs	r0, r0, #31
 800777e:	4770      	bx	lr

08007780 <__ieee754_sqrt>:
 8007780:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007784:	4f72      	ldr	r7, [pc, #456]	; (8007950 <__ieee754_sqrt+0x1d0>)
 8007786:	4604      	mov	r4, r0
 8007788:	438f      	bics	r7, r1
 800778a:	460d      	mov	r5, r1
 800778c:	f000 80b2 	beq.w	80078f4 <__ieee754_sqrt+0x174>
 8007790:	2900      	cmp	r1, #0
 8007792:	460b      	mov	r3, r1
 8007794:	4606      	mov	r6, r0
 8007796:	4602      	mov	r2, r0
 8007798:	dd55      	ble.n	8007846 <__ieee754_sqrt+0xc6>
 800779a:	1508      	asrs	r0, r1, #20
 800779c:	f000 809b 	beq.w	80078d6 <__ieee754_sqrt+0x156>
 80077a0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80077a4:	07c1      	lsls	r1, r0, #31
 80077a6:	f2a0 37ff 	subw	r7, r0, #1023	; 0x3ff
 80077aa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80077ae:	d403      	bmi.n	80077b8 <__ieee754_sqrt+0x38>
 80077b0:	0fd1      	lsrs	r1, r2, #31
 80077b2:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 80077b6:	0052      	lsls	r2, r2, #1
 80077b8:	2600      	movs	r6, #0
 80077ba:	2416      	movs	r4, #22
 80077bc:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80077c0:	46b4      	mov	ip, r6
 80077c2:	005b      	lsls	r3, r3, #1
 80077c4:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 80077c8:	107f      	asrs	r7, r7, #1
 80077ca:	0052      	lsls	r2, r2, #1
 80077cc:	eb0c 0001 	add.w	r0, ip, r1
 80077d0:	4298      	cmp	r0, r3
 80077d2:	dc03      	bgt.n	80077dc <__ieee754_sqrt+0x5c>
 80077d4:	1a1b      	subs	r3, r3, r0
 80077d6:	eb01 0c00 	add.w	ip, r1, r0
 80077da:	440e      	add	r6, r1
 80077dc:	005b      	lsls	r3, r3, #1
 80077de:	3c01      	subs	r4, #1
 80077e0:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 80077e4:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80077e8:	ea4f 0242 	mov.w	r2, r2, lsl #1
 80077ec:	d1ee      	bne.n	80077cc <__ieee754_sqrt+0x4c>
 80077ee:	2520      	movs	r5, #32
 80077f0:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 80077f4:	46a0      	mov	r8, r4
 80077f6:	e00a      	b.n	800780e <__ieee754_sqrt+0x8e>
 80077f8:	d039      	beq.n	800786e <__ieee754_sqrt+0xee>
 80077fa:	0059      	lsls	r1, r3, #1
 80077fc:	eb01 71d2 	add.w	r1, r1, r2, lsr #31
 8007800:	3d01      	subs	r5, #1
 8007802:	460b      	mov	r3, r1
 8007804:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8007808:	ea4f 0050 	mov.w	r0, r0, lsr #1
 800780c:	d03b      	beq.n	8007886 <__ieee754_sqrt+0x106>
 800780e:	459c      	cmp	ip, r3
 8007810:	eb08 0e00 	add.w	lr, r8, r0
 8007814:	daf0      	bge.n	80077f8 <__ieee754_sqrt+0x78>
 8007816:	f1be 0f00 	cmp.w	lr, #0
 800781a:	eb0e 0800 	add.w	r8, lr, r0
 800781e:	db0c      	blt.n	800783a <__ieee754_sqrt+0xba>
 8007820:	46e1      	mov	r9, ip
 8007822:	eba3 010c 	sub.w	r1, r3, ip
 8007826:	46cc      	mov	ip, r9
 8007828:	4596      	cmp	lr, r2
 800782a:	bf88      	it	hi
 800782c:	f101 31ff 	addhi.w	r1, r1, #4294967295	; 0xffffffff
 8007830:	0049      	lsls	r1, r1, #1
 8007832:	eba2 020e 	sub.w	r2, r2, lr
 8007836:	4404      	add	r4, r0
 8007838:	e7e0      	b.n	80077fc <__ieee754_sqrt+0x7c>
 800783a:	f1b8 0f00 	cmp.w	r8, #0
 800783e:	dbef      	blt.n	8007820 <__ieee754_sqrt+0xa0>
 8007840:	f10c 0901 	add.w	r9, ip, #1
 8007844:	e7ed      	b.n	8007822 <__ieee754_sqrt+0xa2>
 8007846:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 800784a:	4307      	orrs	r7, r0
 800784c:	d03d      	beq.n	80078ca <__ieee754_sqrt+0x14a>
 800784e:	2900      	cmp	r1, #0
 8007850:	d173      	bne.n	800793a <__ieee754_sqrt+0x1ba>
 8007852:	0ad1      	lsrs	r1, r2, #11
 8007854:	3b15      	subs	r3, #21
 8007856:	0552      	lsls	r2, r2, #21
 8007858:	2900      	cmp	r1, #0
 800785a:	d0fa      	beq.n	8007852 <__ieee754_sqrt+0xd2>
 800785c:	02cd      	lsls	r5, r1, #11
 800785e:	4618      	mov	r0, r3
 8007860:	4616      	mov	r6, r2
 8007862:	460b      	mov	r3, r1
 8007864:	d537      	bpl.n	80078d6 <__ieee754_sqrt+0x156>
 8007866:	2420      	movs	r4, #32
 8007868:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800786c:	e03e      	b.n	80078ec <__ieee754_sqrt+0x16c>
 800786e:	4596      	cmp	lr, r2
 8007870:	d902      	bls.n	8007878 <__ieee754_sqrt+0xf8>
 8007872:	ea4f 014c 	mov.w	r1, ip, lsl #1
 8007876:	e7c1      	b.n	80077fc <__ieee754_sqrt+0x7c>
 8007878:	f1be 0f00 	cmp.w	lr, #0
 800787c:	eb0e 0800 	add.w	r8, lr, r0
 8007880:	db25      	blt.n	80078ce <__ieee754_sqrt+0x14e>
 8007882:	2100      	movs	r1, #0
 8007884:	e7d5      	b.n	8007832 <__ieee754_sqrt+0xb2>
 8007886:	4311      	orrs	r1, r2
 8007888:	d012      	beq.n	80078b0 <__ieee754_sqrt+0x130>
 800788a:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007954 <__ieee754_sqrt+0x1d4>
 800788e:	f8df b0c8 	ldr.w	fp, [pc, #200]	; 8007958 <__ieee754_sqrt+0x1d8>
 8007892:	e9da 0100 	ldrd	r0, r1, [sl]
 8007896:	e9db 2300 	ldrd	r2, r3, [fp]
 800789a:	f7f8 fc3d 	bl	8000118 <__aeabi_dsub>
 800789e:	e9da 8900 	ldrd	r8, r9, [sl]
 80078a2:	4602      	mov	r2, r0
 80078a4:	460b      	mov	r3, r1
 80078a6:	4640      	mov	r0, r8
 80078a8:	4649      	mov	r1, r9
 80078aa:	f7f9 f869 	bl	8000980 <__aeabi_dcmple>
 80078ae:	bb58      	cbnz	r0, 8007908 <__ieee754_sqrt+0x188>
 80078b0:	0865      	lsrs	r5, r4, #1
 80078b2:	07f2      	lsls	r2, r6, #31
 80078b4:	bf48      	it	mi
 80078b6:	f045 4500 	orrmi.w	r5, r5, #2147483648	; 0x80000000
 80078ba:	4628      	mov	r0, r5
 80078bc:	1073      	asrs	r3, r6, #1
 80078be:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80078c2:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80078c6:	eb03 5107 	add.w	r1, r3, r7, lsl #20
 80078ca:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80078ce:	f1b8 0f00 	cmp.w	r8, #0
 80078d2:	dab5      	bge.n	8007840 <__ieee754_sqrt+0xc0>
 80078d4:	e7d5      	b.n	8007882 <__ieee754_sqrt+0x102>
 80078d6:	2200      	movs	r2, #0
 80078d8:	005b      	lsls	r3, r3, #1
 80078da:	02dc      	lsls	r4, r3, #11
 80078dc:	4611      	mov	r1, r2
 80078de:	f102 0201 	add.w	r2, r2, #1
 80078e2:	d5f9      	bpl.n	80078d8 <__ieee754_sqrt+0x158>
 80078e4:	f1c2 0420 	rsb	r4, r2, #32
 80078e8:	fa06 f202 	lsl.w	r2, r6, r2
 80078ec:	40e6      	lsrs	r6, r4
 80078ee:	1a40      	subs	r0, r0, r1
 80078f0:	4333      	orrs	r3, r6
 80078f2:	e755      	b.n	80077a0 <__ieee754_sqrt+0x20>
 80078f4:	4602      	mov	r2, r0
 80078f6:	460b      	mov	r3, r1
 80078f8:	f7f8 fdc6 	bl	8000488 <__aeabi_dmul>
 80078fc:	4622      	mov	r2, r4
 80078fe:	462b      	mov	r3, r5
 8007900:	f7f8 fc0c 	bl	800011c <__adddf3>
 8007904:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007908:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 800790c:	e9da 0100 	ldrd	r0, r1, [sl]
 8007910:	e9db 2300 	ldrd	r2, r3, [fp]
 8007914:	d018      	beq.n	8007948 <__ieee754_sqrt+0x1c8>
 8007916:	e9da 8900 	ldrd	r8, r9, [sl]
 800791a:	f7f8 fbff 	bl	800011c <__adddf3>
 800791e:	4602      	mov	r2, r0
 8007920:	460b      	mov	r3, r1
 8007922:	4640      	mov	r0, r8
 8007924:	4649      	mov	r1, r9
 8007926:	f7f9 f821 	bl	800096c <__aeabi_dcmplt>
 800792a:	b178      	cbz	r0, 800794c <__ieee754_sqrt+0x1cc>
 800792c:	1ca1      	adds	r1, r4, #2
 800792e:	f104 0502 	add.w	r5, r4, #2
 8007932:	bf08      	it	eq
 8007934:	3601      	addeq	r6, #1
 8007936:	086d      	lsrs	r5, r5, #1
 8007938:	e7bb      	b.n	80078b2 <__ieee754_sqrt+0x132>
 800793a:	f7f8 fbed 	bl	8000118 <__aeabi_dsub>
 800793e:	4602      	mov	r2, r0
 8007940:	460b      	mov	r3, r1
 8007942:	f7f8 fecb 	bl	80006dc <__aeabi_ddiv>
 8007946:	e7c0      	b.n	80078ca <__ieee754_sqrt+0x14a>
 8007948:	3601      	adds	r6, #1
 800794a:	e7b2      	b.n	80078b2 <__ieee754_sqrt+0x132>
 800794c:	3401      	adds	r4, #1
 800794e:	e7af      	b.n	80078b0 <__ieee754_sqrt+0x130>
 8007950:	7ff00000 	.word	0x7ff00000
 8007954:	200001d8 	.word	0x200001d8
 8007958:	200001d0 	.word	0x200001d0
 800795c:	00000000 	.word	0x00000000

08007960 <__kernel_cos>:
 8007960:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007964:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
 8007968:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800796c:	4606      	mov	r6, r0
 800796e:	460f      	mov	r7, r1
 8007970:	4692      	mov	sl, r2
 8007972:	469b      	mov	fp, r3
 8007974:	b085      	sub	sp, #20
 8007976:	d26d      	bcs.n	8007a54 <__kernel_cos+0xf4>
 8007978:	f7f9 f836 	bl	80009e8 <__aeabi_d2iz>
 800797c:	2800      	cmp	r0, #0
 800797e:	f000 80ed 	beq.w	8007b5c <__kernel_cos+0x1fc>
 8007982:	4632      	mov	r2, r6
 8007984:	463b      	mov	r3, r7
 8007986:	4630      	mov	r0, r6
 8007988:	4639      	mov	r1, r7
 800798a:	f7f8 fd7d 	bl	8000488 <__aeabi_dmul>
 800798e:	a376      	add	r3, pc, #472	; (adr r3, 8007b68 <__kernel_cos+0x208>)
 8007990:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007994:	4604      	mov	r4, r0
 8007996:	460d      	mov	r5, r1
 8007998:	f7f8 fd76 	bl	8000488 <__aeabi_dmul>
 800799c:	a374      	add	r3, pc, #464	; (adr r3, 8007b70 <__kernel_cos+0x210>)
 800799e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079a2:	f7f8 fbbb 	bl	800011c <__adddf3>
 80079a6:	4622      	mov	r2, r4
 80079a8:	462b      	mov	r3, r5
 80079aa:	f7f8 fd6d 	bl	8000488 <__aeabi_dmul>
 80079ae:	a372      	add	r3, pc, #456	; (adr r3, 8007b78 <__kernel_cos+0x218>)
 80079b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079b4:	f7f8 fbb0 	bl	8000118 <__aeabi_dsub>
 80079b8:	4622      	mov	r2, r4
 80079ba:	462b      	mov	r3, r5
 80079bc:	f7f8 fd64 	bl	8000488 <__aeabi_dmul>
 80079c0:	a36f      	add	r3, pc, #444	; (adr r3, 8007b80 <__kernel_cos+0x220>)
 80079c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079c6:	f7f8 fba9 	bl	800011c <__adddf3>
 80079ca:	4622      	mov	r2, r4
 80079cc:	462b      	mov	r3, r5
 80079ce:	f7f8 fd5b 	bl	8000488 <__aeabi_dmul>
 80079d2:	a36d      	add	r3, pc, #436	; (adr r3, 8007b88 <__kernel_cos+0x228>)
 80079d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079d8:	f7f8 fb9e 	bl	8000118 <__aeabi_dsub>
 80079dc:	4622      	mov	r2, r4
 80079de:	462b      	mov	r3, r5
 80079e0:	f7f8 fd52 	bl	8000488 <__aeabi_dmul>
 80079e4:	a36a      	add	r3, pc, #424	; (adr r3, 8007b90 <__kernel_cos+0x230>)
 80079e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079ea:	f7f8 fb97 	bl	800011c <__adddf3>
 80079ee:	4622      	mov	r2, r4
 80079f0:	462b      	mov	r3, r5
 80079f2:	f7f8 fd49 	bl	8000488 <__aeabi_dmul>
 80079f6:	e9cd 0100 	strd	r0, r1, [sp]
 80079fa:	2200      	movs	r2, #0
 80079fc:	4620      	mov	r0, r4
 80079fe:	4629      	mov	r1, r5
 8007a00:	4b65      	ldr	r3, [pc, #404]	; (8007b98 <__kernel_cos+0x238>)
 8007a02:	f7f8 fd41 	bl	8000488 <__aeabi_dmul>
 8007a06:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007a0a:	4680      	mov	r8, r0
 8007a0c:	4689      	mov	r9, r1
 8007a0e:	4620      	mov	r0, r4
 8007a10:	4629      	mov	r1, r5
 8007a12:	f7f8 fd39 	bl	8000488 <__aeabi_dmul>
 8007a16:	4644      	mov	r4, r8
 8007a18:	464d      	mov	r5, r9
 8007a1a:	4680      	mov	r8, r0
 8007a1c:	4689      	mov	r9, r1
 8007a1e:	4652      	mov	r2, sl
 8007a20:	465b      	mov	r3, fp
 8007a22:	4630      	mov	r0, r6
 8007a24:	4639      	mov	r1, r7
 8007a26:	f7f8 fd2f 	bl	8000488 <__aeabi_dmul>
 8007a2a:	4602      	mov	r2, r0
 8007a2c:	460b      	mov	r3, r1
 8007a2e:	4640      	mov	r0, r8
 8007a30:	4649      	mov	r1, r9
 8007a32:	f7f8 fb71 	bl	8000118 <__aeabi_dsub>
 8007a36:	4602      	mov	r2, r0
 8007a38:	460b      	mov	r3, r1
 8007a3a:	4620      	mov	r0, r4
 8007a3c:	4629      	mov	r1, r5
 8007a3e:	f7f8 fb6b 	bl	8000118 <__aeabi_dsub>
 8007a42:	4602      	mov	r2, r0
 8007a44:	460b      	mov	r3, r1
 8007a46:	2000      	movs	r0, #0
 8007a48:	4954      	ldr	r1, [pc, #336]	; (8007b9c <__kernel_cos+0x23c>)
 8007a4a:	f7f8 fb65 	bl	8000118 <__aeabi_dsub>
 8007a4e:	b005      	add	sp, #20
 8007a50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a54:	4602      	mov	r2, r0
 8007a56:	460b      	mov	r3, r1
 8007a58:	f7f8 fd16 	bl	8000488 <__aeabi_dmul>
 8007a5c:	a342      	add	r3, pc, #264	; (adr r3, 8007b68 <__kernel_cos+0x208>)
 8007a5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a62:	4604      	mov	r4, r0
 8007a64:	460d      	mov	r5, r1
 8007a66:	f7f8 fd0f 	bl	8000488 <__aeabi_dmul>
 8007a6a:	a341      	add	r3, pc, #260	; (adr r3, 8007b70 <__kernel_cos+0x210>)
 8007a6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a70:	f7f8 fb54 	bl	800011c <__adddf3>
 8007a74:	4622      	mov	r2, r4
 8007a76:	462b      	mov	r3, r5
 8007a78:	f7f8 fd06 	bl	8000488 <__aeabi_dmul>
 8007a7c:	a33e      	add	r3, pc, #248	; (adr r3, 8007b78 <__kernel_cos+0x218>)
 8007a7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a82:	f7f8 fb49 	bl	8000118 <__aeabi_dsub>
 8007a86:	4622      	mov	r2, r4
 8007a88:	462b      	mov	r3, r5
 8007a8a:	f7f8 fcfd 	bl	8000488 <__aeabi_dmul>
 8007a8e:	a33c      	add	r3, pc, #240	; (adr r3, 8007b80 <__kernel_cos+0x220>)
 8007a90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a94:	f7f8 fb42 	bl	800011c <__adddf3>
 8007a98:	4622      	mov	r2, r4
 8007a9a:	462b      	mov	r3, r5
 8007a9c:	f7f8 fcf4 	bl	8000488 <__aeabi_dmul>
 8007aa0:	a339      	add	r3, pc, #228	; (adr r3, 8007b88 <__kernel_cos+0x228>)
 8007aa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007aa6:	f7f8 fb37 	bl	8000118 <__aeabi_dsub>
 8007aaa:	4622      	mov	r2, r4
 8007aac:	462b      	mov	r3, r5
 8007aae:	f7f8 fceb 	bl	8000488 <__aeabi_dmul>
 8007ab2:	a337      	add	r3, pc, #220	; (adr r3, 8007b90 <__kernel_cos+0x230>)
 8007ab4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ab8:	f7f8 fb30 	bl	800011c <__adddf3>
 8007abc:	462b      	mov	r3, r5
 8007abe:	4622      	mov	r2, r4
 8007ac0:	f7f8 fce2 	bl	8000488 <__aeabi_dmul>
 8007ac4:	4b36      	ldr	r3, [pc, #216]	; (8007ba0 <__kernel_cos+0x240>)
 8007ac6:	e9cd 0100 	strd	r0, r1, [sp]
 8007aca:	4598      	cmp	r8, r3
 8007acc:	d995      	bls.n	80079fa <__kernel_cos+0x9a>
 8007ace:	4b35      	ldr	r3, [pc, #212]	; (8007ba4 <__kernel_cos+0x244>)
 8007ad0:	2200      	movs	r2, #0
 8007ad2:	4598      	cmp	r8, r3
 8007ad4:	d83a      	bhi.n	8007b4c <__kernel_cos+0x1ec>
 8007ad6:	f5a8 1300 	sub.w	r3, r8, #2097152	; 0x200000
 8007ada:	2000      	movs	r0, #0
 8007adc:	492f      	ldr	r1, [pc, #188]	; (8007b9c <__kernel_cos+0x23c>)
 8007ade:	4690      	mov	r8, r2
 8007ae0:	4699      	mov	r9, r3
 8007ae2:	f7f8 fb19 	bl	8000118 <__aeabi_dsub>
 8007ae6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007aea:	2200      	movs	r2, #0
 8007aec:	4620      	mov	r0, r4
 8007aee:	4629      	mov	r1, r5
 8007af0:	4b29      	ldr	r3, [pc, #164]	; (8007b98 <__kernel_cos+0x238>)
 8007af2:	f7f8 fcc9 	bl	8000488 <__aeabi_dmul>
 8007af6:	4642      	mov	r2, r8
 8007af8:	464b      	mov	r3, r9
 8007afa:	f7f8 fb0d 	bl	8000118 <__aeabi_dsub>
 8007afe:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007b02:	4680      	mov	r8, r0
 8007b04:	4689      	mov	r9, r1
 8007b06:	4620      	mov	r0, r4
 8007b08:	4629      	mov	r1, r5
 8007b0a:	f7f8 fcbd 	bl	8000488 <__aeabi_dmul>
 8007b0e:	4644      	mov	r4, r8
 8007b10:	464d      	mov	r5, r9
 8007b12:	4680      	mov	r8, r0
 8007b14:	4689      	mov	r9, r1
 8007b16:	4652      	mov	r2, sl
 8007b18:	465b      	mov	r3, fp
 8007b1a:	4630      	mov	r0, r6
 8007b1c:	4639      	mov	r1, r7
 8007b1e:	f7f8 fcb3 	bl	8000488 <__aeabi_dmul>
 8007b22:	4602      	mov	r2, r0
 8007b24:	460b      	mov	r3, r1
 8007b26:	4640      	mov	r0, r8
 8007b28:	4649      	mov	r1, r9
 8007b2a:	f7f8 faf5 	bl	8000118 <__aeabi_dsub>
 8007b2e:	4602      	mov	r2, r0
 8007b30:	460b      	mov	r3, r1
 8007b32:	4620      	mov	r0, r4
 8007b34:	4629      	mov	r1, r5
 8007b36:	f7f8 faef 	bl	8000118 <__aeabi_dsub>
 8007b3a:	4602      	mov	r2, r0
 8007b3c:	460b      	mov	r3, r1
 8007b3e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007b42:	f7f8 fae9 	bl	8000118 <__aeabi_dsub>
 8007b46:	b005      	add	sp, #20
 8007b48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b4c:	4b16      	ldr	r3, [pc, #88]	; (8007ba8 <__kernel_cos+0x248>)
 8007b4e:	f04f 0800 	mov.w	r8, #0
 8007b52:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007b56:	f8df 9054 	ldr.w	r9, [pc, #84]	; 8007bac <__kernel_cos+0x24c>
 8007b5a:	e7c6      	b.n	8007aea <__kernel_cos+0x18a>
 8007b5c:	2000      	movs	r0, #0
 8007b5e:	490f      	ldr	r1, [pc, #60]	; (8007b9c <__kernel_cos+0x23c>)
 8007b60:	b005      	add	sp, #20
 8007b62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b66:	bf00      	nop
 8007b68:	be8838d4 	.word	0xbe8838d4
 8007b6c:	bda8fae9 	.word	0xbda8fae9
 8007b70:	bdb4b1c4 	.word	0xbdb4b1c4
 8007b74:	3e21ee9e 	.word	0x3e21ee9e
 8007b78:	809c52ad 	.word	0x809c52ad
 8007b7c:	3e927e4f 	.word	0x3e927e4f
 8007b80:	19cb1590 	.word	0x19cb1590
 8007b84:	3efa01a0 	.word	0x3efa01a0
 8007b88:	16c15177 	.word	0x16c15177
 8007b8c:	3f56c16c 	.word	0x3f56c16c
 8007b90:	5555554c 	.word	0x5555554c
 8007b94:	3fa55555 	.word	0x3fa55555
 8007b98:	3fe00000 	.word	0x3fe00000
 8007b9c:	3ff00000 	.word	0x3ff00000
 8007ba0:	3fd33332 	.word	0x3fd33332
 8007ba4:	3fe90000 	.word	0x3fe90000
 8007ba8:	3fe70000 	.word	0x3fe70000
 8007bac:	3fd20000 	.word	0x3fd20000

08007bb0 <__kernel_sin>:
 8007bb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007bb4:	b083      	sub	sp, #12
 8007bb6:	e9cd 2300 	strd	r2, r3, [sp]
 8007bba:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007bbe:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8007bc2:	4604      	mov	r4, r0
 8007bc4:	460d      	mov	r5, r1
 8007bc6:	d204      	bcs.n	8007bd2 <__kernel_sin+0x22>
 8007bc8:	f7f8 ff0e 	bl	80009e8 <__aeabi_d2iz>
 8007bcc:	2800      	cmp	r0, #0
 8007bce:	f000 8085 	beq.w	8007cdc <__kernel_sin+0x12c>
 8007bd2:	4622      	mov	r2, r4
 8007bd4:	462b      	mov	r3, r5
 8007bd6:	4620      	mov	r0, r4
 8007bd8:	4629      	mov	r1, r5
 8007bda:	f7f8 fc55 	bl	8000488 <__aeabi_dmul>
 8007bde:	4606      	mov	r6, r0
 8007be0:	460f      	mov	r7, r1
 8007be2:	4632      	mov	r2, r6
 8007be4:	463b      	mov	r3, r7
 8007be6:	4620      	mov	r0, r4
 8007be8:	4629      	mov	r1, r5
 8007bea:	f7f8 fc4d 	bl	8000488 <__aeabi_dmul>
 8007bee:	a33e      	add	r3, pc, #248	; (adr r3, 8007ce8 <__kernel_sin+0x138>)
 8007bf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bf4:	4682      	mov	sl, r0
 8007bf6:	468b      	mov	fp, r1
 8007bf8:	4630      	mov	r0, r6
 8007bfa:	4639      	mov	r1, r7
 8007bfc:	f7f8 fc44 	bl	8000488 <__aeabi_dmul>
 8007c00:	a33b      	add	r3, pc, #236	; (adr r3, 8007cf0 <__kernel_sin+0x140>)
 8007c02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c06:	f7f8 fa87 	bl	8000118 <__aeabi_dsub>
 8007c0a:	4632      	mov	r2, r6
 8007c0c:	463b      	mov	r3, r7
 8007c0e:	f7f8 fc3b 	bl	8000488 <__aeabi_dmul>
 8007c12:	a339      	add	r3, pc, #228	; (adr r3, 8007cf8 <__kernel_sin+0x148>)
 8007c14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c18:	f7f8 fa80 	bl	800011c <__adddf3>
 8007c1c:	4632      	mov	r2, r6
 8007c1e:	463b      	mov	r3, r7
 8007c20:	f7f8 fc32 	bl	8000488 <__aeabi_dmul>
 8007c24:	a336      	add	r3, pc, #216	; (adr r3, 8007d00 <__kernel_sin+0x150>)
 8007c26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c2a:	f7f8 fa75 	bl	8000118 <__aeabi_dsub>
 8007c2e:	4632      	mov	r2, r6
 8007c30:	463b      	mov	r3, r7
 8007c32:	f7f8 fc29 	bl	8000488 <__aeabi_dmul>
 8007c36:	a334      	add	r3, pc, #208	; (adr r3, 8007d08 <__kernel_sin+0x158>)
 8007c38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c3c:	f7f8 fa6e 	bl	800011c <__adddf3>
 8007c40:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007c42:	4680      	mov	r8, r0
 8007c44:	4689      	mov	r9, r1
 8007c46:	b39b      	cbz	r3, 8007cb0 <__kernel_sin+0x100>
 8007c48:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007c4c:	2200      	movs	r2, #0
 8007c4e:	4b32      	ldr	r3, [pc, #200]	; (8007d18 <__kernel_sin+0x168>)
 8007c50:	f7f8 fc1a 	bl	8000488 <__aeabi_dmul>
 8007c54:	4642      	mov	r2, r8
 8007c56:	464b      	mov	r3, r9
 8007c58:	4680      	mov	r8, r0
 8007c5a:	4689      	mov	r9, r1
 8007c5c:	4650      	mov	r0, sl
 8007c5e:	4659      	mov	r1, fp
 8007c60:	f7f8 fc12 	bl	8000488 <__aeabi_dmul>
 8007c64:	4602      	mov	r2, r0
 8007c66:	460b      	mov	r3, r1
 8007c68:	4640      	mov	r0, r8
 8007c6a:	4649      	mov	r1, r9
 8007c6c:	f7f8 fa54 	bl	8000118 <__aeabi_dsub>
 8007c70:	4632      	mov	r2, r6
 8007c72:	463b      	mov	r3, r7
 8007c74:	f7f8 fc08 	bl	8000488 <__aeabi_dmul>
 8007c78:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007c7c:	f7f8 fa4c 	bl	8000118 <__aeabi_dsub>
 8007c80:	a323      	add	r3, pc, #140	; (adr r3, 8007d10 <__kernel_sin+0x160>)
 8007c82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c86:	4606      	mov	r6, r0
 8007c88:	460f      	mov	r7, r1
 8007c8a:	4650      	mov	r0, sl
 8007c8c:	4659      	mov	r1, fp
 8007c8e:	f7f8 fbfb 	bl	8000488 <__aeabi_dmul>
 8007c92:	4602      	mov	r2, r0
 8007c94:	460b      	mov	r3, r1
 8007c96:	4630      	mov	r0, r6
 8007c98:	4639      	mov	r1, r7
 8007c9a:	f7f8 fa3f 	bl	800011c <__adddf3>
 8007c9e:	4602      	mov	r2, r0
 8007ca0:	460b      	mov	r3, r1
 8007ca2:	4620      	mov	r0, r4
 8007ca4:	4629      	mov	r1, r5
 8007ca6:	f7f8 fa37 	bl	8000118 <__aeabi_dsub>
 8007caa:	b003      	add	sp, #12
 8007cac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007cb0:	4602      	mov	r2, r0
 8007cb2:	460b      	mov	r3, r1
 8007cb4:	4630      	mov	r0, r6
 8007cb6:	4639      	mov	r1, r7
 8007cb8:	f7f8 fbe6 	bl	8000488 <__aeabi_dmul>
 8007cbc:	a314      	add	r3, pc, #80	; (adr r3, 8007d10 <__kernel_sin+0x160>)
 8007cbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cc2:	f7f8 fa29 	bl	8000118 <__aeabi_dsub>
 8007cc6:	4652      	mov	r2, sl
 8007cc8:	465b      	mov	r3, fp
 8007cca:	f7f8 fbdd 	bl	8000488 <__aeabi_dmul>
 8007cce:	4622      	mov	r2, r4
 8007cd0:	462b      	mov	r3, r5
 8007cd2:	f7f8 fa23 	bl	800011c <__adddf3>
 8007cd6:	b003      	add	sp, #12
 8007cd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007cdc:	4620      	mov	r0, r4
 8007cde:	4629      	mov	r1, r5
 8007ce0:	b003      	add	sp, #12
 8007ce2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ce6:	bf00      	nop
 8007ce8:	5acfd57c 	.word	0x5acfd57c
 8007cec:	3de5d93a 	.word	0x3de5d93a
 8007cf0:	8a2b9ceb 	.word	0x8a2b9ceb
 8007cf4:	3e5ae5e6 	.word	0x3e5ae5e6
 8007cf8:	57b1fe7d 	.word	0x57b1fe7d
 8007cfc:	3ec71de3 	.word	0x3ec71de3
 8007d00:	19c161d5 	.word	0x19c161d5
 8007d04:	3f2a01a0 	.word	0x3f2a01a0
 8007d08:	1110f8a6 	.word	0x1110f8a6
 8007d0c:	3f811111 	.word	0x3f811111
 8007d10:	55555549 	.word	0x55555549
 8007d14:	3fc55555 	.word	0x3fc55555
 8007d18:	3fe00000 	.word	0x3fe00000
 8007d1c:	00000000 	.word	0x00000000

08007d20 <__ieee754_atan2>:
 8007d20:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d24:	4699      	mov	r9, r3
 8007d26:	4253      	negs	r3, r2
 8007d28:	4f5f      	ldr	r7, [pc, #380]	; (8007ea8 <__ieee754_atan2+0x188>)
 8007d2a:	4313      	orrs	r3, r2
 8007d2c:	f029 4e00 	bic.w	lr, r9, #2147483648	; 0x80000000
 8007d30:	ea4e 73d3 	orr.w	r3, lr, r3, lsr #31
 8007d34:	42bb      	cmp	r3, r7
 8007d36:	4604      	mov	r4, r0
 8007d38:	460d      	mov	r5, r1
 8007d3a:	4690      	mov	r8, r2
 8007d3c:	d83d      	bhi.n	8007dba <__ieee754_atan2+0x9a>
 8007d3e:	4246      	negs	r6, r0
 8007d40:	4306      	orrs	r6, r0
 8007d42:	f021 4a00 	bic.w	sl, r1, #2147483648	; 0x80000000
 8007d46:	ea4a 76d6 	orr.w	r6, sl, r6, lsr #31
 8007d4a:	42be      	cmp	r6, r7
 8007d4c:	4603      	mov	r3, r0
 8007d4e:	468b      	mov	fp, r1
 8007d50:	d833      	bhi.n	8007dba <__ieee754_atan2+0x9a>
 8007d52:	f109 4640 	add.w	r6, r9, #3221225472	; 0xc0000000
 8007d56:	f506 1680 	add.w	r6, r6, #1048576	; 0x100000
 8007d5a:	4316      	orrs	r6, r2
 8007d5c:	d03d      	beq.n	8007dda <__ieee754_atan2+0xba>
 8007d5e:	ea4f 76a9 	mov.w	r6, r9, asr #30
 8007d62:	f006 0602 	and.w	r6, r6, #2
 8007d66:	ea5a 0303 	orrs.w	r3, sl, r3
 8007d6a:	ea46 76d1 	orr.w	r6, r6, r1, lsr #31
 8007d6e:	d02c      	beq.n	8007dca <__ieee754_atan2+0xaa>
 8007d70:	ea5e 0202 	orrs.w	r2, lr, r2
 8007d74:	d035      	beq.n	8007de2 <__ieee754_atan2+0xc2>
 8007d76:	45be      	cmp	lr, r7
 8007d78:	d046      	beq.n	8007e08 <__ieee754_atan2+0xe8>
 8007d7a:	45ba      	cmp	sl, r7
 8007d7c:	d031      	beq.n	8007de2 <__ieee754_atan2+0xc2>
 8007d7e:	ebaa 0a0e 	sub.w	sl, sl, lr
 8007d82:	f1ba 7f74 	cmp.w	sl, #63963136	; 0x3d00000
 8007d86:	ea4f 532a 	mov.w	r3, sl, asr #20
 8007d8a:	da39      	bge.n	8007e00 <__ieee754_atan2+0xe0>
 8007d8c:	f1b9 0f00 	cmp.w	r9, #0
 8007d90:	da46      	bge.n	8007e20 <__ieee754_atan2+0x100>
 8007d92:	333c      	adds	r3, #60	; 0x3c
 8007d94:	da44      	bge.n	8007e20 <__ieee754_atan2+0x100>
 8007d96:	2000      	movs	r0, #0
 8007d98:	2100      	movs	r1, #0
 8007d9a:	2e01      	cmp	r6, #1
 8007d9c:	d058      	beq.n	8007e50 <__ieee754_atan2+0x130>
 8007d9e:	2e02      	cmp	r6, #2
 8007da0:	d049      	beq.n	8007e36 <__ieee754_atan2+0x116>
 8007da2:	b186      	cbz	r6, 8007dc6 <__ieee754_atan2+0xa6>
 8007da4:	a334      	add	r3, pc, #208	; (adr r3, 8007e78 <__ieee754_atan2+0x158>)
 8007da6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007daa:	f7f8 f9b5 	bl	8000118 <__aeabi_dsub>
 8007dae:	a334      	add	r3, pc, #208	; (adr r3, 8007e80 <__ieee754_atan2+0x160>)
 8007db0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007db4:	f7f8 f9b0 	bl	8000118 <__aeabi_dsub>
 8007db8:	e005      	b.n	8007dc6 <__ieee754_atan2+0xa6>
 8007dba:	4622      	mov	r2, r4
 8007dbc:	462b      	mov	r3, r5
 8007dbe:	4640      	mov	r0, r8
 8007dc0:	4649      	mov	r1, r9
 8007dc2:	f7f8 f9ab 	bl	800011c <__adddf3>
 8007dc6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007dca:	2e02      	cmp	r6, #2
 8007dcc:	d010      	beq.n	8007df0 <__ieee754_atan2+0xd0>
 8007dce:	2e03      	cmp	r6, #3
 8007dd0:	d1f9      	bne.n	8007dc6 <__ieee754_atan2+0xa6>
 8007dd2:	a12d      	add	r1, pc, #180	; (adr r1, 8007e88 <__ieee754_atan2+0x168>)
 8007dd4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007dd8:	e7f5      	b.n	8007dc6 <__ieee754_atan2+0xa6>
 8007dda:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007dde:	f7ff baf7 	b.w	80073d0 <atan>
 8007de2:	f1bb 0f00 	cmp.w	fp, #0
 8007de6:	db07      	blt.n	8007df8 <__ieee754_atan2+0xd8>
 8007de8:	a129      	add	r1, pc, #164	; (adr r1, 8007e90 <__ieee754_atan2+0x170>)
 8007dea:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007dee:	e7ea      	b.n	8007dc6 <__ieee754_atan2+0xa6>
 8007df0:	a123      	add	r1, pc, #140	; (adr r1, 8007e80 <__ieee754_atan2+0x160>)
 8007df2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007df6:	e7e6      	b.n	8007dc6 <__ieee754_atan2+0xa6>
 8007df8:	a127      	add	r1, pc, #156	; (adr r1, 8007e98 <__ieee754_atan2+0x178>)
 8007dfa:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007dfe:	e7e2      	b.n	8007dc6 <__ieee754_atan2+0xa6>
 8007e00:	a123      	add	r1, pc, #140	; (adr r1, 8007e90 <__ieee754_atan2+0x170>)
 8007e02:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007e06:	e7c8      	b.n	8007d9a <__ieee754_atan2+0x7a>
 8007e08:	45f2      	cmp	sl, lr
 8007e0a:	f106 36ff 	add.w	r6, r6, #4294967295	; 0xffffffff
 8007e0e:	d023      	beq.n	8007e58 <__ieee754_atan2+0x138>
 8007e10:	2e02      	cmp	r6, #2
 8007e12:	d829      	bhi.n	8007e68 <__ieee754_atan2+0x148>
 8007e14:	4b25      	ldr	r3, [pc, #148]	; (8007eac <__ieee754_atan2+0x18c>)
 8007e16:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007e1a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007e1e:	e7d2      	b.n	8007dc6 <__ieee754_atan2+0xa6>
 8007e20:	4642      	mov	r2, r8
 8007e22:	464b      	mov	r3, r9
 8007e24:	4620      	mov	r0, r4
 8007e26:	4629      	mov	r1, r5
 8007e28:	f7f8 fc58 	bl	80006dc <__aeabi_ddiv>
 8007e2c:	f7ff fc54 	bl	80076d8 <fabs>
 8007e30:	f7ff face 	bl	80073d0 <atan>
 8007e34:	e7b1      	b.n	8007d9a <__ieee754_atan2+0x7a>
 8007e36:	a310      	add	r3, pc, #64	; (adr r3, 8007e78 <__ieee754_atan2+0x158>)
 8007e38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e3c:	f7f8 f96c 	bl	8000118 <__aeabi_dsub>
 8007e40:	4602      	mov	r2, r0
 8007e42:	460b      	mov	r3, r1
 8007e44:	a10e      	add	r1, pc, #56	; (adr r1, 8007e80 <__ieee754_atan2+0x160>)
 8007e46:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007e4a:	f7f8 f965 	bl	8000118 <__aeabi_dsub>
 8007e4e:	e7ba      	b.n	8007dc6 <__ieee754_atan2+0xa6>
 8007e50:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007e54:	4619      	mov	r1, r3
 8007e56:	e7b6      	b.n	8007dc6 <__ieee754_atan2+0xa6>
 8007e58:	2e02      	cmp	r6, #2
 8007e5a:	d808      	bhi.n	8007e6e <__ieee754_atan2+0x14e>
 8007e5c:	4b14      	ldr	r3, [pc, #80]	; (8007eb0 <__ieee754_atan2+0x190>)
 8007e5e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007e62:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007e66:	e7ae      	b.n	8007dc6 <__ieee754_atan2+0xa6>
 8007e68:	2000      	movs	r0, #0
 8007e6a:	2100      	movs	r1, #0
 8007e6c:	e7ab      	b.n	8007dc6 <__ieee754_atan2+0xa6>
 8007e6e:	a10c      	add	r1, pc, #48	; (adr r1, 8007ea0 <__ieee754_atan2+0x180>)
 8007e70:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007e74:	e7a7      	b.n	8007dc6 <__ieee754_atan2+0xa6>
 8007e76:	bf00      	nop
 8007e78:	33145c07 	.word	0x33145c07
 8007e7c:	3ca1a626 	.word	0x3ca1a626
 8007e80:	54442d18 	.word	0x54442d18
 8007e84:	400921fb 	.word	0x400921fb
 8007e88:	54442d18 	.word	0x54442d18
 8007e8c:	c00921fb 	.word	0xc00921fb
 8007e90:	54442d18 	.word	0x54442d18
 8007e94:	3ff921fb 	.word	0x3ff921fb
 8007e98:	54442d18 	.word	0x54442d18
 8007e9c:	bff921fb 	.word	0xbff921fb
 8007ea0:	54442d18 	.word	0x54442d18
 8007ea4:	3fe921fb 	.word	0x3fe921fb
 8007ea8:	7ff00000 	.word	0x7ff00000
 8007eac:	08009bc8 	.word	0x08009bc8
 8007eb0:	08009be0 	.word	0x08009be0
 8007eb4:	00000000 	.word	0x00000000

08007eb8 <__ieee754_pow>:
 8007eb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ebc:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 8007ec0:	4606      	mov	r6, r0
 8007ec2:	ea59 0002 	orrs.w	r0, r9, r2
 8007ec6:	4614      	mov	r4, r2
 8007ec8:	461d      	mov	r5, r3
 8007eca:	460f      	mov	r7, r1
 8007ecc:	b093      	sub	sp, #76	; 0x4c
 8007ece:	d110      	bne.n	8007ef2 <__ieee754_pow+0x3a>
 8007ed0:	19b3      	adds	r3, r6, r6
 8007ed2:	4926      	ldr	r1, [pc, #152]	; (8007f6c <__ieee754_pow+0xb4>)
 8007ed4:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 8007ed8:	4152      	adcs	r2, r2
 8007eda:	4298      	cmp	r0, r3
 8007edc:	4191      	sbcs	r1, r2
 8007ede:	d220      	bcs.n	8007f22 <__ieee754_pow+0x6a>
 8007ee0:	4622      	mov	r2, r4
 8007ee2:	462b      	mov	r3, r5
 8007ee4:	4630      	mov	r0, r6
 8007ee6:	4639      	mov	r1, r7
 8007ee8:	f7f8 f918 	bl	800011c <__adddf3>
 8007eec:	b013      	add	sp, #76	; 0x4c
 8007eee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ef2:	4611      	mov	r1, r2
 8007ef4:	4a1e      	ldr	r2, [pc, #120]	; (8007f70 <__ieee754_pow+0xb8>)
 8007ef6:	f027 4b00 	bic.w	fp, r7, #2147483648	; 0x80000000
 8007efa:	4593      	cmp	fp, r2
 8007efc:	469a      	mov	sl, r3
 8007efe:	46b8      	mov	r8, r7
 8007f00:	4633      	mov	r3, r6
 8007f02:	d913      	bls.n	8007f2c <__ieee754_pow+0x74>
 8007f04:	f108 4840 	add.w	r8, r8, #3221225472	; 0xc0000000
 8007f08:	f508 1880 	add.w	r8, r8, #1048576	; 0x100000
 8007f0c:	ea58 0803 	orrs.w	r8, r8, r3
 8007f10:	d1e6      	bne.n	8007ee0 <__ieee754_pow+0x28>
 8007f12:	1923      	adds	r3, r4, r4
 8007f14:	4915      	ldr	r1, [pc, #84]	; (8007f6c <__ieee754_pow+0xb4>)
 8007f16:	f485 2200 	eor.w	r2, r5, #524288	; 0x80000
 8007f1a:	4152      	adcs	r2, r2
 8007f1c:	4598      	cmp	r8, r3
 8007f1e:	4191      	sbcs	r1, r2
 8007f20:	d3de      	bcc.n	8007ee0 <__ieee754_pow+0x28>
 8007f22:	2000      	movs	r0, #0
 8007f24:	4913      	ldr	r1, [pc, #76]	; (8007f74 <__ieee754_pow+0xbc>)
 8007f26:	b013      	add	sp, #76	; 0x4c
 8007f28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f2c:	d015      	beq.n	8007f5a <__ieee754_pow+0xa2>
 8007f2e:	4591      	cmp	r9, r2
 8007f30:	d8e8      	bhi.n	8007f04 <__ieee754_pow+0x4c>
 8007f32:	465a      	mov	r2, fp
 8007f34:	f000 83d9 	beq.w	80086ea <__ieee754_pow+0x832>
 8007f38:	f1b8 0f00 	cmp.w	r8, #0
 8007f3c:	db1c      	blt.n	8007f78 <__ieee754_pow+0xc0>
 8007f3e:	2900      	cmp	r1, #0
 8007f40:	f040 83e9 	bne.w	8008716 <__ieee754_pow+0x85e>
 8007f44:	480b      	ldr	r0, [pc, #44]	; (8007f74 <__ieee754_pow+0xbc>)
 8007f46:	4581      	cmp	r9, r0
 8007f48:	f040 841c 	bne.w	8008784 <__ieee754_pow+0x8cc>
 8007f4c:	f1ba 0f00 	cmp.w	sl, #0
 8007f50:	f2c0 84d6 	blt.w	8008900 <__ieee754_pow+0xa48>
 8007f54:	4630      	mov	r0, r6
 8007f56:	4639      	mov	r1, r7
 8007f58:	e7c8      	b.n	8007eec <__ieee754_pow+0x34>
 8007f5a:	2e00      	cmp	r6, #0
 8007f5c:	d1c0      	bne.n	8007ee0 <__ieee754_pow+0x28>
 8007f5e:	45d9      	cmp	r9, fp
 8007f60:	d8be      	bhi.n	8007ee0 <__ieee754_pow+0x28>
 8007f62:	f000 8442 	beq.w	80087ea <__ieee754_pow+0x932>
 8007f66:	465a      	mov	r2, fp
 8007f68:	e7e6      	b.n	8007f38 <__ieee754_pow+0x80>
 8007f6a:	bf00      	nop
 8007f6c:	fff00000 	.word	0xfff00000
 8007f70:	7ff00000 	.word	0x7ff00000
 8007f74:	3ff00000 	.word	0x3ff00000
 8007f78:	48d3      	ldr	r0, [pc, #844]	; (80082c8 <__ieee754_pow+0x410>)
 8007f7a:	4581      	cmp	r9, r0
 8007f7c:	f200 83df 	bhi.w	800873e <__ieee754_pow+0x886>
 8007f80:	48d2      	ldr	r0, [pc, #840]	; (80082cc <__ieee754_pow+0x414>)
 8007f82:	4581      	cmp	r9, r0
 8007f84:	d90f      	bls.n	8007fa6 <__ieee754_pow+0xee>
 8007f86:	ea4f 5029 	mov.w	r0, r9, asr #20
 8007f8a:	f2a0 30ff 	subw	r0, r0, #1023	; 0x3ff
 8007f8e:	2814      	cmp	r0, #20
 8007f90:	f340 849d 	ble.w	80088ce <__ieee754_pow+0xa16>
 8007f94:	f1c0 0034 	rsb	r0, r0, #52	; 0x34
 8007f98:	fa21 fc00 	lsr.w	ip, r1, r0
 8007f9c:	fa0c f000 	lsl.w	r0, ip, r0
 8007fa0:	4288      	cmp	r0, r1
 8007fa2:	f000 8327 	beq.w	80085f4 <__ieee754_pow+0x73c>
 8007fa6:	2900      	cmp	r1, #0
 8007fa8:	f040 836a 	bne.w	8008680 <__ieee754_pow+0x7c8>
 8007fac:	f1ba 4f80 	cmp.w	sl, #1073741824	; 0x40000000
 8007fb0:	f000 832c 	beq.w	800860c <__ieee754_pow+0x754>
 8007fb4:	9100      	str	r1, [sp, #0]
 8007fb6:	4630      	mov	r0, r6
 8007fb8:	4639      	mov	r1, r7
 8007fba:	9204      	str	r2, [sp, #16]
 8007fbc:	9302      	str	r3, [sp, #8]
 8007fbe:	f7ff fb8b 	bl	80076d8 <fabs>
 8007fc2:	9b02      	ldr	r3, [sp, #8]
 8007fc4:	9a04      	ldr	r2, [sp, #16]
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	f000 8365 	beq.w	8008696 <__ieee754_pow+0x7de>
 8007fcc:	f8dd c000 	ldr.w	ip, [sp]
 8007fd0:	ea4f 73d8 	mov.w	r3, r8, lsr #31
 8007fd4:	3b01      	subs	r3, #1
 8007fd6:	930a      	str	r3, [sp, #40]	; 0x28
 8007fd8:	ea5c 0303 	orrs.w	r3, ip, r3
 8007fdc:	f000 83ac 	beq.w	8008738 <__ieee754_pow+0x880>
 8007fe0:	4bbb      	ldr	r3, [pc, #748]	; (80082d0 <__ieee754_pow+0x418>)
 8007fe2:	4599      	cmp	r9, r3
 8007fe4:	f200 83bd 	bhi.w	8008762 <__ieee754_pow+0x8aa>
 8007fe8:	4bba      	ldr	r3, [pc, #744]	; (80082d4 <__ieee754_pow+0x41c>)
 8007fea:	ea08 0303 	and.w	r3, r8, r3
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	f040 83ff 	bne.w	80087f2 <__ieee754_pow+0x93a>
 8007ff4:	2200      	movs	r2, #0
 8007ff6:	4bb8      	ldr	r3, [pc, #736]	; (80082d8 <__ieee754_pow+0x420>)
 8007ff8:	f7f8 fa46 	bl	8000488 <__aeabi_dmul>
 8007ffc:	f06f 0634 	mvn.w	r6, #52	; 0x34
 8008000:	460a      	mov	r2, r1
 8008002:	1513      	asrs	r3, r2, #20
 8008004:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8008008:	199f      	adds	r7, r3, r6
 800800a:	4bb4      	ldr	r3, [pc, #720]	; (80082dc <__ieee754_pow+0x424>)
 800800c:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8008010:	f042 567f 	orr.w	r6, r2, #1069547520	; 0x3fc00000
 8008014:	429a      	cmp	r2, r3
 8008016:	970b      	str	r7, [sp, #44]	; 0x2c
 8008018:	f446 1640 	orr.w	r6, r6, #3145728	; 0x300000
 800801c:	dd07      	ble.n	800802e <__ieee754_pow+0x176>
 800801e:	4bb0      	ldr	r3, [pc, #704]	; (80082e0 <__ieee754_pow+0x428>)
 8008020:	429a      	cmp	r2, r3
 8008022:	f340 8480 	ble.w	8008926 <__ieee754_pow+0xa6e>
 8008026:	3701      	adds	r7, #1
 8008028:	970b      	str	r7, [sp, #44]	; 0x2c
 800802a:	f5a6 1680 	sub.w	r6, r6, #1048576	; 0x100000
 800802e:	2200      	movs	r2, #0
 8008030:	2300      	movs	r3, #0
 8008032:	f04f 0800 	mov.w	r8, #0
 8008036:	2700      	movs	r7, #0
 8008038:	f8df 92a8 	ldr.w	r9, [pc, #680]	; 80082e4 <__ieee754_pow+0x42c>
 800803c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8008040:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8008044:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8008048:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800804c:	4631      	mov	r1, r6
 800804e:	4682      	mov	sl, r0
 8008050:	f7f8 f862 	bl	8000118 <__aeabi_dsub>
 8008054:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008058:	46b3      	mov	fp, r6
 800805a:	4680      	mov	r8, r0
 800805c:	4689      	mov	r9, r1
 800805e:	4650      	mov	r0, sl
 8008060:	4631      	mov	r1, r6
 8008062:	e9cd ab0c 	strd	sl, fp, [sp, #48]	; 0x30
 8008066:	f7f8 f859 	bl	800011c <__adddf3>
 800806a:	4602      	mov	r2, r0
 800806c:	460b      	mov	r3, r1
 800806e:	2000      	movs	r0, #0
 8008070:	499c      	ldr	r1, [pc, #624]	; (80082e4 <__ieee754_pow+0x42c>)
 8008072:	f7f8 fb33 	bl	80006dc <__aeabi_ddiv>
 8008076:	468c      	mov	ip, r1
 8008078:	4683      	mov	fp, r0
 800807a:	4663      	mov	r3, ip
 800807c:	465a      	mov	r2, fp
 800807e:	4640      	mov	r0, r8
 8008080:	4649      	mov	r1, r9
 8008082:	e9cd bc0e 	strd	fp, ip, [sp, #56]	; 0x38
 8008086:	f7f8 f9ff 	bl	8000488 <__aeabi_dmul>
 800808a:	4682      	mov	sl, r0
 800808c:	468b      	mov	fp, r1
 800808e:	1073      	asrs	r3, r6, #1
 8008090:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008094:	f503 2300 	add.w	r3, r3, #524288	; 0x80000
 8008098:	19d9      	adds	r1, r3, r7
 800809a:	460f      	mov	r7, r1
 800809c:	465a      	mov	r2, fp
 800809e:	4651      	mov	r1, sl
 80080a0:	2300      	movs	r3, #0
 80080a2:	2000      	movs	r0, #0
 80080a4:	e9cd 1202 	strd	r1, r2, [sp, #8]
 80080a8:	9302      	str	r3, [sp, #8]
 80080aa:	4606      	mov	r6, r0
 80080ac:	4602      	mov	r2, r0
 80080ae:	463b      	mov	r3, r7
 80080b0:	e9cd ab04 	strd	sl, fp, [sp, #16]
 80080b4:	e9dd ab02 	ldrd	sl, fp, [sp, #8]
 80080b8:	4650      	mov	r0, sl
 80080ba:	4659      	mov	r1, fp
 80080bc:	f7f8 f9e4 	bl	8000488 <__aeabi_dmul>
 80080c0:	4602      	mov	r2, r0
 80080c2:	460b      	mov	r3, r1
 80080c4:	4640      	mov	r0, r8
 80080c6:	4649      	mov	r1, r9
 80080c8:	f7f8 f826 	bl	8000118 <__aeabi_dsub>
 80080cc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80080d0:	4680      	mov	r8, r0
 80080d2:	4689      	mov	r9, r1
 80080d4:	4630      	mov	r0, r6
 80080d6:	4639      	mov	r1, r7
 80080d8:	f7f8 f81e 	bl	8000118 <__aeabi_dsub>
 80080dc:	4602      	mov	r2, r0
 80080de:	460b      	mov	r3, r1
 80080e0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80080e4:	f7f8 f818 	bl	8000118 <__aeabi_dsub>
 80080e8:	4652      	mov	r2, sl
 80080ea:	465b      	mov	r3, fp
 80080ec:	f7f8 f9cc 	bl	8000488 <__aeabi_dmul>
 80080f0:	4602      	mov	r2, r0
 80080f2:	460b      	mov	r3, r1
 80080f4:	4640      	mov	r0, r8
 80080f6:	4649      	mov	r1, r9
 80080f8:	f7f8 f80e 	bl	8000118 <__aeabi_dsub>
 80080fc:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8008100:	f7f8 f9c2 	bl	8000488 <__aeabi_dmul>
 8008104:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
 8008108:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800810c:	4632      	mov	r2, r6
 800810e:	463b      	mov	r3, r7
 8008110:	4630      	mov	r0, r6
 8008112:	4639      	mov	r1, r7
 8008114:	f7f8 f9b8 	bl	8000488 <__aeabi_dmul>
 8008118:	a35b      	add	r3, pc, #364	; (adr r3, 8008288 <__ieee754_pow+0x3d0>)
 800811a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800811e:	4606      	mov	r6, r0
 8008120:	460f      	mov	r7, r1
 8008122:	f7f8 f9b1 	bl	8000488 <__aeabi_dmul>
 8008126:	a35a      	add	r3, pc, #360	; (adr r3, 8008290 <__ieee754_pow+0x3d8>)
 8008128:	e9d3 2300 	ldrd	r2, r3, [r3]
 800812c:	f7f7 fff6 	bl	800011c <__adddf3>
 8008130:	4632      	mov	r2, r6
 8008132:	463b      	mov	r3, r7
 8008134:	f7f8 f9a8 	bl	8000488 <__aeabi_dmul>
 8008138:	a357      	add	r3, pc, #348	; (adr r3, 8008298 <__ieee754_pow+0x3e0>)
 800813a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800813e:	f7f7 ffed 	bl	800011c <__adddf3>
 8008142:	4632      	mov	r2, r6
 8008144:	463b      	mov	r3, r7
 8008146:	f7f8 f99f 	bl	8000488 <__aeabi_dmul>
 800814a:	a355      	add	r3, pc, #340	; (adr r3, 80082a0 <__ieee754_pow+0x3e8>)
 800814c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008150:	f7f7 ffe4 	bl	800011c <__adddf3>
 8008154:	4632      	mov	r2, r6
 8008156:	463b      	mov	r3, r7
 8008158:	f7f8 f996 	bl	8000488 <__aeabi_dmul>
 800815c:	a352      	add	r3, pc, #328	; (adr r3, 80082a8 <__ieee754_pow+0x3f0>)
 800815e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008162:	f7f7 ffdb 	bl	800011c <__adddf3>
 8008166:	4632      	mov	r2, r6
 8008168:	463b      	mov	r3, r7
 800816a:	f7f8 f98d 	bl	8000488 <__aeabi_dmul>
 800816e:	a350      	add	r3, pc, #320	; (adr r3, 80082b0 <__ieee754_pow+0x3f8>)
 8008170:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008174:	f7f7 ffd2 	bl	800011c <__adddf3>
 8008178:	4632      	mov	r2, r6
 800817a:	4680      	mov	r8, r0
 800817c:	4689      	mov	r9, r1
 800817e:	463b      	mov	r3, r7
 8008180:	4630      	mov	r0, r6
 8008182:	4639      	mov	r1, r7
 8008184:	f7f8 f980 	bl	8000488 <__aeabi_dmul>
 8008188:	4602      	mov	r2, r0
 800818a:	460b      	mov	r3, r1
 800818c:	4640      	mov	r0, r8
 800818e:	4649      	mov	r1, r9
 8008190:	f7f8 f97a 	bl	8000488 <__aeabi_dmul>
 8008194:	4606      	mov	r6, r0
 8008196:	460f      	mov	r7, r1
 8008198:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800819c:	4652      	mov	r2, sl
 800819e:	465b      	mov	r3, fp
 80081a0:	f7f7 ffbc 	bl	800011c <__adddf3>
 80081a4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80081a8:	f7f8 f96e 	bl	8000488 <__aeabi_dmul>
 80081ac:	4632      	mov	r2, r6
 80081ae:	463b      	mov	r3, r7
 80081b0:	f7f7 ffb4 	bl	800011c <__adddf3>
 80081b4:	4652      	mov	r2, sl
 80081b6:	4680      	mov	r8, r0
 80081b8:	4689      	mov	r9, r1
 80081ba:	465b      	mov	r3, fp
 80081bc:	4650      	mov	r0, sl
 80081be:	4659      	mov	r1, fp
 80081c0:	f7f8 f962 	bl	8000488 <__aeabi_dmul>
 80081c4:	4602      	mov	r2, r0
 80081c6:	460b      	mov	r3, r1
 80081c8:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80081cc:	2200      	movs	r2, #0
 80081ce:	4b46      	ldr	r3, [pc, #280]	; (80082e8 <__ieee754_pow+0x430>)
 80081d0:	f7f7 ffa4 	bl	800011c <__adddf3>
 80081d4:	4642      	mov	r2, r8
 80081d6:	464b      	mov	r3, r9
 80081d8:	f7f7 ffa0 	bl	800011c <__adddf3>
 80081dc:	2600      	movs	r6, #0
 80081de:	460f      	mov	r7, r1
 80081e0:	4632      	mov	r2, r6
 80081e2:	463b      	mov	r3, r7
 80081e4:	4650      	mov	r0, sl
 80081e6:	4659      	mov	r1, fp
 80081e8:	f7f8 f94e 	bl	8000488 <__aeabi_dmul>
 80081ec:	2200      	movs	r2, #0
 80081ee:	4682      	mov	sl, r0
 80081f0:	468b      	mov	fp, r1
 80081f2:	4630      	mov	r0, r6
 80081f4:	4639      	mov	r1, r7
 80081f6:	4b3c      	ldr	r3, [pc, #240]	; (80082e8 <__ieee754_pow+0x430>)
 80081f8:	f7f7 ff8e 	bl	8000118 <__aeabi_dsub>
 80081fc:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8008200:	f7f7 ff8a 	bl	8000118 <__aeabi_dsub>
 8008204:	4602      	mov	r2, r0
 8008206:	460b      	mov	r3, r1
 8008208:	4640      	mov	r0, r8
 800820a:	4649      	mov	r1, r9
 800820c:	f7f7 ff84 	bl	8000118 <__aeabi_dsub>
 8008210:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008214:	f7f8 f938 	bl	8000488 <__aeabi_dmul>
 8008218:	4632      	mov	r2, r6
 800821a:	4680      	mov	r8, r0
 800821c:	4689      	mov	r9, r1
 800821e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008222:	463b      	mov	r3, r7
 8008224:	f7f8 f930 	bl	8000488 <__aeabi_dmul>
 8008228:	4602      	mov	r2, r0
 800822a:	460b      	mov	r3, r1
 800822c:	4640      	mov	r0, r8
 800822e:	4649      	mov	r1, r9
 8008230:	f7f7 ff74 	bl	800011c <__adddf3>
 8008234:	4680      	mov	r8, r0
 8008236:	4689      	mov	r9, r1
 8008238:	2600      	movs	r6, #0
 800823a:	4642      	mov	r2, r8
 800823c:	464b      	mov	r3, r9
 800823e:	4650      	mov	r0, sl
 8008240:	4659      	mov	r1, fp
 8008242:	f7f7 ff6b 	bl	800011c <__adddf3>
 8008246:	a31c      	add	r3, pc, #112	; (adr r3, 80082b8 <__ieee754_pow+0x400>)
 8008248:	e9d3 2300 	ldrd	r2, r3, [r3]
 800824c:	4630      	mov	r0, r6
 800824e:	460f      	mov	r7, r1
 8008250:	f7f8 f91a 	bl	8000488 <__aeabi_dmul>
 8008254:	4652      	mov	r2, sl
 8008256:	465b      	mov	r3, fp
 8008258:	4682      	mov	sl, r0
 800825a:	468b      	mov	fp, r1
 800825c:	4630      	mov	r0, r6
 800825e:	4639      	mov	r1, r7
 8008260:	f7f7 ff5a 	bl	8000118 <__aeabi_dsub>
 8008264:	4602      	mov	r2, r0
 8008266:	460b      	mov	r3, r1
 8008268:	4640      	mov	r0, r8
 800826a:	4649      	mov	r1, r9
 800826c:	f7f7 ff54 	bl	8000118 <__aeabi_dsub>
 8008270:	a313      	add	r3, pc, #76	; (adr r3, 80082c0 <__ieee754_pow+0x408>)
 8008272:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008276:	f7f8 f907 	bl	8000488 <__aeabi_dmul>
 800827a:	4602      	mov	r2, r0
 800827c:	460b      	mov	r3, r1
 800827e:	4630      	mov	r0, r6
 8008280:	4639      	mov	r1, r7
 8008282:	4616      	mov	r6, r2
 8008284:	461f      	mov	r7, r3
 8008286:	e031      	b.n	80082ec <__ieee754_pow+0x434>
 8008288:	4a454eef 	.word	0x4a454eef
 800828c:	3fca7e28 	.word	0x3fca7e28
 8008290:	93c9db65 	.word	0x93c9db65
 8008294:	3fcd864a 	.word	0x3fcd864a
 8008298:	a91d4101 	.word	0xa91d4101
 800829c:	3fd17460 	.word	0x3fd17460
 80082a0:	518f264d 	.word	0x518f264d
 80082a4:	3fd55555 	.word	0x3fd55555
 80082a8:	db6fabff 	.word	0xdb6fabff
 80082ac:	3fdb6db6 	.word	0x3fdb6db6
 80082b0:	33333303 	.word	0x33333303
 80082b4:	3fe33333 	.word	0x3fe33333
 80082b8:	e0000000 	.word	0xe0000000
 80082bc:	3feec709 	.word	0x3feec709
 80082c0:	dc3a03fd 	.word	0xdc3a03fd
 80082c4:	3feec709 	.word	0x3feec709
 80082c8:	433fffff 	.word	0x433fffff
 80082cc:	3fefffff 	.word	0x3fefffff
 80082d0:	41e00000 	.word	0x41e00000
 80082d4:	7ff00000 	.word	0x7ff00000
 80082d8:	43400000 	.word	0x43400000
 80082dc:	0003988e 	.word	0x0003988e
 80082e0:	000bb679 	.word	0x000bb679
 80082e4:	3ff00000 	.word	0x3ff00000
 80082e8:	40080000 	.word	0x40080000
 80082ec:	a3cc      	add	r3, pc, #816	; (adr r3, 8008620 <__ieee754_pow+0x768>)
 80082ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082f2:	f7f8 f8c9 	bl	8000488 <__aeabi_dmul>
 80082f6:	4602      	mov	r2, r0
 80082f8:	460b      	mov	r3, r1
 80082fa:	4630      	mov	r0, r6
 80082fc:	4639      	mov	r1, r7
 80082fe:	f7f7 ff0d 	bl	800011c <__adddf3>
 8008302:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008306:	f7f7 ff09 	bl	800011c <__adddf3>
 800830a:	4606      	mov	r6, r0
 800830c:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800830e:	460f      	mov	r7, r1
 8008310:	f7f8 f850 	bl	80003b4 <__aeabi_i2d>
 8008314:	4680      	mov	r8, r0
 8008316:	4689      	mov	r9, r1
 8008318:	4632      	mov	r2, r6
 800831a:	463b      	mov	r3, r7
 800831c:	4650      	mov	r0, sl
 800831e:	4659      	mov	r1, fp
 8008320:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8008324:	f7f7 fefa 	bl	800011c <__adddf3>
 8008328:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800832c:	f7f7 fef6 	bl	800011c <__adddf3>
 8008330:	4642      	mov	r2, r8
 8008332:	464b      	mov	r3, r9
 8008334:	f7f7 fef2 	bl	800011c <__adddf3>
 8008338:	2000      	movs	r0, #0
 800833a:	4642      	mov	r2, r8
 800833c:	464b      	mov	r3, r9
 800833e:	4682      	mov	sl, r0
 8008340:	468b      	mov	fp, r1
 8008342:	f7f7 fee9 	bl	8000118 <__aeabi_dsub>
 8008346:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800834a:	f7f7 fee5 	bl	8000118 <__aeabi_dsub>
 800834e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008352:	f7f7 fee1 	bl	8000118 <__aeabi_dsub>
 8008356:	4602      	mov	r2, r0
 8008358:	460b      	mov	r3, r1
 800835a:	4630      	mov	r0, r6
 800835c:	4639      	mov	r1, r7
 800835e:	f7f7 fedb 	bl	8000118 <__aeabi_dsub>
 8008362:	9b00      	ldr	r3, [sp, #0]
 8008364:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008366:	3b01      	subs	r3, #1
 8008368:	4313      	orrs	r3, r2
 800836a:	f04f 0200 	mov.w	r2, #0
 800836e:	bf14      	ite	ne
 8008370:	4bbf      	ldrne	r3, [pc, #764]	; (8008670 <__ieee754_pow+0x7b8>)
 8008372:	4bc0      	ldreq	r3, [pc, #768]	; (8008674 <__ieee754_pow+0x7bc>)
 8008374:	e9cd 4500 	strd	r4, r5, [sp]
 8008378:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800837c:	2300      	movs	r3, #0
 800837e:	9300      	str	r3, [sp, #0]
 8008380:	e9dd 8900 	ldrd	r8, r9, [sp]
 8008384:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008388:	4642      	mov	r2, r8
 800838a:	4620      	mov	r0, r4
 800838c:	4629      	mov	r1, r5
 800838e:	464b      	mov	r3, r9
 8008390:	f7f7 fec2 	bl	8000118 <__aeabi_dsub>
 8008394:	4652      	mov	r2, sl
 8008396:	465b      	mov	r3, fp
 8008398:	f7f8 f876 	bl	8000488 <__aeabi_dmul>
 800839c:	4622      	mov	r2, r4
 800839e:	4606      	mov	r6, r0
 80083a0:	460f      	mov	r7, r1
 80083a2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80083a6:	462b      	mov	r3, r5
 80083a8:	f7f8 f86e 	bl	8000488 <__aeabi_dmul>
 80083ac:	4602      	mov	r2, r0
 80083ae:	460b      	mov	r3, r1
 80083b0:	4630      	mov	r0, r6
 80083b2:	4639      	mov	r1, r7
 80083b4:	f7f7 feb2 	bl	800011c <__adddf3>
 80083b8:	4604      	mov	r4, r0
 80083ba:	460d      	mov	r5, r1
 80083bc:	4642      	mov	r2, r8
 80083be:	464b      	mov	r3, r9
 80083c0:	4650      	mov	r0, sl
 80083c2:	4659      	mov	r1, fp
 80083c4:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80083c8:	f7f8 f85e 	bl	8000488 <__aeabi_dmul>
 80083cc:	4606      	mov	r6, r0
 80083ce:	460f      	mov	r7, r1
 80083d0:	4620      	mov	r0, r4
 80083d2:	4629      	mov	r1, r5
 80083d4:	463b      	mov	r3, r7
 80083d6:	4632      	mov	r2, r6
 80083d8:	f7f7 fea0 	bl	800011c <__adddf3>
 80083dc:	4ba6      	ldr	r3, [pc, #664]	; (8008678 <__ieee754_pow+0x7c0>)
 80083de:	4604      	mov	r4, r0
 80083e0:	4299      	cmp	r1, r3
 80083e2:	460d      	mov	r5, r1
 80083e4:	4688      	mov	r8, r1
 80083e6:	f340 81dc 	ble.w	80087a2 <__ieee754_pow+0x8ea>
 80083ea:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 80083ee:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80083f2:	4303      	orrs	r3, r0
 80083f4:	f040 82a9 	bne.w	800894a <__ieee754_pow+0xa92>
 80083f8:	a38b      	add	r3, pc, #556	; (adr r3, 8008628 <__ieee754_pow+0x770>)
 80083fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008402:	f7f7 fe8b 	bl	800011c <__adddf3>
 8008406:	4602      	mov	r2, r0
 8008408:	460b      	mov	r3, r1
 800840a:	4620      	mov	r0, r4
 800840c:	4629      	mov	r1, r5
 800840e:	4614      	mov	r4, r2
 8008410:	461d      	mov	r5, r3
 8008412:	4632      	mov	r2, r6
 8008414:	463b      	mov	r3, r7
 8008416:	f7f7 fe7f 	bl	8000118 <__aeabi_dsub>
 800841a:	4602      	mov	r2, r0
 800841c:	460b      	mov	r3, r1
 800841e:	4620      	mov	r0, r4
 8008420:	4629      	mov	r1, r5
 8008422:	f7f8 fac1 	bl	80009a8 <__aeabi_dcmpgt>
 8008426:	2800      	cmp	r0, #0
 8008428:	f040 828f 	bne.w	800894a <__ieee754_pow+0xa92>
 800842c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008430:	2000      	movs	r0, #0
 8008432:	4443      	add	r3, r8
 8008434:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8008438:	4c90      	ldr	r4, [pc, #576]	; (800867c <__ieee754_pow+0x7c4>)
 800843a:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800843e:	4114      	asrs	r4, r2
 8008440:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8008444:	f1c2 0214 	rsb	r2, r2, #20
 8008448:	ea04 0103 	and.w	r1, r4, r3
 800844c:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8008450:	460b      	mov	r3, r1
 8008452:	fa4a fa02 	asr.w	sl, sl, r2
 8008456:	f1b8 0f00 	cmp.w	r8, #0
 800845a:	4602      	mov	r2, r0
 800845c:	4639      	mov	r1, r7
 800845e:	4630      	mov	r0, r6
 8008460:	bfb8      	it	lt
 8008462:	f1ca 0a00 	rsblt	sl, sl, #0
 8008466:	f7f7 fe57 	bl	8000118 <__aeabi_dsub>
 800846a:	4606      	mov	r6, r0
 800846c:	460f      	mov	r7, r1
 800846e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008472:	4632      	mov	r2, r6
 8008474:	463b      	mov	r3, r7
 8008476:	f7f7 fe51 	bl	800011c <__adddf3>
 800847a:	460d      	mov	r5, r1
 800847c:	ea4f 5b0a 	mov.w	fp, sl, lsl #20
 8008480:	2400      	movs	r4, #0
 8008482:	a36b      	add	r3, pc, #428	; (adr r3, 8008630 <__ieee754_pow+0x778>)
 8008484:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008488:	4620      	mov	r0, r4
 800848a:	4629      	mov	r1, r5
 800848c:	f7f7 fffc 	bl	8000488 <__aeabi_dmul>
 8008490:	4632      	mov	r2, r6
 8008492:	4680      	mov	r8, r0
 8008494:	4689      	mov	r9, r1
 8008496:	463b      	mov	r3, r7
 8008498:	4620      	mov	r0, r4
 800849a:	4629      	mov	r1, r5
 800849c:	f7f7 fe3c 	bl	8000118 <__aeabi_dsub>
 80084a0:	4602      	mov	r2, r0
 80084a2:	460b      	mov	r3, r1
 80084a4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80084a8:	f7f7 fe36 	bl	8000118 <__aeabi_dsub>
 80084ac:	a362      	add	r3, pc, #392	; (adr r3, 8008638 <__ieee754_pow+0x780>)
 80084ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084b2:	f7f7 ffe9 	bl	8000488 <__aeabi_dmul>
 80084b6:	4602      	mov	r2, r0
 80084b8:	460b      	mov	r3, r1
 80084ba:	4620      	mov	r0, r4
 80084bc:	4629      	mov	r1, r5
 80084be:	4614      	mov	r4, r2
 80084c0:	461d      	mov	r5, r3
 80084c2:	a35f      	add	r3, pc, #380	; (adr r3, 8008640 <__ieee754_pow+0x788>)
 80084c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084c8:	f7f7 ffde 	bl	8000488 <__aeabi_dmul>
 80084cc:	4602      	mov	r2, r0
 80084ce:	460b      	mov	r3, r1
 80084d0:	4620      	mov	r0, r4
 80084d2:	4629      	mov	r1, r5
 80084d4:	f7f7 fe22 	bl	800011c <__adddf3>
 80084d8:	4606      	mov	r6, r0
 80084da:	460f      	mov	r7, r1
 80084dc:	4632      	mov	r2, r6
 80084de:	463b      	mov	r3, r7
 80084e0:	4640      	mov	r0, r8
 80084e2:	4649      	mov	r1, r9
 80084e4:	f7f7 fe1a 	bl	800011c <__adddf3>
 80084e8:	4642      	mov	r2, r8
 80084ea:	464b      	mov	r3, r9
 80084ec:	4604      	mov	r4, r0
 80084ee:	460d      	mov	r5, r1
 80084f0:	f7f7 fe12 	bl	8000118 <__aeabi_dsub>
 80084f4:	4602      	mov	r2, r0
 80084f6:	460b      	mov	r3, r1
 80084f8:	4630      	mov	r0, r6
 80084fa:	4639      	mov	r1, r7
 80084fc:	f7f7 fe0c 	bl	8000118 <__aeabi_dsub>
 8008500:	4622      	mov	r2, r4
 8008502:	4680      	mov	r8, r0
 8008504:	4689      	mov	r9, r1
 8008506:	462b      	mov	r3, r5
 8008508:	4620      	mov	r0, r4
 800850a:	4629      	mov	r1, r5
 800850c:	f7f7 ffbc 	bl	8000488 <__aeabi_dmul>
 8008510:	a34d      	add	r3, pc, #308	; (adr r3, 8008648 <__ieee754_pow+0x790>)
 8008512:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008516:	4606      	mov	r6, r0
 8008518:	460f      	mov	r7, r1
 800851a:	f7f7 ffb5 	bl	8000488 <__aeabi_dmul>
 800851e:	a34c      	add	r3, pc, #304	; (adr r3, 8008650 <__ieee754_pow+0x798>)
 8008520:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008524:	f7f7 fdf8 	bl	8000118 <__aeabi_dsub>
 8008528:	4632      	mov	r2, r6
 800852a:	463b      	mov	r3, r7
 800852c:	f7f7 ffac 	bl	8000488 <__aeabi_dmul>
 8008530:	a349      	add	r3, pc, #292	; (adr r3, 8008658 <__ieee754_pow+0x7a0>)
 8008532:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008536:	f7f7 fdf1 	bl	800011c <__adddf3>
 800853a:	4632      	mov	r2, r6
 800853c:	463b      	mov	r3, r7
 800853e:	f7f7 ffa3 	bl	8000488 <__aeabi_dmul>
 8008542:	a347      	add	r3, pc, #284	; (adr r3, 8008660 <__ieee754_pow+0x7a8>)
 8008544:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008548:	f7f7 fde6 	bl	8000118 <__aeabi_dsub>
 800854c:	4632      	mov	r2, r6
 800854e:	463b      	mov	r3, r7
 8008550:	f7f7 ff9a 	bl	8000488 <__aeabi_dmul>
 8008554:	a344      	add	r3, pc, #272	; (adr r3, 8008668 <__ieee754_pow+0x7b0>)
 8008556:	e9d3 2300 	ldrd	r2, r3, [r3]
 800855a:	f7f7 fddf 	bl	800011c <__adddf3>
 800855e:	4632      	mov	r2, r6
 8008560:	463b      	mov	r3, r7
 8008562:	f7f7 ff91 	bl	8000488 <__aeabi_dmul>
 8008566:	4602      	mov	r2, r0
 8008568:	460b      	mov	r3, r1
 800856a:	4620      	mov	r0, r4
 800856c:	4629      	mov	r1, r5
 800856e:	f7f7 fdd3 	bl	8000118 <__aeabi_dsub>
 8008572:	4606      	mov	r6, r0
 8008574:	460f      	mov	r7, r1
 8008576:	4632      	mov	r2, r6
 8008578:	463b      	mov	r3, r7
 800857a:	4620      	mov	r0, r4
 800857c:	4629      	mov	r1, r5
 800857e:	f7f7 ff83 	bl	8000488 <__aeabi_dmul>
 8008582:	4602      	mov	r2, r0
 8008584:	460b      	mov	r3, r1
 8008586:	4630      	mov	r0, r6
 8008588:	4639      	mov	r1, r7
 800858a:	4616      	mov	r6, r2
 800858c:	461f      	mov	r7, r3
 800858e:	2200      	movs	r2, #0
 8008590:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008594:	f7f7 fdc0 	bl	8000118 <__aeabi_dsub>
 8008598:	4602      	mov	r2, r0
 800859a:	460b      	mov	r3, r1
 800859c:	4630      	mov	r0, r6
 800859e:	4639      	mov	r1, r7
 80085a0:	f7f8 f89c 	bl	80006dc <__aeabi_ddiv>
 80085a4:	4642      	mov	r2, r8
 80085a6:	4606      	mov	r6, r0
 80085a8:	460f      	mov	r7, r1
 80085aa:	464b      	mov	r3, r9
 80085ac:	4620      	mov	r0, r4
 80085ae:	4629      	mov	r1, r5
 80085b0:	f7f7 ff6a 	bl	8000488 <__aeabi_dmul>
 80085b4:	4642      	mov	r2, r8
 80085b6:	464b      	mov	r3, r9
 80085b8:	f7f7 fdb0 	bl	800011c <__adddf3>
 80085bc:	4602      	mov	r2, r0
 80085be:	460b      	mov	r3, r1
 80085c0:	4630      	mov	r0, r6
 80085c2:	4639      	mov	r1, r7
 80085c4:	f7f7 fda8 	bl	8000118 <__aeabi_dsub>
 80085c8:	4622      	mov	r2, r4
 80085ca:	462b      	mov	r3, r5
 80085cc:	f7f7 fda4 	bl	8000118 <__aeabi_dsub>
 80085d0:	4602      	mov	r2, r0
 80085d2:	460b      	mov	r3, r1
 80085d4:	2000      	movs	r0, #0
 80085d6:	4926      	ldr	r1, [pc, #152]	; (8008670 <__ieee754_pow+0x7b8>)
 80085d8:	f7f7 fd9e 	bl	8000118 <__aeabi_dsub>
 80085dc:	460c      	mov	r4, r1
 80085de:	445c      	add	r4, fp
 80085e0:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 80085e4:	f2c0 81bb 	blt.w	800895e <__ieee754_pow+0xaa6>
 80085e8:	4621      	mov	r1, r4
 80085ea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80085ee:	f7f7 ff4b 	bl	8000488 <__aeabi_dmul>
 80085f2:	e47b      	b.n	8007eec <__ieee754_pow+0x34>
 80085f4:	f00c 0c01 	and.w	ip, ip, #1
 80085f8:	f1cc 0002 	rsb	r0, ip, #2
 80085fc:	9000      	str	r0, [sp, #0]
 80085fe:	2900      	cmp	r1, #0
 8008600:	f040 808b 	bne.w	800871a <__ieee754_pow+0x862>
 8008604:	f1ba 4f80 	cmp.w	sl, #1073741824	; 0x40000000
 8008608:	f47f acd5 	bne.w	8007fb6 <__ieee754_pow+0xfe>
 800860c:	4632      	mov	r2, r6
 800860e:	463b      	mov	r3, r7
 8008610:	4630      	mov	r0, r6
 8008612:	4639      	mov	r1, r7
 8008614:	f7f7 ff38 	bl	8000488 <__aeabi_dmul>
 8008618:	e468      	b.n	8007eec <__ieee754_pow+0x34>
 800861a:	bf00      	nop
 800861c:	f3af 8000 	nop.w
 8008620:	145b01f5 	.word	0x145b01f5
 8008624:	be3e2fe0 	.word	0xbe3e2fe0
 8008628:	652b82fe 	.word	0x652b82fe
 800862c:	3c971547 	.word	0x3c971547
 8008630:	00000000 	.word	0x00000000
 8008634:	3fe62e43 	.word	0x3fe62e43
 8008638:	fefa39ef 	.word	0xfefa39ef
 800863c:	3fe62e42 	.word	0x3fe62e42
 8008640:	0ca86c39 	.word	0x0ca86c39
 8008644:	be205c61 	.word	0xbe205c61
 8008648:	72bea4d0 	.word	0x72bea4d0
 800864c:	3e663769 	.word	0x3e663769
 8008650:	c5d26bf1 	.word	0xc5d26bf1
 8008654:	3ebbbd41 	.word	0x3ebbbd41
 8008658:	af25de2c 	.word	0xaf25de2c
 800865c:	3f11566a 	.word	0x3f11566a
 8008660:	16bebd93 	.word	0x16bebd93
 8008664:	3f66c16c 	.word	0x3f66c16c
 8008668:	5555553e 	.word	0x5555553e
 800866c:	3fc55555 	.word	0x3fc55555
 8008670:	3ff00000 	.word	0x3ff00000
 8008674:	bff00000 	.word	0xbff00000
 8008678:	408fffff 	.word	0x408fffff
 800867c:	fff00000 	.word	0xfff00000
 8008680:	4630      	mov	r0, r6
 8008682:	4639      	mov	r1, r7
 8008684:	9202      	str	r2, [sp, #8]
 8008686:	9300      	str	r3, [sp, #0]
 8008688:	f7ff f826 	bl	80076d8 <fabs>
 800868c:	9b00      	ldr	r3, [sp, #0]
 800868e:	9a02      	ldr	r2, [sp, #8]
 8008690:	2b00      	cmp	r3, #0
 8008692:	d151      	bne.n	8008738 <__ieee754_pow+0x880>
 8008694:	9300      	str	r3, [sp, #0]
 8008696:	4bc2      	ldr	r3, [pc, #776]	; (80089a0 <__ieee754_pow+0xae8>)
 8008698:	f028 4c40 	bic.w	ip, r8, #3221225472	; 0xc0000000
 800869c:	459c      	cmp	ip, r3
 800869e:	d003      	beq.n	80086a8 <__ieee754_pow+0x7f0>
 80086a0:	f1bb 0f00 	cmp.w	fp, #0
 80086a4:	f47f ac92 	bne.w	8007fcc <__ieee754_pow+0x114>
 80086a8:	f1ba 0f00 	cmp.w	sl, #0
 80086ac:	da05      	bge.n	80086ba <__ieee754_pow+0x802>
 80086ae:	4602      	mov	r2, r0
 80086b0:	460b      	mov	r3, r1
 80086b2:	2000      	movs	r0, #0
 80086b4:	49ba      	ldr	r1, [pc, #744]	; (80089a0 <__ieee754_pow+0xae8>)
 80086b6:	f7f8 f811 	bl	80006dc <__aeabi_ddiv>
 80086ba:	f1b8 0f00 	cmp.w	r8, #0
 80086be:	f6bf ac15 	bge.w	8007eec <__ieee754_pow+0x34>
 80086c2:	9b00      	ldr	r3, [sp, #0]
 80086c4:	f10b 4b40 	add.w	fp, fp, #3221225472	; 0xc0000000
 80086c8:	f50b 1b80 	add.w	fp, fp, #1048576	; 0x100000
 80086cc:	ea5b 0b03 	orrs.w	fp, fp, r3
 80086d0:	f040 8120 	bne.w	8008914 <__ieee754_pow+0xa5c>
 80086d4:	4602      	mov	r2, r0
 80086d6:	460b      	mov	r3, r1
 80086d8:	4610      	mov	r0, r2
 80086da:	4619      	mov	r1, r3
 80086dc:	f7f7 fd1c 	bl	8000118 <__aeabi_dsub>
 80086e0:	4602      	mov	r2, r0
 80086e2:	460b      	mov	r3, r1
 80086e4:	f7f7 fffa 	bl	80006dc <__aeabi_ddiv>
 80086e8:	e400      	b.n	8007eec <__ieee754_pow+0x34>
 80086ea:	2c00      	cmp	r4, #0
 80086ec:	f47f ac0a 	bne.w	8007f04 <__ieee754_pow+0x4c>
 80086f0:	f10b 4240 	add.w	r2, fp, #3221225472	; 0xc0000000
 80086f4:	f502 1280 	add.w	r2, r2, #1048576	; 0x100000
 80086f8:	4332      	orrs	r2, r6
 80086fa:	f43f ac12 	beq.w	8007f22 <__ieee754_pow+0x6a>
 80086fe:	4ba9      	ldr	r3, [pc, #676]	; (80089a4 <__ieee754_pow+0xaec>)
 8008700:	459b      	cmp	fp, r3
 8008702:	f240 80d7 	bls.w	80088b4 <__ieee754_pow+0x9fc>
 8008706:	f1ba 0f00 	cmp.w	sl, #0
 800870a:	f2c0 812c 	blt.w	8008966 <__ieee754_pow+0xaae>
 800870e:	4620      	mov	r0, r4
 8008710:	4629      	mov	r1, r5
 8008712:	f7ff bbeb 	b.w	8007eec <__ieee754_pow+0x34>
 8008716:	2100      	movs	r1, #0
 8008718:	9100      	str	r1, [sp, #0]
 800871a:	4630      	mov	r0, r6
 800871c:	4639      	mov	r1, r7
 800871e:	9204      	str	r2, [sp, #16]
 8008720:	9302      	str	r3, [sp, #8]
 8008722:	f7fe ffd9 	bl	80076d8 <fabs>
 8008726:	9b02      	ldr	r3, [sp, #8]
 8008728:	9a04      	ldr	r2, [sp, #16]
 800872a:	2b00      	cmp	r3, #0
 800872c:	d0b3      	beq.n	8008696 <__ieee754_pow+0x7de>
 800872e:	ea4f 73d8 	mov.w	r3, r8, lsr #31
 8008732:	3b01      	subs	r3, #1
 8008734:	930a      	str	r3, [sp, #40]	; 0x28
 8008736:	e453      	b.n	8007fe0 <__ieee754_pow+0x128>
 8008738:	4632      	mov	r2, r6
 800873a:	463b      	mov	r3, r7
 800873c:	e7cc      	b.n	80086d8 <__ieee754_pow+0x820>
 800873e:	2900      	cmp	r1, #0
 8008740:	f000 813e 	beq.w	80089c0 <__ieee754_pow+0xb08>
 8008744:	4630      	mov	r0, r6
 8008746:	4639      	mov	r1, r7
 8008748:	9202      	str	r2, [sp, #8]
 800874a:	9300      	str	r3, [sp, #0]
 800874c:	f7fe ffc4 	bl	80076d8 <fabs>
 8008750:	9b00      	ldr	r3, [sp, #0]
 8008752:	9a02      	ldr	r2, [sp, #8]
 8008754:	2b00      	cmp	r3, #0
 8008756:	f000 80db 	beq.w	8008910 <__ieee754_pow+0xa58>
 800875a:	2302      	movs	r3, #2
 800875c:	9300      	str	r3, [sp, #0]
 800875e:	2300      	movs	r3, #0
 8008760:	930a      	str	r3, [sp, #40]	; 0x28
 8008762:	4b91      	ldr	r3, [pc, #580]	; (80089a8 <__ieee754_pow+0xaf0>)
 8008764:	4599      	cmp	r9, r3
 8008766:	4b8f      	ldr	r3, [pc, #572]	; (80089a4 <__ieee754_pow+0xaec>)
 8008768:	d945      	bls.n	80087f6 <__ieee754_pow+0x93e>
 800876a:	459b      	cmp	fp, r3
 800876c:	f240 809c 	bls.w	80088a8 <__ieee754_pow+0x9f0>
 8008770:	f1ba 0f00 	cmp.w	sl, #0
 8008774:	f340 809c 	ble.w	80088b0 <__ieee754_pow+0x9f8>
 8008778:	2000      	movs	r0, #0
 800877a:	b013      	add	sp, #76	; 0x4c
 800877c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008780:	f000 bbfa 	b.w	8008f78 <__math_oflow>
 8008784:	f1ba 4f80 	cmp.w	sl, #1073741824	; 0x40000000
 8008788:	f43f af40 	beq.w	800860c <__ieee754_pow+0x754>
 800878c:	4887      	ldr	r0, [pc, #540]	; (80089ac <__ieee754_pow+0xaf4>)
 800878e:	4582      	cmp	sl, r0
 8008790:	f47f ac10 	bne.w	8007fb4 <__ieee754_pow+0xfc>
 8008794:	4630      	mov	r0, r6
 8008796:	4639      	mov	r1, r7
 8008798:	b013      	add	sp, #76	; 0x4c
 800879a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800879e:	f7fe bfef 	b.w	8007780 <__ieee754_sqrt>
 80087a2:	f8df c20c 	ldr.w	ip, [pc, #524]	; 80089b0 <__ieee754_pow+0xaf8>
 80087a6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80087aa:	4563      	cmp	r3, ip
 80087ac:	f240 80a0 	bls.w	80088f0 <__ieee754_pow+0xa38>
 80087b0:	4b80      	ldr	r3, [pc, #512]	; (80089b4 <__ieee754_pow+0xafc>)
 80087b2:	440b      	add	r3, r1
 80087b4:	4303      	orrs	r3, r0
 80087b6:	d10a      	bne.n	80087ce <__ieee754_pow+0x916>
 80087b8:	4632      	mov	r2, r6
 80087ba:	463b      	mov	r3, r7
 80087bc:	f7f7 fcac 	bl	8000118 <__aeabi_dsub>
 80087c0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80087c4:	f7f8 f8e6 	bl	8000994 <__aeabi_dcmpge>
 80087c8:	2800      	cmp	r0, #0
 80087ca:	f43f ae2f 	beq.w	800842c <__ieee754_pow+0x574>
 80087ce:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80087d2:	2200      	movs	r2, #0
 80087d4:	2300      	movs	r3, #0
 80087d6:	f7f8 f8c9 	bl	800096c <__aeabi_dcmplt>
 80087da:	3800      	subs	r0, #0
 80087dc:	bf18      	it	ne
 80087de:	2001      	movne	r0, #1
 80087e0:	b013      	add	sp, #76	; 0x4c
 80087e2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087e6:	f000 bbc1 	b.w	8008f6c <__math_uflow>
 80087ea:	2c00      	cmp	r4, #0
 80087ec:	f47f ab78 	bne.w	8007ee0 <__ieee754_pow+0x28>
 80087f0:	e785      	b.n	80086fe <__ieee754_pow+0x846>
 80087f2:	2600      	movs	r6, #0
 80087f4:	e405      	b.n	8008002 <__ieee754_pow+0x14a>
 80087f6:	459b      	cmp	fp, r3
 80087f8:	d356      	bcc.n	80088a8 <__ieee754_pow+0x9f0>
 80087fa:	4b69      	ldr	r3, [pc, #420]	; (80089a0 <__ieee754_pow+0xae8>)
 80087fc:	459b      	cmp	fp, r3
 80087fe:	d8b7      	bhi.n	8008770 <__ieee754_pow+0x8b8>
 8008800:	2200      	movs	r2, #0
 8008802:	4b67      	ldr	r3, [pc, #412]	; (80089a0 <__ieee754_pow+0xae8>)
 8008804:	f7f7 fc88 	bl	8000118 <__aeabi_dsub>
 8008808:	a359      	add	r3, pc, #356	; (adr r3, 8008970 <__ieee754_pow+0xab8>)
 800880a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800880e:	4606      	mov	r6, r0
 8008810:	460f      	mov	r7, r1
 8008812:	f7f7 fe39 	bl	8000488 <__aeabi_dmul>
 8008816:	a358      	add	r3, pc, #352	; (adr r3, 8008978 <__ieee754_pow+0xac0>)
 8008818:	e9d3 2300 	ldrd	r2, r3, [r3]
 800881c:	4682      	mov	sl, r0
 800881e:	468b      	mov	fp, r1
 8008820:	4630      	mov	r0, r6
 8008822:	4639      	mov	r1, r7
 8008824:	f7f7 fe30 	bl	8000488 <__aeabi_dmul>
 8008828:	2200      	movs	r2, #0
 800882a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800882e:	4b62      	ldr	r3, [pc, #392]	; (80089b8 <__ieee754_pow+0xb00>)
 8008830:	4630      	mov	r0, r6
 8008832:	4639      	mov	r1, r7
 8008834:	f7f7 fe28 	bl	8000488 <__aeabi_dmul>
 8008838:	4602      	mov	r2, r0
 800883a:	460b      	mov	r3, r1
 800883c:	a150      	add	r1, pc, #320	; (adr r1, 8008980 <__ieee754_pow+0xac8>)
 800883e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008842:	f7f7 fc69 	bl	8000118 <__aeabi_dsub>
 8008846:	4632      	mov	r2, r6
 8008848:	463b      	mov	r3, r7
 800884a:	f7f7 fe1d 	bl	8000488 <__aeabi_dmul>
 800884e:	4602      	mov	r2, r0
 8008850:	460b      	mov	r3, r1
 8008852:	2000      	movs	r0, #0
 8008854:	4955      	ldr	r1, [pc, #340]	; (80089ac <__ieee754_pow+0xaf4>)
 8008856:	f7f7 fc5f 	bl	8000118 <__aeabi_dsub>
 800885a:	4632      	mov	r2, r6
 800885c:	463b      	mov	r3, r7
 800885e:	4680      	mov	r8, r0
 8008860:	4689      	mov	r9, r1
 8008862:	4630      	mov	r0, r6
 8008864:	4639      	mov	r1, r7
 8008866:	f7f7 fe0f 	bl	8000488 <__aeabi_dmul>
 800886a:	4602      	mov	r2, r0
 800886c:	460b      	mov	r3, r1
 800886e:	4640      	mov	r0, r8
 8008870:	4649      	mov	r1, r9
 8008872:	f7f7 fe09 	bl	8000488 <__aeabi_dmul>
 8008876:	a344      	add	r3, pc, #272	; (adr r3, 8008988 <__ieee754_pow+0xad0>)
 8008878:	e9d3 2300 	ldrd	r2, r3, [r3]
 800887c:	f7f7 fe04 	bl	8000488 <__aeabi_dmul>
 8008880:	4602      	mov	r2, r0
 8008882:	460b      	mov	r3, r1
 8008884:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008888:	f7f7 fc46 	bl	8000118 <__aeabi_dsub>
 800888c:	4606      	mov	r6, r0
 800888e:	460f      	mov	r7, r1
 8008890:	4650      	mov	r0, sl
 8008892:	4659      	mov	r1, fp
 8008894:	4632      	mov	r2, r6
 8008896:	463b      	mov	r3, r7
 8008898:	f7f7 fc40 	bl	800011c <__adddf3>
 800889c:	2000      	movs	r0, #0
 800889e:	4652      	mov	r2, sl
 80088a0:	465b      	mov	r3, fp
 80088a2:	4682      	mov	sl, r0
 80088a4:	468b      	mov	fp, r1
 80088a6:	e554      	b.n	8008352 <__ieee754_pow+0x49a>
 80088a8:	f1ba 0f00 	cmp.w	sl, #0
 80088ac:	f6ff af64 	blt.w	8008778 <__ieee754_pow+0x8c0>
 80088b0:	2000      	movs	r0, #0
 80088b2:	e795      	b.n	80087e0 <__ieee754_pow+0x928>
 80088b4:	f1ba 0f00 	cmp.w	sl, #0
 80088b8:	f04f 0000 	mov.w	r0, #0
 80088bc:	f04f 0100 	mov.w	r1, #0
 80088c0:	f6bf ab14 	bge.w	8007eec <__ieee754_pow+0x34>
 80088c4:	4620      	mov	r0, r4
 80088c6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 80088ca:	f7ff bb0f 	b.w	8007eec <__ieee754_pow+0x34>
 80088ce:	2900      	cmp	r1, #0
 80088d0:	f47f aed6 	bne.w	8008680 <__ieee754_pow+0x7c8>
 80088d4:	f1c0 0014 	rsb	r0, r0, #20
 80088d8:	fa49 fc00 	asr.w	ip, r9, r0
 80088dc:	fa0c f000 	lsl.w	r0, ip, r0
 80088e0:	4548      	cmp	r0, r9
 80088e2:	d075      	beq.n	80089d0 <__ieee754_pow+0xb18>
 80088e4:	482e      	ldr	r0, [pc, #184]	; (80089a0 <__ieee754_pow+0xae8>)
 80088e6:	4581      	cmp	r9, r0
 80088e8:	f43f ab30 	beq.w	8007f4c <__ieee754_pow+0x94>
 80088ec:	f7ff bb5e 	b.w	8007fac <__ieee754_pow+0xf4>
 80088f0:	4a2e      	ldr	r2, [pc, #184]	; (80089ac <__ieee754_pow+0xaf4>)
 80088f2:	4293      	cmp	r3, r2
 80088f4:	d87b      	bhi.n	80089ee <__ieee754_pow+0xb36>
 80088f6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80088fa:	4693      	mov	fp, r2
 80088fc:	4692      	mov	sl, r2
 80088fe:	e5bf      	b.n	8008480 <__ieee754_pow+0x5c8>
 8008900:	4632      	mov	r2, r6
 8008902:	463b      	mov	r3, r7
 8008904:	2000      	movs	r0, #0
 8008906:	4926      	ldr	r1, [pc, #152]	; (80089a0 <__ieee754_pow+0xae8>)
 8008908:	f7f7 fee8 	bl	80006dc <__aeabi_ddiv>
 800890c:	f7ff baee 	b.w	8007eec <__ieee754_pow+0x34>
 8008910:	2302      	movs	r3, #2
 8008912:	e6bf      	b.n	8008694 <__ieee754_pow+0x7dc>
 8008914:	9b00      	ldr	r3, [sp, #0]
 8008916:	2b01      	cmp	r3, #1
 8008918:	f47f aae8 	bne.w	8007eec <__ieee754_pow+0x34>
 800891c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008920:	4619      	mov	r1, r3
 8008922:	f7ff bae3 	b.w	8007eec <__ieee754_pow+0x34>
 8008926:	2200      	movs	r2, #0
 8008928:	4b24      	ldr	r3, [pc, #144]	; (80089bc <__ieee754_pow+0xb04>)
 800892a:	f44f 2780 	mov.w	r7, #262144	; 0x40000
 800892e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8008932:	a317      	add	r3, pc, #92	; (adr r3, 8008990 <__ieee754_pow+0xad8>)
 8008934:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008938:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800893c:	a316      	add	r3, pc, #88	; (adr r3, 8008998 <__ieee754_pow+0xae0>)
 800893e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008942:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8008946:	f7ff bb7f 	b.w	8008048 <__ieee754_pow+0x190>
 800894a:	2200      	movs	r2, #0
 800894c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008950:	2300      	movs	r3, #0
 8008952:	f7f8 f80b 	bl	800096c <__aeabi_dcmplt>
 8008956:	3800      	subs	r0, #0
 8008958:	bf18      	it	ne
 800895a:	2001      	movne	r0, #1
 800895c:	e70d      	b.n	800877a <__ieee754_pow+0x8c2>
 800895e:	4652      	mov	r2, sl
 8008960:	f000 fa62 	bl	8008e28 <scalbn>
 8008964:	e641      	b.n	80085ea <__ieee754_pow+0x732>
 8008966:	2000      	movs	r0, #0
 8008968:	2100      	movs	r1, #0
 800896a:	f7ff babf 	b.w	8007eec <__ieee754_pow+0x34>
 800896e:	bf00      	nop
 8008970:	60000000 	.word	0x60000000
 8008974:	3ff71547 	.word	0x3ff71547
 8008978:	f85ddf44 	.word	0xf85ddf44
 800897c:	3e54ae0b 	.word	0x3e54ae0b
 8008980:	55555555 	.word	0x55555555
 8008984:	3fd55555 	.word	0x3fd55555
 8008988:	652b82fe 	.word	0x652b82fe
 800898c:	3ff71547 	.word	0x3ff71547
 8008990:	40000000 	.word	0x40000000
 8008994:	3fe2b803 	.word	0x3fe2b803
 8008998:	43cfd006 	.word	0x43cfd006
 800899c:	3e4cfdeb 	.word	0x3e4cfdeb
 80089a0:	3ff00000 	.word	0x3ff00000
 80089a4:	3fefffff 	.word	0x3fefffff
 80089a8:	43f00000 	.word	0x43f00000
 80089ac:	3fe00000 	.word	0x3fe00000
 80089b0:	4090cbff 	.word	0x4090cbff
 80089b4:	3f6f3400 	.word	0x3f6f3400
 80089b8:	3fd00000 	.word	0x3fd00000
 80089bc:	3ff80000 	.word	0x3ff80000
 80089c0:	f1ba 4f80 	cmp.w	sl, #1073741824	; 0x40000000
 80089c4:	f43f ae22 	beq.w	800860c <__ieee754_pow+0x754>
 80089c8:	2102      	movs	r1, #2
 80089ca:	9100      	str	r1, [sp, #0]
 80089cc:	f7ff baf3 	b.w	8007fb6 <__ieee754_pow+0xfe>
 80089d0:	490b      	ldr	r1, [pc, #44]	; (8008a00 <__ieee754_pow+0xb48>)
 80089d2:	4589      	cmp	r9, r1
 80089d4:	f43f aaba 	beq.w	8007f4c <__ieee754_pow+0x94>
 80089d8:	f1ba 4f80 	cmp.w	sl, #1073741824	; 0x40000000
 80089dc:	f43f ae16 	beq.w	800860c <__ieee754_pow+0x754>
 80089e0:	f00c 0c01 	and.w	ip, ip, #1
 80089e4:	f1cc 0102 	rsb	r1, ip, #2
 80089e8:	9100      	str	r1, [sp, #0]
 80089ea:	f7ff bae4 	b.w	8007fb6 <__ieee754_pow+0xfe>
 80089ee:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80089f2:	151b      	asrs	r3, r3, #20
 80089f4:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 80089f8:	fa42 f303 	asr.w	r3, r2, r3
 80089fc:	e518      	b.n	8008430 <__ieee754_pow+0x578>
 80089fe:	bf00      	nop
 8008a00:	3ff00000 	.word	0x3ff00000
 8008a04:	00000000 	.word	0x00000000

08008a08 <__ieee754_rem_pio2>:
 8008a08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a0c:	4b88      	ldr	r3, [pc, #544]	; (8008c30 <__ieee754_rem_pio2+0x228>)
 8008a0e:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 8008a12:	429f      	cmp	r7, r3
 8008a14:	4604      	mov	r4, r0
 8008a16:	460d      	mov	r5, r1
 8008a18:	4693      	mov	fp, r2
 8008a1a:	b08f      	sub	sp, #60	; 0x3c
 8008a1c:	f240 8091 	bls.w	8008b42 <__ieee754_rem_pio2+0x13a>
 8008a20:	4b84      	ldr	r3, [pc, #528]	; (8008c34 <__ieee754_rem_pio2+0x22c>)
 8008a22:	4688      	mov	r8, r1
 8008a24:	429f      	cmp	r7, r3
 8008a26:	d828      	bhi.n	8008a7a <__ieee754_rem_pio2+0x72>
 8008a28:	a377      	add	r3, pc, #476	; (adr r3, 8008c08 <__ieee754_rem_pio2+0x200>)
 8008a2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a2e:	2900      	cmp	r1, #0
 8008a30:	f340 81a6 	ble.w	8008d80 <__ieee754_rem_pio2+0x378>
 8008a34:	f7f7 fb70 	bl	8000118 <__aeabi_dsub>
 8008a38:	4b7f      	ldr	r3, [pc, #508]	; (8008c38 <__ieee754_rem_pio2+0x230>)
 8008a3a:	4604      	mov	r4, r0
 8008a3c:	429f      	cmp	r7, r3
 8008a3e:	460d      	mov	r5, r1
 8008a40:	f000 8090 	beq.w	8008b64 <__ieee754_rem_pio2+0x15c>
 8008a44:	a372      	add	r3, pc, #456	; (adr r3, 8008c10 <__ieee754_rem_pio2+0x208>)
 8008a46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a4a:	f7f7 fb65 	bl	8000118 <__aeabi_dsub>
 8008a4e:	4602      	mov	r2, r0
 8008a50:	460b      	mov	r3, r1
 8008a52:	4620      	mov	r0, r4
 8008a54:	4629      	mov	r1, r5
 8008a56:	4614      	mov	r4, r2
 8008a58:	461d      	mov	r5, r3
 8008a5a:	f7f7 fb5d 	bl	8000118 <__aeabi_dsub>
 8008a5e:	a36c      	add	r3, pc, #432	; (adr r3, 8008c10 <__ieee754_rem_pio2+0x208>)
 8008a60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a64:	f7f7 fb58 	bl	8000118 <__aeabi_dsub>
 8008a68:	2601      	movs	r6, #1
 8008a6a:	e9cb 4500 	strd	r4, r5, [fp]
 8008a6e:	e9cb 0102 	strd	r0, r1, [fp, #8]
 8008a72:	4630      	mov	r0, r6
 8008a74:	b00f      	add	sp, #60	; 0x3c
 8008a76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a7a:	4b70      	ldr	r3, [pc, #448]	; (8008c3c <__ieee754_rem_pio2+0x234>)
 8008a7c:	429f      	cmp	r7, r3
 8008a7e:	f240 808b 	bls.w	8008b98 <__ieee754_rem_pio2+0x190>
 8008a82:	4b6f      	ldr	r3, [pc, #444]	; (8008c40 <__ieee754_rem_pio2+0x238>)
 8008a84:	429f      	cmp	r7, r3
 8008a86:	d864      	bhi.n	8008b52 <__ieee754_rem_pio2+0x14a>
 8008a88:	ea4f 5a27 	mov.w	sl, r7, asr #20
 8008a8c:	f2aa 4616 	subw	r6, sl, #1046	; 0x416
 8008a90:	eba7 5106 	sub.w	r1, r7, r6, lsl #20
 8008a94:	460f      	mov	r7, r1
 8008a96:	9602      	str	r6, [sp, #8]
 8008a98:	4606      	mov	r6, r0
 8008a9a:	f7f7 ffa5 	bl	80009e8 <__aeabi_d2iz>
 8008a9e:	f7f7 fc89 	bl	80003b4 <__aeabi_i2d>
 8008aa2:	4602      	mov	r2, r0
 8008aa4:	460b      	mov	r3, r1
 8008aa6:	4630      	mov	r0, r6
 8008aa8:	4639      	mov	r1, r7
 8008aaa:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8008aae:	f7f7 fb33 	bl	8000118 <__aeabi_dsub>
 8008ab2:	2200      	movs	r2, #0
 8008ab4:	4b63      	ldr	r3, [pc, #396]	; (8008c44 <__ieee754_rem_pio2+0x23c>)
 8008ab6:	f7f7 fce7 	bl	8000488 <__aeabi_dmul>
 8008aba:	460f      	mov	r7, r1
 8008abc:	4606      	mov	r6, r0
 8008abe:	f7f7 ff93 	bl	80009e8 <__aeabi_d2iz>
 8008ac2:	f7f7 fc77 	bl	80003b4 <__aeabi_i2d>
 8008ac6:	4602      	mov	r2, r0
 8008ac8:	460b      	mov	r3, r1
 8008aca:	4630      	mov	r0, r6
 8008acc:	4639      	mov	r1, r7
 8008ace:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8008ad2:	f7f7 fb21 	bl	8000118 <__aeabi_dsub>
 8008ad6:	2200      	movs	r2, #0
 8008ad8:	4b5a      	ldr	r3, [pc, #360]	; (8008c44 <__ieee754_rem_pio2+0x23c>)
 8008ada:	f7f7 fcd5 	bl	8000488 <__aeabi_dmul>
 8008ade:	2403      	movs	r4, #3
 8008ae0:	f04f 0900 	mov.w	r9, #0
 8008ae4:	f04f 0a00 	mov.w	sl, #0
 8008ae8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8008aec:	ad0e      	add	r5, sp, #56	; 0x38
 8008aee:	464a      	mov	r2, r9
 8008af0:	e975 0102 	ldrd	r0, r1, [r5, #-8]!
 8008af4:	4653      	mov	r3, sl
 8008af6:	4626      	mov	r6, r4
 8008af8:	3c01      	subs	r4, #1
 8008afa:	f7f7 ff2d 	bl	8000958 <__aeabi_dcmpeq>
 8008afe:	2800      	cmp	r0, #0
 8008b00:	d1f5      	bne.n	8008aee <__ieee754_rem_pio2+0xe6>
 8008b02:	2402      	movs	r4, #2
 8008b04:	4950      	ldr	r1, [pc, #320]	; (8008c48 <__ieee754_rem_pio2+0x240>)
 8008b06:	4633      	mov	r3, r6
 8008b08:	9101      	str	r1, [sp, #4]
 8008b0a:	9a02      	ldr	r2, [sp, #8]
 8008b0c:	4659      	mov	r1, fp
 8008b0e:	a808      	add	r0, sp, #32
 8008b10:	9400      	str	r4, [sp, #0]
 8008b12:	f000 fa37 	bl	8008f84 <__kernel_rem_pio2>
 8008b16:	f1b8 0f00 	cmp.w	r8, #0
 8008b1a:	4606      	mov	r6, r0
 8008b1c:	daa9      	bge.n	8008a72 <__ieee754_rem_pio2+0x6a>
 8008b1e:	f8db 0004 	ldr.w	r0, [fp, #4]
 8008b22:	f8db 2000 	ldr.w	r2, [fp]
 8008b26:	f8db 100c 	ldr.w	r1, [fp, #12]
 8008b2a:	f100 4300 	add.w	r3, r0, #2147483648	; 0x80000000
 8008b2e:	e9cb 2300 	strd	r2, r3, [fp]
 8008b32:	f8db 2008 	ldr.w	r2, [fp, #8]
 8008b36:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008b3a:	e9cb 2302 	strd	r2, r3, [fp, #8]
 8008b3e:	4276      	negs	r6, r6
 8008b40:	e797      	b.n	8008a72 <__ieee754_rem_pio2+0x6a>
 8008b42:	2200      	movs	r2, #0
 8008b44:	2300      	movs	r3, #0
 8008b46:	e9cb 4500 	strd	r4, r5, [fp]
 8008b4a:	e9cb 2302 	strd	r2, r3, [fp, #8]
 8008b4e:	2600      	movs	r6, #0
 8008b50:	e78f      	b.n	8008a72 <__ieee754_rem_pio2+0x6a>
 8008b52:	4602      	mov	r2, r0
 8008b54:	460b      	mov	r3, r1
 8008b56:	f7f7 fadf 	bl	8000118 <__aeabi_dsub>
 8008b5a:	e9cb 0102 	strd	r0, r1, [fp, #8]
 8008b5e:	e9cb 0100 	strd	r0, r1, [fp]
 8008b62:	e7f4      	b.n	8008b4e <__ieee754_rem_pio2+0x146>
 8008b64:	a32c      	add	r3, pc, #176	; (adr r3, 8008c18 <__ieee754_rem_pio2+0x210>)
 8008b66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b6a:	f7f7 fad5 	bl	8000118 <__aeabi_dsub>
 8008b6e:	a32c      	add	r3, pc, #176	; (adr r3, 8008c20 <__ieee754_rem_pio2+0x218>)
 8008b70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b74:	4606      	mov	r6, r0
 8008b76:	460f      	mov	r7, r1
 8008b78:	f7f7 face 	bl	8000118 <__aeabi_dsub>
 8008b7c:	4604      	mov	r4, r0
 8008b7e:	460d      	mov	r5, r1
 8008b80:	4622      	mov	r2, r4
 8008b82:	462b      	mov	r3, r5
 8008b84:	4630      	mov	r0, r6
 8008b86:	4639      	mov	r1, r7
 8008b88:	f7f7 fac6 	bl	8000118 <__aeabi_dsub>
 8008b8c:	a324      	add	r3, pc, #144	; (adr r3, 8008c20 <__ieee754_rem_pio2+0x218>)
 8008b8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b92:	f7f7 fac1 	bl	8000118 <__aeabi_dsub>
 8008b96:	e767      	b.n	8008a68 <__ieee754_rem_pio2+0x60>
 8008b98:	f7fe fd9e 	bl	80076d8 <fabs>
 8008b9c:	a322      	add	r3, pc, #136	; (adr r3, 8008c28 <__ieee754_rem_pio2+0x220>)
 8008b9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ba2:	4604      	mov	r4, r0
 8008ba4:	460d      	mov	r5, r1
 8008ba6:	f7f7 fc6f 	bl	8000488 <__aeabi_dmul>
 8008baa:	2200      	movs	r2, #0
 8008bac:	4b27      	ldr	r3, [pc, #156]	; (8008c4c <__ieee754_rem_pio2+0x244>)
 8008bae:	f7f7 fab5 	bl	800011c <__adddf3>
 8008bb2:	f7f7 ff19 	bl	80009e8 <__aeabi_d2iz>
 8008bb6:	4606      	mov	r6, r0
 8008bb8:	f7f7 fbfc 	bl	80003b4 <__aeabi_i2d>
 8008bbc:	4602      	mov	r2, r0
 8008bbe:	460b      	mov	r3, r1
 8008bc0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008bc4:	a310      	add	r3, pc, #64	; (adr r3, 8008c08 <__ieee754_rem_pio2+0x200>)
 8008bc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bca:	f7f7 fc5d 	bl	8000488 <__aeabi_dmul>
 8008bce:	4602      	mov	r2, r0
 8008bd0:	460b      	mov	r3, r1
 8008bd2:	4620      	mov	r0, r4
 8008bd4:	4629      	mov	r1, r5
 8008bd6:	f7f7 fa9f 	bl	8000118 <__aeabi_dsub>
 8008bda:	a30d      	add	r3, pc, #52	; (adr r3, 8008c10 <__ieee754_rem_pio2+0x208>)
 8008bdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008be0:	4681      	mov	r9, r0
 8008be2:	468a      	mov	sl, r1
 8008be4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008be8:	f7f7 fc4e 	bl	8000488 <__aeabi_dmul>
 8008bec:	2e1f      	cmp	r6, #31
 8008bee:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008bf2:	dc2f      	bgt.n	8008c54 <__ieee754_rem_pio2+0x24c>
 8008bf4:	4b16      	ldr	r3, [pc, #88]	; (8008c50 <__ieee754_rem_pio2+0x248>)
 8008bf6:	1e72      	subs	r2, r6, #1
 8008bf8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008bfc:	42bb      	cmp	r3, r7
 8008bfe:	d029      	beq.n	8008c54 <__ieee754_rem_pio2+0x24c>
 8008c00:	4602      	mov	r2, r0
 8008c02:	460b      	mov	r3, r1
 8008c04:	e09a      	b.n	8008d3c <__ieee754_rem_pio2+0x334>
 8008c06:	bf00      	nop
 8008c08:	54400000 	.word	0x54400000
 8008c0c:	3ff921fb 	.word	0x3ff921fb
 8008c10:	1a626331 	.word	0x1a626331
 8008c14:	3dd0b461 	.word	0x3dd0b461
 8008c18:	1a600000 	.word	0x1a600000
 8008c1c:	3dd0b461 	.word	0x3dd0b461
 8008c20:	2e037073 	.word	0x2e037073
 8008c24:	3ba3198a 	.word	0x3ba3198a
 8008c28:	6dc9c883 	.word	0x6dc9c883
 8008c2c:	3fe45f30 	.word	0x3fe45f30
 8008c30:	3fe921fb 	.word	0x3fe921fb
 8008c34:	4002d97b 	.word	0x4002d97b
 8008c38:	3ff921fb 	.word	0x3ff921fb
 8008c3c:	413921fb 	.word	0x413921fb
 8008c40:	7fefffff 	.word	0x7fefffff
 8008c44:	41700000 	.word	0x41700000
 8008c48:	08009c78 	.word	0x08009c78
 8008c4c:	3fe00000 	.word	0x3fe00000
 8008c50:	08009bf8 	.word	0x08009bf8
 8008c54:	153b      	asrs	r3, r7, #20
 8008c56:	9307      	str	r3, [sp, #28]
 8008c58:	4648      	mov	r0, r9
 8008c5a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008c5e:	4651      	mov	r1, sl
 8008c60:	f7f7 fa5a 	bl	8000118 <__aeabi_dsub>
 8008c64:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8008c68:	ebc3 5317 	rsb	r3, r3, r7, lsr #20
 8008c6c:	2b10      	cmp	r3, #16
 8008c6e:	4604      	mov	r4, r0
 8008c70:	460d      	mov	r5, r1
 8008c72:	dd69      	ble.n	8008d48 <__ieee754_rem_pio2+0x340>
 8008c74:	a360      	add	r3, pc, #384	; (adr r3, 8008df8 <__ieee754_rem_pio2+0x3f0>)
 8008c76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c7a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008c7e:	f7f7 fc03 	bl	8000488 <__aeabi_dmul>
 8008c82:	4604      	mov	r4, r0
 8008c84:	460d      	mov	r5, r1
 8008c86:	4622      	mov	r2, r4
 8008c88:	462b      	mov	r3, r5
 8008c8a:	4648      	mov	r0, r9
 8008c8c:	4651      	mov	r1, sl
 8008c8e:	f7f7 fa43 	bl	8000118 <__aeabi_dsub>
 8008c92:	4602      	mov	r2, r0
 8008c94:	460b      	mov	r3, r1
 8008c96:	4648      	mov	r0, r9
 8008c98:	4651      	mov	r1, sl
 8008c9a:	4691      	mov	r9, r2
 8008c9c:	469a      	mov	sl, r3
 8008c9e:	f7f7 fa3b 	bl	8000118 <__aeabi_dsub>
 8008ca2:	4622      	mov	r2, r4
 8008ca4:	462b      	mov	r3, r5
 8008ca6:	f7f7 fa37 	bl	8000118 <__aeabi_dsub>
 8008caa:	a355      	add	r3, pc, #340	; (adr r3, 8008e00 <__ieee754_rem_pio2+0x3f8>)
 8008cac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cb0:	4604      	mov	r4, r0
 8008cb2:	460d      	mov	r5, r1
 8008cb4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008cb8:	f7f7 fbe6 	bl	8000488 <__aeabi_dmul>
 8008cbc:	4622      	mov	r2, r4
 8008cbe:	462b      	mov	r3, r5
 8008cc0:	f7f7 fa2a 	bl	8000118 <__aeabi_dsub>
 8008cc4:	4602      	mov	r2, r0
 8008cc6:	460b      	mov	r3, r1
 8008cc8:	4648      	mov	r0, r9
 8008cca:	4651      	mov	r1, sl
 8008ccc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008cd0:	f7f7 fa22 	bl	8000118 <__aeabi_dsub>
 8008cd4:	9a07      	ldr	r2, [sp, #28]
 8008cd6:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8008cda:	1ad3      	subs	r3, r2, r3
 8008cdc:	2b31      	cmp	r3, #49	; 0x31
 8008cde:	4604      	mov	r4, r0
 8008ce0:	460d      	mov	r5, r1
 8008ce2:	dd31      	ble.n	8008d48 <__ieee754_rem_pio2+0x340>
 8008ce4:	a348      	add	r3, pc, #288	; (adr r3, 8008e08 <__ieee754_rem_pio2+0x400>)
 8008ce6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cea:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008cee:	f7f7 fbcb 	bl	8000488 <__aeabi_dmul>
 8008cf2:	4604      	mov	r4, r0
 8008cf4:	460d      	mov	r5, r1
 8008cf6:	4622      	mov	r2, r4
 8008cf8:	462b      	mov	r3, r5
 8008cfa:	4648      	mov	r0, r9
 8008cfc:	4651      	mov	r1, sl
 8008cfe:	f7f7 fa0b 	bl	8000118 <__aeabi_dsub>
 8008d02:	4602      	mov	r2, r0
 8008d04:	460b      	mov	r3, r1
 8008d06:	4648      	mov	r0, r9
 8008d08:	4651      	mov	r1, sl
 8008d0a:	4691      	mov	r9, r2
 8008d0c:	469a      	mov	sl, r3
 8008d0e:	f7f7 fa03 	bl	8000118 <__aeabi_dsub>
 8008d12:	4622      	mov	r2, r4
 8008d14:	462b      	mov	r3, r5
 8008d16:	f7f7 f9ff 	bl	8000118 <__aeabi_dsub>
 8008d1a:	a33d      	add	r3, pc, #244	; (adr r3, 8008e10 <__ieee754_rem_pio2+0x408>)
 8008d1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d20:	4604      	mov	r4, r0
 8008d22:	460d      	mov	r5, r1
 8008d24:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008d28:	f7f7 fbae 	bl	8000488 <__aeabi_dmul>
 8008d2c:	4622      	mov	r2, r4
 8008d2e:	462b      	mov	r3, r5
 8008d30:	f7f7 f9f2 	bl	8000118 <__aeabi_dsub>
 8008d34:	4602      	mov	r2, r0
 8008d36:	460b      	mov	r3, r1
 8008d38:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008d3c:	4648      	mov	r0, r9
 8008d3e:	4651      	mov	r1, sl
 8008d40:	f7f7 f9ea 	bl	8000118 <__aeabi_dsub>
 8008d44:	4604      	mov	r4, r0
 8008d46:	460d      	mov	r5, r1
 8008d48:	4622      	mov	r2, r4
 8008d4a:	462b      	mov	r3, r5
 8008d4c:	4648      	mov	r0, r9
 8008d4e:	4651      	mov	r1, sl
 8008d50:	e9cb 4500 	strd	r4, r5, [fp]
 8008d54:	f7f7 f9e0 	bl	8000118 <__aeabi_dsub>
 8008d58:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008d5c:	f7f7 f9dc 	bl	8000118 <__aeabi_dsub>
 8008d60:	f1b8 0f00 	cmp.w	r8, #0
 8008d64:	e9cb 0102 	strd	r0, r1, [fp, #8]
 8008d68:	f6bf ae83 	bge.w	8008a72 <__ieee754_rem_pio2+0x6a>
 8008d6c:	f105 4200 	add.w	r2, r5, #2147483648	; 0x80000000
 8008d70:	e9cb 4200 	strd	r4, r2, [fp]
 8008d74:	f101 4200 	add.w	r2, r1, #2147483648	; 0x80000000
 8008d78:	e9cb 0202 	strd	r0, r2, [fp, #8]
 8008d7c:	4276      	negs	r6, r6
 8008d7e:	e678      	b.n	8008a72 <__ieee754_rem_pio2+0x6a>
 8008d80:	f7f7 f9cc 	bl	800011c <__adddf3>
 8008d84:	4b26      	ldr	r3, [pc, #152]	; (8008e20 <__ieee754_rem_pio2+0x418>)
 8008d86:	4604      	mov	r4, r0
 8008d88:	429f      	cmp	r7, r3
 8008d8a:	460d      	mov	r5, r1
 8008d8c:	d018      	beq.n	8008dc0 <__ieee754_rem_pio2+0x3b8>
 8008d8e:	a322      	add	r3, pc, #136	; (adr r3, 8008e18 <__ieee754_rem_pio2+0x410>)
 8008d90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d94:	f7f7 f9c2 	bl	800011c <__adddf3>
 8008d98:	4602      	mov	r2, r0
 8008d9a:	460b      	mov	r3, r1
 8008d9c:	4620      	mov	r0, r4
 8008d9e:	4629      	mov	r1, r5
 8008da0:	4614      	mov	r4, r2
 8008da2:	461d      	mov	r5, r3
 8008da4:	f7f7 f9b8 	bl	8000118 <__aeabi_dsub>
 8008da8:	a31b      	add	r3, pc, #108	; (adr r3, 8008e18 <__ieee754_rem_pio2+0x410>)
 8008daa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dae:	f7f7 f9b5 	bl	800011c <__adddf3>
 8008db2:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8008db6:	e9cb 4500 	strd	r4, r5, [fp]
 8008dba:	e9cb 0102 	strd	r0, r1, [fp, #8]
 8008dbe:	e658      	b.n	8008a72 <__ieee754_rem_pio2+0x6a>
 8008dc0:	a30d      	add	r3, pc, #52	; (adr r3, 8008df8 <__ieee754_rem_pio2+0x3f0>)
 8008dc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dc6:	f7f7 f9a9 	bl	800011c <__adddf3>
 8008dca:	a30d      	add	r3, pc, #52	; (adr r3, 8008e00 <__ieee754_rem_pio2+0x3f8>)
 8008dcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dd0:	4606      	mov	r6, r0
 8008dd2:	460f      	mov	r7, r1
 8008dd4:	f7f7 f9a2 	bl	800011c <__adddf3>
 8008dd8:	4604      	mov	r4, r0
 8008dda:	460d      	mov	r5, r1
 8008ddc:	4622      	mov	r2, r4
 8008dde:	462b      	mov	r3, r5
 8008de0:	4630      	mov	r0, r6
 8008de2:	4639      	mov	r1, r7
 8008de4:	f7f7 f998 	bl	8000118 <__aeabi_dsub>
 8008de8:	a305      	add	r3, pc, #20	; (adr r3, 8008e00 <__ieee754_rem_pio2+0x3f8>)
 8008dea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dee:	f7f7 f995 	bl	800011c <__adddf3>
 8008df2:	e7de      	b.n	8008db2 <__ieee754_rem_pio2+0x3aa>
 8008df4:	f3af 8000 	nop.w
 8008df8:	1a600000 	.word	0x1a600000
 8008dfc:	3dd0b461 	.word	0x3dd0b461
 8008e00:	2e037073 	.word	0x2e037073
 8008e04:	3ba3198a 	.word	0x3ba3198a
 8008e08:	2e000000 	.word	0x2e000000
 8008e0c:	3ba3198a 	.word	0x3ba3198a
 8008e10:	252049c1 	.word	0x252049c1
 8008e14:	397b839a 	.word	0x397b839a
 8008e18:	1a626331 	.word	0x1a626331
 8008e1c:	3dd0b461 	.word	0x3dd0b461
 8008e20:	3ff921fb 	.word	0x3ff921fb
 8008e24:	00000000 	.word	0x00000000

08008e28 <scalbn>:
 8008e28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e2c:	4616      	mov	r6, r2
 8008e2e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8008e32:	4607      	mov	r7, r0
 8008e34:	4688      	mov	r8, r1
 8008e36:	460b      	mov	r3, r1
 8008e38:	bb6a      	cbnz	r2, 8008e96 <scalbn+0x6e>
 8008e3a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008e3e:	4303      	orrs	r3, r0
 8008e40:	d027      	beq.n	8008e92 <scalbn+0x6a>
 8008e42:	4b35      	ldr	r3, [pc, #212]	; (8008f18 <scalbn+0xf0>)
 8008e44:	2200      	movs	r2, #0
 8008e46:	f7f7 fb1f 	bl	8000488 <__aeabi_dmul>
 8008e4a:	4b34      	ldr	r3, [pc, #208]	; (8008f1c <scalbn+0xf4>)
 8008e4c:	4607      	mov	r7, r0
 8008e4e:	429e      	cmp	r6, r3
 8008e50:	4688      	mov	r8, r1
 8008e52:	db40      	blt.n	8008ed6 <scalbn+0xae>
 8008e54:	460b      	mov	r3, r1
 8008e56:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8008e5a:	3a36      	subs	r2, #54	; 0x36
 8008e5c:	f24c 3150 	movw	r1, #50000	; 0xc350
 8008e60:	428e      	cmp	r6, r1
 8008e62:	dc21      	bgt.n	8008ea8 <scalbn+0x80>
 8008e64:	4416      	add	r6, r2
 8008e66:	f240 72fe 	movw	r2, #2046	; 0x7fe
 8008e6a:	4296      	cmp	r6, r2
 8008e6c:	dc1c      	bgt.n	8008ea8 <scalbn+0x80>
 8008e6e:	2e00      	cmp	r6, #0
 8008e70:	dc28      	bgt.n	8008ec4 <scalbn+0x9c>
 8008e72:	f116 0f35 	cmn.w	r6, #53	; 0x35
 8008e76:	db35      	blt.n	8008ee4 <scalbn+0xbc>
 8008e78:	f023 41ff 	bic.w	r1, r3, #2139095040	; 0x7f800000
 8008e7c:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
 8008e80:	3636      	adds	r6, #54	; 0x36
 8008e82:	ea41 5506 	orr.w	r5, r1, r6, lsl #20
 8008e86:	2200      	movs	r2, #0
 8008e88:	4638      	mov	r0, r7
 8008e8a:	4629      	mov	r1, r5
 8008e8c:	4b24      	ldr	r3, [pc, #144]	; (8008f20 <scalbn+0xf8>)
 8008e8e:	f7f7 fafb 	bl	8000488 <__aeabi_dmul>
 8008e92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008e96:	f240 7cff 	movw	ip, #2047	; 0x7ff
 8008e9a:	4562      	cmp	r2, ip
 8008e9c:	d1de      	bne.n	8008e5c <scalbn+0x34>
 8008e9e:	4602      	mov	r2, r0
 8008ea0:	f7f7 f93c 	bl	800011c <__adddf3>
 8008ea4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008ea8:	a317      	add	r3, pc, #92	; (adr r3, 8008f08 <scalbn+0xe0>)
 8008eaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008eae:	461c      	mov	r4, r3
 8008eb0:	ea4f 75d8 	mov.w	r5, r8, lsr #31
 8008eb4:	f365 74df 	bfi	r4, r5, #31, #1
 8008eb8:	4621      	mov	r1, r4
 8008eba:	481a      	ldr	r0, [pc, #104]	; (8008f24 <scalbn+0xfc>)
 8008ebc:	f7f7 fae4 	bl	8000488 <__aeabi_dmul>
 8008ec0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008ec4:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8008ec8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008ecc:	4638      	mov	r0, r7
 8008ece:	ea43 5106 	orr.w	r1, r3, r6, lsl #20
 8008ed2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008ed6:	a30e      	add	r3, pc, #56	; (adr r3, 8008f10 <scalbn+0xe8>)
 8008ed8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008edc:	f7f7 fad4 	bl	8000488 <__aeabi_dmul>
 8008ee0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008ee4:	f008 4400 	and.w	r4, r8, #2147483648	; 0x80000000
 8008ee8:	f044 71d2 	orr.w	r1, r4, #27525120	; 0x1a40000
 8008eec:	f441 31b7 	orr.w	r1, r1, #93696	; 0x16e00
 8008ef0:	a307      	add	r3, pc, #28	; (adr r3, 8008f10 <scalbn+0xe8>)
 8008ef2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ef6:	480c      	ldr	r0, [pc, #48]	; (8008f28 <scalbn+0x100>)
 8008ef8:	f041 011f 	orr.w	r1, r1, #31
 8008efc:	f7f7 fac4 	bl	8000488 <__aeabi_dmul>
 8008f00:	e7c7      	b.n	8008e92 <scalbn+0x6a>
 8008f02:	bf00      	nop
 8008f04:	f3af 8000 	nop.w
 8008f08:	8800759c 	.word	0x8800759c
 8008f0c:	7e37e43c 	.word	0x7e37e43c
 8008f10:	c2f8f359 	.word	0xc2f8f359
 8008f14:	01a56e1f 	.word	0x01a56e1f
 8008f18:	43500000 	.word	0x43500000
 8008f1c:	ffff3cb0 	.word	0xffff3cb0
 8008f20:	3c900000 	.word	0x3c900000
 8008f24:	8800759c 	.word	0x8800759c
 8008f28:	c2f8f359 	.word	0xc2f8f359

08008f2c <with_errno>:
 8008f2c:	b5d0      	push	{r4, r6, r7, lr}
 8008f2e:	4606      	mov	r6, r0
 8008f30:	460f      	mov	r7, r1
 8008f32:	4614      	mov	r4, r2
 8008f34:	f7fe f98a 	bl	800724c <__errno>
 8008f38:	4603      	mov	r3, r0
 8008f3a:	4639      	mov	r1, r7
 8008f3c:	4630      	mov	r0, r6
 8008f3e:	601c      	str	r4, [r3, #0]
 8008f40:	bdd0      	pop	{r4, r6, r7, pc}
 8008f42:	bf00      	nop

08008f44 <xflow>:
 8008f44:	b510      	push	{r4, lr}
 8008f46:	4604      	mov	r4, r0
 8008f48:	4619      	mov	r1, r3
 8008f4a:	4610      	mov	r0, r2
 8008f4c:	b082      	sub	sp, #8
 8008f4e:	b10c      	cbz	r4, 8008f54 <xflow+0x10>
 8008f50:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8008f54:	e9cd 2300 	strd	r2, r3, [sp]
 8008f58:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008f5c:	f7f7 fa94 	bl	8000488 <__aeabi_dmul>
 8008f60:	2222      	movs	r2, #34	; 0x22
 8008f62:	b002      	add	sp, #8
 8008f64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008f68:	f7ff bfe0 	b.w	8008f2c <with_errno>

08008f6c <__math_uflow>:
 8008f6c:	2200      	movs	r2, #0
 8008f6e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008f72:	f7ff bfe7 	b.w	8008f44 <xflow>
 8008f76:	bf00      	nop

08008f78 <__math_oflow>:
 8008f78:	2200      	movs	r2, #0
 8008f7a:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8008f7e:	f7ff bfe1 	b.w	8008f44 <xflow>
 8008f82:	bf00      	nop

08008f84 <__kernel_rem_pio2>:
 8008f84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f88:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 8008f8c:	4cba      	ldr	r4, [pc, #744]	; (8009278 <__kernel_rem_pio2+0x2f4>)
 8008f8e:	9da4      	ldr	r5, [sp, #656]	; 0x290
 8008f90:	469e      	mov	lr, r3
 8008f92:	f854 4025 	ldr.w	r4, [r4, r5, lsl #2]
 8008f96:	3b01      	subs	r3, #1
 8008f98:	f112 0f14 	cmn.w	r2, #20
 8008f9c:	4682      	mov	sl, r0
 8008f9e:	9405      	str	r4, [sp, #20]
 8008fa0:	910c      	str	r1, [sp, #48]	; 0x30
 8008fa2:	9303      	str	r3, [sp, #12]
 8008fa4:	f2c0 8333 	blt.w	800960e <__kernel_rem_pio2+0x68a>
 8008fa8:	49b4      	ldr	r1, [pc, #720]	; (800927c <__kernel_rem_pio2+0x2f8>)
 8008faa:	1ed3      	subs	r3, r2, #3
 8008fac:	fb81 0103 	smull	r0, r1, r1, r3
 8008fb0:	17db      	asrs	r3, r3, #31
 8008fb2:	ebc3 03a1 	rsb	r3, r3, r1, asr #2
 8008fb6:	9307      	str	r3, [sp, #28]
 8008fb8:	3301      	adds	r3, #1
 8008fba:	eba3 0383 	sub.w	r3, r3, r3, lsl #2
 8008fbe:	00db      	lsls	r3, r3, #3
 8008fc0:	18d3      	adds	r3, r2, r3
 8008fc2:	9a07      	ldr	r2, [sp, #28]
 8008fc4:	930d      	str	r3, [sp, #52]	; 0x34
 8008fc6:	f10e 33ff 	add.w	r3, lr, #4294967295	; 0xffffffff
 8008fca:	1ad7      	subs	r7, r2, r3
 8008fcc:	9a05      	ldr	r2, [sp, #20]
 8008fce:	eb12 0903 	adds.w	r9, r2, r3
 8008fd2:	d41c      	bmi.n	800900e <__kernel_rem_pio2+0x8a>
 8008fd4:	f109 0901 	add.w	r9, r9, #1
 8008fd8:	2400      	movs	r4, #0
 8008fda:	2500      	movs	r5, #0
 8008fdc:	46f3      	mov	fp, lr
 8008fde:	9ea5      	ldr	r6, [sp, #660]	; 0x294
 8008fe0:	44b9      	add	r9, r7
 8008fe2:	f10d 0888 	add.w	r8, sp, #136	; 0x88
 8008fe6:	e008      	b.n	8008ffa <__kernel_rem_pio2+0x76>
 8008fe8:	f856 0027 	ldr.w	r0, [r6, r7, lsl #2]
 8008fec:	f7f7 f9e2 	bl	80003b4 <__aeabi_i2d>
 8008ff0:	3701      	adds	r7, #1
 8008ff2:	454f      	cmp	r7, r9
 8008ff4:	e8e8 0102 	strd	r0, r1, [r8], #8
 8008ff8:	d008      	beq.n	800900c <__kernel_rem_pio2+0x88>
 8008ffa:	2f00      	cmp	r7, #0
 8008ffc:	daf4      	bge.n	8008fe8 <__kernel_rem_pio2+0x64>
 8008ffe:	4620      	mov	r0, r4
 8009000:	4629      	mov	r1, r5
 8009002:	3701      	adds	r7, #1
 8009004:	454f      	cmp	r7, r9
 8009006:	e8e8 0102 	strd	r0, r1, [r8], #8
 800900a:	d1f6      	bne.n	8008ffa <__kernel_rem_pio2+0x76>
 800900c:	46de      	mov	lr, fp
 800900e:	9b05      	ldr	r3, [sp, #20]
 8009010:	2b00      	cmp	r3, #0
 8009012:	f1aa 0308 	sub.w	r3, sl, #8
 8009016:	9304      	str	r3, [sp, #16]
 8009018:	bfb8      	it	lt
 800901a:	ea4f 06ce 	movlt.w	r6, lr, lsl #3
 800901e:	db37      	blt.n	8009090 <__kernel_rem_pio2+0x10c>
 8009020:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8009024:	eb03 08ce 	add.w	r8, r3, lr, lsl #3
 8009028:	464b      	mov	r3, r9
 800902a:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 800902e:	46d9      	mov	r9, fp
 8009030:	469b      	mov	fp, r3
 8009032:	aa22      	add	r2, sp, #136	; 0x88
 8009034:	eb02 0ace 	add.w	sl, r2, lr, lsl #3
 8009038:	9a05      	ldr	r2, [sp, #20]
 800903a:	ea4f 06ce 	mov.w	r6, lr, lsl #3
 800903e:	4472      	add	r2, lr
 8009040:	9201      	str	r2, [sp, #4]
 8009042:	f8cd e008 	str.w	lr, [sp, #8]
 8009046:	9606      	str	r6, [sp, #24]
 8009048:	9b03      	ldr	r3, [sp, #12]
 800904a:	2b00      	cmp	r3, #0
 800904c:	f2c0 81a1 	blt.w	8009392 <__kernel_rem_pio2+0x40e>
 8009050:	4657      	mov	r7, sl
 8009052:	2400      	movs	r4, #0
 8009054:	2500      	movs	r5, #0
 8009056:	9e04      	ldr	r6, [sp, #16]
 8009058:	e977 2302 	ldrd	r2, r3, [r7, #-8]!
 800905c:	e9f6 0102 	ldrd	r0, r1, [r6, #8]!
 8009060:	f7f7 fa12 	bl	8000488 <__aeabi_dmul>
 8009064:	4602      	mov	r2, r0
 8009066:	460b      	mov	r3, r1
 8009068:	4620      	mov	r0, r4
 800906a:	4629      	mov	r1, r5
 800906c:	f7f7 f856 	bl	800011c <__adddf3>
 8009070:	4546      	cmp	r6, r8
 8009072:	4604      	mov	r4, r0
 8009074:	460d      	mov	r5, r1
 8009076:	d1ef      	bne.n	8009058 <__kernel_rem_pio2+0xd4>
 8009078:	9b01      	ldr	r3, [sp, #4]
 800907a:	f10b 0b01 	add.w	fp, fp, #1
 800907e:	459b      	cmp	fp, r3
 8009080:	e8e9 4502 	strd	r4, r5, [r9], #8
 8009084:	f10a 0a08 	add.w	sl, sl, #8
 8009088:	d1de      	bne.n	8009048 <__kernel_rem_pio2+0xc4>
 800908a:	f8dd e008 	ldr.w	lr, [sp, #8]
 800908e:	9e06      	ldr	r6, [sp, #24]
 8009090:	9a05      	ldr	r2, [sp, #20]
 8009092:	9b04      	ldr	r3, [sp, #16]
 8009094:	4693      	mov	fp, r2
 8009096:	4433      	add	r3, r6
 8009098:	9308      	str	r3, [sp, #32]
 800909a:	ab0e      	add	r3, sp, #56	; 0x38
 800909c:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 80090a0:	3b04      	subs	r3, #4
 80090a2:	9309      	str	r3, [sp, #36]	; 0x24
 80090a4:	ab0e      	add	r3, sp, #56	; 0x38
 80090a6:	eb03 0682 	add.w	r6, r3, r2, lsl #2
 80090aa:	e9cd 6e0a 	strd	r6, lr, [sp, #40]	; 0x28
 80090ae:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80090b0:	ab9a      	add	r3, sp, #616	; 0x268
 80090b2:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80090b6:	f1bb 0f00 	cmp.w	fp, #0
 80090ba:	e953 4528 	ldrd	r4, r5, [r3, #-160]	; 0xa0
 80090be:	dd2b      	ble.n	8009118 <__kernel_rem_pio2+0x194>
 80090c0:	f50d 7ae4 	add.w	sl, sp, #456	; 0x1c8
 80090c4:	f10d 0938 	add.w	r9, sp, #56	; 0x38
 80090c8:	eb0a 08cb 	add.w	r8, sl, fp, lsl #3
 80090cc:	9701      	str	r7, [sp, #4]
 80090ce:	2200      	movs	r2, #0
 80090d0:	4b6b      	ldr	r3, [pc, #428]	; (8009280 <__kernel_rem_pio2+0x2fc>)
 80090d2:	4620      	mov	r0, r4
 80090d4:	4629      	mov	r1, r5
 80090d6:	f7f7 f9d7 	bl	8000488 <__aeabi_dmul>
 80090da:	f7f7 fc85 	bl	80009e8 <__aeabi_d2iz>
 80090de:	f7f7 f969 	bl	80003b4 <__aeabi_i2d>
 80090e2:	2200      	movs	r2, #0
 80090e4:	4b67      	ldr	r3, [pc, #412]	; (8009284 <__kernel_rem_pio2+0x300>)
 80090e6:	4606      	mov	r6, r0
 80090e8:	460f      	mov	r7, r1
 80090ea:	f7f7 f9cd 	bl	8000488 <__aeabi_dmul>
 80090ee:	4602      	mov	r2, r0
 80090f0:	460b      	mov	r3, r1
 80090f2:	4620      	mov	r0, r4
 80090f4:	4629      	mov	r1, r5
 80090f6:	f7f7 f80f 	bl	8000118 <__aeabi_dsub>
 80090fa:	f7f7 fc75 	bl	80009e8 <__aeabi_d2iz>
 80090fe:	e978 2302 	ldrd	r2, r3, [r8, #-8]!
 8009102:	f849 0b04 	str.w	r0, [r9], #4
 8009106:	4639      	mov	r1, r7
 8009108:	4630      	mov	r0, r6
 800910a:	f7f7 f807 	bl	800011c <__adddf3>
 800910e:	45d0      	cmp	r8, sl
 8009110:	4604      	mov	r4, r0
 8009112:	460d      	mov	r5, r1
 8009114:	d1db      	bne.n	80090ce <__kernel_rem_pio2+0x14a>
 8009116:	9f01      	ldr	r7, [sp, #4]
 8009118:	4620      	mov	r0, r4
 800911a:	4629      	mov	r1, r5
 800911c:	463a      	mov	r2, r7
 800911e:	f7ff fe83 	bl	8008e28 <scalbn>
 8009122:	2200      	movs	r2, #0
 8009124:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8009128:	4604      	mov	r4, r0
 800912a:	460d      	mov	r5, r1
 800912c:	f7f7 f9ac 	bl	8000488 <__aeabi_dmul>
 8009130:	f000 fb36 	bl	80097a0 <floor>
 8009134:	2200      	movs	r2, #0
 8009136:	4b54      	ldr	r3, [pc, #336]	; (8009288 <__kernel_rem_pio2+0x304>)
 8009138:	f7f7 f9a6 	bl	8000488 <__aeabi_dmul>
 800913c:	4602      	mov	r2, r0
 800913e:	460b      	mov	r3, r1
 8009140:	4620      	mov	r0, r4
 8009142:	4629      	mov	r1, r5
 8009144:	f7f6 ffe8 	bl	8000118 <__aeabi_dsub>
 8009148:	460d      	mov	r5, r1
 800914a:	4604      	mov	r4, r0
 800914c:	f7f7 fc4c 	bl	80009e8 <__aeabi_d2iz>
 8009150:	4606      	mov	r6, r0
 8009152:	f7f7 f92f 	bl	80003b4 <__aeabi_i2d>
 8009156:	4602      	mov	r2, r0
 8009158:	460b      	mov	r3, r1
 800915a:	4620      	mov	r0, r4
 800915c:	4629      	mov	r1, r5
 800915e:	f7f6 ffdb 	bl	8000118 <__aeabi_dsub>
 8009162:	2f00      	cmp	r7, #0
 8009164:	4680      	mov	r8, r0
 8009166:	4689      	mov	r9, r1
 8009168:	f340 8090 	ble.w	800928c <__kernel_rem_pio2+0x308>
 800916c:	f10b 30ff 	add.w	r0, fp, #4294967295	; 0xffffffff
 8009170:	ab0e      	add	r3, sp, #56	; 0x38
 8009172:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8009176:	f1c7 0218 	rsb	r2, r7, #24
 800917a:	fa43 f102 	asr.w	r1, r3, r2
 800917e:	fa01 f202 	lsl.w	r2, r1, r2
 8009182:	1a9b      	subs	r3, r3, r2
 8009184:	aa0e      	add	r2, sp, #56	; 0x38
 8009186:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 800918a:	f1c7 0217 	rsb	r2, r7, #23
 800918e:	fa43 f502 	asr.w	r5, r3, r2
 8009192:	2d00      	cmp	r5, #0
 8009194:	440e      	add	r6, r1
 8009196:	f300 80e4 	bgt.w	8009362 <__kernel_rem_pio2+0x3de>
 800919a:	2200      	movs	r2, #0
 800919c:	2300      	movs	r3, #0
 800919e:	4640      	mov	r0, r8
 80091a0:	4649      	mov	r1, r9
 80091a2:	f7f7 fbd9 	bl	8000958 <__aeabi_dcmpeq>
 80091a6:	2800      	cmp	r0, #0
 80091a8:	f000 8241 	beq.w	800962e <__kernel_rem_pio2+0x6aa>
 80091ac:	9b05      	ldr	r3, [sp, #20]
 80091ae:	459b      	cmp	fp, r3
 80091b0:	dd0d      	ble.n	80091ce <__kernel_rem_pio2+0x24a>
 80091b2:	2200      	movs	r2, #0
 80091b4:	ab0e      	add	r3, sp, #56	; 0x38
 80091b6:	980a      	ldr	r0, [sp, #40]	; 0x28
 80091b8:	eb03 038b 	add.w	r3, r3, fp, lsl #2
 80091bc:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80091c0:	4283      	cmp	r3, r0
 80091c2:	ea42 0201 	orr.w	r2, r2, r1
 80091c6:	d1f9      	bne.n	80091bc <__kernel_rem_pio2+0x238>
 80091c8:	2a00      	cmp	r2, #0
 80091ca:	f040 80e8 	bne.w	800939e <__kernel_rem_pio2+0x41a>
 80091ce:	9b05      	ldr	r3, [sp, #20]
 80091d0:	aa0e      	add	r2, sp, #56	; 0x38
 80091d2:	3b01      	subs	r3, #1
 80091d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80091d8:	2b00      	cmp	r3, #0
 80091da:	f040 80d6 	bne.w	800938a <__kernel_rem_pio2+0x406>
 80091de:	2301      	movs	r3, #1
 80091e0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80091e2:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 80091e6:	3301      	adds	r3, #1
 80091e8:	2900      	cmp	r1, #0
 80091ea:	d0fa      	beq.n	80091e2 <__kernel_rem_pio2+0x25e>
 80091ec:	445b      	add	r3, fp
 80091ee:	f10b 0801 	add.w	r8, fp, #1
 80091f2:	9a07      	ldr	r2, [sp, #28]
 80091f4:	a922      	add	r1, sp, #136	; 0x88
 80091f6:	eb02 0a08 	add.w	sl, r2, r8
 80091fa:	f10a 4a80 	add.w	sl, sl, #1073741824	; 0x40000000
 80091fe:	9aa5      	ldr	r2, [sp, #660]	; 0x294
 8009200:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8009204:	eb02 068a 	add.w	r6, r2, sl, lsl #2
 8009208:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800920a:	f8dd a020 	ldr.w	sl, [sp, #32]
 800920e:	445a      	add	r2, fp
 8009210:	eb01 09c2 	add.w	r9, r1, r2, lsl #3
 8009214:	aa72      	add	r2, sp, #456	; 0x1c8
 8009216:	eb02 0bcb 	add.w	fp, r2, fp, lsl #3
 800921a:	9706      	str	r7, [sp, #24]
 800921c:	9302      	str	r3, [sp, #8]
 800921e:	9601      	str	r6, [sp, #4]
 8009220:	9b01      	ldr	r3, [sp, #4]
 8009222:	f853 0f04 	ldr.w	r0, [r3, #4]!
 8009226:	9301      	str	r3, [sp, #4]
 8009228:	f7f7 f8c4 	bl	80003b4 <__aeabi_i2d>
 800922c:	9b03      	ldr	r3, [sp, #12]
 800922e:	e8e9 0102 	strd	r0, r1, [r9], #8
 8009232:	2b00      	cmp	r3, #0
 8009234:	db1d      	blt.n	8009272 <__kernel_rem_pio2+0x2ee>
 8009236:	464f      	mov	r7, r9
 8009238:	2400      	movs	r4, #0
 800923a:	2500      	movs	r5, #0
 800923c:	9e04      	ldr	r6, [sp, #16]
 800923e:	e977 2302 	ldrd	r2, r3, [r7, #-8]!
 8009242:	e9f6 0102 	ldrd	r0, r1, [r6, #8]!
 8009246:	f7f7 f91f 	bl	8000488 <__aeabi_dmul>
 800924a:	4602      	mov	r2, r0
 800924c:	460b      	mov	r3, r1
 800924e:	4620      	mov	r0, r4
 8009250:	4629      	mov	r1, r5
 8009252:	f7f6 ff63 	bl	800011c <__adddf3>
 8009256:	4556      	cmp	r6, sl
 8009258:	4604      	mov	r4, r0
 800925a:	460d      	mov	r5, r1
 800925c:	d1ef      	bne.n	800923e <__kernel_rem_pio2+0x2ba>
 800925e:	9b02      	ldr	r3, [sp, #8]
 8009260:	f108 0801 	add.w	r8, r8, #1
 8009264:	4598      	cmp	r8, r3
 8009266:	e9eb 4502 	strd	r4, r5, [fp, #8]!
 800926a:	ddd9      	ble.n	8009220 <__kernel_rem_pio2+0x29c>
 800926c:	469b      	mov	fp, r3
 800926e:	9f06      	ldr	r7, [sp, #24]
 8009270:	e71e      	b.n	80090b0 <__kernel_rem_pio2+0x12c>
 8009272:	2400      	movs	r4, #0
 8009274:	2500      	movs	r5, #0
 8009276:	e7f2      	b.n	800925e <__kernel_rem_pio2+0x2da>
 8009278:	08009dc0 	.word	0x08009dc0
 800927c:	2aaaaaab 	.word	0x2aaaaaab
 8009280:	3e700000 	.word	0x3e700000
 8009284:	41700000 	.word	0x41700000
 8009288:	40200000 	.word	0x40200000
 800928c:	d160      	bne.n	8009350 <__kernel_rem_pio2+0x3cc>
 800928e:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
 8009292:	aa0e      	add	r2, sp, #56	; 0x38
 8009294:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
 8009298:	15ed      	asrs	r5, r5, #23
 800929a:	2d00      	cmp	r5, #0
 800929c:	f77f af7d 	ble.w	800919a <__kernel_rem_pio2+0x216>
 80092a0:	f1bb 0f00 	cmp.w	fp, #0
 80092a4:	f106 0601 	add.w	r6, r6, #1
 80092a8:	f340 824a 	ble.w	8009740 <__kernel_rem_pio2+0x7bc>
 80092ac:	2100      	movs	r1, #0
 80092ae:	f06f 4c7f 	mvn.w	ip, #4278190080	; 0xff000000
 80092b2:	460c      	mov	r4, r1
 80092b4:	46ae      	mov	lr, r5
 80092b6:	a80e      	add	r0, sp, #56	; 0x38
 80092b8:	e00f      	b.n	80092da <__kernel_rem_pio2+0x356>
 80092ba:	3101      	adds	r1, #1
 80092bc:	458b      	cmp	fp, r1
 80092be:	f842 5c04 	str.w	r5, [r2, #-4]
 80092c2:	dd69      	ble.n	8009398 <__kernel_rem_pio2+0x414>
 80092c4:	6813      	ldr	r3, [r2, #0]
 80092c6:	3008      	adds	r0, #8
 80092c8:	3101      	adds	r1, #1
 80092ca:	ebac 0303 	sub.w	r3, ip, r3
 80092ce:	458b      	cmp	fp, r1
 80092d0:	f04f 0401 	mov.w	r4, #1
 80092d4:	f840 3c04 	str.w	r3, [r0, #-4]
 80092d8:	dd0b      	ble.n	80092f2 <__kernel_rem_pio2+0x36e>
 80092da:	4602      	mov	r2, r0
 80092dc:	f852 3b04 	ldr.w	r3, [r2], #4
 80092e0:	bba4      	cbnz	r4, 800934c <__kernel_rem_pio2+0x3c8>
 80092e2:	f1c3 7580 	rsb	r5, r3, #16777216	; 0x1000000
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d1e7      	bne.n	80092ba <__kernel_rem_pio2+0x336>
 80092ea:	3101      	adds	r1, #1
 80092ec:	458b      	cmp	fp, r1
 80092ee:	4610      	mov	r0, r2
 80092f0:	dcf3      	bgt.n	80092da <__kernel_rem_pio2+0x356>
 80092f2:	4675      	mov	r5, lr
 80092f4:	2f00      	cmp	r7, #0
 80092f6:	dd0d      	ble.n	8009314 <__kernel_rem_pio2+0x390>
 80092f8:	2f01      	cmp	r7, #1
 80092fa:	d03b      	beq.n	8009374 <__kernel_rem_pio2+0x3f0>
 80092fc:	2f02      	cmp	r7, #2
 80092fe:	d109      	bne.n	8009314 <__kernel_rem_pio2+0x390>
 8009300:	f10b 32ff 	add.w	r2, fp, #4294967295	; 0xffffffff
 8009304:	ab0e      	add	r3, sp, #56	; 0x38
 8009306:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800930a:	a90e      	add	r1, sp, #56	; 0x38
 800930c:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8009310:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8009314:	2d02      	cmp	r5, #2
 8009316:	f47f af40 	bne.w	800919a <__kernel_rem_pio2+0x216>
 800931a:	4642      	mov	r2, r8
 800931c:	464b      	mov	r3, r9
 800931e:	2000      	movs	r0, #0
 8009320:	49bd      	ldr	r1, [pc, #756]	; (8009618 <__kernel_rem_pio2+0x694>)
 8009322:	f7f6 fef9 	bl	8000118 <__aeabi_dsub>
 8009326:	4680      	mov	r8, r0
 8009328:	4689      	mov	r9, r1
 800932a:	2c00      	cmp	r4, #0
 800932c:	f43f af35 	beq.w	800919a <__kernel_rem_pio2+0x216>
 8009330:	463a      	mov	r2, r7
 8009332:	2000      	movs	r0, #0
 8009334:	49b8      	ldr	r1, [pc, #736]	; (8009618 <__kernel_rem_pio2+0x694>)
 8009336:	f7ff fd77 	bl	8008e28 <scalbn>
 800933a:	4602      	mov	r2, r0
 800933c:	460b      	mov	r3, r1
 800933e:	4640      	mov	r0, r8
 8009340:	4649      	mov	r1, r9
 8009342:	f7f6 fee9 	bl	8000118 <__aeabi_dsub>
 8009346:	4680      	mov	r8, r0
 8009348:	4689      	mov	r9, r1
 800934a:	e726      	b.n	800919a <__kernel_rem_pio2+0x216>
 800934c:	4610      	mov	r0, r2
 800934e:	e7bb      	b.n	80092c8 <__kernel_rem_pio2+0x344>
 8009350:	2200      	movs	r2, #0
 8009352:	4bb2      	ldr	r3, [pc, #712]	; (800961c <__kernel_rem_pio2+0x698>)
 8009354:	f7f7 fb1e 	bl	8000994 <__aeabi_dcmpge>
 8009358:	2800      	cmp	r0, #0
 800935a:	f040 8146 	bne.w	80095ea <__kernel_rem_pio2+0x666>
 800935e:	4605      	mov	r5, r0
 8009360:	e71b      	b.n	800919a <__kernel_rem_pio2+0x216>
 8009362:	f1bb 0f00 	cmp.w	fp, #0
 8009366:	bfd8      	it	le
 8009368:	2400      	movle	r4, #0
 800936a:	f106 0601 	add.w	r6, r6, #1
 800936e:	dc9d      	bgt.n	80092ac <__kernel_rem_pio2+0x328>
 8009370:	2f01      	cmp	r7, #1
 8009372:	d1c3      	bne.n	80092fc <__kernel_rem_pio2+0x378>
 8009374:	f10b 32ff 	add.w	r2, fp, #4294967295	; 0xffffffff
 8009378:	ab0e      	add	r3, sp, #56	; 0x38
 800937a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800937e:	a90e      	add	r1, sp, #56	; 0x38
 8009380:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8009384:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8009388:	e7c4      	b.n	8009314 <__kernel_rem_pio2+0x390>
 800938a:	f10b 0801 	add.w	r8, fp, #1
 800938e:	4643      	mov	r3, r8
 8009390:	e72f      	b.n	80091f2 <__kernel_rem_pio2+0x26e>
 8009392:	2400      	movs	r4, #0
 8009394:	2500      	movs	r5, #0
 8009396:	e66f      	b.n	8009078 <__kernel_rem_pio2+0xf4>
 8009398:	4675      	mov	r5, lr
 800939a:	2401      	movs	r4, #1
 800939c:	e7aa      	b.n	80092f4 <__kernel_rem_pio2+0x370>
 800939e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80093a0:	f10b 34ff 	add.w	r4, fp, #4294967295	; 0xffffffff
 80093a4:	f1a3 0218 	sub.w	r2, r3, #24
 80093a8:	ab0e      	add	r3, sp, #56	; 0x38
 80093aa:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80093ae:	e9cd 5603 	strd	r5, r6, [sp, #12]
 80093b2:	920d      	str	r2, [sp, #52]	; 0x34
 80093b4:	b963      	cbnz	r3, 80093d0 <__kernel_rem_pio2+0x44c>
 80093b6:	f10b 4380 	add.w	r3, fp, #1073741824	; 0x40000000
 80093ba:	3b01      	subs	r3, #1
 80093bc:	a90e      	add	r1, sp, #56	; 0x38
 80093be:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 80093c2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80093c6:	3c01      	subs	r4, #1
 80093c8:	3a18      	subs	r2, #24
 80093ca:	2900      	cmp	r1, #0
 80093cc:	d0f9      	beq.n	80093c2 <__kernel_rem_pio2+0x43e>
 80093ce:	920d      	str	r2, [sp, #52]	; 0x34
 80093d0:	2000      	movs	r0, #0
 80093d2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80093d4:	4990      	ldr	r1, [pc, #576]	; (8009618 <__kernel_rem_pio2+0x694>)
 80093d6:	f7ff fd27 	bl	8008e28 <scalbn>
 80093da:	2c00      	cmp	r4, #0
 80093dc:	4680      	mov	r8, r0
 80093de:	4689      	mov	r9, r1
 80093e0:	f2c0 81b4 	blt.w	800974c <__kernel_rem_pio2+0x7c8>
 80093e4:	f104 0a01 	add.w	sl, r4, #1
 80093e8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80093ec:	2600      	movs	r6, #0
 80093ee:	4693      	mov	fp, r2
 80093f0:	ab0e      	add	r3, sp, #56	; 0x38
 80093f2:	eb03 058a 	add.w	r5, r3, sl, lsl #2
 80093f6:	4f8a      	ldr	r7, [pc, #552]	; (8009620 <__kernel_rem_pio2+0x69c>)
 80093f8:	ab72      	add	r3, sp, #456	; 0x1c8
 80093fa:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 80093fe:	f855 0d04 	ldr.w	r0, [r5, #-4]!
 8009402:	f7f6 ffd7 	bl	80003b4 <__aeabi_i2d>
 8009406:	4642      	mov	r2, r8
 8009408:	464b      	mov	r3, r9
 800940a:	f7f7 f83d 	bl	8000488 <__aeabi_dmul>
 800940e:	463b      	mov	r3, r7
 8009410:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 8009414:	4632      	mov	r2, r6
 8009416:	4640      	mov	r0, r8
 8009418:	4649      	mov	r1, r9
 800941a:	f7f7 f835 	bl	8000488 <__aeabi_dmul>
 800941e:	ab0e      	add	r3, sp, #56	; 0x38
 8009420:	429d      	cmp	r5, r3
 8009422:	4680      	mov	r8, r0
 8009424:	4689      	mov	r9, r1
 8009426:	d1ea      	bne.n	80093fe <__kernel_rem_pio2+0x47a>
 8009428:	465a      	mov	r2, fp
 800942a:	f1ab 0308 	sub.w	r3, fp, #8
 800942e:	f04f 0900 	mov.w	r9, #0
 8009432:	af4a      	add	r7, sp, #296	; 0x128
 8009434:	a972      	add	r1, sp, #456	; 0x1c8
 8009436:	eb01 0a03 	add.w	sl, r1, r3
 800943a:	46a3      	mov	fp, r4
 800943c:	463b      	mov	r3, r7
 800943e:	e9cd 4206 	strd	r4, r2, [sp, #24]
 8009442:	4652      	mov	r2, sl
 8009444:	46ca      	mov	sl, r9
 8009446:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800944a:	9705      	str	r7, [sp, #20]
 800944c:	f1b9 0f00 	cmp.w	r9, #0
 8009450:	f2c0 80ea 	blt.w	8009628 <__kernel_rem_pio2+0x6a4>
 8009454:	e9cd 3b01 	strd	r3, fp, [sp, #4]
 8009458:	4690      	mov	r8, r2
 800945a:	2600      	movs	r6, #0
 800945c:	2400      	movs	r4, #0
 800945e:	2500      	movs	r5, #0
 8009460:	4693      	mov	fp, r2
 8009462:	4f70      	ldr	r7, [pc, #448]	; (8009624 <__kernel_rem_pio2+0x6a0>)
 8009464:	e001      	b.n	800946a <__kernel_rem_pio2+0x4e6>
 8009466:	4556      	cmp	r6, sl
 8009468:	dc10      	bgt.n	800948c <__kernel_rem_pio2+0x508>
 800946a:	e9f7 2302 	ldrd	r2, r3, [r7, #8]!
 800946e:	e8f8 0102 	ldrd	r0, r1, [r8], #8
 8009472:	f7f7 f809 	bl	8000488 <__aeabi_dmul>
 8009476:	4602      	mov	r2, r0
 8009478:	460b      	mov	r3, r1
 800947a:	4620      	mov	r0, r4
 800947c:	4629      	mov	r1, r5
 800947e:	f7f6 fe4d 	bl	800011c <__adddf3>
 8009482:	3601      	adds	r6, #1
 8009484:	45b1      	cmp	r9, r6
 8009486:	4604      	mov	r4, r0
 8009488:	460d      	mov	r5, r1
 800948a:	daec      	bge.n	8009466 <__kernel_rem_pio2+0x4e2>
 800948c:	465a      	mov	r2, fp
 800948e:	9b01      	ldr	r3, [sp, #4]
 8009490:	f8dd b008 	ldr.w	fp, [sp, #8]
 8009494:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8009498:	f1bb 3fff 	cmp.w	fp, #4294967295	; 0xffffffff
 800949c:	e8e3 4502 	strd	r4, r5, [r3], #8
 80094a0:	f10a 0a01 	add.w	sl, sl, #1
 80094a4:	f1a2 0208 	sub.w	r2, r2, #8
 80094a8:	d1d0      	bne.n	800944c <__kernel_rem_pio2+0x4c8>
 80094aa:	e9dd 4206 	ldrd	r4, r2, [sp, #24]
 80094ae:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 80094b0:	9f05      	ldr	r7, [sp, #20]
 80094b2:	2b02      	cmp	r3, #2
 80094b4:	dc1b      	bgt.n	80094ee <__kernel_rem_pio2+0x56a>
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	f300 80ea 	bgt.w	8009690 <__kernel_rem_pio2+0x70c>
 80094bc:	d110      	bne.n	80094e0 <__kernel_rem_pio2+0x55c>
 80094be:	2000      	movs	r0, #0
 80094c0:	2100      	movs	r1, #0
 80094c2:	18bc      	adds	r4, r7, r2
 80094c4:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80094c8:	f7f6 fe28 	bl	800011c <__adddf3>
 80094cc:	42a7      	cmp	r7, r4
 80094ce:	d1f9      	bne.n	80094c4 <__kernel_rem_pio2+0x540>
 80094d0:	9b03      	ldr	r3, [sp, #12]
 80094d2:	b113      	cbz	r3, 80094da <__kernel_rem_pio2+0x556>
 80094d4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80094d8:	4619      	mov	r1, r3
 80094da:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80094dc:	e9c3 0100 	strd	r0, r1, [r3]
 80094e0:	9b04      	ldr	r3, [sp, #16]
 80094e2:	f003 0007 	and.w	r0, r3, #7
 80094e6:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 80094ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80094ee:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 80094f0:	2b03      	cmp	r3, #3
 80094f2:	d1f5      	bne.n	80094e0 <__kernel_rem_pio2+0x55c>
 80094f4:	2c00      	cmp	r4, #0
 80094f6:	f000 8138 	beq.w	800976a <__kernel_rem_pio2+0x7e6>
 80094fa:	eb07 05c4 	add.w	r5, r7, r4, lsl #3
 80094fe:	00e6      	lsls	r6, r4, #3
 8009500:	e9cd 5401 	strd	r5, r4, [sp, #4]
 8009504:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009508:	46a8      	mov	r8, r5
 800950a:	e9cd 6505 	strd	r6, r5, [sp, #20]
 800950e:	4614      	mov	r4, r2
 8009510:	461d      	mov	r5, r3
 8009512:	46b9      	mov	r9, r7
 8009514:	e958 6702 	ldrd	r6, r7, [r8, #-8]
 8009518:	4620      	mov	r0, r4
 800951a:	4629      	mov	r1, r5
 800951c:	4632      	mov	r2, r6
 800951e:	463b      	mov	r3, r7
 8009520:	f7f6 fdfc 	bl	800011c <__adddf3>
 8009524:	46a2      	mov	sl, r4
 8009526:	46ab      	mov	fp, r5
 8009528:	4604      	mov	r4, r0
 800952a:	460d      	mov	r5, r1
 800952c:	4622      	mov	r2, r4
 800952e:	462b      	mov	r3, r5
 8009530:	4630      	mov	r0, r6
 8009532:	4639      	mov	r1, r7
 8009534:	f7f6 fdf0 	bl	8000118 <__aeabi_dsub>
 8009538:	4652      	mov	r2, sl
 800953a:	465b      	mov	r3, fp
 800953c:	f7f6 fdee 	bl	800011c <__adddf3>
 8009540:	e9c8 0100 	strd	r0, r1, [r8]
 8009544:	e968 4502 	strd	r4, r5, [r8, #-8]!
 8009548:	45c8      	cmp	r8, r9
 800954a:	d1e3      	bne.n	8009514 <__kernel_rem_pio2+0x590>
 800954c:	e9dd a401 	ldrd	sl, r4, [sp, #4]
 8009550:	e9dd 6505 	ldrd	r6, r5, [sp, #20]
 8009554:	2c01      	cmp	r4, #1
 8009556:	464f      	mov	r7, r9
 8009558:	f000 8107 	beq.w	800976a <__kernel_rem_pio2+0x7e6>
 800955c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8009560:	e9cd 6901 	strd	r6, r9, [sp, #4]
 8009564:	f109 0b08 	add.w	fp, r9, #8
 8009568:	e95a 8902 	ldrd	r8, r9, [sl, #-8]
 800956c:	4620      	mov	r0, r4
 800956e:	4629      	mov	r1, r5
 8009570:	4642      	mov	r2, r8
 8009572:	464b      	mov	r3, r9
 8009574:	f7f6 fdd2 	bl	800011c <__adddf3>
 8009578:	4626      	mov	r6, r4
 800957a:	462f      	mov	r7, r5
 800957c:	4604      	mov	r4, r0
 800957e:	460d      	mov	r5, r1
 8009580:	4622      	mov	r2, r4
 8009582:	462b      	mov	r3, r5
 8009584:	4640      	mov	r0, r8
 8009586:	4649      	mov	r1, r9
 8009588:	f7f6 fdc6 	bl	8000118 <__aeabi_dsub>
 800958c:	4632      	mov	r2, r6
 800958e:	463b      	mov	r3, r7
 8009590:	f7f6 fdc4 	bl	800011c <__adddf3>
 8009594:	e9ca 0100 	strd	r0, r1, [sl]
 8009598:	e96a 4502 	strd	r4, r5, [sl, #-8]!
 800959c:	45d3      	cmp	fp, sl
 800959e:	d1e3      	bne.n	8009568 <__kernel_rem_pio2+0x5e4>
 80095a0:	e9dd 6701 	ldrd	r6, r7, [sp, #4]
 80095a4:	2000      	movs	r0, #0
 80095a6:	2100      	movs	r1, #0
 80095a8:	f106 0408 	add.w	r4, r6, #8
 80095ac:	443c      	add	r4, r7
 80095ae:	f107 0510 	add.w	r5, r7, #16
 80095b2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80095b6:	f7f6 fdb1 	bl	800011c <__adddf3>
 80095ba:	42a5      	cmp	r5, r4
 80095bc:	d1f9      	bne.n	80095b2 <__kernel_rem_pio2+0x62e>
 80095be:	e9d7 7802 	ldrd	r7, r8, [r7, #8]
 80095c2:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 80095c6:	9b03      	ldr	r3, [sp, #12]
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	f040 8082 	bne.w	80096d2 <__kernel_rem_pio2+0x74e>
 80095ce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80095d0:	e9c3 0104 	strd	r0, r1, [r3, #16]
 80095d4:	e9c3 5600 	strd	r5, r6, [r3]
 80095d8:	e9c3 7802 	strd	r7, r8, [r3, #8]
 80095dc:	9b04      	ldr	r3, [sp, #16]
 80095de:	f003 0007 	and.w	r0, r3, #7
 80095e2:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 80095e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095ea:	f1bb 0f00 	cmp.w	fp, #0
 80095ee:	bfc8      	it	gt
 80095f0:	2502      	movgt	r5, #2
 80095f2:	f106 0601 	add.w	r6, r6, #1
 80095f6:	f73f ae59 	bgt.w	80092ac <__kernel_rem_pio2+0x328>
 80095fa:	4642      	mov	r2, r8
 80095fc:	464b      	mov	r3, r9
 80095fe:	2502      	movs	r5, #2
 8009600:	2000      	movs	r0, #0
 8009602:	4905      	ldr	r1, [pc, #20]	; (8009618 <__kernel_rem_pio2+0x694>)
 8009604:	f7f6 fd88 	bl	8000118 <__aeabi_dsub>
 8009608:	4680      	mov	r8, r0
 800960a:	4689      	mov	r9, r1
 800960c:	e5c5      	b.n	800919a <__kernel_rem_pio2+0x216>
 800960e:	2100      	movs	r1, #0
 8009610:	f06f 0317 	mvn.w	r3, #23
 8009614:	9107      	str	r1, [sp, #28]
 8009616:	e4d3      	b.n	8008fc0 <__kernel_rem_pio2+0x3c>
 8009618:	3ff00000 	.word	0x3ff00000
 800961c:	3fe00000 	.word	0x3fe00000
 8009620:	3e700000 	.word	0x3e700000
 8009624:	08009d78 	.word	0x08009d78
 8009628:	2400      	movs	r4, #0
 800962a:	2500      	movs	r5, #0
 800962c:	e732      	b.n	8009494 <__kernel_rem_pio2+0x510>
 800962e:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8009630:	4640      	mov	r0, r8
 8009632:	4649      	mov	r1, r9
 8009634:	4262      	negs	r2, r4
 8009636:	e9cd 5603 	strd	r5, r6, [sp, #12]
 800963a:	f7ff fbf5 	bl	8008e28 <scalbn>
 800963e:	2200      	movs	r2, #0
 8009640:	4b55      	ldr	r3, [pc, #340]	; (8009798 <__kernel_rem_pio2+0x814>)
 8009642:	4680      	mov	r8, r0
 8009644:	4689      	mov	r9, r1
 8009646:	f7f7 f9a5 	bl	8000994 <__aeabi_dcmpge>
 800964a:	2800      	cmp	r0, #0
 800964c:	d038      	beq.n	80096c0 <__kernel_rem_pio2+0x73c>
 800964e:	2200      	movs	r2, #0
 8009650:	4b52      	ldr	r3, [pc, #328]	; (800979c <__kernel_rem_pio2+0x818>)
 8009652:	3418      	adds	r4, #24
 8009654:	4640      	mov	r0, r8
 8009656:	4649      	mov	r1, r9
 8009658:	940d      	str	r4, [sp, #52]	; 0x34
 800965a:	f7f6 ff15 	bl	8000488 <__aeabi_dmul>
 800965e:	f7f7 f9c3 	bl	80009e8 <__aeabi_d2iz>
 8009662:	4605      	mov	r5, r0
 8009664:	f7f6 fea6 	bl	80003b4 <__aeabi_i2d>
 8009668:	2200      	movs	r2, #0
 800966a:	4b4b      	ldr	r3, [pc, #300]	; (8009798 <__kernel_rem_pio2+0x814>)
 800966c:	f7f6 ff0c 	bl	8000488 <__aeabi_dmul>
 8009670:	460b      	mov	r3, r1
 8009672:	4602      	mov	r2, r0
 8009674:	4649      	mov	r1, r9
 8009676:	4640      	mov	r0, r8
 8009678:	f7f6 fd4e 	bl	8000118 <__aeabi_dsub>
 800967c:	f7f7 f9b4 	bl	80009e8 <__aeabi_d2iz>
 8009680:	f10b 0401 	add.w	r4, fp, #1
 8009684:	ab0e      	add	r3, sp, #56	; 0x38
 8009686:	f843 002b 	str.w	r0, [r3, fp, lsl #2]
 800968a:	f843 5024 	str.w	r5, [r3, r4, lsl #2]
 800968e:	e69f      	b.n	80093d0 <__kernel_rem_pio2+0x44c>
 8009690:	2000      	movs	r0, #0
 8009692:	2100      	movs	r1, #0
 8009694:	18bd      	adds	r5, r7, r2
 8009696:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 800969a:	f7f6 fd3f 	bl	800011c <__adddf3>
 800969e:	42af      	cmp	r7, r5
 80096a0:	d1f9      	bne.n	8009696 <__kernel_rem_pio2+0x712>
 80096a2:	9b03      	ldr	r3, [sp, #12]
 80096a4:	b35b      	cbz	r3, 80096fe <__kernel_rem_pio2+0x77a>
 80096a6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80096a8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80096ac:	6010      	str	r0, [r2, #0]
 80096ae:	6053      	str	r3, [r2, #4]
 80096b0:	4602      	mov	r2, r0
 80096b2:	460b      	mov	r3, r1
 80096b4:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 80096b8:	f7f6 fd2e 	bl	8000118 <__aeabi_dsub>
 80096bc:	bb4c      	cbnz	r4, 8009712 <__kernel_rem_pio2+0x78e>
 80096be:	e032      	b.n	8009726 <__kernel_rem_pio2+0x7a2>
 80096c0:	4640      	mov	r0, r8
 80096c2:	4649      	mov	r1, r9
 80096c4:	f7f7 f990 	bl	80009e8 <__aeabi_d2iz>
 80096c8:	ab0e      	add	r3, sp, #56	; 0x38
 80096ca:	465c      	mov	r4, fp
 80096cc:	f843 002b 	str.w	r0, [r3, fp, lsl #2]
 80096d0:	e67e      	b.n	80093d0 <__kernel_rem_pio2+0x44c>
 80096d2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80096d4:	462c      	mov	r4, r5
 80096d6:	f106 4500 	add.w	r5, r6, #2147483648	; 0x80000000
 80096da:	605d      	str	r5, [r3, #4]
 80096dc:	461d      	mov	r5, r3
 80096de:	601c      	str	r4, [r3, #0]
 80096e0:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 80096e4:	e9c5 7302 	strd	r7, r3, [r5, #8]
 80096e8:	9b04      	ldr	r3, [sp, #16]
 80096ea:	f101 4200 	add.w	r2, r1, #2147483648	; 0x80000000
 80096ee:	e9c5 0204 	strd	r0, r2, [r5, #16]
 80096f2:	f003 0007 	and.w	r0, r3, #7
 80096f6:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 80096fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80096fe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009700:	4602      	mov	r2, r0
 8009702:	e9c3 0100 	strd	r0, r1, [r3]
 8009706:	460b      	mov	r3, r1
 8009708:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 800970c:	f7f6 fd04 	bl	8000118 <__aeabi_dsub>
 8009710:	b164      	cbz	r4, 800972c <__kernel_rem_pio2+0x7a8>
 8009712:	2501      	movs	r5, #1
 8009714:	e9f7 2302 	ldrd	r2, r3, [r7, #8]!
 8009718:	3501      	adds	r5, #1
 800971a:	f7f6 fcff 	bl	800011c <__adddf3>
 800971e:	42ac      	cmp	r4, r5
 8009720:	daf8      	bge.n	8009714 <__kernel_rem_pio2+0x790>
 8009722:	9b03      	ldr	r3, [sp, #12]
 8009724:	b113      	cbz	r3, 800972c <__kernel_rem_pio2+0x7a8>
 8009726:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800972a:	4619      	mov	r1, r3
 800972c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800972e:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8009732:	9b04      	ldr	r3, [sp, #16]
 8009734:	f003 0007 	and.w	r0, r3, #7
 8009738:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 800973c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009740:	2d02      	cmp	r5, #2
 8009742:	f47f ad2a 	bne.w	800919a <__kernel_rem_pio2+0x216>
 8009746:	4602      	mov	r2, r0
 8009748:	460b      	mov	r3, r1
 800974a:	e759      	b.n	8009600 <__kernel_rem_pio2+0x67c>
 800974c:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800974e:	2b02      	cmp	r3, #2
 8009750:	dc06      	bgt.n	8009760 <__kernel_rem_pio2+0x7dc>
 8009752:	2b00      	cmp	r3, #0
 8009754:	dc0c      	bgt.n	8009770 <__kernel_rem_pio2+0x7ec>
 8009756:	f47f aec3 	bne.w	80094e0 <__kernel_rem_pio2+0x55c>
 800975a:	2000      	movs	r0, #0
 800975c:	2100      	movs	r1, #0
 800975e:	e6b7      	b.n	80094d0 <__kernel_rem_pio2+0x54c>
 8009760:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8009762:	2b03      	cmp	r3, #3
 8009764:	f47f aebc 	bne.w	80094e0 <__kernel_rem_pio2+0x55c>
 8009768:	af4a      	add	r7, sp, #296	; 0x128
 800976a:	2000      	movs	r0, #0
 800976c:	2100      	movs	r1, #0
 800976e:	e726      	b.n	80095be <__kernel_rem_pio2+0x63a>
 8009770:	9b03      	ldr	r3, [sp, #12]
 8009772:	b143      	cbz	r3, 8009786 <__kernel_rem_pio2+0x802>
 8009774:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8009778:	2200      	movs	r2, #0
 800977a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800977e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8009780:	e9c4 2300 	strd	r2, r3, [r4]
 8009784:	e7cf      	b.n	8009726 <__kernel_rem_pio2+0x7a2>
 8009786:	2200      	movs	r2, #0
 8009788:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 800978c:	2300      	movs	r3, #0
 800978e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8009790:	e9c4 2300 	strd	r2, r3, [r4]
 8009794:	e7ca      	b.n	800972c <__kernel_rem_pio2+0x7a8>
 8009796:	bf00      	nop
 8009798:	41700000 	.word	0x41700000
 800979c:	3e700000 	.word	0x3e700000

080097a0 <floor>:
 80097a0:	f3c1 5c0a 	ubfx	ip, r1, #20, #11
 80097a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80097a8:	f2ac 35ff 	subw	r5, ip, #1023	; 0x3ff
 80097ac:	2d13      	cmp	r5, #19
 80097ae:	4602      	mov	r2, r0
 80097b0:	460b      	mov	r3, r1
 80097b2:	460c      	mov	r4, r1
 80097b4:	4606      	mov	r6, r0
 80097b6:	dc32      	bgt.n	800981e <floor+0x7e>
 80097b8:	2d00      	cmp	r5, #0
 80097ba:	db20      	blt.n	80097fe <floor+0x5e>
 80097bc:	f8df 80e0 	ldr.w	r8, [pc, #224]	; 80098a0 <floor+0x100>
 80097c0:	460f      	mov	r7, r1
 80097c2:	fa48 f805 	asr.w	r8, r8, r5
 80097c6:	ea01 0c08 	and.w	ip, r1, r8
 80097ca:	ea5c 0c00 	orrs.w	ip, ip, r0
 80097ce:	d02b      	beq.n	8009828 <floor+0x88>
 80097d0:	a331      	add	r3, pc, #196	; (adr r3, 8009898 <floor+0xf8>)
 80097d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097d6:	f7f6 fca1 	bl	800011c <__adddf3>
 80097da:	2200      	movs	r2, #0
 80097dc:	2300      	movs	r3, #0
 80097de:	f7f7 f8e3 	bl	80009a8 <__aeabi_dcmpgt>
 80097e2:	b140      	cbz	r0, 80097f6 <floor+0x56>
 80097e4:	2c00      	cmp	r4, #0
 80097e6:	da03      	bge.n	80097f0 <floor+0x50>
 80097e8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80097ec:	412b      	asrs	r3, r5
 80097ee:	441f      	add	r7, r3
 80097f0:	2600      	movs	r6, #0
 80097f2:	ea27 0408 	bic.w	r4, r7, r8
 80097f6:	4621      	mov	r1, r4
 80097f8:	4630      	mov	r0, r6
 80097fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80097fe:	a326      	add	r3, pc, #152	; (adr r3, 8009898 <floor+0xf8>)
 8009800:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009804:	f7f6 fc8a 	bl	800011c <__adddf3>
 8009808:	2200      	movs	r2, #0
 800980a:	2300      	movs	r3, #0
 800980c:	f7f7 f8cc 	bl	80009a8 <__aeabi_dcmpgt>
 8009810:	2800      	cmp	r0, #0
 8009812:	d0f0      	beq.n	80097f6 <floor+0x56>
 8009814:	2c00      	cmp	r4, #0
 8009816:	db27      	blt.n	8009868 <floor+0xc8>
 8009818:	2600      	movs	r6, #0
 800981a:	4634      	mov	r4, r6
 800981c:	e7eb      	b.n	80097f6 <floor+0x56>
 800981e:	2d33      	cmp	r5, #51	; 0x33
 8009820:	dd06      	ble.n	8009830 <floor+0x90>
 8009822:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 8009826:	d01c      	beq.n	8009862 <floor+0xc2>
 8009828:	4610      	mov	r0, r2
 800982a:	4619      	mov	r1, r3
 800982c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009830:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8009834:	f2ac 4c13 	subw	ip, ip, #1043	; 0x413
 8009838:	fa27 f70c 	lsr.w	r7, r7, ip
 800983c:	4207      	tst	r7, r0
 800983e:	d0f3      	beq.n	8009828 <floor+0x88>
 8009840:	a315      	add	r3, pc, #84	; (adr r3, 8009898 <floor+0xf8>)
 8009842:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009846:	f7f6 fc69 	bl	800011c <__adddf3>
 800984a:	2200      	movs	r2, #0
 800984c:	2300      	movs	r3, #0
 800984e:	f7f7 f8ab 	bl	80009a8 <__aeabi_dcmpgt>
 8009852:	2800      	cmp	r0, #0
 8009854:	d0cf      	beq.n	80097f6 <floor+0x56>
 8009856:	2c00      	cmp	r4, #0
 8009858:	4633      	mov	r3, r6
 800985a:	db0c      	blt.n	8009876 <floor+0xd6>
 800985c:	ea23 0607 	bic.w	r6, r3, r7
 8009860:	e7c9      	b.n	80097f6 <floor+0x56>
 8009862:	f7f6 fc5b 	bl	800011c <__adddf3>
 8009866:	e7e1      	b.n	800982c <floor+0x8c>
 8009868:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 800986c:	4326      	orrs	r6, r4
 800986e:	d10d      	bne.n	800988c <floor+0xec>
 8009870:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8009874:	e7bf      	b.n	80097f6 <floor+0x56>
 8009876:	2d14      	cmp	r5, #20
 8009878:	d006      	beq.n	8009888 <floor+0xe8>
 800987a:	2201      	movs	r2, #1
 800987c:	f1c5 0534 	rsb	r5, r5, #52	; 0x34
 8009880:	40aa      	lsls	r2, r5
 8009882:	4413      	add	r3, r2
 8009884:	42b3      	cmp	r3, r6
 8009886:	d2e9      	bcs.n	800985c <floor+0xbc>
 8009888:	3401      	adds	r4, #1
 800988a:	e7e7      	b.n	800985c <floor+0xbc>
 800988c:	2600      	movs	r6, #0
 800988e:	4c05      	ldr	r4, [pc, #20]	; (80098a4 <floor+0x104>)
 8009890:	e7b1      	b.n	80097f6 <floor+0x56>
 8009892:	bf00      	nop
 8009894:	f3af 8000 	nop.w
 8009898:	8800759c 	.word	0x8800759c
 800989c:	7e37e43c 	.word	0x7e37e43c
 80098a0:	000fffff 	.word	0x000fffff
 80098a4:	bff00000 	.word	0xbff00000

080098a8 <__udivmoddi4>:
 80098a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80098ac:	4686      	mov	lr, r0
 80098ae:	468c      	mov	ip, r1
 80098b0:	4608      	mov	r0, r1
 80098b2:	4615      	mov	r5, r2
 80098b4:	4674      	mov	r4, lr
 80098b6:	4619      	mov	r1, r3
 80098b8:	9e08      	ldr	r6, [sp, #32]
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	f040 80c2 	bne.w	8009a44 <__udivmoddi4+0x19c>
 80098c0:	4285      	cmp	r5, r0
 80098c2:	fab2 f282 	clz	r2, r2
 80098c6:	d945      	bls.n	8009954 <__udivmoddi4+0xac>
 80098c8:	b14a      	cbz	r2, 80098de <__udivmoddi4+0x36>
 80098ca:	f1c2 0320 	rsb	r3, r2, #32
 80098ce:	fa00 fc02 	lsl.w	ip, r0, r2
 80098d2:	fa2e f303 	lsr.w	r3, lr, r3
 80098d6:	4095      	lsls	r5, r2
 80098d8:	ea43 0c0c 	orr.w	ip, r3, ip
 80098dc:	4094      	lsls	r4, r2
 80098de:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80098e2:	fbbc f8fe 	udiv	r8, ip, lr
 80098e6:	b2a8      	uxth	r0, r5
 80098e8:	fb0e cc18 	mls	ip, lr, r8, ip
 80098ec:	fb08 f900 	mul.w	r9, r8, r0
 80098f0:	0c23      	lsrs	r3, r4, #16
 80098f2:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
 80098f6:	4599      	cmp	r9, r3
 80098f8:	d928      	bls.n	800994c <__udivmoddi4+0xa4>
 80098fa:	18eb      	adds	r3, r5, r3
 80098fc:	f108 37ff 	add.w	r7, r8, #4294967295	; 0xffffffff
 8009900:	d204      	bcs.n	800990c <__udivmoddi4+0x64>
 8009902:	4599      	cmp	r9, r3
 8009904:	d902      	bls.n	800990c <__udivmoddi4+0x64>
 8009906:	f1a8 0702 	sub.w	r7, r8, #2
 800990a:	442b      	add	r3, r5
 800990c:	eba3 0309 	sub.w	r3, r3, r9
 8009910:	fbb3 fcfe 	udiv	ip, r3, lr
 8009914:	fb0e 331c 	mls	r3, lr, ip, r3
 8009918:	fb0c f000 	mul.w	r0, ip, r0
 800991c:	b2a4      	uxth	r4, r4
 800991e:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8009922:	42a0      	cmp	r0, r4
 8009924:	d914      	bls.n	8009950 <__udivmoddi4+0xa8>
 8009926:	192c      	adds	r4, r5, r4
 8009928:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
 800992c:	d204      	bcs.n	8009938 <__udivmoddi4+0x90>
 800992e:	42a0      	cmp	r0, r4
 8009930:	d902      	bls.n	8009938 <__udivmoddi4+0x90>
 8009932:	f1ac 0302 	sub.w	r3, ip, #2
 8009936:	442c      	add	r4, r5
 8009938:	1a24      	subs	r4, r4, r0
 800993a:	ea43 4007 	orr.w	r0, r3, r7, lsl #16
 800993e:	b11e      	cbz	r6, 8009948 <__udivmoddi4+0xa0>
 8009940:	2300      	movs	r3, #0
 8009942:	40d4      	lsrs	r4, r2
 8009944:	6034      	str	r4, [r6, #0]
 8009946:	6073      	str	r3, [r6, #4]
 8009948:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800994c:	4647      	mov	r7, r8
 800994e:	e7dd      	b.n	800990c <__udivmoddi4+0x64>
 8009950:	4663      	mov	r3, ip
 8009952:	e7f1      	b.n	8009938 <__udivmoddi4+0x90>
 8009954:	bb92      	cbnz	r2, 80099bc <__udivmoddi4+0x114>
 8009956:	2101      	movs	r1, #1
 8009958:	1b43      	subs	r3, r0, r5
 800995a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800995e:	fbb3 fcfe 	udiv	ip, r3, lr
 8009962:	b2af      	uxth	r7, r5
 8009964:	fb0e 331c 	mls	r3, lr, ip, r3
 8009968:	fb0c f807 	mul.w	r8, ip, r7
 800996c:	0c20      	lsrs	r0, r4, #16
 800996e:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8009972:	4598      	cmp	r8, r3
 8009974:	d962      	bls.n	8009a3c <__udivmoddi4+0x194>
 8009976:	18eb      	adds	r3, r5, r3
 8009978:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800997c:	d204      	bcs.n	8009988 <__udivmoddi4+0xe0>
 800997e:	4598      	cmp	r8, r3
 8009980:	d902      	bls.n	8009988 <__udivmoddi4+0xe0>
 8009982:	f1ac 0002 	sub.w	r0, ip, #2
 8009986:	442b      	add	r3, r5
 8009988:	eba3 0308 	sub.w	r3, r3, r8
 800998c:	fbb3 fcfe 	udiv	ip, r3, lr
 8009990:	fb0e 331c 	mls	r3, lr, ip, r3
 8009994:	fb0c f707 	mul.w	r7, ip, r7
 8009998:	b2a4      	uxth	r4, r4
 800999a:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800999e:	42a7      	cmp	r7, r4
 80099a0:	d94e      	bls.n	8009a40 <__udivmoddi4+0x198>
 80099a2:	192c      	adds	r4, r5, r4
 80099a4:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
 80099a8:	d204      	bcs.n	80099b4 <__udivmoddi4+0x10c>
 80099aa:	42a7      	cmp	r7, r4
 80099ac:	d902      	bls.n	80099b4 <__udivmoddi4+0x10c>
 80099ae:	f1ac 0302 	sub.w	r3, ip, #2
 80099b2:	442c      	add	r4, r5
 80099b4:	1be4      	subs	r4, r4, r7
 80099b6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80099ba:	e7c0      	b.n	800993e <__udivmoddi4+0x96>
 80099bc:	f1c2 0320 	rsb	r3, r2, #32
 80099c0:	4095      	lsls	r5, r2
 80099c2:	fa20 f103 	lsr.w	r1, r0, r3
 80099c6:	fa2e f303 	lsr.w	r3, lr, r3
 80099ca:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80099ce:	fbb1 fcfe 	udiv	ip, r1, lr
 80099d2:	4090      	lsls	r0, r2
 80099d4:	4303      	orrs	r3, r0
 80099d6:	b2af      	uxth	r7, r5
 80099d8:	fb0e 101c 	mls	r0, lr, ip, r1
 80099dc:	fb0c f807 	mul.w	r8, ip, r7
 80099e0:	0c19      	lsrs	r1, r3, #16
 80099e2:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80099e6:	4588      	cmp	r8, r1
 80099e8:	fa04 f402 	lsl.w	r4, r4, r2
 80099ec:	d922      	bls.n	8009a34 <__udivmoddi4+0x18c>
 80099ee:	1869      	adds	r1, r5, r1
 80099f0:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80099f4:	d204      	bcs.n	8009a00 <__udivmoddi4+0x158>
 80099f6:	4588      	cmp	r8, r1
 80099f8:	d902      	bls.n	8009a00 <__udivmoddi4+0x158>
 80099fa:	f1ac 0002 	sub.w	r0, ip, #2
 80099fe:	4429      	add	r1, r5
 8009a00:	eba1 0108 	sub.w	r1, r1, r8
 8009a04:	fbb1 fcfe 	udiv	ip, r1, lr
 8009a08:	fb0e 111c 	mls	r1, lr, ip, r1
 8009a0c:	fb0c f707 	mul.w	r7, ip, r7
 8009a10:	b29b      	uxth	r3, r3
 8009a12:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8009a16:	429f      	cmp	r7, r3
 8009a18:	d90e      	bls.n	8009a38 <__udivmoddi4+0x190>
 8009a1a:	18eb      	adds	r3, r5, r3
 8009a1c:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
 8009a20:	d204      	bcs.n	8009a2c <__udivmoddi4+0x184>
 8009a22:	429f      	cmp	r7, r3
 8009a24:	d902      	bls.n	8009a2c <__udivmoddi4+0x184>
 8009a26:	f1ac 0102 	sub.w	r1, ip, #2
 8009a2a:	442b      	add	r3, r5
 8009a2c:	1bdb      	subs	r3, r3, r7
 8009a2e:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8009a32:	e792      	b.n	800995a <__udivmoddi4+0xb2>
 8009a34:	4660      	mov	r0, ip
 8009a36:	e7e3      	b.n	8009a00 <__udivmoddi4+0x158>
 8009a38:	4661      	mov	r1, ip
 8009a3a:	e7f7      	b.n	8009a2c <__udivmoddi4+0x184>
 8009a3c:	4660      	mov	r0, ip
 8009a3e:	e7a3      	b.n	8009988 <__udivmoddi4+0xe0>
 8009a40:	4663      	mov	r3, ip
 8009a42:	e7b7      	b.n	80099b4 <__udivmoddi4+0x10c>
 8009a44:	4283      	cmp	r3, r0
 8009a46:	d906      	bls.n	8009a56 <__udivmoddi4+0x1ae>
 8009a48:	b916      	cbnz	r6, 8009a50 <__udivmoddi4+0x1a8>
 8009a4a:	2100      	movs	r1, #0
 8009a4c:	4608      	mov	r0, r1
 8009a4e:	e77b      	b.n	8009948 <__udivmoddi4+0xa0>
 8009a50:	e9c6 e000 	strd	lr, r0, [r6]
 8009a54:	e7f9      	b.n	8009a4a <__udivmoddi4+0x1a2>
 8009a56:	fab3 f783 	clz	r7, r3
 8009a5a:	b98f      	cbnz	r7, 8009a80 <__udivmoddi4+0x1d8>
 8009a5c:	4283      	cmp	r3, r0
 8009a5e:	d301      	bcc.n	8009a64 <__udivmoddi4+0x1bc>
 8009a60:	4572      	cmp	r2, lr
 8009a62:	d808      	bhi.n	8009a76 <__udivmoddi4+0x1ce>
 8009a64:	ebbe 0402 	subs.w	r4, lr, r2
 8009a68:	eb60 0303 	sbc.w	r3, r0, r3
 8009a6c:	2001      	movs	r0, #1
 8009a6e:	469c      	mov	ip, r3
 8009a70:	b91e      	cbnz	r6, 8009a7a <__udivmoddi4+0x1d2>
 8009a72:	2100      	movs	r1, #0
 8009a74:	e768      	b.n	8009948 <__udivmoddi4+0xa0>
 8009a76:	4638      	mov	r0, r7
 8009a78:	e7fa      	b.n	8009a70 <__udivmoddi4+0x1c8>
 8009a7a:	e9c6 4c00 	strd	r4, ip, [r6]
 8009a7e:	e7f8      	b.n	8009a72 <__udivmoddi4+0x1ca>
 8009a80:	f1c7 0c20 	rsb	ip, r7, #32
 8009a84:	40bb      	lsls	r3, r7
 8009a86:	fa22 f40c 	lsr.w	r4, r2, ip
 8009a8a:	431c      	orrs	r4, r3
 8009a8c:	ea4f 4914 	mov.w	r9, r4, lsr #16
 8009a90:	fa20 f30c 	lsr.w	r3, r0, ip
 8009a94:	fbb3 f8f9 	udiv	r8, r3, r9
 8009a98:	40b8      	lsls	r0, r7
 8009a9a:	fa2e f10c 	lsr.w	r1, lr, ip
 8009a9e:	4301      	orrs	r1, r0
 8009aa0:	fa0e f507 	lsl.w	r5, lr, r7
 8009aa4:	fb09 3018 	mls	r0, r9, r8, r3
 8009aa8:	fa1f fe84 	uxth.w	lr, r4
 8009aac:	fb08 fa0e 	mul.w	sl, r8, lr
 8009ab0:	0c0b      	lsrs	r3, r1, #16
 8009ab2:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8009ab6:	459a      	cmp	sl, r3
 8009ab8:	fa02 f207 	lsl.w	r2, r2, r7
 8009abc:	d940      	bls.n	8009b40 <__udivmoddi4+0x298>
 8009abe:	18e3      	adds	r3, r4, r3
 8009ac0:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
 8009ac4:	d204      	bcs.n	8009ad0 <__udivmoddi4+0x228>
 8009ac6:	459a      	cmp	sl, r3
 8009ac8:	d902      	bls.n	8009ad0 <__udivmoddi4+0x228>
 8009aca:	f1a8 0002 	sub.w	r0, r8, #2
 8009ace:	4423      	add	r3, r4
 8009ad0:	eba3 030a 	sub.w	r3, r3, sl
 8009ad4:	fbb3 f8f9 	udiv	r8, r3, r9
 8009ad8:	fb09 3318 	mls	r3, r9, r8, r3
 8009adc:	fb08 fe0e 	mul.w	lr, r8, lr
 8009ae0:	b289      	uxth	r1, r1
 8009ae2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8009ae6:	458e      	cmp	lr, r1
 8009ae8:	d92c      	bls.n	8009b44 <__udivmoddi4+0x29c>
 8009aea:	1861      	adds	r1, r4, r1
 8009aec:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
 8009af0:	d204      	bcs.n	8009afc <__udivmoddi4+0x254>
 8009af2:	458e      	cmp	lr, r1
 8009af4:	d902      	bls.n	8009afc <__udivmoddi4+0x254>
 8009af6:	f1a8 0302 	sub.w	r3, r8, #2
 8009afa:	4421      	add	r1, r4
 8009afc:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8009b00:	fba0 9802 	umull	r9, r8, r0, r2
 8009b04:	eba1 010e 	sub.w	r1, r1, lr
 8009b08:	4541      	cmp	r1, r8
 8009b0a:	46ce      	mov	lr, r9
 8009b0c:	4643      	mov	r3, r8
 8009b0e:	d302      	bcc.n	8009b16 <__udivmoddi4+0x26e>
 8009b10:	d106      	bne.n	8009b20 <__udivmoddi4+0x278>
 8009b12:	454d      	cmp	r5, r9
 8009b14:	d204      	bcs.n	8009b20 <__udivmoddi4+0x278>
 8009b16:	ebb9 0e02 	subs.w	lr, r9, r2
 8009b1a:	eb68 0304 	sbc.w	r3, r8, r4
 8009b1e:	3801      	subs	r0, #1
 8009b20:	2e00      	cmp	r6, #0
 8009b22:	d0a6      	beq.n	8009a72 <__udivmoddi4+0x1ca>
 8009b24:	ebb5 020e 	subs.w	r2, r5, lr
 8009b28:	eb61 0103 	sbc.w	r1, r1, r3
 8009b2c:	fa01 fc0c 	lsl.w	ip, r1, ip
 8009b30:	fa22 f307 	lsr.w	r3, r2, r7
 8009b34:	ea4c 0303 	orr.w	r3, ip, r3
 8009b38:	40f9      	lsrs	r1, r7
 8009b3a:	e9c6 3100 	strd	r3, r1, [r6]
 8009b3e:	e798      	b.n	8009a72 <__udivmoddi4+0x1ca>
 8009b40:	4640      	mov	r0, r8
 8009b42:	e7c5      	b.n	8009ad0 <__udivmoddi4+0x228>
 8009b44:	4643      	mov	r3, r8
 8009b46:	e7d9      	b.n	8009afc <__udivmoddi4+0x254>

08009b48 <_init>:
 8009b48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b4a:	bf00      	nop
 8009b4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009b4e:	bc08      	pop	{r3}
 8009b50:	469e      	mov	lr, r3
 8009b52:	4770      	bx	lr

08009b54 <_fini>:
 8009b54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b56:	bf00      	nop
 8009b58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009b5a:	bc08      	pop	{r3}
 8009b5c:	469e      	mov	lr, r3
 8009b5e:	4770      	bx	lr
